NAME	TYPE	LINE	TEXT
tr_test_qa_new	TRIGGER	1	TRIGGER "PERSIK"."tr_test_qa_new" 

tr_test_qa_new	TRIGGER	2	   BEFORE INSERT

tr_test_qa_new	TRIGGER	3	   ON PERSIK.tr_test_qa    REFERENCING NEW AS NEW OLD AS OLD

tr_test_qa_new	TRIGGER	4	   FOR EACH ROW

tr_test_qa_new	TRIGGER	5	DECLARE

tr_test_qa_new	TRIGGER	6	BEGIN

tr_test_qa_new	TRIGGER	7	   :NEW.id_num := seq_all.nextval;

tr_test_qa_new	TRIGGER	8	END tr_test_qa_new;

tr_test_qa_new	TRIGGER	9	

tr_test_qa_new	TRIGGER	10	

tr_test_qa_new	TRIGGER	11	

tr_test_qa_lu	TRIGGER	1	TRIGGER "PERSIK"."tr_test_qa_lu" 

tr_test_qa_lu	TRIGGER	2	BEFORE INSERT OR UPDATE

tr_test_qa_lu	TRIGGER	3	ON PERSIK.tr_test_qa 

tr_test_qa_lu	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

tr_test_qa_lu	TRIGGER	5	FOR EACH ROW

tr_test_qa_lu	TRIGGER	6	DECLARE

tr_test_qa_lu	TRIGGER	7	BEGIN

tr_test_qa_lu	TRIGGER	8	   :NEW.lu := SYSDATE;

tr_test_qa_lu	TRIGGER	9	END tr_test_qa_last_update;

tr_test_qa_lu	TRIGGER	10	

tr_test_qa_lu	TRIGGER	11	

tr_test_qa_lu	TRIGGER	12	

tr_pos_last_update	TRIGGER	1	TRIGGER "PERSIK"."tr_pos_last_update" 

tr_pos_last_update	TRIGGER	2	   BEFORE INSERT OR UPDATE

tr_pos_last_update	TRIGGER	3	   ON PERSIK.tr_pos

tr_pos_last_update	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

tr_pos_last_update	TRIGGER	5	   FOR EACH ROW

tr_pos_last_update	TRIGGER	6	DECLARE

tr_pos_last_update	TRIGGER	7	BEGIN

tr_pos_last_update	TRIGGER	8	   :NEW.lu := SYSDATE;

tr_pos_last_update	TRIGGER	9	END;

tr_pos_last_update	TRIGGER	10	

tr_pos_last_update	TRIGGER	11	

tr_pos_last_update	TRIGGER	12	

test_eta_QA_new	TRIGGER	1	TRIGGER "PERSIK"."test_eta_QA_new" 

test_eta_QA_new	TRIGGER	2	   BEFORE INSERT

test_eta_QA_new	TRIGGER	3	   ON PERSIK.test_eta_QA

test_eta_QA_new	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

test_eta_QA_new	TRIGGER	5	   FOR EACH ROW

test_eta_QA_new	TRIGGER	6	DECLARE

test_eta_QA_new	TRIGGER	7	BEGIN

test_eta_QA_new	TRIGGER	8	   :NEW.id_num := seq_all.NEXTVAL;

test_eta_QA_new	TRIGGER	9	END;

test_eta_QA_new	TRIGGER	10	

test_eta_QA_new	TRIGGER	11	

test_eta_QA_new	TRIGGER	12	

test_eta_QA_lu	TRIGGER	1	TRIGGER "PERSIK"."test_eta_QA_lu" 

test_eta_QA_lu	TRIGGER	2	   BEFORE INSERT OR UPDATE

test_eta_QA_lu	TRIGGER	3	   ON PERSIK.test_eta_QA

test_eta_QA_lu	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

test_eta_QA_lu	TRIGGER	5	   FOR EACH ROW

test_eta_QA_lu	TRIGGER	6	DECLARE

test_eta_QA_lu	TRIGGER	7	BEGIN

test_eta_QA_lu	TRIGGER	8	   :NEW.lu := SYSDATE;

test_eta_QA_lu	TRIGGER	9	END;

test_eta_QA_lu	TRIGGER	10	

test_eta_QA_lu	TRIGGER	11	

test_eta_QA_lu	TRIGGER	12	

mz_tn_last_update	TRIGGER	1	TRIGGER "PERSIK"."mz_tn_last_update" 

mz_tn_last_update	TRIGGER	2	   BEFORE INSERT OR UPDATE

mz_tn_last_update	TRIGGER	3	   ON PERSIK.mz_tn

mz_tn_last_update	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

mz_tn_last_update	TRIGGER	5	   FOR EACH ROW

mz_tn_last_update	TRIGGER	6	DECLARE

mz_tn_last_update	TRIGGER	7	BEGIN

mz_tn_last_update	TRIGGER	8	   :NEW.lu := SYSDATE;

mz_tn_last_update	TRIGGER	9	END;

mz_tn_last_update	TRIGGER	10	

mz_tn_last_update	TRIGGER	11	

mz_tn_last_update	TRIGGER	12	

dnpr_market_TN_last_update	TRIGGER	1	TRIGGER 
dnpr_market_TN_last_update	TRIGGER	2	"dnpr_market_TN_last_update"

dnpr_market_TN_last_update	TRIGGER	3	   BEFORE INSERT OR UPDATE

dnpr_market_TN_last_update	TRIGGER	4	   ON DPNR_MARKET_TN

dnpr_market_TN_last_update	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

dnpr_market_TN_last_update	TRIGGER	6	   FOR EACH ROW

dnpr_market_TN_last_update	TRIGGER	7	DECLARE

dnpr_market_TN_last_update	TRIGGER	8	BEGIN

dnpr_market_TN_last_update	TRIGGER	9	   :NEW.lu := SYSDATE;

dnpr_market_TN_last_update	TRIGGER	10	END;
WM_CONCAT_IMPL	TYPE BODY	1	TYPE BODY wm_concat_impl

WM_CONCAT_IMPL	TYPE BODY	2	IS

WM_CONCAT_IMPL	TYPE BODY	3	   STATIC FUNCTION odciaggregateinitialize (sctx IN OUT wm_concat_impl)

WM_CONCAT_IMPL	TYPE BODY	4	      RETURN NUMBER

WM_CONCAT_IMPL	TYPE BODY	5	   IS

WM_CONCAT_IMPL	TYPE BODY	6	   BEGIN

WM_CONCAT_IMPL	TYPE BODY	7	      sctx := wm_concat_impl (NULL);

WM_CONCAT_IMPL	TYPE BODY	8	      RETURN odciconst.success;

WM_CONCAT_IMPL	TYPE BODY	9	   END;

WM_CONCAT_IMPL	TYPE BODY	10	

WM_CONCAT_IMPL	TYPE BODY	11	   MEMBER FUNCTION odciaggregateiterate (SELF   IN OUT wm_concat_impl,

WM_CONCAT_IMPL	TYPE BODY	12	                                         p1     IN     VARCHAR2)

WM_CONCAT_IMPL	TYPE BODY	13	      RETURN NUMBER

WM_CONCAT_IMPL	TYPE BODY	14	   IS

WM_CONCAT_IMPL	TYPE BODY	15	   BEGIN

WM_CONCAT_IMPL	TYPE BODY	16	      IF (curr_str IS NOT NULL AND LENGTH (curr_str || ',' || p1) < 4000)

WM_CONCAT_IMPL	TYPE BODY	17	      THEN

WM_CONCAT_IMPL	TYPE BODY	18	         curr_str := curr_str || ',' || p1;

WM_CONCAT_IMPL	TYPE BODY	19	      ELSE

WM_CONCAT_IMPL	TYPE BODY	20	         curr_str := p1;

WM_CONCAT_IMPL	TYPE BODY	21	      END IF;

WM_CONCAT_IMPL	TYPE BODY	22	

WM_CONCAT_IMPL	TYPE BODY	23	      RETURN odciconst.success;

WM_CONCAT_IMPL	TYPE BODY	24	   END;

WM_CONCAT_IMPL	TYPE BODY	25	

WM_CONCAT_IMPL	TYPE BODY	26	   MEMBER FUNCTION odciaggregateterminate (SELF          IN     wm_concat_impl,

WM_CONCAT_IMPL	TYPE BODY	27	                                           returnvalue      OUT VARCHAR2,

WM_CONCAT_IMPL	TYPE BODY	28	                                           flags         IN     NUMBER)

WM_CONCAT_IMPL	TYPE BODY	29	      RETURN NUMBER

WM_CONCAT_IMPL	TYPE BODY	30	   IS

WM_CONCAT_IMPL	TYPE BODY	31	   BEGIN

WM_CONCAT_IMPL	TYPE BODY	32	      returnvalue := curr_str;

WM_CONCAT_IMPL	TYPE BODY	33	      RETURN odciconst.success;

WM_CONCAT_IMPL	TYPE BODY	34	   END;

WM_CONCAT_IMPL	TYPE BODY	35	

WM_CONCAT_IMPL	TYPE BODY	36	   MEMBER FUNCTION odciaggregatemerge (SELF    IN OUT wm_concat_impl,

WM_CONCAT_IMPL	TYPE BODY	37	                                       sctx2   IN     wm_concat_impl)

WM_CONCAT_IMPL	TYPE BODY	38	      RETURN NUMBER

WM_CONCAT_IMPL	TYPE BODY	39	   IS

WM_CONCAT_IMPL	TYPE BODY	40	   BEGIN

WM_CONCAT_IMPL	TYPE BODY	41	      IF (sctx2.curr_str IS NOT NULL)

WM_CONCAT_IMPL	TYPE BODY	42	      THEN

WM_CONCAT_IMPL	TYPE BODY	43	         SELF.curr_str := SELF.curr_str || ',' || sctx2.curr_str;

WM_CONCAT_IMPL	TYPE BODY	44	      END IF;

WM_CONCAT_IMPL	TYPE BODY	45	

WM_CONCAT_IMPL	TYPE BODY	46	      RETURN odciconst.success;

WM_CONCAT_IMPL	TYPE BODY	47	   END;

WM_CONCAT_IMPL	TYPE BODY	48	END;
WM_CONCAT_IMPL	TYPE	1	TYPE wm_concat_impl

WM_CONCAT_IMPL	TYPE	2	   AUTHID CURRENT_USER

WM_CONCAT_IMPL	TYPE	3	   AS OBJECT

WM_CONCAT_IMPL	TYPE	4	(

WM_CONCAT_IMPL	TYPE	5	   curr_str VARCHAR2 (32767),

WM_CONCAT_IMPL	TYPE	6	   STATIC FUNCTION odciaggregateinitialize (sctx IN OUT wm_concat_impl)

WM_CONCAT_IMPL	TYPE	7	      RETURN NUMBER,

WM_CONCAT_IMPL	TYPE	8	   MEMBER FUNCTION odciaggregateiterate (SELF   IN OUT wm_concat_impl,

WM_CONCAT_IMPL	TYPE	9	                                         p1     IN     VARCHAR2)

WM_CONCAT_IMPL	TYPE	10	      RETURN NUMBER,

WM_CONCAT_IMPL	TYPE	11	   MEMBER FUNCTION odciaggregateterminate (SELF          IN     wm_concat_impl,

WM_CONCAT_IMPL	TYPE	12	                                           returnvalue      OUT VARCHAR2,

WM_CONCAT_IMPL	TYPE	13	                                           flags         IN     NUMBER)

WM_CONCAT_IMPL	TYPE	14	      RETURN NUMBER,

WM_CONCAT_IMPL	TYPE	15	   MEMBER FUNCTION odciaggregatemerge (SELF    IN OUT wm_concat_impl,

WM_CONCAT_IMPL	TYPE	16	                                       sctx2   IN     wm_concat_impl)

WM_CONCAT_IMPL	TYPE	17	      RETURN NUMBER

WM_CONCAT_IMPL	TYPE	18	);
WM_CONCAT	FUNCTION	1	FUNCTION wm_concat (p1 VARCHAR2)

WM_CONCAT	FUNCTION	2	   RETURN VARCHAR2

WM_CONCAT	FUNCTION	3	   AGGREGATE USING wm_concat_impl;
VOITING_ORDER_TEST_RES_UPD	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_TEST_RES_UPD

VOITING_ORDER_TEST_RES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

VOITING_ORDER_TEST_RES_UPD	TRIGGER	3	   ON PERSIK.voiting_ORDER_TEST_RES

VOITING_ORDER_TEST_RES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_TEST_RES_UPD	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_TEST_RES_UPD	TRIGGER	6	BEGIN

VOITING_ORDER_TEST_RES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

VOITING_ORDER_TEST_RES_UPD	TRIGGER	8	END;
VOITING_ORDER_TEST_RES_NEW	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_TEST_RES_NEW

VOITING_ORDER_TEST_RES_NEW	TRIGGER	2	   BEFORE INSERT

VOITING_ORDER_TEST_RES_NEW	TRIGGER	3	   ON PERSIK.voiting_ORDER_TEST_RES

VOITING_ORDER_TEST_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_TEST_RES_NEW	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_TEST_RES_NEW	TRIGGER	6	BEGIN

VOITING_ORDER_TEST_RES_NEW	TRIGGER	7	   IF :new.id IS NULL

VOITING_ORDER_TEST_RES_NEW	TRIGGER	8	   THEN

VOITING_ORDER_TEST_RES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

VOITING_ORDER_TEST_RES_NEW	TRIGGER	10	   END IF;

VOITING_ORDER_TEST_RES_NEW	TRIGGER	11	END;
VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_TEST_HISTORY_UPD

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	3	   ON PERSIK.voiting_ORDER_TEST_HISTORY

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	6	BEGIN

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

VOITING_ORDER_TEST_HISTORY_UPD	TRIGGER	8	END;
VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_TEST_HISTORY_NEW

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	2	   BEFORE INSERT

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	3	   ON PERSIK.voiting_ORDER_TEST_HISTORY

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	6	BEGIN

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	7	   IF :new.id IS NULL

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	8	   THEN

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	10	   END IF;

VOITING_ORDER_TEST_HISTORY_NEW	TRIGGER	11	END;
VOITING_ORDER_BODY_UPD2	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_BODY_UPD2

VOITING_ORDER_BODY_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test_ball

VOITING_ORDER_BODY_UPD2	TRIGGER	3	   ON PERSIK.voiting_ORDER_BODY

VOITING_ORDER_BODY_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_BODY_UPD2	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_BODY_UPD2	TRIGGER	6	BEGIN

VOITING_ORDER_BODY_UPD2	TRIGGER	7	   IF :new.test = 2

VOITING_ORDER_BODY_UPD2	TRIGGER	8	   THEN

VOITING_ORDER_BODY_UPD2	TRIGGER	9	      INSERT INTO voiting_order_test_history (head, tn, ball)

VOITING_ORDER_BODY_UPD2	TRIGGER	10	           VALUES (:new.head, :new.tn, :new.test_ball);

VOITING_ORDER_BODY_UPD2	TRIGGER	11	   END IF;

VOITING_ORDER_BODY_UPD2	TRIGGER	12	END;
VOITING_ORDER_BODY_UPD1	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_BODY_UPD1

VOITING_ORDER_BODY_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

VOITING_ORDER_BODY_UPD1	TRIGGER	3	   ON PERSIK.voiting_ORDER_BODY

VOITING_ORDER_BODY_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_BODY_UPD1	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_BODY_UPD1	TRIGGER	6	DECLARE

VOITING_ORDER_BODY_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

VOITING_ORDER_BODY_UPD1	TRIGGER	8	BEGIN

VOITING_ORDER_BODY_UPD1	TRIGGER	9	   IF :new.test = 0

VOITING_ORDER_BODY_UPD1	TRIGGER	10	   THEN

VOITING_ORDER_BODY_UPD1	TRIGGER	11	      :NEW.test_lu := NULL;

VOITING_ORDER_BODY_UPD1	TRIGGER	12	   ELSE

VOITING_ORDER_BODY_UPD1	TRIGGER	13	      :NEW.test_lu := SYSDATE;

VOITING_ORDER_BODY_UPD1	TRIGGER	14	   END IF;

VOITING_ORDER_BODY_UPD1	TRIGGER	15	

VOITING_ORDER_BODY_UPD1	TRIGGER	16	   IF :new.test = 2

VOITING_ORDER_BODY_UPD1	TRIGGER	17	   THEN

VOITING_ORDER_BODY_UPD1	TRIGGER	18	      :NEW.test_count := NVL (:old.test_count, 0) + 1;

VOITING_ORDER_BODY_UPD1	TRIGGER	19	   END IF;

VOITING_ORDER_BODY_UPD1	TRIGGER	20	END;
VOITING_ORDER_BODY_UPD	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_BODY_UPD

VOITING_ORDER_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

VOITING_ORDER_BODY_UPD	TRIGGER	3	   ON PERSIK.voiting_ORDER_BODY

VOITING_ORDER_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_BODY_UPD	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_BODY_UPD	TRIGGER	6	BEGIN

VOITING_ORDER_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

VOITING_ORDER_BODY_UPD	TRIGGER	8	END;
VOITING_ORDER_BODY_NEW	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_BODY_NEW

VOITING_ORDER_BODY_NEW	TRIGGER	2	   BEFORE INSERT

VOITING_ORDER_BODY_NEW	TRIGGER	3	   ON PERSIK.voiting_ORDER_BODY

VOITING_ORDER_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_BODY_NEW	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_BODY_NEW	TRIGGER	6	BEGIN

VOITING_ORDER_BODY_NEW	TRIGGER	7	   IF :new.id IS NULL

VOITING_ORDER_BODY_NEW	TRIGGER	8	   THEN

VOITING_ORDER_BODY_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

VOITING_ORDER_BODY_NEW	TRIGGER	10	   END IF;

VOITING_ORDER_BODY_NEW	TRIGGER	11	END;
VOITING_ORDER_BODY_ADD_JOB	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_BODY_ADD_JOB

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	3	   ON PERSIK.voiting_ORDER_BODY

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	6	DECLARE

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	8	BEGIN

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	9	   IF :new.test = 1

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	10	   THEN

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	11	      add_job (48, 'BEGIN voiting_test_off(' || :new.id || '); END;');

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	12	   /*add_job (1 / 60 / 6, 'BEGIN voiting_test_off(' || :new.id || '); END;');*/

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	13	   END IF;

VOITING_ORDER_BODY_ADD_JOB	TRIGGER	14	END;
VOITING_ORDER_BODY_1	TRIGGER	1	TRIGGER PERSIK.voiting_ORDER_BODY_1

VOITING_ORDER_BODY_1	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

VOITING_ORDER_BODY_1	TRIGGER	3	   ON PERSIK.voiting_ORDER_BODY

VOITING_ORDER_BODY_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VOITING_ORDER_BODY_1	TRIGGER	5	   FOR EACH ROW

VOITING_ORDER_BODY_1	TRIGGER	6	BEGIN

VOITING_ORDER_BODY_1	TRIGGER	7	   INSERT INTO full_log (text, prg)

VOITING_ORDER_BODY_1	TRIGGER	8	           VALUES (

VOITING_ORDER_BODY_1	TRIGGER	9	                        'head: '

VOITING_ORDER_BODY_1	TRIGGER	10	                     || :old.head

VOITING_ORDER_BODY_1	TRIGGER	11	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	12	                     || :new.head

VOITING_ORDER_BODY_1	TRIGGER	13	                     || ' '

VOITING_ORDER_BODY_1	TRIGGER	14	                     || 'tn: '

VOITING_ORDER_BODY_1	TRIGGER	15	                     || :old.tn

VOITING_ORDER_BODY_1	TRIGGER	16	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	17	                     || :new.tn

VOITING_ORDER_BODY_1	TRIGGER	18	                     || ' '

VOITING_ORDER_BODY_1	TRIGGER	19	                     || 'manual: '

VOITING_ORDER_BODY_1	TRIGGER	20	                     || :old.manual

VOITING_ORDER_BODY_1	TRIGGER	21	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	22	                     || :new.manual

VOITING_ORDER_BODY_1	TRIGGER	23	                     || ' '

VOITING_ORDER_BODY_1	TRIGGER	24	                     || 'completed: '

VOITING_ORDER_BODY_1	TRIGGER	25	                     || :old.completed

VOITING_ORDER_BODY_1	TRIGGER	26	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	27	                     || :new.completed

VOITING_ORDER_BODY_1	TRIGGER	28	                     || ' '

VOITING_ORDER_BODY_1	TRIGGER	29	                     || 'test: '

VOITING_ORDER_BODY_1	TRIGGER	30	                     || :old.test

VOITING_ORDER_BODY_1	TRIGGER	31	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	32	                     || :new.test

VOITING_ORDER_BODY_1	TRIGGER	33	                     || ' '

VOITING_ORDER_BODY_1	TRIGGER	34	                     || 'test_ball: '

VOITING_ORDER_BODY_1	TRIGGER	35	                     || :old.test_ball

VOITING_ORDER_BODY_1	TRIGGER	36	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	37	                     || :new.test_ball

VOITING_ORDER_BODY_1	TRIGGER	38	                     || ' '

VOITING_ORDER_BODY_1	TRIGGER	39	                     || 'test_count: '

VOITING_ORDER_BODY_1	TRIGGER	40	                     || :old.test_count

VOITING_ORDER_BODY_1	TRIGGER	41	                     || '=>'

VOITING_ORDER_BODY_1	TRIGGER	42	                     || :new.test_count

VOITING_ORDER_BODY_1	TRIGGER	43	                     || ' ',

VOITING_ORDER_BODY_1	TRIGGER	44	                     'voiting_order_body');

VOITING_ORDER_BODY_1	TRIGGER	45	END;
VACATION_SPR_PLANNED_NEW	TRIGGER	1	TRIGGER "PERSIK"."VACATION_SPR_PLANNED_NEW" 

VACATION_SPR_PLANNED_NEW	TRIGGER	2	   BEFORE INSERT

VACATION_SPR_PLANNED_NEW	TRIGGER	3	   ON VACATION_SPR_PLANNED

VACATION_SPR_PLANNED_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VACATION_SPR_PLANNED_NEW	TRIGGER	5	   FOR EACH ROW

VACATION_SPR_PLANNED_NEW	TRIGGER	6	BEGIN

VACATION_SPR_PLANNED_NEW	TRIGGER	7	   IF :new.id IS NULL

VACATION_SPR_PLANNED_NEW	TRIGGER	8	   THEN

VACATION_SPR_PLANNED_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

VACATION_SPR_PLANNED_NEW	TRIGGER	10	   END IF;

VACATION_SPR_PLANNED_NEW	TRIGGER	11	END;

VACATION_SPR_PLANNED_NEW	TRIGGER	12	

VACATION_SPR_PLANNED_LU	TRIGGER	1	TRIGGER "PERSIK"."VACATION_SPR_PLANNED_LU" 

VACATION_SPR_PLANNED_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

VACATION_SPR_PLANNED_LU	TRIGGER	3	   ON VACATION_SPR_PLANNED

VACATION_SPR_PLANNED_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VACATION_SPR_PLANNED_LU	TRIGGER	5	   FOR EACH ROW

VACATION_SPR_PLANNED_LU	TRIGGER	6	DECLARE

VACATION_SPR_PLANNED_LU	TRIGGER	7	BEGIN

VACATION_SPR_PLANNED_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

VACATION_SPR_PLANNED_LU	TRIGGER	9	END;

VACATION_SPR_PLANNED_LU	TRIGGER	10	

VACATION_SPR_PAIDED_NEW	TRIGGER	1	TRIGGER "PERSIK"."VACATION_SPR_PAIDED_NEW" 

VACATION_SPR_PAIDED_NEW	TRIGGER	2	   BEFORE INSERT

VACATION_SPR_PAIDED_NEW	TRIGGER	3	   ON VACATION_SPR_PAIDED

VACATION_SPR_PAIDED_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VACATION_SPR_PAIDED_NEW	TRIGGER	5	   FOR EACH ROW

VACATION_SPR_PAIDED_NEW	TRIGGER	6	BEGIN

VACATION_SPR_PAIDED_NEW	TRIGGER	7	   IF :new.id IS NULL

VACATION_SPR_PAIDED_NEW	TRIGGER	8	   THEN

VACATION_SPR_PAIDED_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

VACATION_SPR_PAIDED_NEW	TRIGGER	10	   END IF;

VACATION_SPR_PAIDED_NEW	TRIGGER	11	END;

VACATION_SPR_PAIDED_NEW	TRIGGER	12	

VACATION_SPR_PAIDED_LU	TRIGGER	1	TRIGGER "PERSIK"."VACATION_SPR_PAIDED_LU" 

VACATION_SPR_PAIDED_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

VACATION_SPR_PAIDED_LU	TRIGGER	3	   ON VACATION_SPR_PAIDED

VACATION_SPR_PAIDED_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

VACATION_SPR_PAIDED_LU	TRIGGER	5	   FOR EACH ROW

VACATION_SPR_PAIDED_LU	TRIGGER	6	DECLARE

VACATION_SPR_PAIDED_LU	TRIGGER	7	BEGIN

VACATION_SPR_PAIDED_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

VACATION_SPR_PAIDED_LU	TRIGGER	9	END;

VACATION_SPR_PAIDED_LU	TRIGGER	10	

VACATIONS2MSSQL	PROCEDURE	1	PROCEDURE        VACATIONS2MSSQL

VACATIONS2MSSQL	PROCEDURE	2	IS

VACATIONS2MSSQL	PROCEDURE	3	   PRAGMA AUTONOMOUS_TRANSACTION;

VACATIONS2MSSQL	PROCEDURE	4	   v_vac2pers   VARCHAR2 (32767);

VACATIONS2MSSQL	PROCEDURE	5	   v_vac_cnt    INTEGER;

VACATIONS2MSSQL	PROCEDURE	6	   i            INTEGER;

VACATIONS2MSSQL	PROCEDURE	7	   x            INTEGER;

VACATIONS2MSSQL	PROCEDURE	8	   r            VARCHAR (1024);

VACATIONS2MSSQL	PROCEDURE	9	BEGIN

VACATIONS2MSSQL	PROCEDURE	10	   BEGIN

VACATIONS2MSSQL	PROCEDURE	11	      DBMS_OUTPUT.enable;

VACATIONS2MSSQL	PROCEDURE	12	

VACATIONS2MSSQL	PROCEDURE	13	      EXECUTE IMMEDIATE 'truncate table pers_zlkot';

VACATIONS2MSSQL	PROCEDURE	14	

VACATIONS2MSSQL	PROCEDURE	15	      COMMIT;

VACATIONS2MSSQL	PROCEDURE	16	

VACATIONS2MSSQL	PROCEDURE	17	      FOR a

VACATIONS2MSSQL	PROCEDURE	18	         IN (SELECT *

VACATIONS2MSSQL	PROCEDURE	19	               FROM departments d

VACATIONS2MSSQL	PROCEDURE	20	              WHERE     manufak IS NOT NULL

VACATIONS2MSSQL	PROCEDURE	21	                    AND fn_query2str (

VACATIONS2MSSQL	PROCEDURE	22	                           'select count(*) from zlkot@PERS_' || d.manufak,

VACATIONS2MSSQL	PROCEDURE	23	                           ',')

VACATIONS2MSSQL	PROCEDURE	24	                           IS NOT NULL)

VACATIONS2MSSQL	PROCEDURE	25	      LOOP

VACATIONS2MSSQL	PROCEDURE	26	         BEGIN

VACATIONS2MSSQL	PROCEDURE	27	            v_vac2pers :=

VACATIONS2MSSQL	PROCEDURE	28	                  'INSERT INTO pers_zlkot SELECT '

VACATIONS2MSSQL	PROCEDURE	29	               || a.manufak

VACATIONS2MSSQL	PROCEDURE	30	               || ' manufak,tn,datkof FROM zlkot@PERS_'

VACATIONS2MSSQL	PROCEDURE	31	               || a.manufak;

VACATIONS2MSSQL	PROCEDURE	32	

VACATIONS2MSSQL	PROCEDURE	33	            EXECUTE IMMEDIATE v_vac2pers;

VACATIONS2MSSQL	PROCEDURE	34	         EXCEPTION

VACATIONS2MSSQL	PROCEDURE	35	            WHEN OTHERS

VACATIONS2MSSQL	PROCEDURE	36	            THEN

VACATIONS2MSSQL	PROCEDURE	37	               r := SQLERRM;

VACATIONS2MSSQL	PROCEDURE	38	

VACATIONS2MSSQL	PROCEDURE	39	               INSERT INTO full_log (prg, text)

VACATIONS2MSSQL	PROCEDURE	40	                       VALUES (

VACATIONS2MSSQL	PROCEDURE	41	                                 'vacations2mssql',

VACATIONS2MSSQL	PROCEDURE	42	                                    'error while getting data from zlkot@PERS_'

VACATIONS2MSSQL	PROCEDURE	43	                                 || a.manufak

VACATIONS2MSSQL	PROCEDURE	44	                                 || ': '

VACATIONS2MSSQL	PROCEDURE	45	                                 || v_vac2pers

VACATIONS2MSSQL	PROCEDURE	46	                                 || ' ERROR: '

VACATIONS2MSSQL	PROCEDURE	47	                                 || r);

VACATIONS2MSSQL	PROCEDURE	48	

VACATIONS2MSSQL	PROCEDURE	49	               DBMS_OUTPUT.put_line (

VACATIONS2MSSQL	PROCEDURE	50	                     'error while getting data from zlkot@PERS_'

VACATIONS2MSSQL	PROCEDURE	51	                  || a.manufak

VACATIONS2MSSQL	PROCEDURE	52	                  || ': '

VACATIONS2MSSQL	PROCEDURE	53	                  || v_vac2pers

VACATIONS2MSSQL	PROCEDURE	54	                  || ' ERROR: '

VACATIONS2MSSQL	PROCEDURE	55	                  || r);

VACATIONS2MSSQL	PROCEDURE	56	         END;

VACATIONS2MSSQL	PROCEDURE	57	

VACATIONS2MSSQL	PROCEDURE	58	         COMMIT;

VACATIONS2MSSQL	PROCEDURE	59	      END LOOP;

VACATIONS2MSSQL	PROCEDURE	60	

VACATIONS2MSSQL	PROCEDURE	61	      i := 0;

VACATIONS2MSSQL	PROCEDURE	62	

VACATIONS2MSSQL	PROCEDURE	63	      FOR a

VACATIONS2MSSQL	PROCEDURE	64	         IN (SELECT x.*,

VACATIONS2MSSQL	PROCEDURE	65	                    (SELECT created

VACATIONS2MSSQL	PROCEDURE	66	                       FROM sz

VACATIONS2MSSQL	PROCEDURE	67	                      WHERE id = x.sz_id)

VACATIONS2MSSQL	PROCEDURE	68	                       sz_dt

VACATIONS2MSSQL	PROCEDURE	69	               FROM (SELECT d.manufak,

VACATIONS2MSSQL	PROCEDURE	70	                            v.created,

VACATIONS2MSSQL	PROCEDURE	71	                            v.tn,

VACATIONS2MSSQL	PROCEDURE	72	                            v.v_from,

VACATIONS2MSSQL	PROCEDURE	73	                            v.v_to,

VACATIONS2MSSQL	PROCEDURE	74	                            v.sz_id,

VACATIONS2MSSQL	PROCEDURE	75	                            u.fio,

VACATIONS2MSSQL	PROCEDURE	76	                            d.dpt_name,

VACATIONS2MSSQL	PROCEDURE	77	                            u.tab_num

VACATIONS2MSSQL	PROCEDURE	78	                       FROM vacation v, user_list u, departments d

VACATIONS2MSSQL	PROCEDURE	79	                      WHERE     v.tn = u.tn

VACATIONS2MSSQL	PROCEDURE	80	                            AND u.dpt_id = d.dpt_id

VACATIONS2MSSQL	PROCEDURE	81	                            AND u.datauvol IS NULL

VACATIONS2MSSQL	PROCEDURE	82	                            AND u.tab_num IS NOT NULL

VACATIONS2MSSQL	PROCEDURE	83	                            AND d.manufak IS NOT NULL

VACATIONS2MSSQL	PROCEDURE	84	                            AND fn_query2str (

VACATIONS2MSSQL	PROCEDURE	85	                                      'select count(*) from zlkot@PERS_'

VACATIONS2MSSQL	PROCEDURE	86	                                   || d.manufak,

VACATIONS2MSSQL	PROCEDURE	87	                                   ',')

VACATIONS2MSSQL	PROCEDURE	88	                                   IS NOT NULL

VACATIONS2MSSQL	PROCEDURE	89	                            AND (SELECT COUNT (*)

VACATIONS2MSSQL	PROCEDURE	90	                                   FROM sz

VACATIONS2MSSQL	PROCEDURE	91	                                  WHERE id = v.sz_id) = 1

VACATIONS2MSSQL	PROCEDURE	92	                            AND DECODE (

VACATIONS2MSSQL	PROCEDURE	93	                                     (SELECT COUNT (*)

VACATIONS2MSSQL	PROCEDURE	94	                                        FROM sz_accept

VACATIONS2MSSQL	PROCEDURE	95	                                       WHERE sz_id = v.sz_id)

VACATIONS2MSSQL	PROCEDURE	96	                                   - (SELECT COUNT (*)

VACATIONS2MSSQL	PROCEDURE	97	                                        FROM sz_accept

VACATIONS2MSSQL	PROCEDURE	98	                                       WHERE sz_id = v.sz_id AND accepted = 1),

VACATIONS2MSSQL	PROCEDURE	99	                                   0, 1,

VACATIONS2MSSQL	PROCEDURE	100	                                   0) = 1) x,

VACATIONS2MSSQL	PROCEDURE	101	                    pers_zlkot z

VACATIONS2MSSQL	PROCEDURE	102	              WHERE     x.tab_num = z.tn(+)

VACATIONS2MSSQL	PROCEDURE	103	                    AND x.v_from = z.datkof(+)

VACATIONS2MSSQL	PROCEDURE	104	                    AND x.manufak = z.manufak(+)

VACATIONS2MSSQL	PROCEDURE	105	                    AND z.tn IS NULL)

VACATIONS2MSSQL	PROCEDURE	106	      LOOP

VACATIONS2MSSQL	PROCEDURE	107	         i := i + 1;

VACATIONS2MSSQL	PROCEDURE	108	

VACATIONS2MSSQL	PROCEDURE	109	         BEGIN

VACATIONS2MSSQL	PROCEDURE	110	            v_vac2pers :=

VACATIONS2MSSQL	PROCEDURE	111	                  'select count(*) from zlkot@PERS_'

VACATIONS2MSSQL	PROCEDURE	112	               || a.manufak

VACATIONS2MSSQL	PROCEDURE	113	               || ' where tn = '

VACATIONS2MSSQL	PROCEDURE	114	               || a.tab_num

VACATIONS2MSSQL	PROCEDURE	115	               || ' and datkof = '''

VACATIONS2MSSQL	PROCEDURE	116	               || TO_CHAR (a.v_from, 'yyyymmdd')

VACATIONS2MSSQL	PROCEDURE	117	               || '''';

VACATIONS2MSSQL	PROCEDURE	118	

VACATIONS2MSSQL	PROCEDURE	119	            EXECUTE IMMEDIATE v_vac2pers INTO v_vac_cnt;

VACATIONS2MSSQL	PROCEDURE	120	         EXCEPTION

VACATIONS2MSSQL	PROCEDURE	121	            WHEN OTHERS

VACATIONS2MSSQL	PROCEDURE	122	            THEN

VACATIONS2MSSQL	PROCEDURE	123	               v_vac_cnt := 0;

VACATIONS2MSSQL	PROCEDURE	124	         END;

VACATIONS2MSSQL	PROCEDURE	125	

VACATIONS2MSSQL	PROCEDURE	126	         COMMIT;

VACATIONS2MSSQL	PROCEDURE	127	

VACATIONS2MSSQL	PROCEDURE	128	         BEGIN

VACATIONS2MSSQL	PROCEDURE	129	            IF v_vac_cnt = 0

VACATIONS2MSSQL	PROCEDURE	130	            THEN

VACATIONS2MSSQL	PROCEDURE	131	               DBMS_OUTPUT.put_line ('vac not exist, sz_id=' || a.sz_id);

VACATIONS2MSSQL	PROCEDURE	132	

VACATIONS2MSSQL	PROCEDURE	133	               INSERT INTO full_log (prg, text)

VACATIONS2MSSQL	PROCEDURE	134	                       VALUES (

VACATIONS2MSSQL	PROCEDURE	135	                                 'vacations2mssql',

VACATIONS2MSSQL	PROCEDURE	136	                                 'vac not exist, sz_id=' || a.sz_id);

VACATIONS2MSSQL	PROCEDURE	137	

VACATIONS2MSSQL	PROCEDURE	138	               COMMIT;

VACATIONS2MSSQL	PROCEDURE	139	

VACATIONS2MSSQL	PROCEDURE	140	               v_vac2pers :=

VACATIONS2MSSQL	PROCEDURE	141	                     'INSERT INTO zlkot@PERS_'

VACATIONS2MSSQL	PROCEDURE	142	                  || a.manufak

VACATIONS2MSSQL	PROCEDURE	143	                  || ' (tn,datkof,datko,dninor,vo,ndd,datapr) VALUES ('

VACATIONS2MSSQL	PROCEDURE	144	                  || a.tab_num

VACATIONS2MSSQL	PROCEDURE	145	                  || ','''

VACATIONS2MSSQL	PROCEDURE	146	                  || TO_CHAR (a.v_from, 'yyyymmdd')

VACATIONS2MSSQL	PROCEDURE	147	                  || ''','''

VACATIONS2MSSQL	PROCEDURE	148	                  || TO_CHAR (a.v_to, 'yyyymmdd')

VACATIONS2MSSQL	PROCEDURE	149	                  || ''','

VACATIONS2MSSQL	PROCEDURE	150	                  || TO_CHAR (a.v_to - a.v_from + 1)

VACATIONS2MSSQL	PROCEDURE	151	                  || ',1,'

VACATIONS2MSSQL	PROCEDURE	152	                  || TO_CHAR (a.sz_id)

VACATIONS2MSSQL	PROCEDURE	153	                  || ','''

VACATIONS2MSSQL	PROCEDURE	154	                  || TO_CHAR (a.sz_dt, 'yyyymmdd')

VACATIONS2MSSQL	PROCEDURE	155	                  || ''')';

VACATIONS2MSSQL	PROCEDURE	156	

VACATIONS2MSSQL	PROCEDURE	157	               EXECUTE IMMEDIATE v_vac2pers;

VACATIONS2MSSQL	PROCEDURE	158	            ELSE

VACATIONS2MSSQL	PROCEDURE	159	               DBMS_OUTPUT.put_line (

VACATIONS2MSSQL	PROCEDURE	160	                     'vac already exist, sz_id='

VACATIONS2MSSQL	PROCEDURE	161	                  || a.sz_id

VACATIONS2MSSQL	PROCEDURE	162	                  || ' SQL: '

VACATIONS2MSSQL	PROCEDURE	163	                  || v_vac2pers);

VACATIONS2MSSQL	PROCEDURE	164	

VACATIONS2MSSQL	PROCEDURE	165	               INSERT INTO full_log (prg, text)

VACATIONS2MSSQL	PROCEDURE	166	                       VALUES (

VACATIONS2MSSQL	PROCEDURE	167	                                 'vacations2mssql',

VACATIONS2MSSQL	PROCEDURE	168	                                    'vac already exist, sz_id='

VACATIONS2MSSQL	PROCEDURE	169	                                 || a.sz_id

VACATIONS2MSSQL	PROCEDURE	170	                                 || ' SQL: '

VACATIONS2MSSQL	PROCEDURE	171	                                 || v_vac2pers);

VACATIONS2MSSQL	PROCEDURE	172	

VACATIONS2MSSQL	PROCEDURE	173	               COMMIT;

VACATIONS2MSSQL	PROCEDURE	174	            END IF;

VACATIONS2MSSQL	PROCEDURE	175	         EXCEPTION

VACATIONS2MSSQL	PROCEDURE	176	            WHEN OTHERS

VACATIONS2MSSQL	PROCEDURE	177	            THEN

VACATIONS2MSSQL	PROCEDURE	178	               NULL;

VACATIONS2MSSQL	PROCEDURE	179	         END;

VACATIONS2MSSQL	PROCEDURE	180	

VACATIONS2MSSQL	PROCEDURE	181	         COMMIT;

VACATIONS2MSSQL	PROCEDURE	182	      END LOOP;

VACATIONS2MSSQL	PROCEDURE	183	

VACATIONS2MSSQL	PROCEDURE	184	      COMMIT;

VACATIONS2MSSQL	PROCEDURE	185	

VACATIONS2MSSQL	PROCEDURE	186	      IF i > 0

VACATIONS2MSSQL	PROCEDURE	187	      THEN

VACATIONS2MSSQL	PROCEDURE	188	         DBMS_OUTPUT.put_line ('total vac: ' || TO_CHAR (i));

VACATIONS2MSSQL	PROCEDURE	189	

VACATIONS2MSSQL	PROCEDURE	190	         INSERT INTO full_log (prg, text)

VACATIONS2MSSQL	PROCEDURE	191	              VALUES ('vacations2mssql', 'total vac: ' || TO_CHAR (i));

VACATIONS2MSSQL	PROCEDURE	192	

VACATIONS2MSSQL	PROCEDURE	193	         COMMIT;

VACATIONS2MSSQL	PROCEDURE	194	      ELSE

VACATIONS2MSSQL	PROCEDURE	195	         DBMS_OUTPUT.put_line ('all vacs already exists');

VACATIONS2MSSQL	PROCEDURE	196	

VACATIONS2MSSQL	PROCEDURE	197	         INSERT INTO full_log (prg, text)

VACATIONS2MSSQL	PROCEDURE	198	              VALUES ('vacations2mssql', 'all vacs already exists');

VACATIONS2MSSQL	PROCEDURE	199	

VACATIONS2MSSQL	PROCEDURE	200	         COMMIT;

VACATIONS2MSSQL	PROCEDURE	201	      END IF;

VACATIONS2MSSQL	PROCEDURE	202	   EXCEPTION

VACATIONS2MSSQL	PROCEDURE	203	      WHEN OTHERS

VACATIONS2MSSQL	PROCEDURE	204	      THEN

VACATIONS2MSSQL	PROCEDURE	205	         COMMIT;

VACATIONS2MSSQL	PROCEDURE	206	   END;

VACATIONS2MSSQL	PROCEDURE	207	END;
UPDATE_SPDTREE_FROM_PERS	PROCEDURE	1	PROCEDURE        "UPDATE_SPDTREE_FROM_PERS"

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	2	IS

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	3	BEGIN

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	4	   FOR a

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	5	      IN (  SELECT b.tin,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	6	                   b.tn,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	7	                   b.fam,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	8	                   b.im,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	9	                   b.ot,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	10	                   b.datar,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	11	                   u.fio,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	12	                   b.manufak,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	13	                   d.dpt_name,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	14	                   u.birthday,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	15	                   u.tab_num,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	16	                   u.oplatakat,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	17	                   (SELECT MAX (text_)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	18	                      FROM pers.lc_c_kadr@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	19	                     WHERE     dcode = 12

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	20	                           AND manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	21	                           AND code_ =

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	22	                                  (SELECT razr

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	23	                                     FROM pers.xarcnp@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	24	                                    WHERE     tn = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	25	                                          AND manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	26	                                          AND data_d IS NULL

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	27	                                          AND datai =

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	28	                                                 (SELECT MAX (datai)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	29	                                                    FROM pers.xarcnp@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	30	                                                   WHERE     tn = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	31	                                                         AND manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	32	                                                         AND data_d IS NULL)))

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	33	                      kat,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	34	                   b.datap start_company,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	35	                   (SELECT MIN (datai)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	36	                      FROM pers.xarcnp@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	37	                     WHERE     tn = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	38	                           AND manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	39	                           AND prof =

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	40	                                  (SELECT prof

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	41	                                     FROM pers.xarcnp@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	42	                                    WHERE     tn = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	43	                                          AND manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	44	                                          AND data_d IS NULL

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	45	                                          AND datai =

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	46	                                                 (SELECT MAX (datai)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	47	                                                    FROM pers.xarcnp@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	48	                                                   WHERE     tn = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	49	                                                         AND manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	50	                                                         AND data_d IS NULL)))

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	51	                      start_pos

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	52	              FROM pers.xbid@pers b, user_list u, departments d

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	53	             WHERE     TO_CHAR (u.tn) = b.tin

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	54	                   AND b.datau IS NULL

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	55	                   AND d.manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	56	                   AND u.dpt_id = d.dpt_id

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	57	          ORDER BY b.tin)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	58	   LOOP

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	59	      UPDATE spdtree

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	60	         SET birthday = a.datar,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	61	             tab_num = a.tn,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	62	             oplatakat = TRIM (a.kat),

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	63	             start_company = a.start_company,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	64	             start_pos = a.start_pos

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	65	       WHERE svideninn = a.tin;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	66	   END LOOP;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	67	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	68	   COMMIT;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	69	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	70	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	71	   FOR a

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	72	      IN (  SELECT b.tn,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	73	                   b.fam,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	74	                   b.im,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	75	                   b.ot,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	76	                   cd.nid department_kod,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	77	                   cd.dptname department_name,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	78	                   cp.text_ pos_name,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	79	                   b.datap,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	80	                   b.datau,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	81	                   b.dateisp,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	82	                   cr.text_ RAZR,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	83	                   grp.text_ AS koff,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	84	                   b.datar birthday,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	85	                   ROUND ( (SYSDATE - b.datar) / 365) years,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	86	                   b.tin,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	87	                   b.manufak firm_manufak,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	88	                   cm.name firm_name,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	89	                   b.tel_mob,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	90	                   (SELECT MAX (text_)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	91	                      FROM pers.lc_c_kadr@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	92	                     WHERE dcode = 19 AND code_ = a.uslt AND manufak = a.MANUFAK)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	93	                      distrib,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	94	                   (SELECT MAX (text_)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	95	                      FROM pers.lc_c_kadr@pers

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	96	                     WHERE     dcode = 47

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	97	                           AND code_ = a.reg_rab

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	98	                           AND manufak = a.MANUFAK)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	99	                      filial,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	100	                   b.pol,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	101	                   b1.dptname AS channel,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	102	                   CASE

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	103	                      WHEN b1.dptname = b2.dptname THEN '   '

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	104	                      ELSE b2.dptname

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	105	                   END

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	106	                      AS region_name,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	107	                   obl.text_ AS oblast

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	108	              FROM pers.spr_manufak@pers cm,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	109	                   pers.c_razr@pers cr,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	110	                   pers.c_kat@pers ck,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	111	                   pers.c_prof@pers cp,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	112	                   pers.xbdp@pers cd,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	113	                   pers.xarcnp@pers a,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	114	                   pers.xbid@pers b,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	115	                   PERS.LC_PERS_GRP@pers grp,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	116	                   pers.xbdp@pers b1,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	117	                   pers.xbdp@pers b2,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	118	                   pers.lc_c_kadr@pers obl,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	119	                   user_list u,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	120	                   departments d

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	121	             WHERE     CASE

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	122	                          WHEN LENGTH (cd.xcex) > 6 THEN SUBSTR (cd.xcex, 7, 6)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	123	                          ELSE cd.nid

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	124	                       END = b1.nid

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	125	                   AND CASE

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	126	                          WHEN SUBSTR (cd.xcex, 13, 6) IS NOT NULL

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	127	                          THEN

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	128	                             SUBSTR (cd.xcex, 13, 6)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	129	                          ELSE

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	130	                             cd.nid

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	131	                       END = b2.nid

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	132	                   AND a.tn = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	133	                   AND a.manufak = grp.manufak(+)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	134	                   AND a.pers_grp = grp.kod(+)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	135	                   AND a.manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	136	                   AND a.manufak = cd.manufak(+)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	137	                   AND a.iddpt = cd.nid(+)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	138	                   AND cd.okod = obl.code_(+)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	139	                   AND a.manufak = cp.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	140	                   AND /*a.kat * 10000 + */

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	141	                      a.prof = cp.kod

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	142	                   AND a.manufak = ck.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	143	                   AND a.kat = ck.kod

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	144	                   AND a.manufak = cr.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	145	                   AND a.razr = cr.kod

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	146	                   AND a.manufak = cm.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	147	                   AND a.manufak = b1.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	148	                   AND a.manufak = b2.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	149	                   AND cd.manufak = obl.manufak(+)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	150	                   AND obl.dcode(+) = '55'

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	151	                   AND (   (TRUNC (SYSDATE) BETWEEN A.DATAI

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	152	                                                AND NVL (A.DATA_D,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	153	                                                         TRUNC (SYSDATE)))

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	154	                        OR (    B.DataU IS NOT NULL

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	155	                            AND b.datau = a.data_d

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	156	                            AND a.data_d = TRUNC (SYSDATE)))

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	157	                   AND TO_CHAR (u.tn) = b.tin

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	158	                   AND b.datau IS NULL

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	159	                   AND d.manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	160	                   AND u.dpt_id = d.dpt_id

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	161	          ORDER BY b.tn, b.fam, a.datai)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	162	   LOOP

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	163	      UPDATE spdtree

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	164	         SET region_name = TRIM (a.region_name),

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	165	             department_name = TRIM (a.department_name)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	166	       WHERE svideninn = a.tin;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	167	   END LOOP;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	168	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	169	   COMMIT;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	170	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	171	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	172	   FOR a

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	173	      IN (SELECT u.tab_num,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	174	                 u.fio,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	175	                 b.tn,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	176	                 b.tin,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	177	                 b.fam,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	178	                 b.im,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	179	                 b.ot,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	180	                 d.manufak,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	181	                 d.dpt_id,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	182	                 u.login

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	183	            FROM pers.xbid@pers b,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	184	                 user_list u,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	185	                 departments d,

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	186	                 spr_users_eta e

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	187	           WHERE     u.tab_num = b.tn

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	188	                 AND d.manufak = b.manufak

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	189	                 AND u.dpt_id = d.dpt_id

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	190	                 AND u.is_eta = 1

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	191	                 AND is_number (b.tin) = 1

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	192	                 AND u.tn = 0

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	193	                 AND u.login = e.login

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	194	                 AND e.tn IS NULL)

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	195	   LOOP

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	196	      UPDATE spr_users_eta

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	197	         SET tn = a.tin

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	198	       WHERE login = a.login;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	199	   END LOOP;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	200	

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	201	   COMMIT;

UPDATE_SPDTREE_FROM_PERS	PROCEDURE	202	END;
UPADTEBUDSVODZP	PROCEDURE	1	PROCEDURE UpadteBudSvodZP

UPADTEBUDSVODZP	PROCEDURE	2	AS

UPADTEBUDSVODZP	PROCEDURE	3	BEGIN

UPADTEBUDSVODZP	PROCEDURE	4	   FOR x IN (  SELECT c.data dt

UPADTEBUDSVODZP	PROCEDURE	5	                 FROM (SELECT DISTINCT y, m FROM kpr_transit

UPADTEBUDSVODZP	PROCEDURE	6	                       UNION

UPADTEBUDSVODZP	PROCEDURE	7	                       SELECT DISTINCT y, m FROM a14mega_transit) ym,

UPADTEBUDSVODZP	PROCEDURE	8	                      calendar c

UPADTEBUDSVODZP	PROCEDURE	9	                WHERE c.y = ym.y AND c.my = ym.m AND c.dm = 1

UPADTEBUDSVODZP	PROCEDURE	10	             ORDER BY c.data)

UPADTEBUDSVODZP	PROCEDURE	11	   LOOP

UPADTEBUDSVODZP	PROCEDURE	12	      FOR a

UPADTEBUDSVODZP	PROCEDURE	13	         IN (SELECT sv.id,

UPADTEBUDSVODZP	PROCEDURE	14	                    vp.val_plan dz_return_default,

UPADTEBUDSVODZP	PROCEDURE	15	                    sv.dz_return,

UPADTEBUDSVODZP	PROCEDURE	16	                    NVL (s.summa, 0) + NVL (s.coffee, 0) sales_default,

UPADTEBUDSVODZP	PROCEDURE	17	                    sv.sales

UPADTEBUDSVODZP	PROCEDURE	18	               FROM (  SELECT m.dpt_id,

UPADTEBUDSVODZP	PROCEDURE	19	                              m.h_eta,

UPADTEBUDSVODZP	PROCEDURE	20	                              SUM (m.summa) summa,

UPADTEBUDSVODZP	PROCEDURE	21	                              SUM (m.coffee) coffee

UPADTEBUDSVODZP	PROCEDURE	22	                         FROM a14mega m

UPADTEBUDSVODZP	PROCEDURE	23	                        WHERE x.dt = m.dt

UPADTEBUDSVODZP	PROCEDURE	24	                     GROUP BY m.dpt_id,

UPADTEBUDSVODZP	PROCEDURE	25	                              m.tab_num,

UPADTEBUDSVODZP	PROCEDURE	26	                              m.h_eta,

UPADTEBUDSVODZP	PROCEDURE	27	                              m.eta,

UPADTEBUDSVODZP	PROCEDURE	28	                              m.eta_tab_number) s,

UPADTEBUDSVODZP	PROCEDURE	29	                    bud_svod_zp sv,

UPADTEBUDSVODZP	PROCEDURE	30	                    (SELECT fil, ok_db_tn

UPADTEBUDSVODZP	PROCEDURE	31	                       FROM bud_svod_taf

UPADTEBUDSVODZP	PROCEDURE	32	                      WHERE dt = x.dt) taf,

UPADTEBUDSVODZP	PROCEDURE	33	                    (SELECT dpt_id,

UPADTEBUDSVODZP	PROCEDURE	34	                            h_eta,

UPADTEBUDSVODZP	PROCEDURE	35	                            (NVL (val_plan, 0) + NVL (coffee_plan, 0)) * 1000

UPADTEBUDSVODZP	PROCEDURE	36	                               val_plan

UPADTEBUDSVODZP	PROCEDURE	37	                       FROM kpr k

UPADTEBUDSVODZP	PROCEDURE	38	                      WHERE x.dt = k.dt) vp

UPADTEBUDSVODZP	PROCEDURE	39	              WHERE     sv.fil = taf.fil(+)

UPADTEBUDSVODZP	PROCEDURE	40	                    AND x.dt = sv.dt

UPADTEBUDSVODZP	PROCEDURE	41	                    AND s.h_eta = sv.h_eta

UPADTEBUDSVODZP	PROCEDURE	42	                    AND s.dpt_id = sv.dpt_id

UPADTEBUDSVODZP	PROCEDURE	43	                    AND s.h_eta = vp.h_eta(+)

UPADTEBUDSVODZP	PROCEDURE	44	                    AND s.dpt_id = vp.dpt_id(+)

UPADTEBUDSVODZP	PROCEDURE	45	                    AND sv.unscheduled = 0

UPADTEBUDSVODZP	PROCEDURE	46	                    AND taf.ok_db_tn IS NULL)

UPADTEBUDSVODZP	PROCEDURE	47	      LOOP

UPADTEBUDSVODZP	PROCEDURE	48	         UPDATE bud_svod_zp

UPADTEBUDSVODZP	PROCEDURE	49	            SET dz_return = a.dz_return_default, sales = a.sales_default

UPADTEBUDSVODZP	PROCEDURE	50	          WHERE id = a.id;

UPADTEBUDSVODZP	PROCEDURE	51	

UPADTEBUDSVODZP	PROCEDURE	52	         COMMIT;

UPADTEBUDSVODZP	PROCEDURE	53	      END LOOP;

UPADTEBUDSVODZP	PROCEDURE	54	   END LOOP;

UPADTEBUDSVODZP	PROCEDURE	55	END;
TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	1	TRIGGER PERSIK.TR_ZAT_MONTHLY_UPD_PROCESSED

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	2	   BEFORE UPDATE OF IS_PROCESSED

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	3	   ON PERSIK.ZAT_MONTHLY

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	5	   FOR EACH ROW

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	6	BEGIN

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	7	   IF :new.is_accepted <> 1

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	8	   THEN

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	9	      raise_application_error (

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	10	         -20000,

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	11	         'отчет не принят, нельзя обработать');

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	12	   ELSE

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	13	      :NEW.date_PROCESSED := SYSDATE;

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	14	   END IF;

TR_ZAT_MONTHLY_UPD_PROCESSED	TRIGGER	15	END;
TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	1	TRIGGER "PERSIK"."TR_ZAT_MONTHLY_UPD_ACCEPTED" 

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	2	   BEFORE UPDATE OF IS_ACCEPTED

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	3	   ON PERSIK.ZAT_MONTHLY

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	5	   FOR EACH ROW

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	6	BEGIN

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	7	   :new.is_processed := NULL;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	8	   :NEW.date_processed := NULL;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	9	

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	10	   IF :new.is_accepted = 1

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	11	   THEN

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	12	      :NEW.date_accepted := SYSDATE;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	13	

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	14	      SELECT CASE

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	15	                WHEN     (  SYSDATE

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	16	                          - ADD_MONTHS (

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	17	                               TO_DATE ('10/' || :new.m || '/' || :new.y,

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	18	                                        'dd/mm/yyyy'),

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	19	                               1)) > 0

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	20	                     AND :OLD.accepted_in_time = 0

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	21	                THEN

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	22	                   0

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	23	                ELSE

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	24	                   1

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	25	             END

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	26	        INTO :new.accepted_in_time

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	27	        FROM DUAL;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	28	   ELSE

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	29	      :NEW.date_accepted := NULL;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	30	   END IF;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	31	END;

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	32	

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	33	

TR_ZAT_MONTHLY_UPD_ACCEPTED	TRIGGER	34	

TR_ZAT_MONTHLY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ZAT_MONTHLY_NEW" 

TR_ZAT_MONTHLY_NEW	TRIGGER	2	   BEFORE INSERT

TR_ZAT_MONTHLY_NEW	TRIGGER	3	   ON ZAT_monthly

TR_ZAT_MONTHLY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ZAT_MONTHLY_NEW	TRIGGER	5	   FOR EACH ROW

TR_ZAT_MONTHLY_NEW	TRIGGER	6	DECLARE

TR_ZAT_MONTHLY_NEW	TRIGGER	7	BEGIN

TR_ZAT_MONTHLY_NEW	TRIGGER	8	   SELECT avans

TR_ZAT_MONTHLY_NEW	TRIGGER	9	     INTO :new.avans

TR_ZAT_MONTHLY_NEW	TRIGGER	10	     FROM spdtree

TR_ZAT_MONTHLY_NEW	TRIGGER	11	    WHERE svideninn = :new.tn;

TR_ZAT_MONTHLY_NEW	TRIGGER	12	END;

TR_ZAT_MONTHLY_NEW	TRIGGER	13	

TR_ZAT_MONTHLY_NEW	TRIGGER	14	

TR_ZAT_MONTHLY_NEW	TRIGGER	15	

TR_ZAT_MONTHLY_CHAT	TRIGGER	1	TRIGGER "PERSIK"."TR_ZAT_MONTHLY_CHAT" 

TR_ZAT_MONTHLY_CHAT	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ZAT_MONTHLY_CHAT	TRIGGER	3	   ON ZAT_monthly_chat

TR_ZAT_MONTHLY_CHAT	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ZAT_MONTHLY_CHAT	TRIGGER	5	   FOR EACH ROW

TR_ZAT_MONTHLY_CHAT	TRIGGER	6	DECLARE

TR_ZAT_MONTHLY_CHAT	TRIGGER	7	BEGIN

TR_ZAT_MONTHLY_CHAT	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_ZAT_MONTHLY_CHAT	TRIGGER	9	END;

TR_ZAT_MONTHLY_CHAT	TRIGGER	10	

TR_ZAT_MONTHLY_CHAT	TRIGGER	11	

TR_ZAT_MONTHLY	TRIGGER	1	TRIGGER "PERSIK"."TR_ZAT_MONTHLY" 

TR_ZAT_MONTHLY	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ZAT_MONTHLY	TRIGGER	3	   ON ZAT_monthly

TR_ZAT_MONTHLY	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ZAT_MONTHLY	TRIGGER	5	   FOR EACH ROW

TR_ZAT_MONTHLY	TRIGGER	6	DECLARE

TR_ZAT_MONTHLY	TRIGGER	7	BEGIN

TR_ZAT_MONTHLY	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_ZAT_MONTHLY	TRIGGER	9	END tr_ZAT_monthly;

TR_ZAT_MONTHLY	TRIGGER	10	

TR_ZAT_MONTHLY	TRIGGER	11	

TR_ZAT_MONTHLY	TRIGGER	12	

TR_ZAT_DAILY_TRIP	TRIGGER	1	TRIGGER "PERSIK"."TR_ZAT_DAILY_TRIP" 

TR_ZAT_DAILY_TRIP	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ZAT_DAILY_TRIP	TRIGGER	3	   ON ZAT_DAILY_TRIP

TR_ZAT_DAILY_TRIP	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ZAT_DAILY_TRIP	TRIGGER	5	   FOR EACH ROW

TR_ZAT_DAILY_TRIP	TRIGGER	6	DECLARE

TR_ZAT_DAILY_TRIP	TRIGGER	7	BEGIN

TR_ZAT_DAILY_TRIP	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_ZAT_DAILY_TRIP	TRIGGER	9	END tr_ZAT_DAILY_TRIP;

TR_ZAT_DAILY_TRIP	TRIGGER	10	

TR_ZAT_DAILY_TRIP	TRIGGER	11	

TR_ZAT_DAILY_TRIP	TRIGGER	12	

TR_ZAT_DAILY_CAR	TRIGGER	1	TRIGGER "PERSIK"."TR_ZAT_DAILY_CAR" 

TR_ZAT_DAILY_CAR	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ZAT_DAILY_CAR	TRIGGER	3	   ON ZAT_DAILY_CAR

TR_ZAT_DAILY_CAR	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ZAT_DAILY_CAR	TRIGGER	5	   FOR EACH ROW

TR_ZAT_DAILY_CAR	TRIGGER	6	DECLARE

TR_ZAT_DAILY_CAR	TRIGGER	7	BEGIN

TR_ZAT_DAILY_CAR	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_ZAT_DAILY_CAR	TRIGGER	9	END tr_ZAT_DAILY_CAR;

TR_ZAT_DAILY_CAR	TRIGGER	10	

TR_ZAT_DAILY_CAR	TRIGGER	11	

TR_ZAT_DAILY_CAR	TRIGGER	12	

TR_VOITING_UPD	TRIGGER	1	TRIGGER PERSIK.TR_VOITING_UPD

TR_VOITING_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_VOITING_UPD	TRIGGER	3	   ON PERSIK.VOITING

TR_VOITING_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VOITING_UPD	TRIGGER	5	   FOR EACH ROW

TR_VOITING_UPD	TRIGGER	6	DECLARE

TR_VOITING_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_VOITING_UPD	TRIGGER	8	BEGIN

TR_VOITING_UPD	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_VOITING_UPD	TRIGGER	10	

TR_VOITING_UPD	TRIGGER	11	   IF UPDATING

TR_VOITING_UPD	TRIGGER	12	   THEN

TR_VOITING_UPD	TRIGGER	13	      IF :new.product1 <> :old.product1

TR_VOITING_UPD	TRIGGER	14	      THEN

TR_VOITING_UPD	TRIGGER	15	         IF :new.product1 = :new.product2

TR_VOITING_UPD	TRIGGER	16	         THEN

TR_VOITING_UPD	TRIGGER	17	            :new.product2 := 0;

TR_VOITING_UPD	TRIGGER	18	         END IF;

TR_VOITING_UPD	TRIGGER	19	

TR_VOITING_UPD	TRIGGER	20	         IF :new.product1 = :new.product3

TR_VOITING_UPD	TRIGGER	21	         THEN

TR_VOITING_UPD	TRIGGER	22	            :new.product3 := 0;

TR_VOITING_UPD	TRIGGER	23	         END IF;

TR_VOITING_UPD	TRIGGER	24	      END IF;

TR_VOITING_UPD	TRIGGER	25	

TR_VOITING_UPD	TRIGGER	26	      IF :new.product2 <> :old.product2

TR_VOITING_UPD	TRIGGER	27	      THEN

TR_VOITING_UPD	TRIGGER	28	         IF :new.product2 = :new.product1

TR_VOITING_UPD	TRIGGER	29	         THEN

TR_VOITING_UPD	TRIGGER	30	            :new.product1 := 0;

TR_VOITING_UPD	TRIGGER	31	         END IF;

TR_VOITING_UPD	TRIGGER	32	

TR_VOITING_UPD	TRIGGER	33	         IF :new.product2 = :new.product3

TR_VOITING_UPD	TRIGGER	34	         THEN

TR_VOITING_UPD	TRIGGER	35	            :new.product3 := 0;

TR_VOITING_UPD	TRIGGER	36	         END IF;

TR_VOITING_UPD	TRIGGER	37	      END IF;

TR_VOITING_UPD	TRIGGER	38	

TR_VOITING_UPD	TRIGGER	39	      IF :new.product3 <> :old.product3

TR_VOITING_UPD	TRIGGER	40	      THEN

TR_VOITING_UPD	TRIGGER	41	         IF :new.product3 = :new.product2

TR_VOITING_UPD	TRIGGER	42	         THEN

TR_VOITING_UPD	TRIGGER	43	            :new.product2 := 0;

TR_VOITING_UPD	TRIGGER	44	         END IF;

TR_VOITING_UPD	TRIGGER	45	

TR_VOITING_UPD	TRIGGER	46	         IF :new.product3 = :new.product1

TR_VOITING_UPD	TRIGGER	47	         THEN

TR_VOITING_UPD	TRIGGER	48	            :new.product1 := 0;

TR_VOITING_UPD	TRIGGER	49	         END IF;

TR_VOITING_UPD	TRIGGER	50	      END IF;

TR_VOITING_UPD	TRIGGER	51	   END IF;

TR_VOITING_UPD	TRIGGER	52	

TR_VOITING_UPD	TRIGGER	53	   INSERT INTO voiting_log (tn,

TR_VOITING_UPD	TRIGGER	54	                            product1,

TR_VOITING_UPD	TRIGGER	55	                            product2,

TR_VOITING_UPD	TRIGGER	56	                            product3,

TR_VOITING_UPD	TRIGGER	57	                            ball1,

TR_VOITING_UPD	TRIGGER	58	                            ball2,

TR_VOITING_UPD	TRIGGER	59	                            ball3)

TR_VOITING_UPD	TRIGGER	60	        VALUES (:new.tn,

TR_VOITING_UPD	TRIGGER	61	                :new.product1,

TR_VOITING_UPD	TRIGGER	62	                :new.product2,

TR_VOITING_UPD	TRIGGER	63	                :new.product3,

TR_VOITING_UPD	TRIGGER	64	                :new.ball1,

TR_VOITING_UPD	TRIGGER	65	                :new.ball2,

TR_VOITING_UPD	TRIGGER	66	                :new.ball3);

TR_VOITING_UPD	TRIGGER	67	

TR_VOITING_UPD	TRIGGER	68	   COMMIT;

TR_VOITING_UPD	TRIGGER	69	END;
TR_VOITING_PROD_COLOR_UPD	TRIGGER	1	TRIGGER PERSIK.TR_VOITING_PROD_COLOR_UPD

TR_VOITING_PROD_COLOR_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_VOITING_PROD_COLOR_UPD	TRIGGER	3	   ON PERSIK.voiting_prod_color

TR_VOITING_PROD_COLOR_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VOITING_PROD_COLOR_UPD	TRIGGER	5	   FOR EACH ROW

TR_VOITING_PROD_COLOR_UPD	TRIGGER	6	DECLARE

TR_VOITING_PROD_COLOR_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	8	BEGIN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	10	

TR_VOITING_PROD_COLOR_UPD	TRIGGER	11	   IF UPDATING

TR_VOITING_PROD_COLOR_UPD	TRIGGER	12	   THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	13	      IF :new.product1 <> :old.product1

TR_VOITING_PROD_COLOR_UPD	TRIGGER	14	      THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	15	         IF :new.product1 = :new.product2

TR_VOITING_PROD_COLOR_UPD	TRIGGER	16	         THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	17	            :new.product2 := 0;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	18	         END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	19	

TR_VOITING_PROD_COLOR_UPD	TRIGGER	20	         IF :new.product1 = :new.product3

TR_VOITING_PROD_COLOR_UPD	TRIGGER	21	         THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	22	            :new.product3 := 0;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	23	         END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	24	      END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	25	

TR_VOITING_PROD_COLOR_UPD	TRIGGER	26	      IF :new.product2 <> :old.product2

TR_VOITING_PROD_COLOR_UPD	TRIGGER	27	      THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	28	         IF :new.product2 = :new.product1

TR_VOITING_PROD_COLOR_UPD	TRIGGER	29	         THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	30	            :new.product1 := 0;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	31	         END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	32	

TR_VOITING_PROD_COLOR_UPD	TRIGGER	33	         IF :new.product2 = :new.product3

TR_VOITING_PROD_COLOR_UPD	TRIGGER	34	         THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	35	            :new.product3 := 0;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	36	         END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	37	      END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	38	

TR_VOITING_PROD_COLOR_UPD	TRIGGER	39	      IF :new.product3 <> :old.product3

TR_VOITING_PROD_COLOR_UPD	TRIGGER	40	      THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	41	         IF :new.product3 = :new.product2

TR_VOITING_PROD_COLOR_UPD	TRIGGER	42	         THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	43	            :new.product2 := 0;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	44	         END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	45	

TR_VOITING_PROD_COLOR_UPD	TRIGGER	46	         IF :new.product3 = :new.product1

TR_VOITING_PROD_COLOR_UPD	TRIGGER	47	         THEN

TR_VOITING_PROD_COLOR_UPD	TRIGGER	48	            :new.product1 := 0;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	49	         END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	50	      END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	51	   END IF;

TR_VOITING_PROD_COLOR_UPD	TRIGGER	52	END;
TR_VOITING_LOG_UPD	TRIGGER	1	TRIGGER PERSIK.TR_VOITING_LOG_UPD

TR_VOITING_LOG_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_VOITING_LOG_UPD	TRIGGER	3	   ON PERSIK.VOITING_LOG

TR_VOITING_LOG_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VOITING_LOG_UPD	TRIGGER	5	   FOR EACH ROW

TR_VOITING_LOG_UPD	TRIGGER	6	BEGIN

TR_VOITING_LOG_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_VOITING_LOG_UPD	TRIGGER	8	END;
TR_VOITING_LOG_INS	TRIGGER	1	TRIGGER PERSIK.TR_VOITING_LOG_ins

TR_VOITING_LOG_INS	TRIGGER	2	   BEFORE INSERT

TR_VOITING_LOG_INS	TRIGGER	3	   ON PERSIK.VOITING_LOG

TR_VOITING_LOG_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VOITING_LOG_INS	TRIGGER	5	   FOR EACH ROW

TR_VOITING_LOG_INS	TRIGGER	6	BEGIN

TR_VOITING_LOG_INS	TRIGGER	7	   :NEW.id := seq_all.NEXTVAL;

TR_VOITING_LOG_INS	TRIGGER	8	END;
TR_VACATION_UPD1	TRIGGER	1	TRIGGER "PERSIK"."TR_VACATION_UPD1" 

TR_VACATION_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF vac_finished

TR_VACATION_UPD1	TRIGGER	3	   ON PERSIK.VACATION

TR_VACATION_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VACATION_UPD1	TRIGGER	5	   FOR EACH ROW

TR_VACATION_UPD1	TRIGGER	6	BEGIN

TR_VACATION_UPD1	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_VACATION_UPD1	TRIGGER	8	

TR_VACATION_UPD1	TRIGGER	9	   IF :new.vac_finished = 1

TR_VACATION_UPD1	TRIGGER	10	   THEN

TR_VACATION_UPD1	TRIGGER	11	      :NEW.vac_finished_lu := SYSDATE;

TR_VACATION_UPD1	TRIGGER	12	   ELSE

TR_VACATION_UPD1	TRIGGER	13	      :NEW.vac_finished_lu := NULL;

TR_VACATION_UPD1	TRIGGER	14	   END IF;

TR_VACATION_UPD1	TRIGGER	15	END;

TR_VACATION_UPD1	TRIGGER	16	

TR_VACATION_UPD1	TRIGGER	17	

TR_VACATION_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_VACATION_UPD" 

TR_VACATION_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_VACATION_UPD	TRIGGER	3	   ON PERSIK.VACATION

TR_VACATION_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VACATION_UPD	TRIGGER	5	   FOR EACH ROW

TR_VACATION_UPD	TRIGGER	6	BEGIN

TR_VACATION_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_VACATION_UPD	TRIGGER	8	

TR_VACATION_UPD	TRIGGER	9	   IF :new.replacement_h_eta IS NOT NULL

TR_VACATION_UPD	TRIGGER	10	   THEN

TR_VACATION_UPD	TRIGGER	11	      BEGIN

TR_VACATION_UPD	TRIGGER	12	         SELECT eta

TR_VACATION_UPD	TRIGGER	13	           INTO :new.replacement_fio_eta

TR_VACATION_UPD	TRIGGER	14	           FROM parents_eta

TR_VACATION_UPD	TRIGGER	15	          WHERE h_eta = :new.replacement_h_eta AND chief_tn = :new.tn;

TR_VACATION_UPD	TRIGGER	16	      EXCEPTION

TR_VACATION_UPD	TRIGGER	17	         WHEN OTHERS

TR_VACATION_UPD	TRIGGER	18	         THEN

TR_VACATION_UPD	TRIGGER	19	            NULL;

TR_VACATION_UPD	TRIGGER	20	      END;

TR_VACATION_UPD	TRIGGER	21	   END IF;

TR_VACATION_UPD	TRIGGER	22	END;

TR_VACATION_UPD	TRIGGER	23	

TR_VACATION_TASK_PARTS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_VACATION_TASK_PARTS_NEW" 

TR_VACATION_TASK_PARTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_VACATION_TASK_PARTS_NEW	TRIGGER	3	   ON VACATION_TASK_PARTS

TR_VACATION_TASK_PARTS_NEW	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_VACATION_TASK_PARTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_VACATION_TASK_PARTS_NEW	TRIGGER	6	BEGIN

TR_VACATION_TASK_PARTS_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_VACATION_TASK_PARTS_NEW	TRIGGER	8	   THEN

TR_VACATION_TASK_PARTS_NEW	TRIGGER	9	      SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_VACATION_TASK_PARTS_NEW	TRIGGER	10	   END IF;

TR_VACATION_TASK_PARTS_NEW	TRIGGER	11	END TR_vacation_task_parts_NEW;

TR_VACATION_TASK_PARTS_NEW	TRIGGER	12	

TR_VACATION_TASK_PARTS_NEW	TRIGGER	13	

TR_VACATION_TASKS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_VACATION_TASKS_UPD" 

TR_VACATION_TASKS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_VACATION_TASKS_UPD	TRIGGER	3	   ON VACATION_TASKS

TR_VACATION_TASKS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VACATION_TASKS_UPD	TRIGGER	5	   FOR EACH ROW

TR_VACATION_TASKS_UPD	TRIGGER	6	BEGIN

TR_VACATION_TASKS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_VACATION_TASKS_UPD	TRIGGER	8	END;

TR_VACATION_TASKS_UPD	TRIGGER	9	

TR_VACATION_TASKS_UPD	TRIGGER	10	

TR_VACATION_TASKS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_VACATION_TASKS_NEW" 

TR_VACATION_TASKS_NEW	TRIGGER	2	   BEFORE INSERT

TR_VACATION_TASKS_NEW	TRIGGER	3	   ON VACATION_TASKS

TR_VACATION_TASKS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VACATION_TASKS_NEW	TRIGGER	5	   FOR EACH ROW

TR_VACATION_TASKS_NEW	TRIGGER	6	BEGIN

TR_VACATION_TASKS_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_VACATION_TASKS_NEW	TRIGGER	8	   THEN

TR_VACATION_TASKS_NEW	TRIGGER	9	      SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_VACATION_TASKS_NEW	TRIGGER	10	   END IF;

TR_VACATION_TASKS_NEW	TRIGGER	11	END;

TR_VACATION_TASKS_NEW	TRIGGER	12	

TR_VACATION_TASKS_NEW	TRIGGER	13	

TR_VACATION_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_VACATION_NEW" 

TR_VACATION_NEW	TRIGGER	2	   BEFORE INSERT

TR_VACATION_NEW	TRIGGER	3	   ON PERSIK.VACATION

TR_VACATION_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_VACATION_NEW	TRIGGER	5	   FOR EACH ROW

TR_VACATION_NEW	TRIGGER	6	DECLARE

TR_VACATION_NEW	TRIGGER	7	   sz_id   INTEGER;

TR_VACATION_NEW	TRIGGER	8	   c       INTEGER;

TR_VACATION_NEW	TRIGGER	9	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_VACATION_NEW	TRIGGER	10	BEGIN

TR_VACATION_NEW	TRIGGER	11	   IF :NEW.ID IS NULL

TR_VACATION_NEW	TRIGGER	12	   THEN

TR_VACATION_NEW	TRIGGER	13	      SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_VACATION_NEW	TRIGGER	14	   END IF;

TR_VACATION_NEW	TRIGGER	15	

TR_VACATION_NEW	TRIGGER	16	   :NEW.created := SYSDATE;

TR_VACATION_NEW	TRIGGER	17	

TR_VACATION_NEW	TRIGGER	18	   /*SELECT COUNT (c.data)

TR_VACATION_NEW	TRIGGER	19	     INTO c

TR_VACATION_NEW	TRIGGER	20	     FROM vacation v, calendar c

TR_VACATION_NEW	TRIGGER	21	    WHERE     c.data BETWEEN v.v_from AND v.v_to

TR_VACATION_NEW	TRIGGER	22	          AND c.data BETWEEN :new.v_from AND :new.v_to

TR_VACATION_NEW	TRIGGER	23	          AND v.tn = :new.tn;*/

TR_VACATION_NEW	TRIGGER	24	

TR_VACATION_NEW	TRIGGER	25	   IF c = 0

TR_VACATION_NEW	TRIGGER	26	   THEN

TR_VACATION_NEW	TRIGGER	27	      NULL;

TR_VACATION_NEW	TRIGGER	28	   ELSE

TR_VACATION_NEW	TRIGGER	29	      NULL;

TR_VACATION_NEW	TRIGGER	30	   /*raise_application_error (-20002,

TR_VACATION_NEW	TRIGGER	31	                            'Накладочка в отпусках!');*/

TR_VACATION_NEW	TRIGGER	32	   END IF;

TR_VACATION_NEW	TRIGGER	33	END;

TR_VACATION_NEW	TRIGGER	34	

TR_VACATION_NEW	TRIGGER	35	

TR_URLIC_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_URLIC_UPD" 

TR_URLIC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_URLIC_UPD	TRIGGER	3	   ON PERSIK.urlic

TR_URLIC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_URLIC_UPD	TRIGGER	5	   FOR EACH ROW

TR_URLIC_UPD	TRIGGER	6	BEGIN

TR_URLIC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_URLIC_UPD	TRIGGER	8	END;

TR_URLIC_UPD	TRIGGER	9	

TR_URLIC_UPD	TRIGGER	10	

TR_URLIC_UPD	TRIGGER	11	

TR_URLIC_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_URLIC_NEW" 

TR_URLIC_NEW	TRIGGER	2	   BEFORE INSERT

TR_URLIC_NEW	TRIGGER	3	   ON PERSIK.urlic

TR_URLIC_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_URLIC_NEW	TRIGGER	5	   FOR EACH ROW

TR_URLIC_NEW	TRIGGER	6	BEGIN

TR_URLIC_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_URLIC_NEW	TRIGGER	8	END;

TR_URLIC_NEW	TRIGGER	9	

TR_URLIC_NEW	TRIGGER	10	

TR_URLIC_NEW	TRIGGER	11	

TR_UM_TRANSIT_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_um_TRANSIT_TMP_1

TR_UM_TRANSIT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_UM_TRANSIT_TMP_1	TRIGGER	3	   ON PERSIK.UM_TRANSIT_TMP

TR_UM_TRANSIT_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_UM_TRANSIT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_UM_TRANSIT_TMP_1	TRIGGER	6	BEGIN

TR_UM_TRANSIT_TMP_1	TRIGGER	7	   :new.H_eta := md5hash (:new.fio_eta);

TR_UM_TRANSIT_TMP_1	TRIGGER	8	

TR_UM_TRANSIT_TMP_1	TRIGGER	9	   BEGIN

TR_UM_TRANSIT_TMP_1	TRIGGER	10	      IF :new.country IS NOT NULL

TR_UM_TRANSIT_TMP_1	TRIGGER	11	      THEN

TR_UM_TRANSIT_TMP_1	TRIGGER	12	         SELECT dpt_id

TR_UM_TRANSIT_TMP_1	TRIGGER	13	           INTO :new.dpt_id

TR_UM_TRANSIT_TMP_1	TRIGGER	14	           FROM departments

TR_UM_TRANSIT_TMP_1	TRIGGER	15	          WHERE manufak = :new.country;

TR_UM_TRANSIT_TMP_1	TRIGGER	16	      END IF;

TR_UM_TRANSIT_TMP_1	TRIGGER	17	   EXCEPTION

TR_UM_TRANSIT_TMP_1	TRIGGER	18	      WHEN OTHERS

TR_UM_TRANSIT_TMP_1	TRIGGER	19	      THEN

TR_UM_TRANSIT_TMP_1	TRIGGER	20	         NULL;

TR_UM_TRANSIT_TMP_1	TRIGGER	21	   END;

TR_UM_TRANSIT_TMP_1	TRIGGER	22	END;
TR_TU_SPR_UPD	TRIGGER	1	TRIGGER PERSIK.TR_tu_spr_UPD 

TR_TU_SPR_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TU_SPR_UPD	TRIGGER	3	   ON PERSIK.tu_spr

TR_TU_SPR_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TU_SPR_UPD	TRIGGER	5	   FOR EACH ROW

TR_TU_SPR_UPD	TRIGGER	6	BEGIN

TR_TU_SPR_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_TU_SPR_UPD	TRIGGER	8	END;
TR_TU_SPR_NEW	TRIGGER	1	TRIGGER PERSIK.TR_tu_spr_NEW 

TR_TU_SPR_NEW	TRIGGER	2	   BEFORE INSERT

TR_TU_SPR_NEW	TRIGGER	3	   ON PERSIK.tu_spr

TR_TU_SPR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TU_SPR_NEW	TRIGGER	5	   FOR EACH ROW

TR_TU_SPR_NEW	TRIGGER	6	BEGIN

TR_TU_SPR_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_TU_SPR_NEW	TRIGGER	8	   THEN

TR_TU_SPR_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_TU_SPR_NEW	TRIGGER	10	   END IF;

TR_TU_SPR_NEW	TRIGGER	11	END;
TR_TR_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_TR_UPD" 

TR_TR_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TR_UPD	TRIGGER	3	   ON PERSIK.tr

TR_TR_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TR_UPD	TRIGGER	5	   FOR EACH ROW

TR_TR_UPD	TRIGGER	6	BEGIN

TR_TR_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_TR_UPD	TRIGGER	8	END;

TR_TR_UPD	TRIGGER	9	

TR_TR_UPD	TRIGGER	10	

TR_TR_UPD	TRIGGER	11	

TR_TR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_TR_NEW" 

TR_TR_NEW	TRIGGER	2	   BEFORE INSERT

TR_TR_NEW	TRIGGER	3	   ON PERSIK.tr

TR_TR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TR_NEW	TRIGGER	5	   FOR EACH ROW

TR_TR_NEW	TRIGGER	6	BEGIN

TR_TR_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_TR_NEW	TRIGGER	8	   THEN

TR_TR_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_TR_NEW	TRIGGER	10	   END IF;

TR_TR_NEW	TRIGGER	11	END;

TR_TR_NEW	TRIGGER	12	

TR_TR_NEW	TRIGGER	13	

TR_TR_NEW	TRIGGER	14	

TR_TP_NETS_TMP_HASH	TRIGGER	1	TRIGGER TR_TP_NETS_TMP_HASH

TR_TP_NETS_TMP_HASH	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TP_NETS_TMP_HASH	TRIGGER	3	   ON TP_NETS_TMP

TR_TP_NETS_TMP_HASH	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_TP_NETS_TMP_HASH	TRIGGER	5	   FOR EACH ROW

TR_TP_NETS_TMP_HASH	TRIGGER	6	BEGIN

TR_TP_NETS_TMP_HASH	TRIGGER	7	   :NEW.h_net := md5hash (:NEW.net);

TR_TP_NETS_TMP_HASH	TRIGGER	8	END;
TR_TP_NETS_KK_TMP_HASH	TRIGGER	1	TRIGGER PERSIK.TR_TP_NETS_KK_TMP_HASH

TR_TP_NETS_KK_TMP_HASH	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TP_NETS_KK_TMP_HASH	TRIGGER	3	   ON PERSIK.TP_NETS_KK_TMP

TR_TP_NETS_KK_TMP_HASH	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_TP_NETS_KK_TMP_HASH	TRIGGER	5	   FOR EACH ROW

TR_TP_NETS_KK_TMP_HASH	TRIGGER	6	BEGIN

TR_TP_NETS_KK_TMP_HASH	TRIGGER	7	   :NEW.h_net := md5hash (:NEW.net);

TR_TP_NETS_KK_TMP_HASH	TRIGGER	8	END;
TR_TP_NETS_KK_HASH	TRIGGER	1	TRIGGER PERSIK.TR_TP_NETS_KK_HASH

TR_TP_NETS_KK_HASH	TRIGGER	2	/* Formatted on 20/04/2016 15:04:50 (QP5 v5.252.13127.32867) */

TR_TP_NETS_KK_HASH	TRIGGER	3	BEFORE INSERT OR UPDATE

TR_TP_NETS_KK_HASH	TRIGGER	4	ON PERSIK.TP_NETS_KK

TR_TP_NETS_KK_HASH	TRIGGER	5	REFERENCING NEW AS New OLD AS Old

TR_TP_NETS_KK_HASH	TRIGGER	6	FOR EACH ROW

TR_TP_NETS_KK_HASH	TRIGGER	7	BEGIN

TR_TP_NETS_KK_HASH	TRIGGER	8	   :NEW.h_net := md5hash ( :NEW.net);

TR_TP_NETS_KK_HASH	TRIGGER	9	END;
TR_TP_NETS_HASH	TRIGGER	1	TRIGGER PERSIK.tr_tp_nets_hash

TR_TP_NETS_HASH	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_TP_NETS_HASH	TRIGGER	3	ON TP_NETS

TR_TP_NETS_HASH	TRIGGER	4	REFERENCING NEW AS New OLD AS Old

TR_TP_NETS_HASH	TRIGGER	5	FOR EACH ROW

TR_TP_NETS_HASH	TRIGGER	6	/* Formatted on 20/04/2016 15:04:50 (QP5 v5.252.13127.32867) */

TR_TP_NETS_HASH	TRIGGER	7	BEGIN

TR_TP_NETS_HASH	TRIGGER	8	   :NEW.h_net := md5hash ( :NEW.net);

TR_TP_NETS_HASH	TRIGGER	9	END;
TR_TMC_UPD_ACCEPTED	TRIGGER	1	TRIGGER "PERSIK"."TR_TMC_UPD_ACCEPTED" 

TR_TMC_UPD_ACCEPTED	TRIGGER	2	   BEFORE UPDATE OF accepted

TR_TMC_UPD_ACCEPTED	TRIGGER	3	   ON PERSIK.TMC

TR_TMC_UPD_ACCEPTED	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMC_UPD_ACCEPTED	TRIGGER	5	   FOR EACH ROW

TR_TMC_UPD_ACCEPTED	TRIGGER	6	BEGIN

TR_TMC_UPD_ACCEPTED	TRIGGER	7	   IF :new.accepted = 1

TR_TMC_UPD_ACCEPTED	TRIGGER	8	   THEN

TR_TMC_UPD_ACCEPTED	TRIGGER	9	      :NEW.accepted_lu := SYSDATE;

TR_TMC_UPD_ACCEPTED	TRIGGER	10	   ELSE

TR_TMC_UPD_ACCEPTED	TRIGGER	11	      :NEW.accepted_lu := NULL;

TR_TMC_UPD_ACCEPTED	TRIGGER	12	   END IF;

TR_TMC_UPD_ACCEPTED	TRIGGER	13	END;

TR_TMC_UPD_ACCEPTED	TRIGGER	14	

TR_TMC_UPD_1	TRIGGER	1	TRIGGER PERSIK.TR_TMC_UPD_1

TR_TMC_UPD_1	TRIGGER	2	   BEFORE UPDATE OF moved, removed

TR_TMC_UPD_1	TRIGGER	3	   ON PERSIK.TMC

TR_TMC_UPD_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMC_UPD_1	TRIGGER	5	   FOR EACH ROW

TR_TMC_UPD_1	TRIGGER	6	DECLARE

TR_TMC_UPD_1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_TMC_UPD_1	TRIGGER	8	BEGIN

TR_TMC_UPD_1	TRIGGER	9	   IF :new.moved = :old.moved AND :new.removed = :old.removed

TR_TMC_UPD_1	TRIGGER	10	   THEN

TR_TMC_UPD_1	TRIGGER	11	      RETURN;

TR_TMC_UPD_1	TRIGGER	12	   END IF;

TR_TMC_UPD_1	TRIGGER	13	

TR_TMC_UPD_1	TRIGGER	14	   IF :new.removed = 1

TR_TMC_UPD_1	TRIGGER	15	   THEN

TR_TMC_UPD_1	TRIGGER	16	      :NEW.removed_lu := SYSDATE;

TR_TMC_UPD_1	TRIGGER	17	   ELSE

TR_TMC_UPD_1	TRIGGER	18	      :NEW.removed_lu := NULL;

TR_TMC_UPD_1	TRIGGER	19	      :NEW.state_removed := NULL;

TR_TMC_UPD_1	TRIGGER	20	      :NEW.comm_removed := NULL;

TR_TMC_UPD_1	TRIGGER	21	      :NEW.removed_fio := NULL;

TR_TMC_UPD_1	TRIGGER	22	      :NEW.moved := NULL;

TR_TMC_UPD_1	TRIGGER	23	      :NEW.dtr := NULL;

TR_TMC_UPD_1	TRIGGER	24	   END IF;

TR_TMC_UPD_1	TRIGGER	25	

TR_TMC_UPD_1	TRIGGER	26	

TR_TMC_UPD_1	TRIGGER	27	   DELETE FROM tmc

TR_TMC_UPD_1	TRIGGER	28	         WHERE parent = :new.id;

TR_TMC_UPD_1	TRIGGER	29	

TR_TMC_UPD_1	TRIGGER	30	   COMMIT;

TR_TMC_UPD_1	TRIGGER	31	

TR_TMC_UPD_1	TRIGGER	32	   IF :new.moved IS NOT NULL

TR_TMC_UPD_1	TRIGGER	33	   THEN

TR_TMC_UPD_1	TRIGGER	34	      INSERT INTO tmc (tn,

TR_TMC_UPD_1	TRIGGER	35	                       tmcs,

TR_TMC_UPD_1	TRIGGER	36	                       name,

TR_TMC_UPD_1	TRIGGER	37	                       sn,

TR_TMC_UPD_1	TRIGGER	38	                       state,

TR_TMC_UPD_1	TRIGGER	39	                       dtv,

TR_TMC_UPD_1	TRIGGER	40	                       num_avk,

TR_TMC_UPD_1	TRIGGER	41	                       parent,

TR_TMC_UPD_1	TRIGGER	42	                       add_fio,

TR_TMC_UPD_1	TRIGGER	43	                       ZAKUP_PRICE,

TR_TMC_UPD_1	TRIGGER	44	                       ZAKUP_DT,

TR_TMC_UPD_1	TRIGGER	45	                       BUH_DT,

TR_TMC_UPD_1	TRIGGER	46	                       comm)

TR_TMC_UPD_1	TRIGGER	47	           VALUES (:new.moved,

TR_TMC_UPD_1	TRIGGER	48	                   :new.tmcs,

TR_TMC_UPD_1	TRIGGER	49	                   :new.name,

TR_TMC_UPD_1	TRIGGER	50	                   :new.sn,

TR_TMC_UPD_1	TRIGGER	51	                   :new.state_removed,

TR_TMC_UPD_1	TRIGGER	52	                   :new.dtr,

TR_TMC_UPD_1	TRIGGER	53	                   :new.num_avk,

TR_TMC_UPD_1	TRIGGER	54	                   :new.id,

TR_TMC_UPD_1	TRIGGER	55	                   :new.removed_fio,

TR_TMC_UPD_1	TRIGGER	56	                   :new.ZAKUP_PRICE,

TR_TMC_UPD_1	TRIGGER	57	                   :new.ZAKUP_DT,

TR_TMC_UPD_1	TRIGGER	58	                   :new.BUH_DT,

TR_TMC_UPD_1	TRIGGER	59	                   :new.comm);

TR_TMC_UPD_1	TRIGGER	60	

TR_TMC_UPD_1	TRIGGER	61	      COMMIT;

TR_TMC_UPD_1	TRIGGER	62	   END IF;

TR_TMC_UPD_1	TRIGGER	63	END;
TR_TMC_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_TMC_UPD" 

TR_TMC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TMC_UPD	TRIGGER	3	   ON TMC

TR_TMC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMC_UPD	TRIGGER	5	   FOR EACH ROW

TR_TMC_UPD	TRIGGER	6	BEGIN

TR_TMC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_TMC_UPD	TRIGGER	8	END;

TR_TMC_UPD	TRIGGER	9	

TR_TMC_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_TMC_NEW" 

TR_TMC_NEW	TRIGGER	2	   BEFORE INSERT

TR_TMC_NEW	TRIGGER	3	   ON PERSIK.TMC

TR_TMC_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMC_NEW	TRIGGER	5	   FOR EACH ROW

TR_TMC_NEW	TRIGGER	6	BEGIN

TR_TMC_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_TMC_NEW	TRIGGER	8	   THEN

TR_TMC_NEW	TRIGGER	9	      SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_TMC_NEW	TRIGGER	10	   END IF;

TR_TMC_NEW	TRIGGER	11	

TR_TMC_NEW	TRIGGER	12	   :NEW.add_lu := SYSDATE;

TR_TMC_NEW	TRIGGER	13	END;

TR_TMC_NEW	TRIGGER	14	

TR_TMC_DEL_1	TRIGGER	1	TRIGGER "PERSIK"."TR_TMC_DEL_1" 

TR_TMC_DEL_1	TRIGGER	2	   BEFORE DELETE

TR_TMC_DEL_1	TRIGGER	3	   ON PERSIK.TMC

TR_TMC_DEL_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMC_DEL_1	TRIGGER	5	   FOR EACH ROW

TR_TMC_DEL_1	TRIGGER	6	DECLARE

TR_TMC_DEL_1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_TMC_DEL_1	TRIGGER	8	BEGIN

TR_TMC_DEL_1	TRIGGER	9	   DELETE FROM tmc

TR_TMC_DEL_1	TRIGGER	10	         WHERE parent = :old.id;

TR_TMC_DEL_1	TRIGGER	11	

TR_TMC_DEL_1	TRIGGER	12	   COMMIT;

TR_TMC_DEL_1	TRIGGER	13	END;

TR_TMC_DEL_1	TRIGGER	14	

TR_TMCS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_TMCS_UPD" 

TR_TMCS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TMCS_UPD	TRIGGER	3	   ON TMCS

TR_TMCS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMCS_UPD	TRIGGER	5	   FOR EACH ROW

TR_TMCS_UPD	TRIGGER	6	BEGIN

TR_TMCS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_TMCS_UPD	TRIGGER	8	END;

TR_TMCS_UPD	TRIGGER	9	

TR_TMCS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_TMCS_NEW" 

TR_TMCS_NEW	TRIGGER	2	   BEFORE INSERT

TR_TMCS_NEW	TRIGGER	3	   ON TMCS

TR_TMCS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TMCS_NEW	TRIGGER	5	   FOR EACH ROW

TR_TMCS_NEW	TRIGGER	6	BEGIN

TR_TMCS_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_TMCS_NEW	TRIGGER	8	   THEN

TR_TMCS_NEW	TRIGGER	9	      SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_TMCS_NEW	TRIGGER	10	   END IF;

TR_TMCS_NEW	TRIGGER	11	END;

TR_TMCS_NEW	TRIGGER	12	

TR_TEST_OFF	PROCEDURE	1	PROCEDURE          "TR_TEST_OFF" (id_ IN INTEGER)

TR_TEST_OFF	PROCEDURE	2	IS

TR_TEST_OFF	PROCEDURE	3	   tn_           INTEGER;

TR_TEST_OFF	PROCEDURE	4	   tr_name_      VARCHAR2 (1024);

TR_TEST_OFF	PROCEDURE	5	   fio_          VARCHAR2 (1024);

TR_TEST_OFF	PROCEDURE	6	   mail_         VARCHAR2 (1024);

TR_TEST_OFF	PROCEDURE	7	   chief_mail_   VARCHAR2 (1024);

TR_TEST_OFF	PROCEDURE	8	   tr_mail_      VARCHAR2 (1024);

TR_TEST_OFF	PROCEDURE	9	   test_         INTEGER;

TR_TEST_OFF	PROCEDURE	10	BEGIN

TR_TEST_OFF	PROCEDURE	11	   SELECT b.tn,

TR_TEST_OFF	PROCEDURE	12	          tr.name,

TR_TEST_OFF	PROCEDURE	13	          u1.fio,

TR_TEST_OFF	PROCEDURE	14	          u1.e_mail,

TR_TEST_OFF	PROCEDURE	15	          u2.e_mail,

TR_TEST_OFF	PROCEDURE	16	          b.test,

TR_TEST_OFF	PROCEDURE	17	          u3.e_mail

TR_TEST_OFF	PROCEDURE	18	     INTO tn_,

TR_TEST_OFF	PROCEDURE	19	          tr_name_,

TR_TEST_OFF	PROCEDURE	20	          fio_,

TR_TEST_OFF	PROCEDURE	21	          mail_,

TR_TEST_OFF	PROCEDURE	22	          chief_mail_,

TR_TEST_OFF	PROCEDURE	23	          test_,

TR_TEST_OFF	PROCEDURE	24	          tr_mail_

TR_TEST_OFF	PROCEDURE	25	     FROM tr_order_body b,

TR_TEST_OFF	PROCEDURE	26	          tr_order_head h,

TR_TEST_OFF	PROCEDURE	27	          tr,

TR_TEST_OFF	PROCEDURE	28	          user_list u1,

TR_TEST_OFF	PROCEDURE	29	          user_list u2,

TR_TEST_OFF	PROCEDURE	30	          user_list u3,

TR_TEST_OFF	PROCEDURE	31	          parents p

TR_TEST_OFF	PROCEDURE	32	    WHERE h.id = b.head AND tr.id = h.tr AND u1.tn = b.tn AND p.tn = b.tn AND u2.tn = p.parent AND u3.tn = h.tn AND b.id = id_;

TR_TEST_OFF	PROCEDURE	33	

TR_TEST_OFF	PROCEDURE	34	   IF test_ = 1

TR_TEST_OFF	PROCEDURE	35	   THEN

TR_TEST_OFF	PROCEDURE	36	      UPDATE tr_order_body

TR_TEST_OFF	PROCEDURE	37	         SET test = 3

TR_TEST_OFF	PROCEDURE	38	       WHERE id = id_;

TR_TEST_OFF	PROCEDURE	39	

TR_TEST_OFF	PROCEDURE	40	      pr_sendmail (

TR_TEST_OFF	PROCEDURE	41	         mail_,

TR_TEST_OFF	PROCEDURE	42	         'Тестирование',

TR_TEST_OFF	PROCEDURE	43	         'Вы не прошли в установленный срок тестирование по тренингу ' || tr_name_

TR_TEST_OFF	PROCEDURE	44	         || '. <br />Ссылка для прохождения тестирования – неактивна. Для прохождения тестирования Вам необходимо связаться с тренером, проводившим тренинг, и согласовать время активации теста');

TR_TEST_OFF	PROCEDURE	45	      pr_sendmail (chief_mail_ || ',' || tr_mail_,

TR_TEST_OFF	PROCEDURE	46	                   'Тестирование сотрудника ' || fio_ || ' – не проходил тестирование',

TR_TEST_OFF	PROCEDURE	47	                   'Сотрудник ' || fio_ || ' не прошел в установленный срок тестирование по тренингу ' || tr_name_);

TR_TEST_OFF	PROCEDURE	48	   END IF;

TR_TEST_OFF	PROCEDURE	49	END;

TR_TEST_OFF	PROCEDURE	50	 

TR_TEST_OFF	PROCEDURE	51	 

TR_TEST_OFF	PROCEDURE	52	 

TR_TEST_OFF	PROCEDURE	53	 
TR_TASTING_TP_LU	TRIGGER	1	TRIGGER TR_tasting_tp_lu

TR_TASTING_TP_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASTING_TP_LU	TRIGGER	3	   ON tasting_tp

TR_TASTING_TP_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_TP_LU	TRIGGER	5	   FOR EACH ROW

TR_TASTING_TP_LU	TRIGGER	6	BEGIN

TR_TASTING_TP_LU	TRIGGER	7	   :new.lu := SYSDATE;

TR_TASTING_TP_LU	TRIGGER	8	END;
TR_TASTING_PROMOTER_LU	TRIGGER	1	TRIGGER TR_tasting_promoter_lu

TR_TASTING_PROMOTER_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASTING_PROMOTER_LU	TRIGGER	3	   ON tasting_promoter

TR_TASTING_PROMOTER_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_PROMOTER_LU	TRIGGER	5	   FOR EACH ROW

TR_TASTING_PROMOTER_LU	TRIGGER	6	BEGIN

TR_TASTING_PROMOTER_LU	TRIGGER	7	   :new.lu := SYSDATE;

TR_TASTING_PROMOTER_LU	TRIGGER	8	END;
TR_TASTING_PROGRAM_NEW	TRIGGER	1	TRIGGER PERSIK.TR_TASTING_PROGRAM_new

TR_TASTING_PROGRAM_NEW	TRIGGER	2	   BEFORE INSERT

TR_TASTING_PROGRAM_NEW	TRIGGER	3	   ON PERSIK.TASTING_PROGRAM

TR_TASTING_PROGRAM_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_PROGRAM_NEW	TRIGGER	5	   FOR EACH ROW

TR_TASTING_PROGRAM_NEW	TRIGGER	6	BEGIN

TR_TASTING_PROGRAM_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_TASTING_PROGRAM_NEW	TRIGGER	8	END;
TR_TASTING_PROGRAM_LU	TRIGGER	1	TRIGGER PERSIK.TR_TASTING_PROGRAM_lu

TR_TASTING_PROGRAM_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASTING_PROGRAM_LU	TRIGGER	3	   ON PERSIK.TASTING_PROGRAM

TR_TASTING_PROGRAM_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_PROGRAM_LU	TRIGGER	5	   FOR EACH ROW

TR_TASTING_PROGRAM_LU	TRIGGER	6	BEGIN

TR_TASTING_PROGRAM_LU	TRIGGER	7	   :new.lu := SYSDATE;

TR_TASTING_PROGRAM_LU	TRIGGER	8	END;
TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	1	TRIGGER PERSIK.TR_tasting_program_costs_lu

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	3	   ON PERSIK.tasting_program_costs

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	5	   FOR EACH ROW

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	6	BEGIN

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	7	   :new.lu := SYSDATE;

TR_TASTING_PROGRAM_COSTS_LU	TRIGGER	8	END;
TR_TASTING_NEW	TRIGGER	1	TRIGGER TR_tasting_new

TR_TASTING_NEW	TRIGGER	2	   BEFORE INSERT

TR_TASTING_NEW	TRIGGER	3	   ON tasting

TR_TASTING_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_NEW	TRIGGER	5	   FOR EACH ROW

TR_TASTING_NEW	TRIGGER	6	BEGIN

TR_TASTING_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_TASTING_NEW	TRIGGER	8	END;
TR_TASTING_LU	TRIGGER	1	TRIGGER TR_tasting_lu

TR_TASTING_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASTING_LU	TRIGGER	3	   ON tasting

TR_TASTING_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_LU	TRIGGER	5	   FOR EACH ROW

TR_TASTING_LU	TRIGGER	6	BEGIN

TR_TASTING_LU	TRIGGER	7	   :new.lu := SYSDATE;

TR_TASTING_LU	TRIGGER	8	END;
TR_TASTING_LISTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_TASTING_LISTS_new

TR_TASTING_LISTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_TASTING_LISTS_NEW	TRIGGER	3	   ON PERSIK.TASTING_LISTS

TR_TASTING_LISTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_LISTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_TASTING_LISTS_NEW	TRIGGER	6	BEGIN

TR_TASTING_LISTS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_TASTING_LISTS_NEW	TRIGGER	8	END;
TR_TASTING_LISTS_LU	TRIGGER	1	TRIGGER PERSIK.TR_TASTING_LISTS_lu

TR_TASTING_LISTS_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASTING_LISTS_LU	TRIGGER	3	   ON PERSIK.TASTING_LISTS

TR_TASTING_LISTS_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASTING_LISTS_LU	TRIGGER	5	   FOR EACH ROW

TR_TASTING_LISTS_LU	TRIGGER	6	BEGIN

TR_TASTING_LISTS_LU	TRIGGER	7	   :new.lu := SYSDATE;

TR_TASTING_LISTS_LU	TRIGGER	8	END;
TR_TASKS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_TASKS_UPD

TR_TASKS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASKS_UPD	TRIGGER	3	   ON PERSIK.tasks

TR_TASKS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASKS_UPD	TRIGGER	5	   FOR EACH ROW

TR_TASKS_UPD	TRIGGER	6	DECLARE

TR_TASKS_UPD	TRIGGER	7	   subj         VARCHAR2 (255);

TR_TASKS_UPD	TRIGGER	8	   msg          VARCHAR (32767);

TR_TASKS_UPD	TRIGGER	9	   files_list   VARCHAR (4000);

TR_TASKS_UPD	TRIGGER	10	BEGIN

TR_TASKS_UPD	TRIGGER	11	   :new.lu := SYSDATE;

TR_TASKS_UPD	TRIGGER	12	END;
TR_TASKS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_TASKS_NEW

TR_TASKS_NEW	TRIGGER	2	   BEFORE INSERT

TR_TASKS_NEW	TRIGGER	3	   ON PERSIK.tasks

TR_TASKS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASKS_NEW	TRIGGER	5	   FOR EACH ROW

TR_TASKS_NEW	TRIGGER	6	BEGIN

TR_TASKS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_TASKS_NEW	TRIGGER	8	   :new.created := SYSDATE;

TR_TASKS_NEW	TRIGGER	9	END;
TR_TASKS_LU	TRIGGER	1	TRIGGER tr_tasks_lu

TR_TASKS_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASKS_LU	TRIGGER	3	   ON PERSIK.sz_tpl

TR_TASKS_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASKS_LU	TRIGGER	5	   FOR EACH ROW

TR_TASKS_LU	TRIGGER	6	BEGIN

TR_TASKS_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_TASKS_LU	TRIGGER	8	END;
TR_TASKS_FILES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_TASKS_FILES_UPD

TR_TASKS_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_TASKS_FILES_UPD	TRIGGER	3	   ON PERSIK.TASKS_FILES

TR_TASKS_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASKS_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_TASKS_FILES_UPD	TRIGGER	6	BEGIN

TR_TASKS_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_TASKS_FILES_UPD	TRIGGER	8	END;
TR_TASKS_FILES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_TASKS_FILES_NEW

TR_TASKS_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_TASKS_FILES_NEW	TRIGGER	3	   ON PERSIK.TASKS_FILES

TR_TASKS_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_TASKS_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_TASKS_FILES_NEW	TRIGGER	6	BEGIN

TR_TASKS_FILES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_TASKS_FILES_NEW	TRIGGER	8	END;
TR_SZ_VALID_NO_UPD	TRIGGER	1	TRIGGER PERSIK.TR_SZ_VALID_NO_UPD

TR_SZ_VALID_NO_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF valid_no

TR_SZ_VALID_NO_UPD	TRIGGER	3	   ON PERSIK.SZ

TR_SZ_VALID_NO_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_VALID_NO_UPD	TRIGGER	5	   FOR EACH ROW

TR_SZ_VALID_NO_UPD	TRIGGER	6	DECLARE

TR_SZ_VALID_NO_UPD	TRIGGER	7	   msg    VARCHAR2 (4000);

TR_SZ_VALID_NO_UPD	TRIGGER	8	   subj   VARCHAR2 (4000);

TR_SZ_VALID_NO_UPD	TRIGGER	9	BEGIN

TR_SZ_VALID_NO_UPD	TRIGGER	10	   IF :new.valid_no = 1

TR_SZ_VALID_NO_UPD	TRIGGER	11	   THEN

TR_SZ_VALID_NO_UPD	TRIGGER	12	      IF :new.cat = 927679

TR_SZ_VALID_NO_UPD	TRIGGER	13	      THEN

TR_SZ_VALID_NO_UPD	TRIGGER	14	         DELETE FROM vacation

TR_SZ_VALID_NO_UPD	TRIGGER	15	               WHERE sz_id = :new.id;

TR_SZ_VALID_NO_UPD	TRIGGER	16	      END IF;

TR_SZ_VALID_NO_UPD	TRIGGER	17	

TR_SZ_VALID_NO_UPD	TRIGGER	18	      IF :new.cat = 927672

TR_SZ_VALID_NO_UPD	TRIGGER	19	      THEN

TR_SZ_VALID_NO_UPD	TRIGGER	20	         DELETE FROM bonus_head

TR_SZ_VALID_NO_UPD	TRIGGER	21	               WHERE sz_id = :new.id;

TR_SZ_VALID_NO_UPD	TRIGGER	22	      END IF;

TR_SZ_VALID_NO_UPD	TRIGGER	23	

TR_SZ_VALID_NO_UPD	TRIGGER	24	

TR_SZ_VALID_NO_UPD	TRIGGER	25	      :NEW.valid_lu := SYSDATE;

TR_SZ_VALID_NO_UPD	TRIGGER	26	

TR_SZ_VALID_NO_UPD	TRIGGER	27	      msg :=

TR_SZ_VALID_NO_UPD	TRIGGER	28	            'Выставил статус «НЕДЕЙСТВИТЕЛЬНАЯ СЗ» - '

TR_SZ_VALID_NO_UPD	TRIGGER	29	         || fn_getname (:new.valid_tn)

TR_SZ_VALID_NO_UPD	TRIGGER	30	         || '<br>Дата выставления статуса: '

TR_SZ_VALID_NO_UPD	TRIGGER	31	         || TO_CHAR (:new.valid_lu, 'dd/mm/yyyy hh24:mi:ss')

TR_SZ_VALID_NO_UPD	TRIGGER	32	         || '<br>Причина выставления статуса:<br>'

TR_SZ_VALID_NO_UPD	TRIGGER	33	         || :new.valid_text;

TR_SZ_VALID_NO_UPD	TRIGGER	34	

TR_SZ_VALID_NO_UPD	TRIGGER	35	      subj :=

TR_SZ_VALID_NO_UPD	TRIGGER	36	            'СЗ №'

TR_SZ_VALID_NO_UPD	TRIGGER	37	         || TO_CHAR (:new.id)

TR_SZ_VALID_NO_UPD	TRIGGER	38	         || ' по теме: '

TR_SZ_VALID_NO_UPD	TRIGGER	39	         || :new.head

TR_SZ_VALID_NO_UPD	TRIGGER	40	         || ' от '

TR_SZ_VALID_NO_UPD	TRIGGER	41	         || TO_CHAR (:new.created, 'dd/mm/yyyy')

TR_SZ_VALID_NO_UPD	TRIGGER	42	         || ' признана недействительной';

TR_SZ_VALID_NO_UPD	TRIGGER	43	

TR_SZ_VALID_NO_UPD	TRIGGER	44	      FOR a IN (SELECT DISTINCT u.e_mail

TR_SZ_VALID_NO_UPD	TRIGGER	45	                  FROM (SELECT tn

TR_SZ_VALID_NO_UPD	TRIGGER	46	                          FROM sz_executors

TR_SZ_VALID_NO_UPD	TRIGGER	47	                         WHERE sz_id = :new.id

TR_SZ_VALID_NO_UPD	TRIGGER	48	                        UNION

TR_SZ_VALID_NO_UPD	TRIGGER	49	                        SELECT tn

TR_SZ_VALID_NO_UPD	TRIGGER	50	                          FROM sz_accept

TR_SZ_VALID_NO_UPD	TRIGGER	51	                         WHERE sz_id = :new.id

TR_SZ_VALID_NO_UPD	TRIGGER	52	                        UNION

TR_SZ_VALID_NO_UPD	TRIGGER	53	                        SELECT :new.tn FROM DUAL) l,

TR_SZ_VALID_NO_UPD	TRIGGER	54	                       user_list u

TR_SZ_VALID_NO_UPD	TRIGGER	55	                 WHERE l.tn = u.tn AND e_mail IS NOT NULL)

TR_SZ_VALID_NO_UPD	TRIGGER	56	      LOOP

TR_SZ_VALID_NO_UPD	TRIGGER	57	         pr_sendmail (a.e_mail, subj, msg);

TR_SZ_VALID_NO_UPD	TRIGGER	58	      END LOOP;

TR_SZ_VALID_NO_UPD	TRIGGER	59	   ELSE

TR_SZ_VALID_NO_UPD	TRIGGER	60	      :NEW.valid_lu := NULL;

TR_SZ_VALID_NO_UPD	TRIGGER	61	      :NEW.valid_tn := NULL;

TR_SZ_VALID_NO_UPD	TRIGGER	62	      :NEW.valid_text := NULL;

TR_SZ_VALID_NO_UPD	TRIGGER	63	   END IF;

TR_SZ_VALID_NO_UPD	TRIGGER	64	END;
TR_SZ_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_UPD" 

TR_SZ_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SZ_UPD	TRIGGER	3	   ON PERSIK.SZ

TR_SZ_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_UPD	TRIGGER	5	   FOR EACH ROW

TR_SZ_UPD	TRIGGER	6	BEGIN

TR_SZ_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_SZ_UPD	TRIGGER	8	END;

TR_SZ_UPD	TRIGGER	9	

TR_SZ_UPD	TRIGGER	10	

TR_SZ_UPD	TRIGGER	11	

TR_SZ_TPL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_TPL_NEW" 

TR_SZ_TPL_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_TPL_NEW	TRIGGER	3	   ON PERSIK.sz_tpl    REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_TPL_NEW	TRIGGER	4	   FOR EACH ROW

TR_SZ_TPL_NEW	TRIGGER	5	BEGIN

TR_SZ_TPL_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_SZ_TPL_NEW	TRIGGER	7	END tr_sz_tpl_new;

TR_SZ_TPL_NEW	TRIGGER	8	

TR_SZ_TPL_NEW	TRIGGER	9	

TR_SZ_TPL_NEW	TRIGGER	10	

TR_SZ_NEW	TRIGGER	1	TRIGGER PERSIK.TR_SZ_NEW

TR_SZ_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_NEW	TRIGGER	3	   ON PERSIK.SZ

TR_SZ_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_NEW	TRIGGER	5	   FOR EACH ROW

TR_SZ_NEW	TRIGGER	6	BEGIN

TR_SZ_NEW	TRIGGER	7	   :new.id := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_SZ_NEW	TRIGGER	8	   :NEW.created := SYSDATE;

TR_SZ_NEW	TRIGGER	9	END;
TR_SZ_FILES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_FILES_UPD" 

TR_SZ_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SZ_FILES_UPD	TRIGGER	3	   ON PERSIK.SZ_FILES

TR_SZ_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_SZ_FILES_UPD	TRIGGER	6	BEGIN

TR_SZ_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_SZ_FILES_UPD	TRIGGER	8	END;

TR_SZ_FILES_UPD	TRIGGER	9	

TR_SZ_FILES_UPD	TRIGGER	10	

TR_SZ_FILES_UPD	TRIGGER	11	

TR_SZ_FILES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_FILES_NEW" 

TR_SZ_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_FILES_NEW	TRIGGER	3	   ON PERSIK.SZ_FILES

TR_SZ_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_SZ_FILES_NEW	TRIGGER	6	BEGIN

TR_SZ_FILES_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_SZ_FILES_NEW	TRIGGER	8	END;

TR_SZ_FILES_NEW	TRIGGER	9	

TR_SZ_FILES_NEW	TRIGGER	10	

TR_SZ_FILES_NEW	TRIGGER	11	

TR_SZ_EXECUTORS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_EXECUTORS_UPD" 

TR_SZ_EXECUTORS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SZ_EXECUTORS_UPD	TRIGGER	3	   ON PERSIK.SZ_EXECUTORS

TR_SZ_EXECUTORS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_EXECUTORS_UPD	TRIGGER	5	   FOR EACH ROW

TR_SZ_EXECUTORS_UPD	TRIGGER	6	BEGIN

TR_SZ_EXECUTORS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_SZ_EXECUTORS_UPD	TRIGGER	8	END;

TR_SZ_EXECUTORS_UPD	TRIGGER	9	

TR_SZ_EXECUTORS_UPD	TRIGGER	10	

TR_SZ_EXECUTORS_UPD	TRIGGER	11	

TR_SZ_EXECUTORS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_EXECUTORS_NEW" 

TR_SZ_EXECUTORS_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_EXECUTORS_NEW	TRIGGER	3	   ON PERSIK.SZ_EXECUTORS

TR_SZ_EXECUTORS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_EXECUTORS_NEW	TRIGGER	5	   FOR EACH ROW

TR_SZ_EXECUTORS_NEW	TRIGGER	6	DECLARE

TR_SZ_EXECUTORS_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_SZ_EXECUTORS_NEW	TRIGGER	8	BEGIN

TR_SZ_EXECUTORS_NEW	TRIGGER	9	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_SZ_EXECUTORS_NEW	TRIGGER	10	

TR_SZ_EXECUTORS_NEW	TRIGGER	11	

TR_SZ_EXECUTORS_NEW	TRIGGER	12	   SELECT NVL (MAX (execute_order), 0) + 1

TR_SZ_EXECUTORS_NEW	TRIGGER	13	     INTO :new.execute_order

TR_SZ_EXECUTORS_NEW	TRIGGER	14	     FROM SZ_EXECUTORS

TR_SZ_EXECUTORS_NEW	TRIGGER	15	    WHERE sz_id = :new.sz_id;

TR_SZ_EXECUTORS_NEW	TRIGGER	16	END;

TR_SZ_EXECUTORS_NEW	TRIGGER	17	

TR_SZ_EXECUTORS_NEW	TRIGGER	18	

TR_SZ_EXECUTORS_NEW	TRIGGER	19	

TR_SZ_DEL	TRIGGER	1	TRIGGER PERSIK.TR_SZ_DEL

TR_SZ_DEL	TRIGGER	2	   BEFORE DELETE

TR_SZ_DEL	TRIGGER	3	   ON PERSIK.SZ

TR_SZ_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_DEL	TRIGGER	5	   FOR EACH ROW

TR_SZ_DEL	TRIGGER	6	DECLARE

TR_SZ_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_SZ_DEL	TRIGGER	8	BEGIN

TR_SZ_DEL	TRIGGER	9	   DELETE FROM sz_accept

TR_SZ_DEL	TRIGGER	10	         WHERE sz_id = :old.id;

TR_SZ_DEL	TRIGGER	11	

TR_SZ_DEL	TRIGGER	12	   DELETE FROM sz_executors

TR_SZ_DEL	TRIGGER	13	         WHERE sz_id = :old.id;

TR_SZ_DEL	TRIGGER	14	

TR_SZ_DEL	TRIGGER	15	   DELETE FROM sz_files

TR_SZ_DEL	TRIGGER	16	         WHERE sz_id = :old.id;

TR_SZ_DEL	TRIGGER	17	

TR_SZ_DEL	TRIGGER	18	   DELETE FROM sz_chat

TR_SZ_DEL	TRIGGER	19	         WHERE sz_id = :old.id;

TR_SZ_DEL	TRIGGER	20	

TR_SZ_DEL	TRIGGER	21	   IF :old.cat = 927679

TR_SZ_DEL	TRIGGER	22	   THEN

TR_SZ_DEL	TRIGGER	23	      DELETE FROM vacation

TR_SZ_DEL	TRIGGER	24	            WHERE sz_id = :old.id;

TR_SZ_DEL	TRIGGER	25	   END IF;

TR_SZ_DEL	TRIGGER	26	

TR_SZ_DEL	TRIGGER	27	   IF :old.cat = 927672

TR_SZ_DEL	TRIGGER	28	   THEN

TR_SZ_DEL	TRIGGER	29	      DELETE FROM bonus_head

TR_SZ_DEL	TRIGGER	30	            WHERE sz_id = :old.id;

TR_SZ_DEL	TRIGGER	31	   END IF;

TR_SZ_DEL	TRIGGER	32	

TR_SZ_DEL	TRIGGER	33	   COMMIT;

TR_SZ_DEL	TRIGGER	34	END;
TR_SZ_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_CHAT_UPD" 

TR_SZ_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SZ_CHAT_UPD	TRIGGER	3	   ON PERSIK.SZ_CHAT    REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_CHAT_UPD	TRIGGER	4	   FOR EACH ROW

TR_SZ_CHAT_UPD	TRIGGER	5	BEGIN

TR_SZ_CHAT_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_SZ_CHAT_UPD	TRIGGER	7	END;

TR_SZ_CHAT_UPD	TRIGGER	8	

TR_SZ_CHAT_UPD	TRIGGER	9	

TR_SZ_CHAT_UPD	TRIGGER	10	

TR_SZ_CHAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_CHAT_NEW" 

TR_SZ_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_CHAT_NEW	TRIGGER	3	   ON PERSIK.SZ_CHAT    REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_CHAT_NEW	TRIGGER	4	   FOR EACH ROW

TR_SZ_CHAT_NEW	TRIGGER	5	BEGIN

TR_SZ_CHAT_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_SZ_CHAT_NEW	TRIGGER	7	END;

TR_SZ_CHAT_NEW	TRIGGER	8	

TR_SZ_CHAT_NEW	TRIGGER	9	

TR_SZ_CHAT_NEW	TRIGGER	10	

TR_SZ_CAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_CAT_UPD" 

TR_SZ_CAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SZ_CAT_UPD	TRIGGER	3	   ON PERSIK.sz_cat

TR_SZ_CAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_CAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_SZ_CAT_UPD	TRIGGER	6	BEGIN

TR_SZ_CAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_SZ_CAT_UPD	TRIGGER	8	END;

TR_SZ_CAT_UPD	TRIGGER	9	

TR_SZ_CAT_UPD	TRIGGER	10	

TR_SZ_CAT_UPD	TRIGGER	11	

TR_SZ_CAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_SZ_CAT_NEW" 

TR_SZ_CAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_CAT_NEW	TRIGGER	3	   ON PERSIK.sz_cat

TR_SZ_CAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_CAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_SZ_CAT_NEW	TRIGGER	6	BEGIN

TR_SZ_CAT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_SZ_CAT_NEW	TRIGGER	8	END;

TR_SZ_CAT_NEW	TRIGGER	9	

TR_SZ_CAT_NEW	TRIGGER	10	

TR_SZ_CAT_NEW	TRIGGER	11	

TR_SZ_ACCEPT_UPD	TRIGGER	1	TRIGGER TR_SZ_ACCEPT_UPD

TR_SZ_ACCEPT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF accepted

TR_SZ_ACCEPT_UPD	TRIGGER	3	   ON SZ_ACCEPT

TR_SZ_ACCEPT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_ACCEPT_UPD	TRIGGER	5	   FOR EACH ROW

TR_SZ_ACCEPT_UPD	TRIGGER	6	DECLARE

TR_SZ_ACCEPT_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_SZ_ACCEPT_UPD	TRIGGER	8	BEGIN

TR_SZ_ACCEPT_UPD	TRIGGER	9	   IF :old.accepted IN (1, 2)

TR_SZ_ACCEPT_UPD	TRIGGER	10	   THEN

TR_SZ_ACCEPT_UPD	TRIGGER	11	      INSERT INTO full_log (text, prg)

TR_SZ_ACCEPT_UPD	TRIGGER	12	           VALUES (

TR_SZ_ACCEPT_UPD	TRIGGER	13	                        'попытка повторного подтверждения СЗ №'

TR_SZ_ACCEPT_UPD	TRIGGER	14	                     || TO_CHAR (:old.sz_id),

TR_SZ_ACCEPT_UPD	TRIGGER	15	                     'error');

TR_SZ_ACCEPT_UPD	TRIGGER	16	

TR_SZ_ACCEPT_UPD	TRIGGER	17	      COMMIT;

TR_SZ_ACCEPT_UPD	TRIGGER	18	      raise_application_error (

TR_SZ_ACCEPT_UPD	TRIGGER	19	         -20000,

TR_SZ_ACCEPT_UPD	TRIGGER	20	         'попытка повторного подтверждения СЗ');

TR_SZ_ACCEPT_UPD	TRIGGER	21	   ELSE

TR_SZ_ACCEPT_UPD	TRIGGER	22	      :NEW.lu := SYSDATE;

TR_SZ_ACCEPT_UPD	TRIGGER	23	   END IF;

TR_SZ_ACCEPT_UPD	TRIGGER	24	END;
TR_SZ_ACCEPT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_SZ_ACCEPT_NEW

TR_SZ_ACCEPT_NEW	TRIGGER	2	   BEFORE INSERT

TR_SZ_ACCEPT_NEW	TRIGGER	3	   ON PERSIK.SZ_ACCEPT

TR_SZ_ACCEPT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SZ_ACCEPT_NEW	TRIGGER	5	   FOR EACH ROW

TR_SZ_ACCEPT_NEW	TRIGGER	6	DECLARE

TR_SZ_ACCEPT_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_SZ_ACCEPT_NEW	TRIGGER	8	   m   VARCHAR2 (512);

TR_SZ_ACCEPT_NEW	TRIGGER	9	   i   INTEGER;

TR_SZ_ACCEPT_NEW	TRIGGER	10	BEGIN

TR_SZ_ACCEPT_NEW	TRIGGER	11	   :new.tn := Get_Vac_Repl (:new.tn, 'sz');

TR_SZ_ACCEPT_NEW	TRIGGER	12	   :new.id := seq_all.NEXTVAL;

TR_SZ_ACCEPT_NEW	TRIGGER	13	   :new.created := SYSDATE;

TR_SZ_ACCEPT_NEW	TRIGGER	14	   :new.accepted := 0;

TR_SZ_ACCEPT_NEW	TRIGGER	15	

TR_SZ_ACCEPT_NEW	TRIGGER	16	   FOR a IN (SELECT child

TR_SZ_ACCEPT_NEW	TRIGGER	17	               FROM assist

TR_SZ_ACCEPT_NEW	TRIGGER	18	              WHERE     parent = :new.tn

TR_SZ_ACCEPT_NEW	TRIGGER	19	                    AND /*(SELECT dpt_id

TR_SZ_ACCEPT_NEW	TRIGGER	20	                           FROM user_list

TR_SZ_ACCEPT_NEW	TRIGGER	21	                          WHERE tn = child)*/

TR_SZ_ACCEPT_NEW	TRIGGER	22	                       dpt_id = (SELECT dpt_id

TR_SZ_ACCEPT_NEW	TRIGGER	23	                                   FROM user_list

TR_SZ_ACCEPT_NEW	TRIGGER	24	                                  WHERE tn = (SELECT tn

TR_SZ_ACCEPT_NEW	TRIGGER	25	                                                FROM sz

TR_SZ_ACCEPT_NEW	TRIGGER	26	                                               WHERE id = :new.sz_id))

TR_SZ_ACCEPT_NEW	TRIGGER	27	                    AND accept = 1)

TR_SZ_ACCEPT_NEW	TRIGGER	28	   LOOP

TR_SZ_ACCEPT_NEW	TRIGGER	29	      -- добавляем ассистента, только если в согласователях нет ни его самого ни его рук-ля.

TR_SZ_ACCEPT_NEW	TRIGGER	30	      SELECT COUNT (*)

TR_SZ_ACCEPT_NEW	TRIGGER	31	        INTO i

TR_SZ_ACCEPT_NEW	TRIGGER	32	        FROM sz_accept

TR_SZ_ACCEPT_NEW	TRIGGER	33	       WHERE     sz_id = :new.sz_id

TR_SZ_ACCEPT_NEW	TRIGGER	34	             AND tn IN (:new.tn, Get_Vac_Repl (a.child, 'sz'));

TR_SZ_ACCEPT_NEW	TRIGGER	35	

TR_SZ_ACCEPT_NEW	TRIGGER	36	      IF i = 0

TR_SZ_ACCEPT_NEW	TRIGGER	37	      THEN

TR_SZ_ACCEPT_NEW	TRIGGER	38	         INSERT INTO sz_accept (sz_id, tn, child)

TR_SZ_ACCEPT_NEW	TRIGGER	39	              VALUES (:new.sz_id, Get_Vac_Repl (a.child, 'sz'), 1);

TR_SZ_ACCEPT_NEW	TRIGGER	40	

TR_SZ_ACCEPT_NEW	TRIGGER	41	         COMMIT;

TR_SZ_ACCEPT_NEW	TRIGGER	42	      END IF;

TR_SZ_ACCEPT_NEW	TRIGGER	43	   END LOOP;

TR_SZ_ACCEPT_NEW	TRIGGER	44	

TR_SZ_ACCEPT_NEW	TRIGGER	45	   SELECT COUNT (*)

TR_SZ_ACCEPT_NEW	TRIGGER	46	     INTO i

TR_SZ_ACCEPT_NEW	TRIGGER	47	     FROM sz_accept

TR_SZ_ACCEPT_NEW	TRIGGER	48	    WHERE sz_id = :new.sz_id;

TR_SZ_ACCEPT_NEW	TRIGGER	49	

TR_SZ_ACCEPT_NEW	TRIGGER	50	   IF i = 0

TR_SZ_ACCEPT_NEW	TRIGGER	51	   THEN

TR_SZ_ACCEPT_NEW	TRIGGER	52	      :new.accept_order := 1;

TR_SZ_ACCEPT_NEW	TRIGGER	53	   ELSE

TR_SZ_ACCEPT_NEW	TRIGGER	54	      SELECT NVL (MAX (accept_order), 0) + 1

TR_SZ_ACCEPT_NEW	TRIGGER	55	        INTO :new.accept_order

TR_SZ_ACCEPT_NEW	TRIGGER	56	        FROM sz_accept

TR_SZ_ACCEPT_NEW	TRIGGER	57	       WHERE sz_id = :new.sz_id;

TR_SZ_ACCEPT_NEW	TRIGGER	58	   END IF;

TR_SZ_ACCEPT_NEW	TRIGGER	59	

TR_SZ_ACCEPT_NEW	TRIGGER	60	   IF :new.accept_order = 1

TR_SZ_ACCEPT_NEW	TRIGGER	61	   THEN

TR_SZ_ACCEPT_NEW	TRIGGER	62	      SELECT e_mail

TR_SZ_ACCEPT_NEW	TRIGGER	63	        INTO m

TR_SZ_ACCEPT_NEW	TRIGGER	64	        FROM user_list

TR_SZ_ACCEPT_NEW	TRIGGER	65	       WHERE tn = :new.tn;

TR_SZ_ACCEPT_NEW	TRIGGER	66	

TR_SZ_ACCEPT_NEW	TRIGGER	67	      FOR a IN (SELECT sz.head,

TR_SZ_ACCEPT_NEW	TRIGGER	68	                       sz.created,

TR_SZ_ACCEPT_NEW	TRIGGER	69	                       u.fio,

TR_SZ_ACCEPT_NEW	TRIGGER	70	                       u.pos_name,

TR_SZ_ACCEPT_NEW	TRIGGER	71	                       u.department_name,

TR_SZ_ACCEPT_NEW	TRIGGER	72	                       u.e_mail

TR_SZ_ACCEPT_NEW	TRIGGER	73	                  FROM sz, user_list u

TR_SZ_ACCEPT_NEW	TRIGGER	74	                 WHERE sz.id = :new.sz_id AND u.tn = sz.tn)

TR_SZ_ACCEPT_NEW	TRIGGER	75	      LOOP

TR_SZ_ACCEPT_NEW	TRIGGER	76	         PR_SENDMAIL (

TR_SZ_ACCEPT_NEW	TRIGGER	77	            m,

TR_SZ_ACCEPT_NEW	TRIGGER	78	               'Подтверждение служебной записки №'

TR_SZ_ACCEPT_NEW	TRIGGER	79	            || :new.sz_id

TR_SZ_ACCEPT_NEW	TRIGGER	80	            || ' по теме: '

TR_SZ_ACCEPT_NEW	TRIGGER	81	            || a.head

TR_SZ_ACCEPT_NEW	TRIGGER	82	            || ' от '

TR_SZ_ACCEPT_NEW	TRIGGER	83	            || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss'),

TR_SZ_ACCEPT_NEW	TRIGGER	84	               'Служебная записка №'

TR_SZ_ACCEPT_NEW	TRIGGER	85	            || :new.sz_id

TR_SZ_ACCEPT_NEW	TRIGGER	86	            || ' по теме: '

TR_SZ_ACCEPT_NEW	TRIGGER	87	            || a.head

TR_SZ_ACCEPT_NEW	TRIGGER	88	            || ' от '

TR_SZ_ACCEPT_NEW	TRIGGER	89	            || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss')

TR_SZ_ACCEPT_NEW	TRIGGER	90	            || ' ожидает вашего подтверждения'

TR_SZ_ACCEPT_NEW	TRIGGER	91	            || '<br>ФИО инициатора: '

TR_SZ_ACCEPT_NEW	TRIGGER	92	            || a.fio

TR_SZ_ACCEPT_NEW	TRIGGER	93	            || '<br>Должность инициатора: '

TR_SZ_ACCEPT_NEW	TRIGGER	94	            || a.pos_name

TR_SZ_ACCEPT_NEW	TRIGGER	95	            || '<br>Подразделение инициатора: '

TR_SZ_ACCEPT_NEW	TRIGGER	96	            || a.department_name

TR_SZ_ACCEPT_NEW	TRIGGER	97	            || '<br><a href="https://ps.avk.ua/?action=sz_accept">Ссылка</a> на реестр документов, ожидающих подтверждение');

TR_SZ_ACCEPT_NEW	TRIGGER	98	      END LOOP;

TR_SZ_ACCEPT_NEW	TRIGGER	99	   END IF;

TR_SZ_ACCEPT_NEW	TRIGGER	100	END;
TR_STATYA_UPDATE	TRIGGER	1	TRIGGER TR_statya_UPDATE

TR_STATYA_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_STATYA_UPDATE	TRIGGER	3	   ON persik.statya

TR_STATYA_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_STATYA_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_STATYA_UPDATE	TRIGGER	6	BEGIN

TR_STATYA_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_STATYA_UPDATE	TRIGGER	8	END;
TR_STATYA_NEW	TRIGGER	1	TRIGGER TR_statya_NEW

TR_STATYA_NEW	TRIGGER	2	   BEFORE INSERT

TR_STATYA_NEW	TRIGGER	3	   ON persik.statya

TR_STATYA_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_STATYA_NEW	TRIGGER	5	   FOR EACH ROW

TR_STATYA_NEW	TRIGGER	6	BEGIN

TR_STATYA_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_STATYA_NEW	TRIGGER	8	   THEN

TR_STATYA_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_STATYA_NEW	TRIGGER	10	   END IF;

TR_STATYA_NEW	TRIGGER	11	END;
TR_STATYA_DEL	TRIGGER	1	TRIGGER PERSIK.TR_statya_DEL

TR_STATYA_DEL	TRIGGER	2	   BEFORE DELETE

TR_STATYA_DEL	TRIGGER	3	   ON PERSIK.statya

TR_STATYA_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_STATYA_DEL	TRIGGER	5	   FOR EACH ROW

TR_STATYA_DEL	TRIGGER	6	DECLARE

TR_STATYA_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_STATYA_DEL	TRIGGER	8	   c   INTEGER;

TR_STATYA_DEL	TRIGGER	9	BEGIN

TR_STATYA_DEL	TRIGGER	10	   SELECT COUNT (*)

TR_STATYA_DEL	TRIGGER	11	     INTO c

TR_STATYA_DEL	TRIGGER	12	     FROM nets_plan_month

TR_STATYA_DEL	TRIGGER	13	    WHERE statya = :old.id;

TR_STATYA_DEL	TRIGGER	14	

TR_STATYA_DEL	TRIGGER	15	   IF c > 0

TR_STATYA_DEL	TRIGGER	16	   THEN

TR_STATYA_DEL	TRIGGER	17	      raise_application_error (

TR_STATYA_DEL	TRIGGER	18	         -20001,

TR_STATYA_DEL	TRIGGER	19	         'can not delete item, linked cost items exist');

TR_STATYA_DEL	TRIGGER	20	   END IF;

TR_STATYA_DEL	TRIGGER	21	

TR_STATYA_DEL	TRIGGER	22	   DELETE FROM statya

TR_STATYA_DEL	TRIGGER	23	         WHERE parent = :old.id;

TR_STATYA_DEL	TRIGGER	24	

TR_STATYA_DEL	TRIGGER	25	   COMMIT;

TR_STATYA_DEL	TRIGGER	26	END;
TR_SPR_USERS_ETA_UPD	TRIGGER	1	TRIGGER PERSIK.TR_SPR_USERS_ETA_UPD

TR_SPR_USERS_ETA_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SPR_USERS_ETA_UPD	TRIGGER	3	   ON PERSIK.SPR_USERS_ETA

TR_SPR_USERS_ETA_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_SPR_USERS_ETA_UPD	TRIGGER	5	   FOR EACH ROW

TR_SPR_USERS_ETA_UPD	TRIGGER	6	BEGIN

TR_SPR_USERS_ETA_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_SPR_USERS_ETA_UPD	TRIGGER	8	

TR_SPR_USERS_ETA_UPD	TRIGGER	9	   IF :new.reserv = 0

TR_SPR_USERS_ETA_UPD	TRIGGER	10	   THEN

TR_SPR_USERS_ETA_UPD	TRIGGER	11	      :new.reserv_dt := NULL;

TR_SPR_USERS_ETA_UPD	TRIGGER	12	   END IF;

TR_SPR_USERS_ETA_UPD	TRIGGER	13	END;
TR_SPR_USERS_ETA_NEW	TRIGGER	1	TRIGGER TR_SPR_USERS_ETA_NEW

TR_SPR_USERS_ETA_NEW	TRIGGER	2	   BEFORE INSERT

TR_SPR_USERS_ETA_NEW	TRIGGER	3	   ON SPR_USERS_ETA

TR_SPR_USERS_ETA_NEW	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_SPR_USERS_ETA_NEW	TRIGGER	5	   FOR EACH ROW

TR_SPR_USERS_ETA_NEW	TRIGGER	6	DECLARE

TR_SPR_USERS_ETA_NEW	TRIGGER	7	   i         INTEGER;

TR_SPR_USERS_ETA_NEW	TRIGGER	8	

TR_SPR_USERS_ETA_NEW	TRIGGER	9	   pos_id_   INTEGER;

TR_SPR_USERS_ETA_NEW	TRIGGER	10	BEGIN

TR_SPR_USERS_ETA_NEW	TRIGGER	11	   i := seq_eta.NEXTVAL;

TR_SPR_USERS_ETA_NEW	TRIGGER	12	   :new.lu := SYSDATE;

TR_SPR_USERS_ETA_NEW	TRIGGER	13	   :new.id := seq_all.NEXTVAL;

TR_SPR_USERS_ETA_NEW	TRIGGER	14	   :new.h_eta := md5hash (:new.eta);

TR_SPR_USERS_ETA_NEW	TRIGGER	15	   :new.login := 'eta' || SUBSTR ('0000' || TO_CHAR (i), -5, 5);

TR_SPR_USERS_ETA_NEW	TRIGGER	16	

TR_SPR_USERS_ETA_NEW	TRIGGER	17	   BEGIN

TR_SPR_USERS_ETA_NEW	TRIGGER	18	      SELECT pos_id

TR_SPR_USERS_ETA_NEW	TRIGGER	19	        INTO pos_id_

TR_SPR_USERS_ETA_NEW	TRIGGER	20	        FROM user_list

TR_SPR_USERS_ETA_NEW	TRIGGER	21	       WHERE     tab_num = (SELECT MAX (tab_number)

TR_SPR_USERS_ETA_NEW	TRIGGER	22	                              FROM routes

TR_SPR_USERS_ETA_NEW	TRIGGER	23	                             WHERE h_eta = :new.h_eta)

TR_SPR_USERS_ETA_NEW	TRIGGER	24	             AND dpt_id = :new.dpt_id;

TR_SPR_USERS_ETA_NEW	TRIGGER	25	

TR_SPR_USERS_ETA_NEW	TRIGGER	26	      IF pos_id_ IN (24, 34)

TR_SPR_USERS_ETA_NEW	TRIGGER	27	      THEN

TR_SPR_USERS_ETA_NEW	TRIGGER	28	         :new.is_eta_kk := 1;

TR_SPR_USERS_ETA_NEW	TRIGGER	29	      END IF;

TR_SPR_USERS_ETA_NEW	TRIGGER	30	   EXCEPTION

TR_SPR_USERS_ETA_NEW	TRIGGER	31	      WHEN OTHERS

TR_SPR_USERS_ETA_NEW	TRIGGER	32	      THEN

TR_SPR_USERS_ETA_NEW	TRIGGER	33	         NULL;

TR_SPR_USERS_ETA_NEW	TRIGGER	34	   END;

TR_SPR_USERS_ETA_NEW	TRIGGER	35	

TR_SPR_USERS_ETA_NEW	TRIGGER	36	   INSERT INTO spr_users (fio,

TR_SPR_USERS_ETA_NEW	TRIGGER	37	                          PASSWORD,

TR_SPR_USERS_ETA_NEW	TRIGGER	38	                          login,

TR_SPR_USERS_ETA_NEW	TRIGGER	39	                          access_ocenka,

TR_SPR_USERS_ETA_NEW	TRIGGER	40	                          tn)

TR_SPR_USERS_ETA_NEW	TRIGGER	41	        VALUES (:new.eta,

TR_SPR_USERS_ETA_NEW	TRIGGER	42	                DBMS_RANDOM.STRING ('A', 4),

TR_SPR_USERS_ETA_NEW	TRIGGER	43	                :new.login,

TR_SPR_USERS_ETA_NEW	TRIGGER	44	                1,

TR_SPR_USERS_ETA_NEW	TRIGGER	45	                0);

TR_SPR_USERS_ETA_NEW	TRIGGER	46	END tr_spr_users_eta_new;
TR_SESSION_VARS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_SESSION_VARS_UPD

TR_SESSION_VARS_UPD	TRIGGER	2	   BEFORE INSERT or update

TR_SESSION_VARS_UPD	TRIGGER	3	   ON PERSIK.session_vars

TR_SESSION_VARS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SESSION_VARS_UPD	TRIGGER	5	   FOR EACH ROW

TR_SESSION_VARS_UPD	TRIGGER	6	BEGIN

TR_SESSION_VARS_UPD	TRIGGER	7	   :NEW.lu := sysdate;

TR_SESSION_VARS_UPD	TRIGGER	8	END;
TR_SESSION_VARS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_SESSION_VARS_NEW

TR_SESSION_VARS_NEW	TRIGGER	2	   BEFORE INSERT

TR_SESSION_VARS_NEW	TRIGGER	3	   ON PERSIK.session_vars

TR_SESSION_VARS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SESSION_VARS_NEW	TRIGGER	5	   FOR EACH ROW

TR_SESSION_VARS_NEW	TRIGGER	6	BEGIN

TR_SESSION_VARS_NEW	TRIGGER	7	   :NEW.ID := SEQ_ALL.NEXTVAL;

TR_SESSION_VARS_NEW	TRIGGER	8	END;
TR_SCMOVEZAY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_SCMOVEZAY_UPD

TR_SCMOVEZAY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SCMOVEZAY_UPD	TRIGGER	3	   ON persik.scmovezay

TR_SCMOVEZAY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SCMOVEZAY_UPD	TRIGGER	5	   FOR EACH ROW

TR_SCMOVEZAY_UPD	TRIGGER	6	BEGIN

TR_SCMOVEZAY_UPD	TRIGGER	7	   IF :new.tpfrom IS NOT NULL

TR_SCMOVEZAY_UPD	TRIGGER	8	   THEN

TR_SCMOVEZAY_UPD	TRIGGER	9	      SELECT MAX (

TR_SCMOVEZAY_UPD	TRIGGER	10	                   u.fio

TR_SCMOVEZAY_UPD	TRIGGER	11	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	12	                || r.eta

TR_SCMOVEZAY_UPD	TRIGGER	13	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	14	                || r.tp_name

TR_SCMOVEZAY_UPD	TRIGGER	15	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	16	                || r.address

TR_SCMOVEZAY_UPD	TRIGGER	17	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	18	                || r.tp_kod

TR_SCMOVEZAY_UPD	TRIGGER	19	                || '/'

TR_SCMOVEZAY_UPD	TRIGGER	20	                || vw.dm_id)

TR_SCMOVEZAY_UPD	TRIGGER	21	        INTO :new.tpnamefrom

TR_SCMOVEZAY_UPD	TRIGGER	22	        FROM routes r, user_list u, VW_TPDM_VS_TPDW vw

TR_SCMOVEZAY_UPD	TRIGGER	23	       WHERE     vw.ol_id(+) = r.tp_kod

TR_SCMOVEZAY_UPD	TRIGGER	24	             AND u.tab_num = r.tab_number

TR_SCMOVEZAY_UPD	TRIGGER	25	             AND u.dpt_id = :new.dpt_id

TR_SCMOVEZAY_UPD	TRIGGER	26	             AND r.tp_kod = :new.tpfrom;

TR_SCMOVEZAY_UPD	TRIGGER	27	   END IF;

TR_SCMOVEZAY_UPD	TRIGGER	28	

TR_SCMOVEZAY_UPD	TRIGGER	29	   IF :new.tpto IS NOT NULL

TR_SCMOVEZAY_UPD	TRIGGER	30	   THEN

TR_SCMOVEZAY_UPD	TRIGGER	31	      SELECT MAX (

TR_SCMOVEZAY_UPD	TRIGGER	32	                   u.fio

TR_SCMOVEZAY_UPD	TRIGGER	33	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	34	                || r.eta

TR_SCMOVEZAY_UPD	TRIGGER	35	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	36	                || r.tp_name

TR_SCMOVEZAY_UPD	TRIGGER	37	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	38	                || r.address

TR_SCMOVEZAY_UPD	TRIGGER	39	                || ', '

TR_SCMOVEZAY_UPD	TRIGGER	40	                || r.tp_kod

TR_SCMOVEZAY_UPD	TRIGGER	41	                || '/'

TR_SCMOVEZAY_UPD	TRIGGER	42	                || vw.dm_id)

TR_SCMOVEZAY_UPD	TRIGGER	43	        INTO :new.tpnameto

TR_SCMOVEZAY_UPD	TRIGGER	44	        FROM routes r, user_list u, VW_TPDM_VS_TPDW vw

TR_SCMOVEZAY_UPD	TRIGGER	45	       WHERE     vw.ol_id(+) = r.tp_kod

TR_SCMOVEZAY_UPD	TRIGGER	46	             AND u.tab_num = r.tab_number

TR_SCMOVEZAY_UPD	TRIGGER	47	             AND u.dpt_id = :new.dpt_id

TR_SCMOVEZAY_UPD	TRIGGER	48	             AND r.tp_kod = :new.tpto;

TR_SCMOVEZAY_UPD	TRIGGER	49	   END IF;

TR_SCMOVEZAY_UPD	TRIGGER	50	

TR_SCMOVEZAY_UPD	TRIGGER	51	   IF :new.netfrom IS NOT NULL

TR_SCMOVEZAY_UPD	TRIGGER	52	   THEN

TR_SCMOVEZAY_UPD	TRIGGER	53	      SELECT MAX (net), COUNT (*)

TR_SCMOVEZAY_UPD	TRIGGER	54	        INTO :new.netnamefrom, :new.nettpcfrom

TR_SCMOVEZAY_UPD	TRIGGER	55	        FROM tp_nets

TR_SCMOVEZAY_UPD	TRIGGER	56	       WHERE net_kod = :new.netfrom;

TR_SCMOVEZAY_UPD	TRIGGER	57	   END IF;

TR_SCMOVEZAY_UPD	TRIGGER	58	

TR_SCMOVEZAY_UPD	TRIGGER	59	   IF :new.netto IS NOT NULL

TR_SCMOVEZAY_UPD	TRIGGER	60	   THEN

TR_SCMOVEZAY_UPD	TRIGGER	61	      SELECT MAX (net), COUNT (*)

TR_SCMOVEZAY_UPD	TRIGGER	62	        INTO :new.netnameto, :new.nettpcto

TR_SCMOVEZAY_UPD	TRIGGER	63	        FROM tp_nets

TR_SCMOVEZAY_UPD	TRIGGER	64	       WHERE net_kod = :new.netto;

TR_SCMOVEZAY_UPD	TRIGGER	65	   END IF;

TR_SCMOVEZAY_UPD	TRIGGER	66	END;
TR_SCMOVEZAY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_SCMOVEZAY_NEW

TR_SCMOVEZAY_NEW	TRIGGER	2	   BEFORE INSERT

TR_SCMOVEZAY_NEW	TRIGGER	3	   ON PERSIK.scmovezay

TR_SCMOVEZAY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_SCMOVEZAY_NEW	TRIGGER	5	   FOR EACH ROW

TR_SCMOVEZAY_NEW	TRIGGER	6	BEGIN

TR_SCMOVEZAY_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_SCMOVEZAY_NEW	TRIGGER	8	   :new.created := TRUNC (SYSDATE);

TR_SCMOVEZAY_NEW	TRIGGER	9	

TR_SCMOVEZAY_NEW	TRIGGER	10	   SELECT fio

TR_SCMOVEZAY_NEW	TRIGGER	11	     INTO :new.lu_fio

TR_SCMOVEZAY_NEW	TRIGGER	12	     FROM user_list

TR_SCMOVEZAY_NEW	TRIGGER	13	    WHERE tn = :new.tn;

TR_SCMOVEZAY_NEW	TRIGGER	14	END;
TR_SALES_TRANSIT_TMP	TRIGGER	1	TRIGGER PERSIK.TR_SALES_TRANSIT_TMP

TR_SALES_TRANSIT_TMP	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SALES_TRANSIT_TMP	TRIGGER	3	   ON PERSIK.SALES_TRANSIT_TMP

TR_SALES_TRANSIT_TMP	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_SALES_TRANSIT_TMP	TRIGGER	5	   FOR EACH ROW

TR_SALES_TRANSIT_TMP	TRIGGER	6	BEGIN

TR_SALES_TRANSIT_TMP	TRIGGER	7	   :new.dt := TO_DATE ('01/' || :new.m || '/' || :new.y);

TR_SALES_TRANSIT_TMP	TRIGGER	8	END;
TR_SALES_EXPORT_TMP	TRIGGER	1	TRIGGER TR_SALES_EXPORT_TMP

TR_SALES_EXPORT_TMP	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_SALES_EXPORT_TMP	TRIGGER	3	   ON SALES_EXPORT_TRANSIT_TMP

TR_SALES_EXPORT_TMP	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_SALES_EXPORT_TMP	TRIGGER	5	   FOR EACH ROW

TR_SALES_EXPORT_TMP	TRIGGER	6	BEGIN

TR_SALES_EXPORT_TMP	TRIGGER	7	   :new.dt := TO_DATE ('01/' || :new.m || '/' || :new.y);

TR_SALES_EXPORT_TMP	TRIGGER	8	END;
TR_RZAY_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_RZAY_UPD2

TR_RZAY_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF sendstatus

TR_RZAY_UPD2	TRIGGER	3	   ON persik.rzay

TR_RZAY_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_RZAY_UPD2	TRIGGER	5	   FOR EACH ROW

TR_RZAY_UPD2	TRIGGER	6	BEGIN

TR_RZAY_UPD2	TRIGGER	7	   IF :new.sendstatus > 0

TR_RZAY_UPD2	TRIGGER	8	   THEN

TR_RZAY_UPD2	TRIGGER	9	      :new.sendstatuslu := SYSDATE;

TR_RZAY_UPD2	TRIGGER	10	   ELSE

TR_RZAY_UPD2	TRIGGER	11	      :new.sendstatuslu := NULL;

TR_RZAY_UPD2	TRIGGER	12	   END IF;

TR_RZAY_UPD2	TRIGGER	13	END;
TR_RZAY_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_RZAY_UPD1

TR_RZAY_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF acceptstatus

TR_RZAY_UPD1	TRIGGER	3	   ON persik.rzay

TR_RZAY_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_RZAY_UPD1	TRIGGER	5	   FOR EACH ROW

TR_RZAY_UPD1	TRIGGER	6	BEGIN

TR_RZAY_UPD1	TRIGGER	7	   IF :new.acceptstatus > 0

TR_RZAY_UPD1	TRIGGER	8	   THEN

TR_RZAY_UPD1	TRIGGER	9	      :new.acceptstatuslu := SYSDATE;

TR_RZAY_UPD1	TRIGGER	10	   ELSE

TR_RZAY_UPD1	TRIGGER	11	      :new.acceptstatuslu := NULL;

TR_RZAY_UPD1	TRIGGER	12	   END IF;

TR_RZAY_UPD1	TRIGGER	13	END;
TR_RZAY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_RZAY_UPD

TR_RZAY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_RZAY_UPD	TRIGGER	3	   ON persik.rzay

TR_RZAY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_RZAY_UPD	TRIGGER	5	   FOR EACH ROW

TR_RZAY_UPD	TRIGGER	6	BEGIN

TR_RZAY_UPD	TRIGGER	7	   :NEW.m := TO_CHAR (:NEW.dt, 'mm');

TR_RZAY_UPD	TRIGGER	8	   :NEW.y := TO_CHAR (:NEW.dt, 'yyyy');

TR_RZAY_UPD	TRIGGER	9	

TR_RZAY_UPD	TRIGGER	10	   SELECT MAX (r.tp_name || ' ' || r.address)

TR_RZAY_UPD	TRIGGER	11	     INTO :new.tp_name

TR_RZAY_UPD	TRIGGER	12	     FROM nets n, tp_nets_kk tpn, routes r

TR_RZAY_UPD	TRIGGER	13	    WHERE     tpn.net_kod = n.sw_kod

TR_RZAY_UPD	TRIGGER	14	          AND n.id_net = :new.id_net

TR_RZAY_UPD	TRIGGER	15	          AND tpn.tp_kod = r.tp_kod

TR_RZAY_UPD	TRIGGER	16	          AND r.tp_kod = :new.tp;

TR_RZAY_UPD	TRIGGER	17	END;
TR_RZAY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_rzay_NEW

TR_RZAY_NEW	TRIGGER	2	   BEFORE INSERT

TR_RZAY_NEW	TRIGGER	3	   ON PERSIK.rzay

TR_RZAY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_RZAY_NEW	TRIGGER	5	   FOR EACH ROW

TR_RZAY_NEW	TRIGGER	6	BEGIN

TR_RZAY_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_RZAY_NEW	TRIGGER	8	END tr_rzay_new;
TR_RZAYFILES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_rzayFILES_UPD

TR_RZAYFILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_RZAYFILES_UPD	TRIGGER	3	   ON PERSIK.rzayFILES

TR_RZAYFILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_RZAYFILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_RZAYFILES_UPD	TRIGGER	6	BEGIN

TR_RZAYFILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_RZAYFILES_UPD	TRIGGER	8	END tr_rzayFILES_upd;
TR_RZAYFILES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_rzayFILES_NEW

TR_RZAYFILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_RZAYFILES_NEW	TRIGGER	3	   ON PERSIK.rzayFILES

TR_RZAYFILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_RZAYFILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_RZAYFILES_NEW	TRIGGER	6	BEGIN

TR_RZAYFILES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_RZAYFILES_NEW	TRIGGER	8	END tr_rzayFILES_new;
TR_ROUTES_TP_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_TP_UPD" 

TR_ROUTES_TP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_TP_UPD	TRIGGER	3	   ON PERSIK.ROUTES_TP    REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_TP_UPD	TRIGGER	4	   FOR EACH ROW

TR_ROUTES_TP_UPD	TRIGGER	5	BEGIN

TR_ROUTES_TP_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_ROUTES_TP_UPD	TRIGGER	7	

TR_ROUTES_TP_UPD	TRIGGER	8	   

TR_ROUTES_TP_UPD	TRIGGER	9	END;

TR_ROUTES_TP_UPD	TRIGGER	10	

TR_ROUTES_TP_UPD	TRIGGER	11	

TR_ROUTES_TP_UPD	TRIGGER	12	

TR_ROUTES_TP_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_TP_NEW" 

TR_ROUTES_TP_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_TP_NEW	TRIGGER	3	   ON PERSIK.ROUTES_tp    REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_TP_NEW	TRIGGER	4	   FOR EACH ROW

TR_ROUTES_TP_NEW	TRIGGER	5	BEGIN

TR_ROUTES_TP_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_ROUTES_TP_NEW	TRIGGER	7	END;

TR_ROUTES_TP_NEW	TRIGGER	8	

TR_ROUTES_TP_NEW	TRIGGER	9	

TR_ROUTES_TP_NEW	TRIGGER	10	

TR_ROUTES_TP_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_TP_DEL" 

TR_ROUTES_TP_DEL	TRIGGER	2	   BEFORE DELETE

TR_ROUTES_TP_DEL	TRIGGER	3	   ON ROUTES_TP

TR_ROUTES_TP_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_TP_DEL	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_TP_DEL	TRIGGER	6	BEGIN

TR_ROUTES_TP_DEL	TRIGGER	7	  /* DELETE FROM routes_body

TR_ROUTES_TP_DEL	TRIGGER	8	         WHERE head_id = :old.head_id AND kodtp = :old.kodtp AND vv = :old.vv;*/

TR_ROUTES_TP_DEL	TRIGGER	9	

TR_ROUTES_TP_DEL	TRIGGER	10	   DELETE FROM routes_body1

TR_ROUTES_TP_DEL	TRIGGER	11	         WHERE head_id = :old.head_id AND kodtp = :old.kodtp AND vv = :old.vv;

TR_ROUTES_TP_DEL	TRIGGER	12	END;

TR_ROUTES_TP_DEL	TRIGGER	13	

TR_ROUTES_TEXT_UPD	TRIGGER	1	TRIGGER TR_ROUTES_TEXT_UPD 

TR_ROUTES_TEXT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_TEXT_UPD	TRIGGER	3	   ON ROUTES_TEXT

TR_ROUTES_TEXT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_TEXT_UPD	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_TEXT_UPD	TRIGGER	6	BEGIN

TR_ROUTES_TEXT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ROUTES_TEXT_UPD	TRIGGER	8	END;
TR_ROUTES_TEXT_NEW	TRIGGER	1	TRIGGER TR_ROUTES_TEXT_NEW 

TR_ROUTES_TEXT_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_TEXT_NEW	TRIGGER	3	   ON ROUTES_TEXT

TR_ROUTES_TEXT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_TEXT_NEW	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_TEXT_NEW	TRIGGER	6	BEGIN

TR_ROUTES_TEXT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_ROUTES_TEXT_NEW	TRIGGER	8	END;
TR_ROUTES_POS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_POS_UPD" 

TR_ROUTES_POS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_POS_UPD	TRIGGER	3	   ON PERSIK.ROUTES_pos

TR_ROUTES_POS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_POS_UPD	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_POS_UPD	TRIGGER	6	BEGIN

TR_ROUTES_POS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ROUTES_POS_UPD	TRIGGER	8	END;

TR_ROUTES_POS_UPD	TRIGGER	9	

TR_ROUTES_POS_UPD	TRIGGER	10	

TR_ROUTES_POS_UPD	TRIGGER	11	

TR_ROUTES_POS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_POS_NEW" 

TR_ROUTES_POS_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_POS_NEW	TRIGGER	3	   ON PERSIK.ROUTES_pos

TR_ROUTES_POS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_POS_NEW	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_POS_NEW	TRIGGER	6	BEGIN

TR_ROUTES_POS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_ROUTES_POS_NEW	TRIGGER	8	END;

TR_ROUTES_POS_NEW	TRIGGER	9	

TR_ROUTES_POS_NEW	TRIGGER	10	

TR_ROUTES_POS_NEW	TRIGGER	11	

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_HEAD_UPD_login

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	2	   BEFORE INSERT OR UPDATE OF login

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	3	   ON PERSIK.ROUTES_HEAD

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	7	   BEGIN

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	8	      SELECT fam || ' ' || im || ' ' || otch, pos_id, chief

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	9	        INTO :new.fio_otv, :new.pos_otv, :new.tn

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	10	        FROM spr_users_ms

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	11	       WHERE login = :new.login;

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	12	   EXCEPTION

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	13	      WHEN OTHERS

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	14	      THEN

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	15	         NULL;

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	16	   END;

TR_ROUTES_HEAD_UPD_LOGIN	TRIGGER	17	END;
TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_HEAD_UPD_FIO_OTV

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	2	   AFTER INSERT OR UPDATE OF fio_otv

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	3	   ON PERSIK.ROUTES_HEAD

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	6	DECLARE

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	7	   c   INTEGER;

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	8	BEGIN

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	9	   SELECT COUNT (*)

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	10	     INTO c

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	11	     FROM mr_zp

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	12	    WHERE head_id = :new.id AND fio_otv = :new.fio_otv;

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	13	

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	14	   IF c = 0 AND :new.fio_otv IS NOT NULL

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	15	   THEN

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	16	      INSERT INTO mr_zp (head_id, fio_otv)

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	17	           VALUES (:new.id, :new.fio_otv);

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	18	   END IF;

TR_ROUTES_HEAD_UPD_FIO_OTV	TRIGGER	19	END;
TR_ROUTES_HEAD_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_HEAD_UPD" 

TR_ROUTES_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_HEAD_UPD	TRIGGER	3	   ON PERSIK.ROUTES_HEAD

TR_ROUTES_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_UPD	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ROUTES_HEAD_UPD	TRIGGER	8	END;

TR_ROUTES_HEAD_UPD	TRIGGER	9	

TR_ROUTES_HEAD_UPD	TRIGGER	10	

TR_ROUTES_HEAD_UPD	TRIGGER	11	

TR_ROUTES_HEAD_NEW1	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_HEAD_NEW1

TR_ROUTES_HEAD_NEW1	TRIGGER	2	   AFTER INSERT

TR_ROUTES_HEAD_NEW1	TRIGGER	3	   ON PERSIK.ROUTES_HEAD

TR_ROUTES_HEAD_NEW1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_NEW1	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_NEW1	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_NEW1	TRIGGER	7	   IF :new.parent IS NULL

TR_ROUTES_HEAD_NEW1	TRIGGER	8	   THEN

TR_ROUTES_HEAD_NEW1	TRIGGER	9	     /* INSERT INTO spr_users (fio,

TR_ROUTES_HEAD_NEW1	TRIGGER	10	                             PASSWORD,

TR_ROUTES_HEAD_NEW1	TRIGGER	11	                             login,

TR_ROUTES_HEAD_NEW1	TRIGGER	12	                             access_ocenka,

TR_ROUTES_HEAD_NEW1	TRIGGER	13	                             tn)

TR_ROUTES_HEAD_NEW1	TRIGGER	14	           VALUES (:NEW.login,

TR_ROUTES_HEAD_NEW1	TRIGGER	15	                   DBMS_RANDOM.STRING ('A', 4),

TR_ROUTES_HEAD_NEW1	TRIGGER	16	                   :NEW.login,

TR_ROUTES_HEAD_NEW1	TRIGGER	17	                   1,

TR_ROUTES_HEAD_NEW1	TRIGGER	18	                   0);*/

TR_ROUTES_HEAD_NEW1	TRIGGER	19	

TR_ROUTES_HEAD_NEW1	TRIGGER	20	      INSERT INTO routes_head_agents (ag_id, head_id)

TR_ROUTES_HEAD_NEW1	TRIGGER	21	         SELECT id, :new.id FROM routes_agents;

TR_ROUTES_HEAD_NEW1	TRIGGER	22	   END IF;

TR_ROUTES_HEAD_NEW1	TRIGGER	23	END;
TR_ROUTES_HEAD_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_HEAD_NEW

TR_ROUTES_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_HEAD_NEW	TRIGGER	3	   ON PERSIK.ROUTES_HEAD

TR_ROUTES_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_NEW	TRIGGER	6	/*DECLARE

TR_ROUTES_HEAD_NEW	TRIGGER	7	   i        INTEGER;

TR_ROUTES_HEAD_NEW	TRIGGER	8	   login_   VARCHAR (255);*/

TR_ROUTES_HEAD_NEW	TRIGGER	9	BEGIN

TR_ROUTES_HEAD_NEW	TRIGGER	10	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_ROUTES_HEAD_NEW	TRIGGER	11	

TR_ROUTES_HEAD_NEW	TRIGGER	12	 /*  IF :new.parent IS NULL

TR_ROUTES_HEAD_NEW	TRIGGER	13	   THEN

TR_ROUTES_HEAD_NEW	TRIGGER	14	      i := seq_ms.NEXTVAL;

TR_ROUTES_HEAD_NEW	TRIGGER	15	      login_ := 'ms' || SUBSTR ('0000' || TO_CHAR (i), -4, 4);

TR_ROUTES_HEAD_NEW	TRIGGER	16	      :NEW.login := login_;

TR_ROUTES_HEAD_NEW	TRIGGER	17	   END IF;*/

TR_ROUTES_HEAD_NEW	TRIGGER	18	END;
TR_ROUTES_HEAD_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_HEAD_DEL" 

TR_ROUTES_HEAD_DEL	TRIGGER	2	   BEFORE DELETE

TR_ROUTES_HEAD_DEL	TRIGGER	3	   ON ROUTES_HEAD

TR_ROUTES_HEAD_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_DEL	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_DEL	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_DEL	TRIGGER	7	 /*  DELETE FROM ROUTES_BODY

TR_ROUTES_HEAD_DEL	TRIGGER	8	         WHERE head_id = :old.id;*/

TR_ROUTES_HEAD_DEL	TRIGGER	9	

TR_ROUTES_HEAD_DEL	TRIGGER	10	   DELETE FROM ROUTES_BODY1

TR_ROUTES_HEAD_DEL	TRIGGER	11	         WHERE head_id = :old.id;

TR_ROUTES_HEAD_DEL	TRIGGER	12	

TR_ROUTES_HEAD_DEL	TRIGGER	13	   DELETE FROM ROUTES_TP

TR_ROUTES_HEAD_DEL	TRIGGER	14	         WHERE head_id = :old.id;

TR_ROUTES_HEAD_DEL	TRIGGER	15	

TR_ROUTES_HEAD_DEL	TRIGGER	16	   DELETE FROM ROUTES_head_agents

TR_ROUTES_HEAD_DEL	TRIGGER	17	         WHERE head_id = :old.id;

TR_ROUTES_HEAD_DEL	TRIGGER	18	END;

TR_ROUTES_HEAD_DEL	TRIGGER	19	

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_HEAD_AGENTS_UPD" 

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	3	   ON PERSIK.ROUTES_HEAD_AGENTS

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	8	END;

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	9	

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	10	

TR_ROUTES_HEAD_AGENTS_UPD	TRIGGER	11	

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_HEAD_AGENTS_NEW" 

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	3	   ON PERSIK.ROUTES_HEAD_AGENTS

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	8	END;

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	9	

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	10	

TR_ROUTES_HEAD_AGENTS_NEW	TRIGGER	11	

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_HEAD_AGENTS_DEL" 

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	2	   BEFORE DELETE

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	3	   ON ROUTES_HEAD_AGENTS

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	6	BEGIN

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	7	   /*DELETE FROM ROUTES_BODY

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	8	         WHERE head_id = :old.head_id AND ag_id = :old.ag_id AND vv = :old.vv;*/

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	9	

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	10	   DELETE FROM ROUTES_BODY1

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	11	         WHERE head_id = :old.head_id AND ag_id = :old.ag_id AND vv = :old.vv;

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	12	END;

TR_ROUTES_HEAD_AGENTS_DEL	TRIGGER	13	

TR_ROUTES_BODY1_NEW1	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_BODY1_NEW1

TR_ROUTES_BODY1_NEW1	TRIGGER	2	   AFTER INSERT

TR_ROUTES_BODY1_NEW1	TRIGGER	3	   ON PERSIK.ROUTES_BODY1

TR_ROUTES_BODY1_NEW1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_BODY1_NEW1	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_BODY1_NEW1	TRIGGER	6	DECLARE

TR_ROUTES_BODY1_NEW1	TRIGGER	7	   i      INTEGER;

TR_ROUTES_BODY1_NEW1	TRIGGER	8	   v_dt   DATE;

TR_ROUTES_BODY1_NEW1	TRIGGER	9	BEGIN

TR_ROUTES_BODY1_NEW1	TRIGGER	10	   SELECT COUNT (*)

TR_ROUTES_BODY1_NEW1	TRIGGER	11	     INTO i

TR_ROUTES_BODY1_NEW1	TRIGGER	12	     FROM routes_head h

TR_ROUTES_BODY1_NEW1	TRIGGER	13	    WHERE h.id = :new.head_id;

TR_ROUTES_BODY1_NEW1	TRIGGER	14	

TR_ROUTES_BODY1_NEW1	TRIGGER	15	   IF i > 0

TR_ROUTES_BODY1_NEW1	TRIGGER	16	   THEN

TR_ROUTES_BODY1_NEW1	TRIGGER	17	      SELECT c.data

TR_ROUTES_BODY1_NEW1	TRIGGER	18	        INTO v_dt

TR_ROUTES_BODY1_NEW1	TRIGGER	19	        FROM routes_head h, calendar c

TR_ROUTES_BODY1_NEW1	TRIGGER	20	       WHERE     h.id = :new.head_id

TR_ROUTES_BODY1_NEW1	TRIGGER	21	             AND h.data = TRUNC (c.data, 'mm')

TR_ROUTES_BODY1_NEW1	TRIGGER	22	             AND dm = :new.day_num;

TR_ROUTES_BODY1_NEW1	TRIGGER	23	

TR_ROUTES_BODY1_NEW1	TRIGGER	24	      INSERT INTO merch_report (rb_id, dt)

TR_ROUTES_BODY1_NEW1	TRIGGER	25	           VALUES (:new.id, v_dt);

TR_ROUTES_BODY1_NEW1	TRIGGER	26	   END IF;

TR_ROUTES_BODY1_NEW1	TRIGGER	27	END;
TR_ROUTES_BODY1_CHECK	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_BODY1_CHECK

TR_ROUTES_BODY1_CHECK	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

TR_ROUTES_BODY1_CHECK	TRIGGER	3	   ON PERSIK.ROUTES_BODY1

TR_ROUTES_BODY1_CHECK	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_BODY1_CHECK	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_BODY1_CHECK	TRIGGER	6	DECLARE

TR_ROUTES_BODY1_CHECK	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_ROUTES_BODY1_CHECK	TRIGGER	8	   v_id               VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	9	   v_head_id          VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	10	   v_day_num          VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	11	   v_ag_id            VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	12	   v_vv               VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	13	   v_day_enabled_mr   VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	14	   v_day_time_mr      VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	15	   v_mode             VARCHAR2 (255);

TR_ROUTES_BODY1_CHECK	TRIGGER	16	   v_svms_ok          INTEGER;

TR_ROUTES_BODY1_CHECK	TRIGGER	17	BEGIN

TR_ROUTES_BODY1_CHECK	TRIGGER	18	   IF INSERTING

TR_ROUTES_BODY1_CHECK	TRIGGER	19	   THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	20	      v_id := seq_all.NEXTVAL;

TR_ROUTES_BODY1_CHECK	TRIGGER	21	      v_mode := 'insert';

TR_ROUTES_BODY1_CHECK	TRIGGER	22	      v_head_id := :new.id;

TR_ROUTES_BODY1_CHECK	TRIGGER	23	      v_day_num := :new.day_num;

TR_ROUTES_BODY1_CHECK	TRIGGER	24	      v_ag_id := :new.ag_id;

TR_ROUTES_BODY1_CHECK	TRIGGER	25	      v_vv := :new.vv;

TR_ROUTES_BODY1_CHECK	TRIGGER	26	      v_day_enabled_mr := :new.day_enabled_mr;

TR_ROUTES_BODY1_CHECK	TRIGGER	27	      v_day_time_mr := :new.day_time_mr;

TR_ROUTES_BODY1_CHECK	TRIGGER	28	   END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	29	

TR_ROUTES_BODY1_CHECK	TRIGGER	30	   IF UPDATING

TR_ROUTES_BODY1_CHECK	TRIGGER	31	   THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	32	      v_id := :old.id || '=>' || :new.id;

TR_ROUTES_BODY1_CHECK	TRIGGER	33	      v_mode := 'update';

TR_ROUTES_BODY1_CHECK	TRIGGER	34	      v_head_id := :old.head_id || '=>' || :new.head_id;

TR_ROUTES_BODY1_CHECK	TRIGGER	35	      v_day_num := :old.day_num || '=>' || :new.day_num;

TR_ROUTES_BODY1_CHECK	TRIGGER	36	      v_ag_id := :old.ag_id || '=>' || :new.ag_id;

TR_ROUTES_BODY1_CHECK	TRIGGER	37	      v_vv := :old.vv || '=>' || :new.vv;

TR_ROUTES_BODY1_CHECK	TRIGGER	38	      v_day_enabled_mr := :old.day_enabled_mr || '=>' || :new.day_enabled_mr;

TR_ROUTES_BODY1_CHECK	TRIGGER	39	      v_day_time_mr := :old.day_time_mr || '=>' || :new.day_time_mr;

TR_ROUTES_BODY1_CHECK	TRIGGER	40	   END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	41	

TR_ROUTES_BODY1_CHECK	TRIGGER	42	   IF DELETING

TR_ROUTES_BODY1_CHECK	TRIGGER	43	   THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	44	      v_id := :old.id;

TR_ROUTES_BODY1_CHECK	TRIGGER	45	      v_mode := 'delete';

TR_ROUTES_BODY1_CHECK	TRIGGER	46	      v_head_id := :old.id;

TR_ROUTES_BODY1_CHECK	TRIGGER	47	      v_day_num := :old.day_num;

TR_ROUTES_BODY1_CHECK	TRIGGER	48	      v_ag_id := :old.ag_id;

TR_ROUTES_BODY1_CHECK	TRIGGER	49	      v_vv := :old.vv;

TR_ROUTES_BODY1_CHECK	TRIGGER	50	      v_day_enabled_mr := :old.day_enabled_mr;

TR_ROUTES_BODY1_CHECK	TRIGGER	51	      v_day_time_mr := :old.day_time_mr;

TR_ROUTES_BODY1_CHECK	TRIGGER	52	   END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	53	

TR_ROUTES_BODY1_CHECK	TRIGGER	54	   SELECT SUM (NVL (o.svms_ok, 0))

TR_ROUTES_BODY1_CHECK	TRIGGER	55	     INTO v_svms_ok

TR_ROUTES_BODY1_CHECK	TRIGGER	56	     FROM (SELECT h.id, c.data

TR_ROUTES_BODY1_CHECK	TRIGGER	57	             FROM routes_head h, calendar c

TR_ROUTES_BODY1_CHECK	TRIGGER	58	            WHERE     h.id = :old.head_id

TR_ROUTES_BODY1_CHECK	TRIGGER	59	                  AND h.data = TRUNC (c.data, 'mm')

TR_ROUTES_BODY1_CHECK	TRIGGER	60	                  AND c.dm = :old.day_num

TR_ROUTES_BODY1_CHECK	TRIGGER	61	           UNION

TR_ROUTES_BODY1_CHECK	TRIGGER	62	           SELECT h.id, c.data

TR_ROUTES_BODY1_CHECK	TRIGGER	63	             FROM routes_head h, calendar c

TR_ROUTES_BODY1_CHECK	TRIGGER	64	            WHERE     h.id = :new.head_id

TR_ROUTES_BODY1_CHECK	TRIGGER	65	                  AND h.data = TRUNC (c.data, 'mm')

TR_ROUTES_BODY1_CHECK	TRIGGER	66	                  AND c.dm = :new.day_num) t,

TR_ROUTES_BODY1_CHECK	TRIGGER	67	          merch_report_ok o

TR_ROUTES_BODY1_CHECK	TRIGGER	68	    WHERE t.id = o.head_id(+) AND t.data = o.dt(+);

TR_ROUTES_BODY1_CHECK	TRIGGER	69	

TR_ROUTES_BODY1_CHECK	TRIGGER	70	   IF     v_svms_ok > 0

TR_ROUTES_BODY1_CHECK	TRIGGER	71	      AND NOT (   (INSERTING AND NVL (:new.day_enabled_mr, 0) = 0)

TR_ROUTES_BODY1_CHECK	TRIGGER	72	               OR (DELETING AND NVL (:old.day_enabled_mr, 0) = 0))

TR_ROUTES_BODY1_CHECK	TRIGGER	73	   THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	74	      ADD_LOG (

TR_ROUTES_BODY1_CHECK	TRIGGER	75	         'routes_body1',

TR_ROUTES_BODY1_CHECK	TRIGGER	76	            'access denied. report is confirmed. MODE='

TR_ROUTES_BODY1_CHECK	TRIGGER	77	         || v_mode

TR_ROUTES_BODY1_CHECK	TRIGGER	78	         || ' '

TR_ROUTES_BODY1_CHECK	TRIGGER	79	         || 'TABLE=routes_body1'

TR_ROUTES_BODY1_CHECK	TRIGGER	80	         || CHR (10)

TR_ROUTES_BODY1_CHECK	TRIGGER	81	         || 'KEYS: id: '

TR_ROUTES_BODY1_CHECK	TRIGGER	82	         || v_id

TR_ROUTES_BODY1_CHECK	TRIGGER	83	         || ' head_id: '

TR_ROUTES_BODY1_CHECK	TRIGGER	84	         || v_head_id

TR_ROUTES_BODY1_CHECK	TRIGGER	85	         || ' day_num: '

TR_ROUTES_BODY1_CHECK	TRIGGER	86	         || v_day_num

TR_ROUTES_BODY1_CHECK	TRIGGER	87	         || ' ag_id: '

TR_ROUTES_BODY1_CHECK	TRIGGER	88	         || v_ag_id

TR_ROUTES_BODY1_CHECK	TRIGGER	89	         || ' vv: '

TR_ROUTES_BODY1_CHECK	TRIGGER	90	         || v_vv

TR_ROUTES_BODY1_CHECK	TRIGGER	91	         || CHR (10)

TR_ROUTES_BODY1_CHECK	TRIGGER	92	         || 'VALS: day_enabled_mr: '

TR_ROUTES_BODY1_CHECK	TRIGGER	93	         || v_day_enabled_mr

TR_ROUTES_BODY1_CHECK	TRIGGER	94	         || ' day_time_mr: '

TR_ROUTES_BODY1_CHECK	TRIGGER	95	         || v_day_time_mr);

TR_ROUTES_BODY1_CHECK	TRIGGER	96	

TR_ROUTES_BODY1_CHECK	TRIGGER	97	      raise_application_error (-20001, 'access denied. report is confirmed.');

TR_ROUTES_BODY1_CHECK	TRIGGER	98	   END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	99	

TR_ROUTES_BODY1_CHECK	TRIGGER	100	   IF INSERTING OR UPDATING

TR_ROUTES_BODY1_CHECK	TRIGGER	101	   THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	102	      :NEW.lu := SYSDATE;

TR_ROUTES_BODY1_CHECK	TRIGGER	103	

TR_ROUTES_BODY1_CHECK	TRIGGER	104	      IF :new.day_enabled_mr <> 1

TR_ROUTES_BODY1_CHECK	TRIGGER	105	      THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	106	         :new.day_time_mr := NULL;

TR_ROUTES_BODY1_CHECK	TRIGGER	107	      END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	108	   END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	109	

TR_ROUTES_BODY1_CHECK	TRIGGER	110	   IF INSERTING

TR_ROUTES_BODY1_CHECK	TRIGGER	111	   THEN

TR_ROUTES_BODY1_CHECK	TRIGGER	112	      :NEW.ID := v_id;

TR_ROUTES_BODY1_CHECK	TRIGGER	113	   END IF;

TR_ROUTES_BODY1_CHECK	TRIGGER	114	END;
TR_ROUTES_AGENTS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_AGENTS_UPD" 

TR_ROUTES_AGENTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_AGENTS_UPD	TRIGGER	3	   ON PERSIK.routes_agents

TR_ROUTES_AGENTS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_UPD	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ROUTES_AGENTS_UPD	TRIGGER	8	END;

TR_ROUTES_AGENTS_UPD	TRIGGER	9	

TR_ROUTES_AGENTS_UPD	TRIGGER	10	

TR_ROUTES_AGENTS_UPD	TRIGGER	11	

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_AGENTS_PWD_UPD" 

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS_PWD

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	8	END;

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	9	

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	10	

TR_ROUTES_AGENTS_PWD_UPD	TRIGGER	11	

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_AGENTS_PWD_NEWA

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	2	   AFTER INSERT

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS_PWD

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	7	   INSERT INTO spr_users (fio,

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	8	                          PASSWORD,

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	9	                          login,

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	10	                          access_ocenka,

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	11	                          tn)

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	12	        VALUES (NVL (:new.comm, :new.login),

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	13	                DBMS_RANDOM.STRING ('A', 4),

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	14	                :new.login,

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	15	                1,

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	16	                0);

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	17	

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	18	   INSERT INTO routes_logins_oblast (login, oblast)

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	19	      SELECT DISTINCT :new.login, tz_oblast

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	20	        FROM cpp

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	21	       WHERE tz_oblast IS NOT NULL;

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	22	

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	23	   INSERT INTO routes_logins_nets (login, id_net)

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	24	      SELECT DISTINCT :new.login, id_net

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	25	        FROM ms_nets

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	26	       WHERE net_name IS NOT NULL;

TR_ROUTES_AGENTS_PWD_NEWA	TRIGGER	27	END;
TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_AGENTS_PWD_NEW

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS_PWD

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	8	   :NEW.login := 'ag' || SUBSTR ('0000' || TO_CHAR (seq_ag.NEXTVAL), -4, 4);

TR_ROUTES_AGENTS_PWD_NEW	TRIGGER	9	END;
TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_AGENTS_PWD_del

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	2	   BEFORE DELETE

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS_PWD

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	6	DECLARE

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	8	BEGIN

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	9	   DELETE FROM spr_users

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	10	         WHERE login = :old.login;

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	11	

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	12	   COMMIT;

TR_ROUTES_AGENTS_PWD_DEL	TRIGGER	13	END;
TR_ROUTES_AGENTS_PWD_AA	TRIGGER	1	TRIGGER PERSIK.TR_ROUTES_AGENTS_PWD_aa

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	2	   AFTER UPDATE OF comm

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS_PWD

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	7	   IF :new.comm IS NOT NULL

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	8	   THEN

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	9	      UPDATE spr_users

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	10	         SET fio = :new.comm

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	11	       WHERE login = :new.login;

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	12	   END IF;

TR_ROUTES_AGENTS_PWD_AA	TRIGGER	13	END;
TR_ROUTES_AGENTS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_AGENTS_NEW" 

TR_ROUTES_AGENTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_ROUTES_AGENTS_NEW	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS

TR_ROUTES_AGENTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_NEW	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_ROUTES_AGENTS_NEW	TRIGGER	8	

TR_ROUTES_AGENTS_NEW	TRIGGER	9	   INSERT INTO MERCH_SPEC_FLD_AG (ag_id, field_id)

TR_ROUTES_AGENTS_NEW	TRIGGER	10	      SELECT :new.id, id FROM MERCH_SPEC_FIELDS;

TR_ROUTES_AGENTS_NEW	TRIGGER	11	

TR_ROUTES_AGENTS_NEW	TRIGGER	12	   INSERT INTO routes_agents_pwd (ag_id)

TR_ROUTES_AGENTS_NEW	TRIGGER	13	        VALUES (:new.id);

TR_ROUTES_AGENTS_NEW	TRIGGER	14	END;

TR_ROUTES_AGENTS_NEW	TRIGGER	15	

TR_ROUTES_AGENTS_NEW	TRIGGER	16	

TR_ROUTES_AGENTS_NEW	TRIGGER	17	

TR_ROUTES_AGENTS_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_ROUTES_AGENTS_DEL" 

TR_ROUTES_AGENTS_DEL	TRIGGER	2	   BEFORE DELETE

TR_ROUTES_AGENTS_DEL	TRIGGER	3	   ON PERSIK.ROUTES_AGENTS

TR_ROUTES_AGENTS_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ROUTES_AGENTS_DEL	TRIGGER	5	   FOR EACH ROW

TR_ROUTES_AGENTS_DEL	TRIGGER	6	BEGIN

TR_ROUTES_AGENTS_DEL	TRIGGER	7	   DELETE FROM MERCH_SPEC_FLD_AG

TR_ROUTES_AGENTS_DEL	TRIGGER	8	         WHERE ag_id = :old.id;

TR_ROUTES_AGENTS_DEL	TRIGGER	9	END;

TR_ROUTES_AGENTS_DEL	TRIGGER	10	

TR_ROUTES_AGENTS_DEL	TRIGGER	11	

TR_ROUTES_AGENTS_DEL	TRIGGER	12	

TR_REP_SPD_VISITS_UPDATE	TRIGGER	1	TRIGGER TR_rep_spd_visits_UPDATE

TR_REP_SPD_VISITS_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPD_VISITS_UPDATE	TRIGGER	3	   ON rep_spd_visits

TR_REP_SPD_VISITS_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_VISITS_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_VISITS_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPD_VISITS_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPD_VISITS_UPDATE	TRIGGER	8	END;
TR_REP_SPD_URLS_UPDATE	TRIGGER	1	TRIGGER TR_rep_spd_urls_UPDATE

TR_REP_SPD_URLS_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPD_URLS_UPDATE	TRIGGER	3	   ON rep_spd_urls

TR_REP_SPD_URLS_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_URLS_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_URLS_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPD_URLS_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPD_URLS_UPDATE	TRIGGER	8	END;
TR_REP_SPD_LIST_UPDATE	TRIGGER	1	TRIGGER TR_rep_spd_list_UPDATE

TR_REP_SPD_LIST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPD_LIST_UPDATE	TRIGGER	3	   ON rep_spd_list

TR_REP_SPD_LIST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_LIST_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_LIST_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPD_LIST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPD_LIST_UPDATE	TRIGGER	8	END;
TR_REP_SPD_LIST_NEW	TRIGGER	1	TRIGGER TR_rep_spd_list_NEW

TR_REP_SPD_LIST_NEW	TRIGGER	2	   BEFORE INSERT

TR_REP_SPD_LIST_NEW	TRIGGER	3	   ON rep_spd_list

TR_REP_SPD_LIST_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_LIST_NEW	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_LIST_NEW	TRIGGER	6	BEGIN

TR_REP_SPD_LIST_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_REP_SPD_LIST_NEW	TRIGGER	8	END;
TR_REP_SPD_HEAD_UPD	TRIGGER	1	TRIGGER TR_rep_spd_HEAD_UPD

TR_REP_SPD_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPD_HEAD_UPD	TRIGGER	3	   ON rep_spd_HEAD

TR_REP_SPD_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_HEAD_UPD	TRIGGER	6	BEGIN

TR_REP_SPD_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPD_HEAD_UPD	TRIGGER	8	END;
TR_REP_SPD_HEAD_NEW	TRIGGER	1	TRIGGER TR_rep_spd_head_NEW

TR_REP_SPD_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_REP_SPD_HEAD_NEW	TRIGGER	3	   ON rep_spd_head

TR_REP_SPD_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_HEAD_NEW	TRIGGER	6	BEGIN

TR_REP_SPD_HEAD_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_REP_SPD_HEAD_NEW	TRIGGER	8	END;
TR_REP_SPD_DT_UPD	TRIGGER	1	TRIGGER TR_REP_SPD_DT_UPD

TR_REP_SPD_DT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPD_DT_UPD	TRIGGER	3	   ON REP_SPD_DT

TR_REP_SPD_DT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPD_DT_UPD	TRIGGER	5	   FOR EACH ROW

TR_REP_SPD_DT_UPD	TRIGGER	6	BEGIN

TR_REP_SPD_DT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPD_DT_UPD	TRIGGER	8	END;
TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	1	TRIGGER TR_REP_SPDMS_visits_UPDATE

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	3	   ON REP_SPDMS_visits

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDMS_VISITS_UPDATE	TRIGGER	8	END;
TR_REP_SPDMS_LIST_UPDATE	TRIGGER	1	TRIGGER TR_REP_SPDMS_LIST_UPDATE

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	3	   ON REP_SPDMS_LIST

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDMS_LIST_UPDATE	TRIGGER	8	END;
TR_REP_SPDMS_LIST_NEW	TRIGGER	1	TRIGGER TR_REP_SPDMS_LIST_NEW

TR_REP_SPDMS_LIST_NEW	TRIGGER	2	   BEFORE INSERT

TR_REP_SPDMS_LIST_NEW	TRIGGER	3	   ON REP_SPDMS_LIST

TR_REP_SPDMS_LIST_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDMS_LIST_NEW	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDMS_LIST_NEW	TRIGGER	6	BEGIN

TR_REP_SPDMS_LIST_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_REP_SPDMS_LIST_NEW	TRIGGER	8	END;
TR_REP_SPDMS_HEAD_UPD	TRIGGER	1	TRIGGER TR_REP_SPDMS_HEAD_UPD

TR_REP_SPDMS_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDMS_HEAD_UPD	TRIGGER	3	   ON REP_SPDMS_HEAD

TR_REP_SPDMS_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDMS_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDMS_HEAD_UPD	TRIGGER	6	BEGIN

TR_REP_SPDMS_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDMS_HEAD_UPD	TRIGGER	8	END;
TR_REP_SPDMS_HEAD_NEW	TRIGGER	1	TRIGGER TR_REP_SPDMS_head_NEW

TR_REP_SPDMS_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_REP_SPDMS_HEAD_NEW	TRIGGER	3	   ON REP_SPDMS_head

TR_REP_SPDMS_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDMS_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDMS_HEAD_NEW	TRIGGER	6	BEGIN

TR_REP_SPDMS_HEAD_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_REP_SPDMS_HEAD_NEW	TRIGGER	8	END;
TR_REP_SPDMS_DT_UPD	TRIGGER	1	TRIGGER TR_REP_SPDMS_DT_UPD

TR_REP_SPDMS_DT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDMS_DT_UPD	TRIGGER	3	   ON REP_SPDMS_DT

TR_REP_SPDMS_DT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDMS_DT_UPD	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDMS_DT_UPD	TRIGGER	6	BEGIN

TR_REP_SPDMS_DT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDMS_DT_UPD	TRIGGER	8	END;
TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	1	TRIGGER PERSIK.TR_REP_SPDDNKF_visits_UPDATE

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	3	   ON PERSIK.REP_SPDDNKF_VISITS

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDDNKF_VISITS_UPDATE	TRIGGER	8	END;
TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	1	TRIGGER PERSIK.TR_REP_SPDDNKF_LIST_UPDATE

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	3	   ON PERSIK.REP_SPDDNKF_LIST

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	6	BEGIN

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDDNKF_LIST_UPDATE	TRIGGER	8	END;
TR_REP_SPDDNKF_LIST_NEW	TRIGGER	1	TRIGGER PERSIK.TR_REP_SPDDNKF_LIST_NEW

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	2	   BEFORE INSERT

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	3	   ON PERSIK.REP_SPDDNKF_LIST

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	6	BEGIN

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_REP_SPDDNKF_LIST_NEW	TRIGGER	8	END;
TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	1	TRIGGER PERSIK.TR_REP_SPDDNKF_HEAD_UPD

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	3	   ON PERSIK.REP_SPDDNKF_HEAD

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	6	BEGIN

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDDNKF_HEAD_UPD	TRIGGER	8	END;
TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	1	TRIGGER PERSIK.TR_REP_SPDDNKF_head_NEW

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	3	   ON PERSIK.REP_SPDDNKF_HEAD

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	6	BEGIN

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_REP_SPDDNKF_HEAD_NEW	TRIGGER	8	END;
TR_REP_SPDDNKF_DT_UPD	TRIGGER	1	TRIGGER PERSIK.TR_REP_SPDDNKF_DT_UPD

TR_REP_SPDDNKF_DT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_REP_SPDDNKF_DT_UPD	TRIGGER	3	   ON PERSIK.REP_SPDDNKF_DT

TR_REP_SPDDNKF_DT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_REP_SPDDNKF_DT_UPD	TRIGGER	5	   FOR EACH ROW

TR_REP_SPDDNKF_DT_UPD	TRIGGER	6	BEGIN

TR_REP_SPDDNKF_DT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_REP_SPDDNKF_DT_UPD	TRIGGER	8	END;
TR_REFRESH_MV_QUEUE_LU	TRIGGER	1	TRIGGER PERSIK.tr_REFRESH_MV_QUEUE_lu

TR_REFRESH_MV_QUEUE_LU	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_REFRESH_MV_QUEUE_LU	TRIGGER	3	ON REFRESH_MV_QUEUE

TR_REFRESH_MV_QUEUE_LU	TRIGGER	4	REFERENCING NEW AS New OLD AS Old

TR_REFRESH_MV_QUEUE_LU	TRIGGER	5	FOR EACH ROW

TR_REFRESH_MV_QUEUE_LU	TRIGGER	6	/* Formatted on 21/04/2016 12:49:38 (QP5 v5.252.13127.32867) */

TR_REFRESH_MV_QUEUE_LU	TRIGGER	7	BEGIN

TR_REFRESH_MV_QUEUE_LU	TRIGGER	8	   :new.lu:=sysdate;

TR_REFRESH_MV_QUEUE_LU	TRIGGER	9	END;
TR_P_PLAN_UPD_TEST	TRIGGER	1	TRIGGER PERSIK.TR_P_PLAN_UPD_TEST

TR_P_PLAN_UPD_TEST	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

TR_P_PLAN_UPD_TEST	TRIGGER	3	   ON PERSIK.p_plan

TR_P_PLAN_UPD_TEST	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_PLAN_UPD_TEST	TRIGGER	5	   FOR EACH ROW

TR_P_PLAN_UPD_TEST	TRIGGER	6	DECLARE

TR_P_PLAN_UPD_TEST	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_P_PLAN_UPD_TEST	TRIGGER	8	BEGIN

TR_P_PLAN_UPD_TEST	TRIGGER	9	   IF :new.test = 0

TR_P_PLAN_UPD_TEST	TRIGGER	10	   THEN

TR_P_PLAN_UPD_TEST	TRIGGER	11	      :NEW.test_lu := NULL;

TR_P_PLAN_UPD_TEST	TRIGGER	12	   ELSE

TR_P_PLAN_UPD_TEST	TRIGGER	13	      :NEW.test_lu := SYSDATE;

TR_P_PLAN_UPD_TEST	TRIGGER	14	   END IF;

TR_P_PLAN_UPD_TEST	TRIGGER	15	

TR_P_PLAN_UPD_TEST	TRIGGER	16	   IF :new.test = 2

TR_P_PLAN_UPD_TEST	TRIGGER	17	   THEN

TR_P_PLAN_UPD_TEST	TRIGGER	18	      :NEW.test_count := NVL (:old.test_count, 0) + 1;

TR_P_PLAN_UPD_TEST	TRIGGER	19	   /* INSERT INTO prob_test_history (tn, ball)

TR_P_PLAN_UPD_TEST	TRIGGER	20	         VALUES (:new.tn, :new.test_ball);

TR_P_PLAN_UPD_TEST	TRIGGER	21	

TR_P_PLAN_UPD_TEST	TRIGGER	22	    COMMIT;*/

TR_P_PLAN_UPD_TEST	TRIGGER	23	   END IF;

TR_P_PLAN_UPD_TEST	TRIGGER	24	END;
TR_P_PLAN_UPD_BALL	TRIGGER	1	TRIGGER TR_P_PLAN_UPD_ball

TR_P_PLAN_UPD_BALL	TRIGGER	2	   BEFORE UPDATE OF test_ball

TR_P_PLAN_UPD_BALL	TRIGGER	3	   ON P_PLAN

TR_P_PLAN_UPD_BALL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_PLAN_UPD_BALL	TRIGGER	5	   FOR EACH ROW

TR_P_PLAN_UPD_BALL	TRIGGER	6	DECLARE

TR_P_PLAN_UPD_BALL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_P_PLAN_UPD_BALL	TRIGGER	8	BEGIN

TR_P_PLAN_UPD_BALL	TRIGGER	9	   INSERT INTO prob_test_history (tn, ball)

TR_P_PLAN_UPD_BALL	TRIGGER	10	        VALUES (:new.tn, :new.test_ball);

TR_P_PLAN_UPD_BALL	TRIGGER	11	

TR_P_PLAN_UPD_BALL	TRIGGER	12	   COMMIT;

TR_P_PLAN_UPD_BALL	TRIGGER	13	END;
TR_P_ACTIV_TYPES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_P_ACTIV_TYPES_NEW" 

TR_P_ACTIV_TYPES_NEW	TRIGGER	2	   BEFORE INSERT

TR_P_ACTIV_TYPES_NEW	TRIGGER	3	   ON p_activ_types

TR_P_ACTIV_TYPES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_ACTIV_TYPES_NEW	TRIGGER	5	   FOR EACH ROW

TR_P_ACTIV_TYPES_NEW	TRIGGER	6	BEGIN

TR_P_ACTIV_TYPES_NEW	TRIGGER	7	   SELECT NVL(MAX(ID), 0) + 1

TR_P_ACTIV_TYPES_NEW	TRIGGER	8	     INTO :NEW.ID

TR_P_ACTIV_TYPES_NEW	TRIGGER	9	     FROM p_activ_types;

TR_P_ACTIV_TYPES_NEW	TRIGGER	10	END; 

TR_P_ACTIV_TYPES_NEW	TRIGGER	11	

TR_P_ACTIV_TYPES_NEW	TRIGGER	12	

TR_P_ACTIV_TYPES_NEW	TRIGGER	13	

TR_P_ACTIV_TYPES_NEW	TRIGGER	14	

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	1	TRIGGER PERSIK.TR_P_ACTIV_PLAN_WEEKLY

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	3	   ON PERSIK.P_ACTIV_PLAN_WEEKLY

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	5	   FOR EACH ROW

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	6	DECLARE

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	7	BEGIN

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	9	   :new.month := TO_DATE (1 || '.' || :new.m || '.' || :new.y, 'dd.mm.yyyy');

TR_P_ACTIV_PLAN_WEEKLY	TRIGGER	10	END tr_p_activ_plan_weekly;
TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	1	TRIGGER "PERSIK"."TR_P_ACTIV_PLAN_MONTHLY_CHAT" 

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	3	   ON P_ACTIV_PLAN_MONTHLY_chat

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	5	   FOR EACH ROW

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	6	DECLARE

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	7	BEGIN

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	9	END;

TR_P_ACTIV_PLAN_MONTHLY_CHAT	TRIGGER	10	

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	1	TRIGGER "PERSIK"."TR_P_ACTIV_PLAN_MONTHLY" 

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	3	   ON p_activ_plan_monthly

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	5	   FOR EACH ROW

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	6	DECLARE

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	7	BEGIN

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	9	END tr_p_activ_plan_monthly; 

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	10	

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	11	

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	12	

TR_P_ACTIV_PLAN_MONTHLY	TRIGGER	13	

TR_P_ACTIV_PLAN_DAILY	TRIGGER	1	TRIGGER PERSIK.TR_P_ACTIV_PLAN_DAILY

TR_P_ACTIV_PLAN_DAILY	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_P_ACTIV_PLAN_DAILY	TRIGGER	3	   ON PERSIK.P_ACTIV_PLAN_DAILY

TR_P_ACTIV_PLAN_DAILY	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_ACTIV_PLAN_DAILY	TRIGGER	5	   FOR EACH ROW

TR_P_ACTIV_PLAN_DAILY	TRIGGER	6	DECLARE

TR_P_ACTIV_PLAN_DAILY	TRIGGER	7	BEGIN

TR_P_ACTIV_PLAN_DAILY	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_P_ACTIV_PLAN_DAILY	TRIGGER	9	   :new.month := TRUNC (:new.data, 'mm');

TR_P_ACTIV_PLAN_DAILY	TRIGGER	10	END tr_p_activ_plan_daily;
TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	1	TRIGGER PERSIK.tr_P_ACTIVITY_TRANSIT_tmp_1

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	3	   ON PERSIK.P_ACTIVITY_TRANSIT_TMP

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	6	BEGIN

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	7	 :new.H_fio_eta := md5hash (:new.fio_eta);

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	8	   BEGIN

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	9	      IF :new.country IS NOT NULL

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	10	      THEN

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	11	         SELECT dpt_id

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	12	           INTO :new.dpt_id

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	13	           FROM departments

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	14	          WHERE manufak = :new.country;

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	15	      END IF;

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	16	   EXCEPTION

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	17	      WHEN OTHERS

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	18	      THEN

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	19	         NULL;

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	20	   END;

TR_P_ACTIVITY_TRANSIT_TMP_1	TRIGGER	21	END;
TR_PT_TEST_OFF	PROCEDURE	1	PROCEDURE        "TR_PT_TEST_OFF" (id_ IN INTEGER)

TR_PT_TEST_OFF	PROCEDURE	2	IS

TR_PT_TEST_OFF	PROCEDURE	3	   tn_           INTEGER;

TR_PT_TEST_OFF	PROCEDURE	4	   tr_pt_name_   VARCHAR2 (1024);

TR_PT_TEST_OFF	PROCEDURE	5	   fio_          VARCHAR2 (1024);

TR_PT_TEST_OFF	PROCEDURE	6	   mail_         VARCHAR2 (1024);

TR_PT_TEST_OFF	PROCEDURE	7	   chief_mail_   VARCHAR2 (1024);

TR_PT_TEST_OFF	PROCEDURE	8	   tr_pt_mail_   VARCHAR2 (1024);

TR_PT_TEST_OFF	PROCEDURE	9	   test_         INTEGER;

TR_PT_TEST_OFF	PROCEDURE	10	BEGIN

TR_PT_TEST_OFF	PROCEDURE	11	   SELECT b.h_eta,

TR_PT_TEST_OFF	PROCEDURE	12	          tr.name,

TR_PT_TEST_OFF	PROCEDURE	13	          u1.fio,

TR_PT_TEST_OFF	PROCEDURE	14	          u1.e_mail,

TR_PT_TEST_OFF	PROCEDURE	15	          u2.e_mail,

TR_PT_TEST_OFF	PROCEDURE	16	          b.test,

TR_PT_TEST_OFF	PROCEDURE	17	          u3.e_mail

TR_PT_TEST_OFF	PROCEDURE	18	     INTO tn_,

TR_PT_TEST_OFF	PROCEDURE	19	          tr_pt_name_,

TR_PT_TEST_OFF	PROCEDURE	20	          fio_,

TR_PT_TEST_OFF	PROCEDURE	21	          mail_,

TR_PT_TEST_OFF	PROCEDURE	22	          chief_mail_,

TR_PT_TEST_OFF	PROCEDURE	23	          test_,

TR_PT_TEST_OFF	PROCEDURE	24	          tr_pt_mail_

TR_PT_TEST_OFF	PROCEDURE	25	     FROM tr_pt_order_body b,

TR_PT_TEST_OFF	PROCEDURE	26	          tr_pt_order_head h,

TR_PT_TEST_OFF	PROCEDURE	27	          tr,

TR_PT_TEST_OFF	PROCEDURE	28	          user_list u1,

TR_PT_TEST_OFF	PROCEDURE	29	          user_list u2,

TR_PT_TEST_OFF	PROCEDURE	30	          user_list u3,

TR_PT_TEST_OFF	PROCEDURE	31	          parents_eta p

TR_PT_TEST_OFF	PROCEDURE	32	    WHERE     h.id = b.head

TR_PT_TEST_OFF	PROCEDURE	33	          AND tr.id = h.tr

TR_PT_TEST_OFF	PROCEDURE	34	          AND u1.h_eta = b.h_eta

TR_PT_TEST_OFF	PROCEDURE	35	          AND p.h_eta = b.h_eta

TR_PT_TEST_OFF	PROCEDURE	36	          AND u2.tn = p.chief_tn

TR_PT_TEST_OFF	PROCEDURE	37	          AND u2.dpt_id = p.dpt_id

TR_PT_TEST_OFF	PROCEDURE	38	          AND u1.dpt_id = p.dpt_id

TR_PT_TEST_OFF	PROCEDURE	39	          AND u3.tn = h.tn

TR_PT_TEST_OFF	PROCEDURE	40	          AND b.id = id_;

TR_PT_TEST_OFF	PROCEDURE	41	

TR_PT_TEST_OFF	PROCEDURE	42	   IF test_ = 1

TR_PT_TEST_OFF	PROCEDURE	43	   THEN

TR_PT_TEST_OFF	PROCEDURE	44	      UPDATE tr_pt_order_body

TR_PT_TEST_OFF	PROCEDURE	45	         SET test = 3

TR_PT_TEST_OFF	PROCEDURE	46	       WHERE id = id_;

TR_PT_TEST_OFF	PROCEDURE	47	

TR_PT_TEST_OFF	PROCEDURE	48	      /*pr_sendmail (

TR_PT_TEST_OFF	PROCEDURE	49	         mail_,

TR_PT_TEST_OFF	PROCEDURE	50	         'Тестирование',

TR_PT_TEST_OFF	PROCEDURE	51	            'Вы не прошли в установленный срок тестирование по тренингу '

TR_PT_TEST_OFF	PROCEDURE	52	         || tr_pt_name_

TR_PT_TEST_OFF	PROCEDURE	53	         || '. <br />Ссылка для прохождения тестирования – неактивна. Для прохождения тестирования Вам необходимо связаться с тренером, проводившим тренинг, и согласовать время активации теста');*/

TR_PT_TEST_OFF	PROCEDURE	54	      pr_sendmail (

TR_PT_TEST_OFF	PROCEDURE	55	         chief_mail_ || ',' || tr_pt_mail_,

TR_PT_TEST_OFF	PROCEDURE	56	            chief_mail_

TR_PT_TEST_OFF	PROCEDURE	57	         || ','

TR_PT_TEST_OFF	PROCEDURE	58	         || tr_pt_mail_

TR_PT_TEST_OFF	PROCEDURE	59	         || ' - '

TR_PT_TEST_OFF	PROCEDURE	60	         || 'Тестирование сотрудника '

TR_PT_TEST_OFF	PROCEDURE	61	         || fio_

TR_PT_TEST_OFF	PROCEDURE	62	         || ' – не проходил тестирование',

TR_PT_TEST_OFF	PROCEDURE	63	            'Сотрудник '

TR_PT_TEST_OFF	PROCEDURE	64	         || fio_

TR_PT_TEST_OFF	PROCEDURE	65	         || ' не прошел в установленный срок тестирование по тренингу '

TR_PT_TEST_OFF	PROCEDURE	66	         || tr_pt_name_);

TR_PT_TEST_OFF	PROCEDURE	67	   END IF;

TR_PT_TEST_OFF	PROCEDURE	68	END;
TR_PT_ORDER_TEST_RES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_TEST_RES_UPD" 

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	3	   ON tr_pt_order_TEST_RES

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	6	BEGIN

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	8	END;

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	9	

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	10	

TR_PT_ORDER_TEST_RES_UPD	TRIGGER	11	

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_TEST_RES_NEW" 

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	2	   BEFORE INSERT

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	3	   ON tr_pt_order_TEST_RES

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	6	BEGIN

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	8	   THEN

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	10	   END IF;

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	11	END;

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	12	

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	13	

TR_PT_ORDER_TEST_RES_NEW	TRIGGER	14	

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_TEST_HISTORY_UPD" 

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	3	   ON tr_pt_order_TEST_HISTORY    REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	4	   FOR EACH ROW

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	5	BEGIN

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	7	END;

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	8	

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	9	

TR_PT_ORDER_TEST_HISTORY_UPD	TRIGGER	10	

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_TEST_HISTORY_NEW" 

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	2	   BEFORE INSERT

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	3	   ON tr_pt_order_TEST_HISTORY    REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	4	   FOR EACH ROW

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	5	BEGIN

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	7	   THEN

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	9	   END IF;

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	10	END;

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	11	

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	12	

TR_PT_ORDER_TEST_HISTORY_NEW	TRIGGER	13	

TR_PT_ORDER_HEAD_UPD1	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_HEAD_UPD1" 

TR_PT_ORDER_HEAD_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF completed

TR_PT_ORDER_HEAD_UPD1	TRIGGER	3	   ON tr_pt_order_head

TR_PT_ORDER_HEAD_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_HEAD_UPD1	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_HEAD_UPD1	TRIGGER	6	BEGIN

TR_PT_ORDER_HEAD_UPD1	TRIGGER	7	   IF :new.completed = 1

TR_PT_ORDER_HEAD_UPD1	TRIGGER	8	   THEN

TR_PT_ORDER_HEAD_UPD1	TRIGGER	9	      :NEW.completed_lu := SYSDATE;

TR_PT_ORDER_HEAD_UPD1	TRIGGER	10	   ELSE

TR_PT_ORDER_HEAD_UPD1	TRIGGER	11	      :NEW.completed_lu := NULL;

TR_PT_ORDER_HEAD_UPD1	TRIGGER	12	   END IF;

TR_PT_ORDER_HEAD_UPD1	TRIGGER	13	END;

TR_PT_ORDER_HEAD_UPD1	TRIGGER	14	

TR_PT_ORDER_HEAD_UPD1	TRIGGER	15	

TR_PT_ORDER_HEAD_UPD1	TRIGGER	16	

TR_PT_ORDER_HEAD_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_HEAD_UPD" 

TR_PT_ORDER_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PT_ORDER_HEAD_UPD	TRIGGER	3	   ON tr_pt_order_head

TR_PT_ORDER_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_HEAD_UPD	TRIGGER	6	BEGIN

TR_PT_ORDER_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PT_ORDER_HEAD_UPD	TRIGGER	8	END;

TR_PT_ORDER_HEAD_UPD	TRIGGER	9	

TR_PT_ORDER_HEAD_UPD	TRIGGER	10	

TR_PT_ORDER_HEAD_UPD	TRIGGER	11	

TR_PT_ORDER_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_HEAD_NEW" 

TR_PT_ORDER_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_PT_ORDER_HEAD_NEW	TRIGGER	3	   ON tr_pt_order_head

TR_PT_ORDER_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_HEAD_NEW	TRIGGER	6	BEGIN

TR_PT_ORDER_HEAD_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_PT_ORDER_HEAD_NEW	TRIGGER	8	   THEN

TR_PT_ORDER_HEAD_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_PT_ORDER_HEAD_NEW	TRIGGER	10	   END IF;

TR_PT_ORDER_HEAD_NEW	TRIGGER	11	END;

TR_PT_ORDER_HEAD_NEW	TRIGGER	12	

TR_PT_ORDER_HEAD_NEW	TRIGGER	13	

TR_PT_ORDER_HEAD_NEW	TRIGGER	14	

TR_PT_ORDER_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_CHAT_UPD" 

TR_PT_ORDER_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PT_ORDER_CHAT_UPD	TRIGGER	3	   ON tr_pt_order_CHAT

TR_PT_ORDER_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_CHAT_UPD	TRIGGER	6	BEGIN

TR_PT_ORDER_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PT_ORDER_CHAT_UPD	TRIGGER	8	END;

TR_PT_ORDER_CHAT_UPD	TRIGGER	9	

TR_PT_ORDER_CHAT_UPD	TRIGGER	10	

TR_PT_ORDER_CHAT_UPD	TRIGGER	11	

TR_PT_ORDER_CHAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_CHAT_NEW" 

TR_PT_ORDER_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_PT_ORDER_CHAT_NEW	TRIGGER	3	   ON tr_pt_order_CHAT

TR_PT_ORDER_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_CHAT_NEW	TRIGGER	6	BEGIN

TR_PT_ORDER_CHAT_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_PT_ORDER_CHAT_NEW	TRIGGER	8	   THEN

TR_PT_ORDER_CHAT_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_PT_ORDER_CHAT_NEW	TRIGGER	10	   END IF;

TR_PT_ORDER_CHAT_NEW	TRIGGER	11	END;

TR_PT_ORDER_CHAT_NEW	TRIGGER	12	

TR_PT_ORDER_CHAT_NEW	TRIGGER	13	

TR_PT_ORDER_CHAT_NEW	TRIGGER	14	

TR_PT_ORDER_BODY_UPD2	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_BODY_UPD2" 

TR_PT_ORDER_BODY_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test_ball

TR_PT_ORDER_BODY_UPD2	TRIGGER	3	   ON tr_pt_order_body

TR_PT_ORDER_BODY_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_BODY_UPD2	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_BODY_UPD2	TRIGGER	6	BEGIN

TR_PT_ORDER_BODY_UPD2	TRIGGER	7	   IF :new.test = 2

TR_PT_ORDER_BODY_UPD2	TRIGGER	8	   THEN

TR_PT_ORDER_BODY_UPD2	TRIGGER	9	      INSERT INTO tr_pt_order_test_history (head, h_eta, ball)

TR_PT_ORDER_BODY_UPD2	TRIGGER	10	           VALUES (:new.head, :new.h_eta, :new.test_ball);

TR_PT_ORDER_BODY_UPD2	TRIGGER	11	   END IF;

TR_PT_ORDER_BODY_UPD2	TRIGGER	12	END;

TR_PT_ORDER_BODY_UPD2	TRIGGER	13	

TR_PT_ORDER_BODY_UPD2	TRIGGER	14	

TR_PT_ORDER_BODY_UPD2	TRIGGER	15	

TR_PT_ORDER_BODY_UPD1	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_BODY_UPD1" 

TR_PT_ORDER_BODY_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

TR_PT_ORDER_BODY_UPD1	TRIGGER	3	   ON tr_pt_order_body

TR_PT_ORDER_BODY_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_BODY_UPD1	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_BODY_UPD1	TRIGGER	6	DECLARE

TR_PT_ORDER_BODY_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_PT_ORDER_BODY_UPD1	TRIGGER	8	BEGIN

TR_PT_ORDER_BODY_UPD1	TRIGGER	9	   IF :new.test = 0

TR_PT_ORDER_BODY_UPD1	TRIGGER	10	   THEN

TR_PT_ORDER_BODY_UPD1	TRIGGER	11	      :NEW.test_lu := NULL;

TR_PT_ORDER_BODY_UPD1	TRIGGER	12	   ELSE

TR_PT_ORDER_BODY_UPD1	TRIGGER	13	      :NEW.test_lu := SYSDATE;

TR_PT_ORDER_BODY_UPD1	TRIGGER	14	   END IF;

TR_PT_ORDER_BODY_UPD1	TRIGGER	15	

TR_PT_ORDER_BODY_UPD1	TRIGGER	16	   IF :new.test = 2

TR_PT_ORDER_BODY_UPD1	TRIGGER	17	   THEN

TR_PT_ORDER_BODY_UPD1	TRIGGER	18	      :NEW.test_count := NVL (:old.test_count, 0) + 1;

TR_PT_ORDER_BODY_UPD1	TRIGGER	19	   END IF;

TR_PT_ORDER_BODY_UPD1	TRIGGER	20	END;

TR_PT_ORDER_BODY_UPD1	TRIGGER	21	

TR_PT_ORDER_BODY_UPD1	TRIGGER	22	

TR_PT_ORDER_BODY_UPD1	TRIGGER	23	

TR_PT_ORDER_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_BODY_UPD" 

TR_PT_ORDER_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PT_ORDER_BODY_UPD	TRIGGER	3	   ON tr_pt_order_body

TR_PT_ORDER_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_BODY_UPD	TRIGGER	6	BEGIN

TR_PT_ORDER_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PT_ORDER_BODY_UPD	TRIGGER	8	END;

TR_PT_ORDER_BODY_UPD	TRIGGER	9	

TR_PT_ORDER_BODY_UPD	TRIGGER	10	

TR_PT_ORDER_BODY_UPD	TRIGGER	11	

TR_PT_ORDER_BODY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_PT_ORDER_BODY_NEW

TR_PT_ORDER_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_PT_ORDER_BODY_NEW	TRIGGER	3	   ON PERSIK.TR_PT_ORDER_BODY

TR_PT_ORDER_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_BODY_NEW	TRIGGER	6	BEGIN

TR_PT_ORDER_BODY_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_PT_ORDER_BODY_NEW	TRIGGER	8	   THEN

TR_PT_ORDER_BODY_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_PT_ORDER_BODY_NEW	TRIGGER	10	   END IF;

TR_PT_ORDER_BODY_NEW	TRIGGER	11	

TR_PT_ORDER_BODY_NEW	TRIGGER	12	   IF :new.manual = 2

TR_PT_ORDER_BODY_NEW	TRIGGER	13	   THEN

TR_PT_ORDER_BODY_NEW	TRIGGER	14	      :new.completed := 1;

TR_PT_ORDER_BODY_NEW	TRIGGER	15	      :new.test := 1;

TR_PT_ORDER_BODY_NEW	TRIGGER	16	      :NEW.test_lu := SYSDATE;

TR_PT_ORDER_BODY_NEW	TRIGGER	17	   END IF;

TR_PT_ORDER_BODY_NEW	TRIGGER	18	END;
TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_BODY_ADD_JOB" 

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	3	   ON tr_pt_order_body

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	6	DECLARE

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	8	BEGIN

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	9	   IF :new.test = 1

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	10	   THEN

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	11	      add_job (48, 'BEGIN tr_pt_test_off(' || :new.id || '); END;');

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	12	   END IF;

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	13	END;

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	14	

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	15	

TR_PT_ORDER_BODY_ADD_JOB	TRIGGER	16	

TR_PT_ORDER_BODY_1	TRIGGER	1	TRIGGER "PERSIK"."TR_PT_ORDER_BODY_1" 

TR_PT_ORDER_BODY_1	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

TR_PT_ORDER_BODY_1	TRIGGER	3	   ON tr_pt_order_body

TR_PT_ORDER_BODY_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PT_ORDER_BODY_1	TRIGGER	5	   FOR EACH ROW

TR_PT_ORDER_BODY_1	TRIGGER	6	BEGIN

TR_PT_ORDER_BODY_1	TRIGGER	7	   INSERT INTO full_log (text, prg)

TR_PT_ORDER_BODY_1	TRIGGER	8	        VALUES (

TR_PT_ORDER_BODY_1	TRIGGER	9	                     'head: '

TR_PT_ORDER_BODY_1	TRIGGER	10	                  || :old.head

TR_PT_ORDER_BODY_1	TRIGGER	11	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	12	                  || :new.head

TR_PT_ORDER_BODY_1	TRIGGER	13	                  || ' '

TR_PT_ORDER_BODY_1	TRIGGER	14	                  || 'h_eta: '

TR_PT_ORDER_BODY_1	TRIGGER	15	                  || :old.h_eta

TR_PT_ORDER_BODY_1	TRIGGER	16	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	17	                  || :new.h_eta

TR_PT_ORDER_BODY_1	TRIGGER	18	                  || ' '

TR_PT_ORDER_BODY_1	TRIGGER	19	                  || 'manual: '

TR_PT_ORDER_BODY_1	TRIGGER	20	                  || :old.manual

TR_PT_ORDER_BODY_1	TRIGGER	21	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	22	                  || :new.manual

TR_PT_ORDER_BODY_1	TRIGGER	23	                  || ' '

TR_PT_ORDER_BODY_1	TRIGGER	24	                  || 'completed: '

TR_PT_ORDER_BODY_1	TRIGGER	25	                  || :old.completed

TR_PT_ORDER_BODY_1	TRIGGER	26	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	27	                  || :new.completed

TR_PT_ORDER_BODY_1	TRIGGER	28	                  || ' '

TR_PT_ORDER_BODY_1	TRIGGER	29	                  || 'test: '

TR_PT_ORDER_BODY_1	TRIGGER	30	                  || :old.test

TR_PT_ORDER_BODY_1	TRIGGER	31	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	32	                  || :new.test

TR_PT_ORDER_BODY_1	TRIGGER	33	                  || ' '

TR_PT_ORDER_BODY_1	TRIGGER	34	                  || 'test_ball: '

TR_PT_ORDER_BODY_1	TRIGGER	35	                  || :old.test_ball

TR_PT_ORDER_BODY_1	TRIGGER	36	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	37	                  || :new.test_ball

TR_PT_ORDER_BODY_1	TRIGGER	38	                  || ' '

TR_PT_ORDER_BODY_1	TRIGGER	39	                  || 'test_count: '

TR_PT_ORDER_BODY_1	TRIGGER	40	                  || :old.test_count

TR_PT_ORDER_BODY_1	TRIGGER	41	                  || '=>'

TR_PT_ORDER_BODY_1	TRIGGER	42	                  || :new.test_count

TR_PT_ORDER_BODY_1	TRIGGER	43	                  || ' ',

TR_PT_ORDER_BODY_1	TRIGGER	44	                  'tr_pt_order_body');

TR_PT_ORDER_BODY_1	TRIGGER	45	END;

TR_PT_ORDER_BODY_1	TRIGGER	46	

TR_PT_ORDER_BODY_1	TRIGGER	47	

TR_PT_ORDER_BODY_1	TRIGGER	48	

TR_PROJECT_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_UPDATE" 

TR_PROJECT_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PROJECT_UPDATE	TRIGGER	3	   ON PERSIK.PROJECT    REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_UPDATE	TRIGGER	4	   FOR EACH ROW

TR_PROJECT_UPDATE	TRIGGER	5	BEGIN

TR_PROJECT_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_PROJECT_UPDATE	TRIGGER	7	END;

TR_PROJECT_UPDATE	TRIGGER	8	

TR_PROJECT_UPDATE	TRIGGER	9	

TR_PROJECT_UPDATE	TRIGGER	10	

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_REPORT_UPDATE_COTN" 

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	3	OF COMPLETED_TN

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	4	ON PERSIK.PROJECT_REPORT 

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	5	REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	6	FOR EACH ROW

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	7	BEGIN

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	8	   IF NVL (:new.completed_tn, 0) = 0

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	9	   THEN

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	10	      :new.completed_dt := NULL;

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	11	   ELSE

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	12	      :new.completed_dt := SYSDATE;

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	13	   END IF;

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	14	END;

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	15	

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	16	

TR_PROJECT_REPORT_UPDATE_COTN	TRIGGER	17	

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_REPORT_UPDATE_CHTN" 

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	3	OF OK_CHIEF_TN

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	4	ON PERSIK.PROJECT_REPORT 

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	5	REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	6	FOR EACH ROW

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	7	BEGIN

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	8	   IF NVL (:new.ok_chief_tn, 0) = 0

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	9	   THEN

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	10	      :new.ok_chief_dt := NULL;

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	11	   ELSE

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	12	      :new.ok_chief_dt := SYSDATE;

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	13	   END IF;

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	14	END;

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	15	

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	16	

TR_PROJECT_REPORT_UPDATE_CHTN	TRIGGER	17	

TR_PROJECT_REPORT_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_REPORT_UPDATE" 

TR_PROJECT_REPORT_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PROJECT_REPORT_UPDATE	TRIGGER	3	   ON PERSIK.PROJECT_REPORT

TR_PROJECT_REPORT_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_REPORT_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_PROJECT_REPORT_UPDATE	TRIGGER	6	BEGIN

TR_PROJECT_REPORT_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PROJECT_REPORT_UPDATE	TRIGGER	8	END;

TR_PROJECT_REPORT_UPDATE	TRIGGER	9	

TR_PROJECT_REPORT_UPDATE	TRIGGER	10	

TR_PROJECT_REPORT_UPDATE	TRIGGER	11	

TR_PROJECT_REPORT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_REPORT_NEW" 

TR_PROJECT_REPORT_NEW	TRIGGER	2	   BEFORE INSERT

TR_PROJECT_REPORT_NEW	TRIGGER	3	   ON PERSIK.PROJECT_REPORT

TR_PROJECT_REPORT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_REPORT_NEW	TRIGGER	5	   FOR EACH ROW

TR_PROJECT_REPORT_NEW	TRIGGER	6	BEGIN

TR_PROJECT_REPORT_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_PROJECT_REPORT_NEW	TRIGGER	8	END;

TR_PROJECT_REPORT_NEW	TRIGGER	9	

TR_PROJECT_REPORT_NEW	TRIGGER	10	

TR_PROJECT_REPORT_NEW	TRIGGER	11	

TR_PROJECT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_NEW" 

TR_PROJECT_NEW	TRIGGER	2	   BEFORE INSERT

TR_PROJECT_NEW	TRIGGER	3	   ON PERSIK.PROJECT    REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_NEW	TRIGGER	4	   FOR EACH ROW

TR_PROJECT_NEW	TRIGGER	5	BEGIN

TR_PROJECT_NEW	TRIGGER	6	   :NEW.ID := seq_all.NEXTVAL;

TR_PROJECT_NEW	TRIGGER	7	END;

TR_PROJECT_NEW	TRIGGER	8	

TR_PROJECT_NEW	TRIGGER	9	

TR_PROJECT_NEW	TRIGGER	10	

TR_PROJECT_GRANT_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_GRANT_UPDATE" 

TR_PROJECT_GRANT_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PROJECT_GRANT_UPDATE	TRIGGER	3	   ON PERSIK.PROJECT_GRANT

TR_PROJECT_GRANT_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_GRANT_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_PROJECT_GRANT_UPDATE	TRIGGER	6	BEGIN

TR_PROJECT_GRANT_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PROJECT_GRANT_UPDATE	TRIGGER	8	END;

TR_PROJECT_GRANT_UPDATE	TRIGGER	9	

TR_PROJECT_GRANT_UPDATE	TRIGGER	10	

TR_PROJECT_GRANT_UPDATE	TRIGGER	11	

TR_PROJECT_GRANT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_GRANT_NEW" 

TR_PROJECT_GRANT_NEW	TRIGGER	2	   BEFORE INSERT

TR_PROJECT_GRANT_NEW	TRIGGER	3	   ON PERSIK.PROJECT_GRANT

TR_PROJECT_GRANT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_GRANT_NEW	TRIGGER	5	   FOR EACH ROW

TR_PROJECT_GRANT_NEW	TRIGGER	6	BEGIN

TR_PROJECT_GRANT_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_PROJECT_GRANT_NEW	TRIGGER	8	END;

TR_PROJECT_GRANT_NEW	TRIGGER	9	

TR_PROJECT_GRANT_NEW	TRIGGER	10	

TR_PROJECT_GRANT_NEW	TRIGGER	11	

TR_PROJECT_DELETE	TRIGGER	1	TRIGGER "PERSIK"."TR_PROJECT_DELETE" 

TR_PROJECT_DELETE	TRIGGER	2	   BEFORE DELETE

TR_PROJECT_DELETE	TRIGGER	3	   ON PERSIK.PROJECT

TR_PROJECT_DELETE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROJECT_DELETE	TRIGGER	5	   FOR EACH ROW

TR_PROJECT_DELETE	TRIGGER	6	DECLARE

TR_PROJECT_DELETE	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_PROJECT_DELETE	TRIGGER	8	BEGIN

TR_PROJECT_DELETE	TRIGGER	9	   DELETE FROM project_grant

TR_PROJECT_DELETE	TRIGGER	10	         WHERE prj_node_id = :old.id;

TR_PROJECT_DELETE	TRIGGER	11	

TR_PROJECT_DELETE	TRIGGER	12	   DELETE FROM project_report

TR_PROJECT_DELETE	TRIGGER	13	         WHERE prj_node_id = :old.id;

TR_PROJECT_DELETE	TRIGGER	14	

TR_PROJECT_DELETE	TRIGGER	15	   DELETE FROM project

TR_PROJECT_DELETE	TRIGGER	16	         WHERE parent = :old.id;

TR_PROJECT_DELETE	TRIGGER	17	

TR_PROJECT_DELETE	TRIGGER	18	

TR_PROJECT_DELETE	TRIGGER	19	   COMMIT;

TR_PROJECT_DELETE	TRIGGER	20	END;

TR_PROJECT_DELETE	TRIGGER	21	

TR_PROJECT_DELETE	TRIGGER	22	

TR_PROJECT_DELETE	TRIGGER	23	

TR_PROB_TEST_UPD	TRIGGER	1	TRIGGER TR_prob_TEST_UPD

TR_PROB_TEST_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PROB_TEST_UPD	TRIGGER	3	   ON prob_TEST

TR_PROB_TEST_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROB_TEST_UPD	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_UPD	TRIGGER	6	BEGIN

TR_PROB_TEST_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PROB_TEST_UPD	TRIGGER	8	END;
TR_PROB_TEST_RES_UPD	TRIGGER	1	TRIGGER TR_prob_TEST_RES_UPD 

TR_PROB_TEST_RES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PROB_TEST_RES_UPD	TRIGGER	3	   ON prob_TEST_RES

TR_PROB_TEST_RES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROB_TEST_RES_UPD	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_RES_UPD	TRIGGER	6	BEGIN

TR_PROB_TEST_RES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PROB_TEST_RES_UPD	TRIGGER	8	END;
TR_PROB_TEST_RES_NEW	TRIGGER	1	TRIGGER TR_prob_TEST_RES_NEW 

TR_PROB_TEST_RES_NEW	TRIGGER	2	   BEFORE INSERT

TR_PROB_TEST_RES_NEW	TRIGGER	3	   ON prob_TEST_RES

TR_PROB_TEST_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROB_TEST_RES_NEW	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_RES_NEW	TRIGGER	6	BEGIN

TR_PROB_TEST_RES_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_PROB_TEST_RES_NEW	TRIGGER	8	   THEN

TR_PROB_TEST_RES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_PROB_TEST_RES_NEW	TRIGGER	10	   END IF;

TR_PROB_TEST_RES_NEW	TRIGGER	11	END;
TR_PROB_TEST_NEW	TRIGGER	1	TRIGGER PERSIK.TR_prob_TEST_NEW

TR_PROB_TEST_NEW	TRIGGER	2	   BEFORE INSERT

TR_PROB_TEST_NEW	TRIGGER	3	   ON PERSIK.PROB_TEST

TR_PROB_TEST_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROB_TEST_NEW	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_NEW	TRIGGER	6	BEGIN

TR_PROB_TEST_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_PROB_TEST_NEW	TRIGGER	8	END;
TR_PROB_TEST_HISTORY_UPD	TRIGGER	1	TRIGGER TR_prob_TEST_HISTORY_UPD

TR_PROB_TEST_HISTORY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PROB_TEST_HISTORY_UPD	TRIGGER	3	   ON prob_TEST_HISTORY

TR_PROB_TEST_HISTORY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROB_TEST_HISTORY_UPD	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_HISTORY_UPD	TRIGGER	6	BEGIN

TR_PROB_TEST_HISTORY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PROB_TEST_HISTORY_UPD	TRIGGER	8	END;
TR_PROB_TEST_HISTORY_NEW	TRIGGER	1	TRIGGER TR_prob_TEST_HISTORY_NEW

TR_PROB_TEST_HISTORY_NEW	TRIGGER	2	   BEFORE INSERT

TR_PROB_TEST_HISTORY_NEW	TRIGGER	3	   ON prob_TEST_HISTORY

TR_PROB_TEST_HISTORY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PROB_TEST_HISTORY_NEW	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_HISTORY_NEW	TRIGGER	6	BEGIN

TR_PROB_TEST_HISTORY_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_PROB_TEST_HISTORY_NEW	TRIGGER	8	END;
TR_PROB_TEST_DEL	TRIGGER	1	TRIGGER TR_prob_test_DEL

TR_PROB_TEST_DEL	TRIGGER	2	   BEFORE DELETE

TR_PROB_TEST_DEL	TRIGGER	3	   ON prob_TEST

TR_PROB_TEST_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_PROB_TEST_DEL	TRIGGER	5	   FOR EACH ROW

TR_PROB_TEST_DEL	TRIGGER	6	DECLARE

TR_PROB_TEST_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_PROB_TEST_DEL	TRIGGER	8	BEGIN

TR_PROB_TEST_DEL	TRIGGER	9	   DELETE FROM prob_test

TR_PROB_TEST_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_PROB_TEST_DEL	TRIGGER	11	

TR_PROB_TEST_DEL	TRIGGER	12	   COMMIT;

TR_PROB_TEST_DEL	TRIGGER	13	END;
TR_POS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_POS_NEW" 

TR_POS_NEW	TRIGGER	2	   BEFORE INSERT

TR_POS_NEW	TRIGGER	3	   ON PERSIK.pos

TR_POS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_POS_NEW	TRIGGER	5	   FOR EACH ROW

TR_POS_NEW	TRIGGER	6	BEGIN

TR_POS_NEW	TRIGGER	7	   IF :new.pos_id IS NULL

TR_POS_NEW	TRIGGER	8	   THEN

TR_POS_NEW	TRIGGER	9	      SELECT seq_all.NEXTVAL INTO :NEW.pos_ID FROM DUAL;

TR_POS_NEW	TRIGGER	10	   END IF;

TR_POS_NEW	TRIGGER	11	END tr_pos_new;

TR_POS_NEW	TRIGGER	12	

TR_POS_NEW	TRIGGER	13	

TR_POS_NEW	TRIGGER	14	

TR_POS_MSG_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_POS_MSG_UPDATE" 

TR_POS_MSG_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_POS_MSG_UPDATE	TRIGGER	3	ON POS_MSG

TR_POS_MSG_UPDATE	TRIGGER	4	REFERENCING NEW AS New OLD AS Old

TR_POS_MSG_UPDATE	TRIGGER	5	FOR EACH ROW

TR_POS_MSG_UPDATE	TRIGGER	6	/* Formatted on 06/12/2013 9:50:07 (QP5 v5.227.12220.39724) */

TR_POS_MSG_UPDATE	TRIGGER	7	BEGIN

TR_POS_MSG_UPDATE	TRIGGER	8	   :new.lu := SYSDATE;

TR_POS_MSG_UPDATE	TRIGGER	9	END tr_pos_msg_update;

TR_POS_MSG_UPDATE	TRIGGER	10	

TR_POS_MSG_UPDATE	TRIGGER	11	

TR_POS_DEL	TRIGGER	1	TRIGGER PERSIK.TR_pos_del

TR_POS_DEL	TRIGGER	2	   BEFORE DELETE

TR_POS_DEL	TRIGGER	3	   ON PERSIK.pos

TR_POS_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_POS_DEL	TRIGGER	5	   FOR EACH ROW

TR_POS_DEL	TRIGGER	6	BEGIN

TR_POS_DEL	TRIGGER	7	   DELETE FROM files_rights

TR_POS_DEL	TRIGGER	8	         WHERE pos_id = :old.pos_id;

TR_POS_DEL	TRIGGER	9	END;
TR_PERS_CATS_UPD	TRIGGER	1	TRIGGER tr_pers_cats_upd

TR_PERS_CATS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PERS_CATS_UPD	TRIGGER	3	   ON pers_cats

TR_PERS_CATS_UPD	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_PERS_CATS_UPD	TRIGGER	5	   FOR EACH ROW

TR_PERS_CATS_UPD	TRIGGER	6	BEGIN

TR_PERS_CATS_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_PERS_CATS_UPD	TRIGGER	8	END;
TR_PERS_CATS_POSS_UPD	TRIGGER	1	TRIGGER tr_pers_cats_poss_upd

TR_PERS_CATS_POSS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PERS_CATS_POSS_UPD	TRIGGER	3	   ON pers_cats_poss

TR_PERS_CATS_POSS_UPD	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_PERS_CATS_POSS_UPD	TRIGGER	5	   FOR EACH ROW

TR_PERS_CATS_POSS_UPD	TRIGGER	6	BEGIN

TR_PERS_CATS_POSS_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_PERS_CATS_POSS_UPD	TRIGGER	8	END;
TR_PERS_CATS_NEW	TRIGGER	1	TRIGGER TR_pers_cats_NEW

TR_PERS_CATS_NEW	TRIGGER	2	   BEFORE INSERT

TR_PERS_CATS_NEW	TRIGGER	3	   ON pers_cats

TR_PERS_CATS_NEW	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_PERS_CATS_NEW	TRIGGER	5	   FOR EACH ROW

TR_PERS_CATS_NEW	TRIGGER	6	BEGIN

TR_PERS_CATS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_PERS_CATS_NEW	TRIGGER	8	END;
TR_PERS_CATS_DEL	TRIGGER	1	TRIGGER PERSIK.TR_pers_cats_del

TR_PERS_CATS_DEL	TRIGGER	2	   BEFORE DELETE

TR_PERS_CATS_DEL	TRIGGER	3	   ON PERSIK.PERS_CATS

TR_PERS_CATS_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_PERS_CATS_DEL	TRIGGER	5	   FOR EACH ROW

TR_PERS_CATS_DEL	TRIGGER	6	BEGIN

TR_PERS_CATS_DEL	TRIGGER	7	   DELETE FROM files_rights

TR_PERS_CATS_DEL	TRIGGER	8	         WHERE cat_id = :old.id;

TR_PERS_CATS_DEL	TRIGGER	9	END;
TR_PERECH_ZAT3_UPD	TRIGGER	1	TRIGGER PERSIK.TR_PERECH_ZAT3_UPD 

TR_PERECH_ZAT3_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PERECH_ZAT3_UPD	TRIGGER	3	   ON persik.PERECH_ZAT3

TR_PERECH_ZAT3_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_ZAT3_UPD	TRIGGER	5	   FOR EACH ROW

TR_PERECH_ZAT3_UPD	TRIGGER	6	BEGIN

TR_PERECH_ZAT3_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PERECH_ZAT3_UPD	TRIGGER	8	END;
TR_PERECH_ZAT3_NEW	TRIGGER	1	TRIGGER PERSIK.TR_PERECH_ZAT3_NEW 

TR_PERECH_ZAT3_NEW	TRIGGER	2	   BEFORE INSERT

TR_PERECH_ZAT3_NEW	TRIGGER	3	   ON persik.PERECH_ZAT3

TR_PERECH_ZAT3_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_ZAT3_NEW	TRIGGER	5	   FOR EACH ROW

TR_PERECH_ZAT3_NEW	TRIGGER	6	BEGIN

TR_PERECH_ZAT3_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_PERECH_ZAT3_NEW	TRIGGER	8	     INTO :NEW.ID

TR_PERECH_ZAT3_NEW	TRIGGER	9	     FROM DUAL;

TR_PERECH_ZAT3_NEW	TRIGGER	10	END;
TR_PERECH_ZAT2_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PERECH_ZAT2_UPD" 

TR_PERECH_ZAT2_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PERECH_ZAT2_UPD	TRIGGER	3	   ON persik.perech_zat2

TR_PERECH_ZAT2_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_ZAT2_UPD	TRIGGER	5	   FOR EACH ROW

TR_PERECH_ZAT2_UPD	TRIGGER	6	BEGIN

TR_PERECH_ZAT2_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PERECH_ZAT2_UPD	TRIGGER	8	END;

TR_PERECH_ZAT2_UPD	TRIGGER	9	

TR_PERECH_ZAT2_UPD	TRIGGER	10	

TR_PERECH_ZAT2_UPD	TRIGGER	11	

TR_PERECH_ZAT2_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PERECH_ZAT2_NEW" 

TR_PERECH_ZAT2_NEW	TRIGGER	2	   BEFORE INSERT

TR_PERECH_ZAT2_NEW	TRIGGER	3	   ON persik.perech_zat2

TR_PERECH_ZAT2_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_ZAT2_NEW	TRIGGER	5	   FOR EACH ROW

TR_PERECH_ZAT2_NEW	TRIGGER	6	BEGIN

TR_PERECH_ZAT2_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_PERECH_ZAT2_NEW	TRIGGER	8	     INTO :NEW.ID

TR_PERECH_ZAT2_NEW	TRIGGER	9	     FROM DUAL;

TR_PERECH_ZAT2_NEW	TRIGGER	10	END;

TR_PERECH_ZAT2_NEW	TRIGGER	11	

TR_PERECH_ZAT2_NEW	TRIGGER	12	

TR_PERECH_ZAT2_NEW	TRIGGER	13	

TR_PERECH_ZAT1_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PERECH_ZAT1_UPD" 

TR_PERECH_ZAT1_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PERECH_ZAT1_UPD	TRIGGER	3	   ON persik.perech_zat1

TR_PERECH_ZAT1_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_ZAT1_UPD	TRIGGER	5	   FOR EACH ROW

TR_PERECH_ZAT1_UPD	TRIGGER	6	BEGIN

TR_PERECH_ZAT1_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PERECH_ZAT1_UPD	TRIGGER	8	END;

TR_PERECH_ZAT1_UPD	TRIGGER	9	

TR_PERECH_ZAT1_UPD	TRIGGER	10	

TR_PERECH_ZAT1_UPD	TRIGGER	11	

TR_PERECH_ZAT1_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PERECH_ZAT1_NEW" 

TR_PERECH_ZAT1_NEW	TRIGGER	2	   BEFORE INSERT

TR_PERECH_ZAT1_NEW	TRIGGER	3	   ON persik.perech_zat1

TR_PERECH_ZAT1_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_ZAT1_NEW	TRIGGER	5	   FOR EACH ROW

TR_PERECH_ZAT1_NEW	TRIGGER	6	BEGIN

TR_PERECH_ZAT1_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_PERECH_ZAT1_NEW	TRIGGER	8	     INTO :NEW.ID

TR_PERECH_ZAT1_NEW	TRIGGER	9	     FROM DUAL;

TR_PERECH_ZAT1_NEW	TRIGGER	10	END;

TR_PERECH_ZAT1_NEW	TRIGGER	11	

TR_PERECH_ZAT1_NEW	TRIGGER	12	

TR_PERECH_ZAT1_NEW	TRIGGER	13	

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PERECH_DEPARTMENTS_UPD" 

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	3	   ON persik.perech_departments

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	6	BEGIN

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	8	END;

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	9	

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	10	

TR_PERECH_DEPARTMENTS_UPD	TRIGGER	11	

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PERECH_DEPARTMENTS_NEW" 

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	3	   ON persik.perech_departments

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	6	BEGIN

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	8	     INTO :NEW.ID

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	9	     FROM DUAL;

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	10	END;

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	11	

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	12	

TR_PERECH_DEPARTMENTS_NEW	TRIGGER	13	

TR_PARAMETERS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_PARAMETERS_UPD" 

TR_PARAMETERS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_PARAMETERS_UPD	TRIGGER	3	   ON persik.PARAMETERS

TR_PARAMETERS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PARAMETERS_UPD	TRIGGER	5	   FOR EACH ROW

TR_PARAMETERS_UPD	TRIGGER	6	BEGIN

TR_PARAMETERS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_PARAMETERS_UPD	TRIGGER	8	END; 

TR_PARAMETERS_UPD	TRIGGER	9	

TR_PARAMETERS_UPD	TRIGGER	10	

TR_PARAMETERS_UPD	TRIGGER	11	

TR_PARAMETERS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_PARAMETERS_NEW" 

TR_PARAMETERS_NEW	TRIGGER	2	   BEFORE INSERT

TR_PARAMETERS_NEW	TRIGGER	3	   ON persik.PARAMETERS

TR_PARAMETERS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_PARAMETERS_NEW	TRIGGER	5	   FOR EACH ROW

TR_PARAMETERS_NEW	TRIGGER	6	BEGIN

TR_PARAMETERS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_PARAMETERS_NEW	TRIGGER	8	     INTO :NEW.ID

TR_PARAMETERS_NEW	TRIGGER	9	     FROM DUAL;

TR_PARAMETERS_NEW	TRIGGER	10	END; 

TR_PARAMETERS_NEW	TRIGGER	11	

TR_PARAMETERS_NEW	TRIGGER	12	

TR_PARAMETERS_NEW	TRIGGER	13	

TR_OS_SPR_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_SPR_UPDATE" 

TR_OS_SPR_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_SPR_UPDATE	TRIGGER	3	   ON PERSIK.os_spr    REFERENCING NEW AS NEW OLD AS OLD

TR_OS_SPR_UPDATE	TRIGGER	4	   FOR EACH ROW

TR_OS_SPR_UPDATE	TRIGGER	5	BEGIN

TR_OS_SPR_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_OS_SPR_UPDATE	TRIGGER	7	END;

TR_OS_SPR_UPDATE	TRIGGER	8	

TR_OS_SPR_UPDATE	TRIGGER	9	

TR_OS_SPR_UPDATE	TRIGGER	10	

TR_OS_SPR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_SPR_NEW" 

TR_OS_SPR_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_SPR_NEW	TRIGGER	3	   ON PERSIK.os_spr

TR_OS_SPR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_SPR_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_SPR_NEW	TRIGGER	6	BEGIN

TR_OS_SPR_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_OS_SPR_NEW	TRIGGER	8	END;

TR_OS_SPR_NEW	TRIGGER	9	

TR_OS_SPR_NEW	TRIGGER	10	

TR_OS_SPR_NEW	TRIGGER	11	

TR_OS_SPR_DEL	TRIGGER	1	TRIGGER PERSIK.TR_OS_SPR_DEL

TR_OS_SPR_DEL	TRIGGER	2	   BEFORE DELETE

TR_OS_SPR_DEL	TRIGGER	3	   ON PERSIK.os_spr

TR_OS_SPR_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_OS_SPR_DEL	TRIGGER	5	   FOR EACH ROW

TR_OS_SPR_DEL	TRIGGER	6	DECLARE

TR_OS_SPR_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_OS_SPR_DEL	TRIGGER	8	BEGIN

TR_OS_SPR_DEL	TRIGGER	9	   DELETE FROM os_spr

TR_OS_SPR_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_OS_SPR_DEL	TRIGGER	11	

TR_OS_SPR_DEL	TRIGGER	12	   DELETE FROM os_body

TR_OS_SPR_DEL	TRIGGER	13	         WHERE spr_id = :old.id;

TR_OS_SPR_DEL	TRIGGER	14	

TR_OS_SPR_DEL	TRIGGER	15	   COMMIT;

TR_OS_SPR_DEL	TRIGGER	16	END;
TR_OS_HEAD_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_HEAD_UPDATE" 

TR_OS_HEAD_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_HEAD_UPDATE	TRIGGER	3	   ON PERSIK.os_head

TR_OS_HEAD_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_HEAD_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_OS_HEAD_UPDATE	TRIGGER	6	BEGIN

TR_OS_HEAD_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_HEAD_UPDATE	TRIGGER	8	

TR_OS_HEAD_UPDATE	TRIGGER	9	   IF :new.os_provided <> 1

TR_OS_HEAD_UPDATE	TRIGGER	10	   THEN

TR_OS_HEAD_UPDATE	TRIGGER	11	      :new.os_lu := NULL;

TR_OS_HEAD_UPDATE	TRIGGER	12	      :new.os_fio := NULL;

TR_OS_HEAD_UPDATE	TRIGGER	13	   END IF;

TR_OS_HEAD_UPDATE	TRIGGER	14	END;

TR_OS_HEAD_UPDATE	TRIGGER	15	

TR_OS_HEAD_UPDATE	TRIGGER	16	

TR_OS_HEAD_UPDATE	TRIGGER	17	

TR_OS_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_HEAD_NEW" 

TR_OS_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_HEAD_NEW	TRIGGER	3	   ON PERSIK.os_head

TR_OS_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_HEAD_NEW	TRIGGER	6	BEGIN

TR_OS_HEAD_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_OS_HEAD_NEW	TRIGGER	8	END;

TR_OS_HEAD_NEW	TRIGGER	9	

TR_OS_HEAD_NEW	TRIGGER	10	

TR_OS_HEAD_NEW	TRIGGER	11	

TR_OS_HEAD_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_HEAD_DEL" 

TR_OS_HEAD_DEL	TRIGGER	2	   BEFORE DELETE

TR_OS_HEAD_DEL	TRIGGER	3	   ON PERSIK.OS_HEAD

TR_OS_HEAD_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_HEAD_DEL	TRIGGER	5	   FOR EACH ROW

TR_OS_HEAD_DEL	TRIGGER	6	BEGIN

TR_OS_HEAD_DEL	TRIGGER	7	   DELETE FROM OS_BODY

TR_OS_HEAD_DEL	TRIGGER	8	         WHERE head_id = :old.id;

TR_OS_HEAD_DEL	TRIGGER	9	END;

TR_OS_HEAD_DEL	TRIGGER	10	

TR_OS_HEAD_DEL	TRIGGER	11	

TR_OS_HEAD_DEL	TRIGGER	12	

TR_OS_GOAL_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_GOAL_UPDATE" 

TR_OS_GOAL_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_GOAL_UPDATE	TRIGGER	3	   ON PERSIK.OS_GOAL

TR_OS_GOAL_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_GOAL_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_OS_GOAL_UPDATE	TRIGGER	6	BEGIN

TR_OS_GOAL_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_GOAL_UPDATE	TRIGGER	8	END;

TR_OS_GOAL_UPDATE	TRIGGER	9	

TR_OS_GOAL_UPDATE	TRIGGER	10	

TR_OS_GOAL_UPDATE	TRIGGER	11	

TR_OS_GOAL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_GOAL_NEW" 

TR_OS_GOAL_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_GOAL_NEW	TRIGGER	3	   ON PERSIK.OS_GOAL

TR_OS_GOAL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_GOAL_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_GOAL_NEW	TRIGGER	6	BEGIN

TR_OS_GOAL_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_OS_GOAL_NEW	TRIGGER	8	END;

TR_OS_GOAL_NEW	TRIGGER	9	

TR_OS_GOAL_NEW	TRIGGER	10	

TR_OS_GOAL_NEW	TRIGGER	11	

TR_OS_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_BODY_UPD" 

TR_OS_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_BODY_UPD	TRIGGER	3	   ON PERSIK.os_BODY

TR_OS_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_OS_BODY_UPD	TRIGGER	6	BEGIN

TR_OS_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_BODY_UPD	TRIGGER	8	END;

TR_OS_BODY_UPD	TRIGGER	9	

TR_OS_BODY_UPD	TRIGGER	10	

TR_OS_BODY_UPD	TRIGGER	11	

TR_OS_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_BODY_NEW" 

TR_OS_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_BODY_NEW	TRIGGER	3	   ON PERSIK.os_BODY

TR_OS_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_BODY_NEW	TRIGGER	6	BEGIN

TR_OS_BODY_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_OS_BODY_NEW	TRIGGER	8	END;

TR_OS_BODY_NEW	TRIGGER	9	

TR_OS_BODY_NEW	TRIGGER	10	

TR_OS_BODY_NEW	TRIGGER	11	

TR_OS_AC_SPR_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_SPR_UPDATE" 

TR_OS_AC_SPR_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_AC_SPR_UPDATE	TRIGGER	3	   ON os_ac_spr    REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_SPR_UPDATE	TRIGGER	4	   FOR EACH ROW

TR_OS_AC_SPR_UPDATE	TRIGGER	5	BEGIN

TR_OS_AC_SPR_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_OS_AC_SPR_UPDATE	TRIGGER	7	END;

TR_OS_AC_SPR_UPDATE	TRIGGER	8	

TR_OS_AC_SPR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_SPR_NEW" 

TR_OS_AC_SPR_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_AC_SPR_NEW	TRIGGER	3	   ON os_ac_spr

TR_OS_AC_SPR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_SPR_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_SPR_NEW	TRIGGER	6	BEGIN

TR_OS_AC_SPR_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_OS_AC_SPR_NEW	TRIGGER	8	END;

TR_OS_AC_SPR_NEW	TRIGGER	9	

TR_OS_AC_SPR_DEL	TRIGGER	1	TRIGGER PERSIK.TR_OS_AC_SPR_DEL

TR_OS_AC_SPR_DEL	TRIGGER	2	   BEFORE DELETE

TR_OS_AC_SPR_DEL	TRIGGER	3	   ON PERSIK.OS_AC_SPR

TR_OS_AC_SPR_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_OS_AC_SPR_DEL	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_SPR_DEL	TRIGGER	6	DECLARE

TR_OS_AC_SPR_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_OS_AC_SPR_DEL	TRIGGER	8	BEGIN

TR_OS_AC_SPR_DEL	TRIGGER	9	   DELETE FROM OS_AC_SPR

TR_OS_AC_SPR_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_OS_AC_SPR_DEL	TRIGGER	11	

TR_OS_AC_SPR_DEL	TRIGGER	12	   DELETE FROM os_ac_body

TR_OS_AC_SPR_DEL	TRIGGER	13	         WHERE spr_id = :old.id;

TR_OS_AC_SPR_DEL	TRIGGER	14	

TR_OS_AC_SPR_DEL	TRIGGER	15	   COMMIT;

TR_OS_AC_SPR_DEL	TRIGGER	16	END;
TR_OS_AC_HEAD_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_HEAD_UPDATE" 

TR_OS_AC_HEAD_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_AC_HEAD_UPDATE	TRIGGER	3	   ON OS_AC_HEAD

TR_OS_AC_HEAD_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_HEAD_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_HEAD_UPDATE	TRIGGER	6	BEGIN

TR_OS_AC_HEAD_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_AC_HEAD_UPDATE	TRIGGER	8	

TR_OS_AC_HEAD_UPDATE	TRIGGER	9	   IF :new.OS_AC_provided <> 1

TR_OS_AC_HEAD_UPDATE	TRIGGER	10	   THEN

TR_OS_AC_HEAD_UPDATE	TRIGGER	11	      :new.OS_AC_lu := NULL;

TR_OS_AC_HEAD_UPDATE	TRIGGER	12	      :new.OS_AC_fio := NULL;

TR_OS_AC_HEAD_UPDATE	TRIGGER	13	   END IF;

TR_OS_AC_HEAD_UPDATE	TRIGGER	14	END;

TR_OS_AC_HEAD_UPDATE	TRIGGER	15	

TR_OS_AC_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_HEAD_NEW" 

TR_OS_AC_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_AC_HEAD_NEW	TRIGGER	3	   ON OS_AC_HEAD

TR_OS_AC_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_HEAD_NEW	TRIGGER	6	BEGIN

TR_OS_AC_HEAD_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_OS_AC_HEAD_NEW	TRIGGER	8	END;

TR_OS_AC_HEAD_NEW	TRIGGER	9	

TR_OS_AC_HEAD_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_HEAD_DEL" 

TR_OS_AC_HEAD_DEL	TRIGGER	2	   BEFORE DELETE

TR_OS_AC_HEAD_DEL	TRIGGER	3	   ON OS_AC_HEAD

TR_OS_AC_HEAD_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_HEAD_DEL	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_HEAD_DEL	TRIGGER	6	BEGIN

TR_OS_AC_HEAD_DEL	TRIGGER	7	   DELETE FROM OS_AC_BODY

TR_OS_AC_HEAD_DEL	TRIGGER	8	         WHERE head_id = :old.id;

TR_OS_AC_HEAD_DEL	TRIGGER	9	END;

TR_OS_AC_HEAD_DEL	TRIGGER	10	

TR_OS_AC_GOAL_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_GOAL_UPDATE" 

TR_OS_AC_GOAL_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_AC_GOAL_UPDATE	TRIGGER	3	   ON OS_AC_GOAL

TR_OS_AC_GOAL_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_GOAL_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_GOAL_UPDATE	TRIGGER	6	BEGIN

TR_OS_AC_GOAL_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_AC_GOAL_UPDATE	TRIGGER	8	END;

TR_OS_AC_GOAL_UPDATE	TRIGGER	9	

TR_OS_AC_GOAL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_GOAL_NEW" 

TR_OS_AC_GOAL_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_AC_GOAL_NEW	TRIGGER	3	   ON OS_AC_GOAL

TR_OS_AC_GOAL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_GOAL_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_GOAL_NEW	TRIGGER	6	BEGIN

TR_OS_AC_GOAL_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_OS_AC_GOAL_NEW	TRIGGER	8	END;

TR_OS_AC_GOAL_NEW	TRIGGER	9	

TR_OS_AC_F_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_F_UPD" 

TR_OS_AC_F_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_AC_F_UPD	TRIGGER	3	   ON os_ac_f

TR_OS_AC_F_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_F_UPD	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_F_UPD	TRIGGER	6	BEGIN

TR_OS_AC_F_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_AC_F_UPD	TRIGGER	8	END;

TR_OS_AC_F_UPD	TRIGGER	9	

TR_OS_AC_F_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_F_NEW" 

TR_OS_AC_F_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_AC_F_NEW	TRIGGER	3	   ON os_ac_f

TR_OS_AC_F_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_F_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_F_NEW	TRIGGER	6	BEGIN

TR_OS_AC_F_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_OS_AC_F_NEW	TRIGGER	8	   THEN

TR_OS_AC_F_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_OS_AC_F_NEW	TRIGGER	10	   END IF;

TR_OS_AC_F_NEW	TRIGGER	11	END;

TR_OS_AC_F_NEW	TRIGGER	12	

TR_OS_AC_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_BODY_UPD" 

TR_OS_AC_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OS_AC_BODY_UPD	TRIGGER	3	   ON OS_AC_BODY

TR_OS_AC_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_BODY_UPD	TRIGGER	6	BEGIN

TR_OS_AC_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OS_AC_BODY_UPD	TRIGGER	8	END;

TR_OS_AC_BODY_UPD	TRIGGER	9	

TR_OS_AC_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OS_AC_BODY_NEW" 

TR_OS_AC_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_OS_AC_BODY_NEW	TRIGGER	3	   ON OS_AC_BODY

TR_OS_AC_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OS_AC_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_OS_AC_BODY_NEW	TRIGGER	6	BEGIN

TR_OS_AC_BODY_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_OS_AC_BODY_NEW	TRIGGER	8	END;

TR_OS_AC_BODY_NEW	TRIGGER	9	

TR_ORDER_TEST_RES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_TEST_RES_UPD" 

TR_ORDER_TEST_RES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ORDER_TEST_RES_UPD	TRIGGER	3	   ON PERSIK.TR_ORDER_TEST_RES

TR_ORDER_TEST_RES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_TEST_RES_UPD	TRIGGER	5	   FOR EACH ROW

TR_ORDER_TEST_RES_UPD	TRIGGER	6	BEGIN

TR_ORDER_TEST_RES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ORDER_TEST_RES_UPD	TRIGGER	8	END;

TR_ORDER_TEST_RES_UPD	TRIGGER	9	

TR_ORDER_TEST_RES_UPD	TRIGGER	10	

TR_ORDER_TEST_RES_UPD	TRIGGER	11	

TR_ORDER_TEST_RES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_TEST_RES_NEW" 

TR_ORDER_TEST_RES_NEW	TRIGGER	2	   BEFORE INSERT

TR_ORDER_TEST_RES_NEW	TRIGGER	3	   ON PERSIK.TR_ORDER_TEST_RES

TR_ORDER_TEST_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_TEST_RES_NEW	TRIGGER	5	   FOR EACH ROW

TR_ORDER_TEST_RES_NEW	TRIGGER	6	BEGIN

TR_ORDER_TEST_RES_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_ORDER_TEST_RES_NEW	TRIGGER	8	   THEN

TR_ORDER_TEST_RES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_ORDER_TEST_RES_NEW	TRIGGER	10	   END IF;

TR_ORDER_TEST_RES_NEW	TRIGGER	11	END;

TR_ORDER_TEST_RES_NEW	TRIGGER	12	

TR_ORDER_TEST_RES_NEW	TRIGGER	13	

TR_ORDER_TEST_RES_NEW	TRIGGER	14	

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_TEST_HISTORY_UPD" 

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	3	   ON PERSIK.TR_ORDER_TEST_HISTORY    REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	4	   FOR EACH ROW

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	5	BEGIN

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	7	END;

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	8	

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	9	

TR_ORDER_TEST_HISTORY_UPD	TRIGGER	10	

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_TEST_HISTORY_NEW" 

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	2	   BEFORE INSERT

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	3	   ON PERSIK.TR_ORDER_TEST_HISTORY    REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	4	   FOR EACH ROW

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	5	BEGIN

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	7	   THEN

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	9	   END IF;

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	10	END;

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	11	

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	12	

TR_ORDER_TEST_HISTORY_NEW	TRIGGER	13	

TR_ORDER_HEAD_UPD1	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_HEAD_UPD1" 

TR_ORDER_HEAD_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF completed

TR_ORDER_HEAD_UPD1	TRIGGER	3	   ON PERSIK.TR_ORDER_HEAD

TR_ORDER_HEAD_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_HEAD_UPD1	TRIGGER	5	   FOR EACH ROW

TR_ORDER_HEAD_UPD1	TRIGGER	6	BEGIN

TR_ORDER_HEAD_UPD1	TRIGGER	7	   IF :new.completed = 1

TR_ORDER_HEAD_UPD1	TRIGGER	8	   THEN

TR_ORDER_HEAD_UPD1	TRIGGER	9	      :NEW.completed_lu := SYSDATE;

TR_ORDER_HEAD_UPD1	TRIGGER	10	   ELSE

TR_ORDER_HEAD_UPD1	TRIGGER	11	      :NEW.completed_lu := NULL;

TR_ORDER_HEAD_UPD1	TRIGGER	12	   END IF;

TR_ORDER_HEAD_UPD1	TRIGGER	13	END;

TR_ORDER_HEAD_UPD1	TRIGGER	14	

TR_ORDER_HEAD_UPD1	TRIGGER	15	

TR_ORDER_HEAD_UPD1	TRIGGER	16	

TR_ORDER_HEAD_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_HEAD_UPD" 

TR_ORDER_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ORDER_HEAD_UPD	TRIGGER	3	   ON PERSIK.TR_ORDER_HEAD

TR_ORDER_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_ORDER_HEAD_UPD	TRIGGER	6	BEGIN

TR_ORDER_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ORDER_HEAD_UPD	TRIGGER	8	END;

TR_ORDER_HEAD_UPD	TRIGGER	9	

TR_ORDER_HEAD_UPD	TRIGGER	10	

TR_ORDER_HEAD_UPD	TRIGGER	11	

TR_ORDER_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_HEAD_NEW" 

TR_ORDER_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_ORDER_HEAD_NEW	TRIGGER	3	   ON PERSIK.TR_ORDER_HEAD

TR_ORDER_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_ORDER_HEAD_NEW	TRIGGER	6	BEGIN

TR_ORDER_HEAD_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_ORDER_HEAD_NEW	TRIGGER	8	   THEN

TR_ORDER_HEAD_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_ORDER_HEAD_NEW	TRIGGER	10	   END IF;

TR_ORDER_HEAD_NEW	TRIGGER	11	END;

TR_ORDER_HEAD_NEW	TRIGGER	12	

TR_ORDER_HEAD_NEW	TRIGGER	13	

TR_ORDER_HEAD_NEW	TRIGGER	14	

TR_ORDER_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_CHAT_UPD" 

TR_ORDER_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ORDER_CHAT_UPD	TRIGGER	3	   ON PERSIK.TR_ORDER_CHAT

TR_ORDER_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_ORDER_CHAT_UPD	TRIGGER	6	BEGIN

TR_ORDER_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ORDER_CHAT_UPD	TRIGGER	8	END;

TR_ORDER_CHAT_UPD	TRIGGER	9	

TR_ORDER_CHAT_UPD	TRIGGER	10	

TR_ORDER_CHAT_UPD	TRIGGER	11	

TR_ORDER_CHAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_CHAT_NEW" 

TR_ORDER_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_ORDER_CHAT_NEW	TRIGGER	3	   ON PERSIK.TR_ORDER_CHAT

TR_ORDER_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_ORDER_CHAT_NEW	TRIGGER	6	BEGIN

TR_ORDER_CHAT_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_ORDER_CHAT_NEW	TRIGGER	8	   THEN

TR_ORDER_CHAT_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_ORDER_CHAT_NEW	TRIGGER	10	   END IF;

TR_ORDER_CHAT_NEW	TRIGGER	11	END;

TR_ORDER_CHAT_NEW	TRIGGER	12	

TR_ORDER_CHAT_NEW	TRIGGER	13	

TR_ORDER_CHAT_NEW	TRIGGER	14	

TR_ORDER_BODY_UPD2	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_BODY_UPD2" 

TR_ORDER_BODY_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test_ball

TR_ORDER_BODY_UPD2	TRIGGER	3	   ON PERSIK.TR_ORDER_BODY

TR_ORDER_BODY_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_BODY_UPD2	TRIGGER	5	   FOR EACH ROW

TR_ORDER_BODY_UPD2	TRIGGER	6	BEGIN

TR_ORDER_BODY_UPD2	TRIGGER	7	   IF :new.test = 2

TR_ORDER_BODY_UPD2	TRIGGER	8	   THEN

TR_ORDER_BODY_UPD2	TRIGGER	9	      INSERT INTO tr_order_test_history (head, tn, ball)

TR_ORDER_BODY_UPD2	TRIGGER	10	           VALUES (:new.head, :new.tn, :new.test_ball);

TR_ORDER_BODY_UPD2	TRIGGER	11	   END IF;

TR_ORDER_BODY_UPD2	TRIGGER	12	END;

TR_ORDER_BODY_UPD2	TRIGGER	13	

TR_ORDER_BODY_UPD2	TRIGGER	14	

TR_ORDER_BODY_UPD2	TRIGGER	15	

TR_ORDER_BODY_UPD1	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_BODY_UPD1" 

TR_ORDER_BODY_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

TR_ORDER_BODY_UPD1	TRIGGER	3	   ON PERSIK.TR_ORDER_BODY

TR_ORDER_BODY_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_BODY_UPD1	TRIGGER	5	   FOR EACH ROW

TR_ORDER_BODY_UPD1	TRIGGER	6	DECLARE

TR_ORDER_BODY_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_ORDER_BODY_UPD1	TRIGGER	8	BEGIN

TR_ORDER_BODY_UPD1	TRIGGER	9	   IF :new.test = 0

TR_ORDER_BODY_UPD1	TRIGGER	10	   THEN

TR_ORDER_BODY_UPD1	TRIGGER	11	      :NEW.test_lu := NULL;

TR_ORDER_BODY_UPD1	TRIGGER	12	   ELSE

TR_ORDER_BODY_UPD1	TRIGGER	13	      :NEW.test_lu := SYSDATE;

TR_ORDER_BODY_UPD1	TRIGGER	14	   END IF;

TR_ORDER_BODY_UPD1	TRIGGER	15	

TR_ORDER_BODY_UPD1	TRIGGER	16	   IF :new.test = 2

TR_ORDER_BODY_UPD1	TRIGGER	17	   THEN

TR_ORDER_BODY_UPD1	TRIGGER	18	      :NEW.test_count := NVL (:old.test_count, 0) + 1;

TR_ORDER_BODY_UPD1	TRIGGER	19	   END IF;

TR_ORDER_BODY_UPD1	TRIGGER	20	END;

TR_ORDER_BODY_UPD1	TRIGGER	21	

TR_ORDER_BODY_UPD1	TRIGGER	22	

TR_ORDER_BODY_UPD1	TRIGGER	23	

TR_ORDER_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_BODY_UPD" 

TR_ORDER_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ORDER_BODY_UPD	TRIGGER	3	   ON PERSIK.TR_ORDER_BODY

TR_ORDER_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_ORDER_BODY_UPD	TRIGGER	6	BEGIN

TR_ORDER_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ORDER_BODY_UPD	TRIGGER	8	END;

TR_ORDER_BODY_UPD	TRIGGER	9	

TR_ORDER_BODY_UPD	TRIGGER	10	

TR_ORDER_BODY_UPD	TRIGGER	11	

TR_ORDER_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_BODY_NEW" 

TR_ORDER_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_ORDER_BODY_NEW	TRIGGER	3	   ON PERSIK.TR_ORDER_BODY

TR_ORDER_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_ORDER_BODY_NEW	TRIGGER	6	BEGIN

TR_ORDER_BODY_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_ORDER_BODY_NEW	TRIGGER	8	   THEN

TR_ORDER_BODY_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_ORDER_BODY_NEW	TRIGGER	10	   END IF;

TR_ORDER_BODY_NEW	TRIGGER	11	END;

TR_ORDER_BODY_NEW	TRIGGER	12	

TR_ORDER_BODY_NEW	TRIGGER	13	

TR_ORDER_BODY_NEW	TRIGGER	14	

TR_ORDER_BODY_ADD_JOB	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_BODY_ADD_JOB" 

TR_ORDER_BODY_ADD_JOB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF test

TR_ORDER_BODY_ADD_JOB	TRIGGER	3	   ON PERSIK.TR_ORDER_BODY

TR_ORDER_BODY_ADD_JOB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_BODY_ADD_JOB	TRIGGER	5	   FOR EACH ROW

TR_ORDER_BODY_ADD_JOB	TRIGGER	6	DECLARE

TR_ORDER_BODY_ADD_JOB	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_ORDER_BODY_ADD_JOB	TRIGGER	8	BEGIN

TR_ORDER_BODY_ADD_JOB	TRIGGER	9	   IF :new.test = 1

TR_ORDER_BODY_ADD_JOB	TRIGGER	10	   THEN

TR_ORDER_BODY_ADD_JOB	TRIGGER	11	      add_job (48, 'BEGIN tr_test_off(' || :new.id || '); END;');

TR_ORDER_BODY_ADD_JOB	TRIGGER	12	   /*add_job (1 / 60 / 6, 'BEGIN tr_test_off(' || :new.id || '); END;');*/

TR_ORDER_BODY_ADD_JOB	TRIGGER	13	   END IF;

TR_ORDER_BODY_ADD_JOB	TRIGGER	14	END;

TR_ORDER_BODY_ADD_JOB	TRIGGER	15	

TR_ORDER_BODY_ADD_JOB	TRIGGER	16	

TR_ORDER_BODY_ADD_JOB	TRIGGER	17	

TR_ORDER_BODY_1	TRIGGER	1	TRIGGER "PERSIK"."TR_ORDER_BODY_1" 

TR_ORDER_BODY_1	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

TR_ORDER_BODY_1	TRIGGER	3	   ON PERSIK.TR_ORDER_BODY

TR_ORDER_BODY_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ORDER_BODY_1	TRIGGER	5	   FOR EACH ROW

TR_ORDER_BODY_1	TRIGGER	6	BEGIN

TR_ORDER_BODY_1	TRIGGER	7	   INSERT INTO full_log (text, prg)

TR_ORDER_BODY_1	TRIGGER	8	        VALUES (

TR_ORDER_BODY_1	TRIGGER	9	                     'head: '

TR_ORDER_BODY_1	TRIGGER	10	                  || :old.head

TR_ORDER_BODY_1	TRIGGER	11	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	12	                  || :new.head

TR_ORDER_BODY_1	TRIGGER	13	                  || ' '

TR_ORDER_BODY_1	TRIGGER	14	                  || 'tn: '

TR_ORDER_BODY_1	TRIGGER	15	                  || :old.tn

TR_ORDER_BODY_1	TRIGGER	16	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	17	                  || :new.tn

TR_ORDER_BODY_1	TRIGGER	18	                  || ' '

TR_ORDER_BODY_1	TRIGGER	19	                  || 'manual: '

TR_ORDER_BODY_1	TRIGGER	20	                  || :old.manual

TR_ORDER_BODY_1	TRIGGER	21	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	22	                  || :new.manual

TR_ORDER_BODY_1	TRIGGER	23	                  || ' '

TR_ORDER_BODY_1	TRIGGER	24	                  || 'completed: '

TR_ORDER_BODY_1	TRIGGER	25	                  || :old.completed

TR_ORDER_BODY_1	TRIGGER	26	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	27	                  || :new.completed

TR_ORDER_BODY_1	TRIGGER	28	                  || ' '

TR_ORDER_BODY_1	TRIGGER	29	                  || 'test: '

TR_ORDER_BODY_1	TRIGGER	30	                  || :old.test

TR_ORDER_BODY_1	TRIGGER	31	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	32	                  || :new.test

TR_ORDER_BODY_1	TRIGGER	33	                  || ' '

TR_ORDER_BODY_1	TRIGGER	34	                  || 'test_ball: '

TR_ORDER_BODY_1	TRIGGER	35	                  || :old.test_ball

TR_ORDER_BODY_1	TRIGGER	36	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	37	                  || :new.test_ball

TR_ORDER_BODY_1	TRIGGER	38	                  || ' '

TR_ORDER_BODY_1	TRIGGER	39	                  || 'test_count: '

TR_ORDER_BODY_1	TRIGGER	40	                  || :old.test_count

TR_ORDER_BODY_1	TRIGGER	41	                  || '=>'

TR_ORDER_BODY_1	TRIGGER	42	                  || :new.test_count

TR_ORDER_BODY_1	TRIGGER	43	                  || ' ',

TR_ORDER_BODY_1	TRIGGER	44	                  'tr_order_body');

TR_ORDER_BODY_1	TRIGGER	45	END;

TR_ORDER_BODY_1	TRIGGER	46	

TR_ORDER_BODY_1	TRIGGER	47	

TR_ORDER_BODY_1	TRIGGER	48	

TR_OL_STAFF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_STAFF_NEW" 

TR_OL_STAFF_NEW	TRIGGER	2	   BEFORE INSERT

TR_OL_STAFF_NEW	TRIGGER	3	   ON PERSIK.OL_STAFF    REFERENCING NEW AS NEW OLD AS OLD

TR_OL_STAFF_NEW	TRIGGER	4	   FOR EACH ROW

TR_OL_STAFF_NEW	TRIGGER	5	BEGIN

TR_OL_STAFF_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_OL_STAFF_NEW	TRIGGER	7	   THEN

TR_OL_STAFF_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_OL_STAFF_NEW	TRIGGER	9	   END IF;

TR_OL_STAFF_NEW	TRIGGER	10	END;

TR_OL_STAFF_NEW	TRIGGER	11	

TR_OL_STAFF_NEW	TRIGGER	12	

TR_OL_STAFF_NEW	TRIGGER	13	

TR_OL_STAFF_LU	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_STAFF_LU" 

TR_OL_STAFF_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OL_STAFF_LU	TRIGGER	3	   ON PERSIK.OL_STAFF    REFERENCING NEW AS NEW OLD AS OLD

TR_OL_STAFF_LU	TRIGGER	4	   FOR EACH ROW

TR_OL_STAFF_LU	TRIGGER	5	BEGIN

TR_OL_STAFF_LU	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_OL_STAFF_LU	TRIGGER	7	END;

TR_OL_STAFF_LU	TRIGGER	8	

TR_OL_STAFF_LU	TRIGGER	9	

TR_OL_STAFF_LU	TRIGGER	10	

TR_OL_STAFF_FILES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_STAFF_FILES_NEW" 

TR_OL_STAFF_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_OL_STAFF_FILES_NEW	TRIGGER	3	   ON OL_STAFF_FILES

TR_OL_STAFF_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_STAFF_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_OL_STAFF_FILES_NEW	TRIGGER	6	BEGIN

TR_OL_STAFF_FILES_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_OL_STAFF_FILES_NEW	TRIGGER	8	   THEN

TR_OL_STAFF_FILES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_OL_STAFF_FILES_NEW	TRIGGER	10	   END IF;

TR_OL_STAFF_FILES_NEW	TRIGGER	11	END;

TR_OL_STAFF_FILES_NEW	TRIGGER	12	

TR_OL_STAFF_FILES_LU	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_STAFF_FILES_LU" 

TR_OL_STAFF_FILES_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OL_STAFF_FILES_LU	TRIGGER	3	   ON OL_STAFF_FILES

TR_OL_STAFF_FILES_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_STAFF_FILES_LU	TRIGGER	5	   FOR EACH ROW

TR_OL_STAFF_FILES_LU	TRIGGER	6	BEGIN

TR_OL_STAFF_FILES_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OL_STAFF_FILES_LU	TRIGGER	8	END;

TR_OL_STAFF_FILES_LU	TRIGGER	9	

TR_OL_STAFF_ACCEPTED	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_STAFF_ACCEPTED" 

TR_OL_STAFF_ACCEPTED	TRIGGER	2	   BEFORE UPDATE OF accepted

TR_OL_STAFF_ACCEPTED	TRIGGER	3	   ON PERSIK.OL_STAFF

TR_OL_STAFF_ACCEPTED	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_STAFF_ACCEPTED	TRIGGER	5	   FOR EACH ROW

TR_OL_STAFF_ACCEPTED	TRIGGER	6	DECLARE

TR_OL_STAFF_ACCEPTED	TRIGGER	7	   x       VARCHAR (4000);

TR_OL_STAFF_ACCEPTED	TRIGGER	8	   ok      VARCHAR (255);

TR_OL_STAFF_ACCEPTED	TRIGGER	9	   color   VARCHAR (255);

TR_OL_STAFF_ACCEPTED	TRIGGER	10	   d       DATE;

TR_OL_STAFF_ACCEPTED	TRIGGER	11	BEGIN

TR_OL_STAFF_ACCEPTED	TRIGGER	12	   d := SYSDATE;

TR_OL_STAFF_ACCEPTED	TRIGGER	13	

TR_OL_STAFF_ACCEPTED	TRIGGER	14	   IF :new.accepted = 1

TR_OL_STAFF_ACCEPTED	TRIGGER	15	   THEN

TR_OL_STAFF_ACCEPTED	TRIGGER	16	      :NEW.accepted_dt := d;

TR_OL_STAFF_ACCEPTED	TRIGGER	17	      ok := 'Подтверждаю';

TR_OL_STAFF_ACCEPTED	TRIGGER	18	      color := 'green';

TR_OL_STAFF_ACCEPTED	TRIGGER	19	   ELSE

TR_OL_STAFF_ACCEPTED	TRIGGER	20	      :NEW.accepted_dt := NULL;

TR_OL_STAFF_ACCEPTED	TRIGGER	21	      ok := 'Не Подтверждаю';

TR_OL_STAFF_ACCEPTED	TRIGGER	22	      color := 'red';

TR_OL_STAFF_ACCEPTED	TRIGGER	23	   END IF;

TR_OL_STAFF_ACCEPTED	TRIGGER	24	

TR_OL_STAFF_ACCEPTED	TRIGGER	25	   IF :NEW.accepted_log IS NULL

TR_OL_STAFF_ACCEPTED	TRIGGER	26	   THEN

TR_OL_STAFF_ACCEPTED	TRIGGER	27	      x := '';

TR_OL_STAFF_ACCEPTED	TRIGGER	28	   ELSE

TR_OL_STAFF_ACCEPTED	TRIGGER	29	      x := :NEW.accepted_log || CHR (13) || CHR (10);

TR_OL_STAFF_ACCEPTED	TRIGGER	30	   END IF;

TR_OL_STAFF_ACCEPTED	TRIGGER	31	

TR_OL_STAFF_ACCEPTED	TRIGGER	32	   :NEW.accepted_log :=

TR_OL_STAFF_ACCEPTED	TRIGGER	33	         x

TR_OL_STAFF_ACCEPTED	TRIGGER	34	      || '<font style="color:'

TR_OL_STAFF_ACCEPTED	TRIGGER	35	      || color

TR_OL_STAFF_ACCEPTED	TRIGGER	36	      || '">'

TR_OL_STAFF_ACCEPTED	TRIGGER	37	      || TO_CHAR (d, 'dd.mm.yyyy hh24:mi:ss')

TR_OL_STAFF_ACCEPTED	TRIGGER	38	      || ' '

TR_OL_STAFF_ACCEPTED	TRIGGER	39	      || ok

TR_OL_STAFF_ACCEPTED	TRIGGER	40	      || '</font>';

TR_OL_STAFF_ACCEPTED	TRIGGER	41	END;

TR_OL_STAFF_ACCEPTED	TRIGGER	42	

TR_OL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_NEW" 

TR_OL_NEW	TRIGGER	2	   BEFORE INSERT

TR_OL_NEW	TRIGGER	3	   ON PERSIK.ol

TR_OL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_NEW	TRIGGER	5	   FOR EACH ROW

TR_OL_NEW	TRIGGER	6	BEGIN

TR_OL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_OL_NEW	TRIGGER	8	   THEN

TR_OL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_OL_NEW	TRIGGER	10	   END IF;

TR_OL_NEW	TRIGGER	11	END;

TR_OL_NEW	TRIGGER	12	

TR_OL_NEW	TRIGGER	13	

TR_OL_NEW	TRIGGER	14	

TR_OL_LU	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_LU" 

TR_OL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OL_LU	TRIGGER	3	   ON PERSIK.ol

TR_OL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_LU	TRIGGER	5	   FOR EACH ROW

TR_OL_LU	TRIGGER	6	BEGIN

TR_OL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OL_LU	TRIGGER	8	END ol_lu;

TR_OL_LU	TRIGGER	9	

TR_OL_LU	TRIGGER	10	

TR_OL_LU	TRIGGER	11	

TR_OL_GR_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_GR_UPD" 

TR_OL_GR_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_OL_GR_UPD	TRIGGER	3	   ON OL_GR

TR_OL_GR_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_GR_UPD	TRIGGER	5	   FOR EACH ROW

TR_OL_GR_UPD	TRIGGER	6	BEGIN

TR_OL_GR_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_OL_GR_UPD	TRIGGER	8	END;

TR_OL_GR_UPD	TRIGGER	9	

TR_OL_GR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_OL_GR_NEW" 

TR_OL_GR_NEW	TRIGGER	2	   BEFORE INSERT

TR_OL_GR_NEW	TRIGGER	3	   ON OL_GR

TR_OL_GR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_OL_GR_NEW	TRIGGER	5	   FOR EACH ROW

TR_OL_GR_NEW	TRIGGER	6	BEGIN

TR_OL_GR_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_OL_GR_NEW	TRIGGER	8	     INTO :NEW.ID

TR_OL_GR_NEW	TRIGGER	9	     FROM DUAL;

TR_OL_GR_NEW	TRIGGER	10	END;

TR_OL_GR_NEW	TRIGGER	11	

TR_NEW_STAFF_NEWA	TRIGGER	1	TRIGGER "PERSIK"."TR_NEW_STAFF_NEWA" 

TR_NEW_STAFF_NEWA	TRIGGER	2	   AFTER INSERT

TR_NEW_STAFF_NEWA	TRIGGER	3	   ON PERSIK.NEW_STAFF

TR_NEW_STAFF_NEWA	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NEW_STAFF_NEWA	TRIGGER	5	   FOR EACH ROW

TR_NEW_STAFF_NEWA	TRIGGER	6	DECLARE

TR_NEW_STAFF_NEWA	TRIGGER	7	   c   INTEGER;

TR_NEW_STAFF_NEWA	TRIGGER	8	BEGIN

TR_NEW_STAFF_NEWA	TRIGGER	9	   SELECT COUNT (*)

TR_NEW_STAFF_NEWA	TRIGGER	10	     INTO c

TR_NEW_STAFF_NEWA	TRIGGER	11	     FROM user_list

TR_NEW_STAFF_NEWA	TRIGGER	12	    WHERE tn = :new.svideninn;

TR_NEW_STAFF_NEWA	TRIGGER	13	

TR_NEW_STAFF_NEWA	TRIGGER	14	   IF c > 0

TR_NEW_STAFF_NEWA	TRIGGER	15	   THEN

TR_NEW_STAFF_NEWA	TRIGGER	16	      raise_application_error (-20999, 'сотрудник с таким ИНН уже есть в базе');

TR_NEW_STAFF_NEWA	TRIGGER	17	   END IF;

TR_NEW_STAFF_NEWA	TRIGGER	18	END;

TR_NEW_STAFF_NEWA	TRIGGER	19	

TR_NEW_STAFF_NEWA	TRIGGER	20	

TR_NEW_STAFF_NEWA	TRIGGER	21	

TR_NEW_STAFF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NEW_STAFF_NEW" 

TR_NEW_STAFF_NEW	TRIGGER	2	   BEFORE INSERT

TR_NEW_STAFF_NEW	TRIGGER	3	   ON PERSIK.NEW_STAFF

TR_NEW_STAFF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NEW_STAFF_NEW	TRIGGER	5	   FOR EACH ROW

TR_NEW_STAFF_NEW	TRIGGER	6	BEGIN

TR_NEW_STAFF_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_NEW_STAFF_NEW	TRIGGER	8	   THEN

TR_NEW_STAFF_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_NEW_STAFF_NEW	TRIGGER	10	   END IF;

TR_NEW_STAFF_NEW	TRIGGER	11	END tr_new_staff_new;

TR_NEW_STAFF_NEW	TRIGGER	12	

TR_NEW_STAFF_NEW	TRIGGER	13	

TR_NEW_STAFF_NEW	TRIGGER	14	

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NEW_STAFF_CHILDS_NEW" 

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	2	   BEFORE INSERT

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	3	   ON PERSIK.NEW_STAFF_CHILDS

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	5	   FOR EACH ROW

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	6	BEGIN

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	8	   THEN

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	10	   END IF;

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	11	END tr_NEW_STAFF_CHILDS_new;

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	12	

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	13	

TR_NEW_STAFF_CHILDS_NEW	TRIGGER	14	

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NEW_STAFF_BUD_FIL_NEW" 

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	3	   ON NEW_STAFF_BUD_FIL

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	6	BEGIN

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	8	   THEN

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	10	   END IF;

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	11	END tr_NEW_STAFF_BUD_FIL_new;

TR_NEW_STAFF_BUD_FIL_NEW	TRIGGER	12	

TR_NEW_STAFF_1	TRIGGER	1	TRIGGER "PERSIK"."TR_NEW_STAFF_1" 

TR_NEW_STAFF_1	TRIGGER	2	   BEFORE UPDATE OF accepted

TR_NEW_STAFF_1	TRIGGER	3	   ON PERSIK.NEW_STAFF

TR_NEW_STAFF_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NEW_STAFF_1	TRIGGER	5	   FOR EACH ROW

TR_NEW_STAFF_1	TRIGGER	6	BEGIN

TR_NEW_STAFF_1	TRIGGER	7	   :new.accept_data := SYSDATE;

TR_NEW_STAFF_1	TRIGGER	8	END;

TR_NEW_STAFF_1	TRIGGER	9	

TR_NEW_STAFF_1	TRIGGER	10	

TR_NEW_STAFF_1	TRIGGER	11	

TR_NEWS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NEWS_NEW" 

TR_NEWS_NEW	TRIGGER	2	   BEFORE INSERT

TR_NEWS_NEW	TRIGGER	3	   ON PERSIK.news

TR_NEWS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NEWS_NEW	TRIGGER	5	   FOR EACH ROW

TR_NEWS_NEW	TRIGGER	6	BEGIN

TR_NEWS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_NEWS_NEW	TRIGGER	8	END tr_news_new;

TR_NEWS_NEW	TRIGGER	9	

TR_NEWS_NEW	TRIGGER	10	

TR_NEWS_NEW	TRIGGER	11	

TR_NEWS_ETA_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NEWS_ETA_NEW" 

TR_NEWS_ETA_NEW	TRIGGER	2	   BEFORE INSERT

TR_NEWS_ETA_NEW	TRIGGER	3	   ON PERSIK.news_eta    REFERENCING NEW AS NEW OLD AS OLD

TR_NEWS_ETA_NEW	TRIGGER	4	   FOR EACH ROW

TR_NEWS_ETA_NEW	TRIGGER	5	BEGIN

TR_NEWS_ETA_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_NEWS_ETA_NEW	TRIGGER	7	END tr_news_eta_new;

TR_NEWS_ETA_NEW	TRIGGER	8	

TR_NEWS_ETA_NEW	TRIGGER	9	

TR_NEWS_ETA_NEW	TRIGGER	10	

TR_NETS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_UPD" 

TR_NETS_UPD	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_NETS_UPD	TRIGGER	3	ON PERSIK.NETS 

TR_NETS_UPD	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_UPD	TRIGGER	5	FOR EACH ROW

TR_NETS_UPD	TRIGGER	6	DECLARE

TR_NETS_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_NETS_UPD	TRIGGER	8	BEGIN

TR_NETS_UPD	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_NETS_UPD	TRIGGER	10	

TR_NETS_UPD	TRIGGER	11	   IF :new.tn_mkk <> :old.tn_mkk

TR_NETS_UPD	TRIGGER	12	   THEN

TR_NETS_UPD	TRIGGER	13	      UPDATE nets_plan_month

TR_NETS_UPD	TRIGGER	14	         SET mkk_ter = :new.tn_mkk

TR_NETS_UPD	TRIGGER	15	       WHERE id_net = :new.id_net AND mkk_ter = :old.tn_mkk;

TR_NETS_UPD	TRIGGER	16	   END IF;

TR_NETS_UPD	TRIGGER	17	

TR_NETS_UPD	TRIGGER	18	   COMMIT;

TR_NETS_UPD	TRIGGER	19	END;

TR_NETS_UPD	TRIGGER	20	

TR_NETS_UPD	TRIGGER	21	

TR_NETS_UPD	TRIGGER	22	

TR_NETS_TERMS_YEAR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_TERMS_YEAR_NEW" 

TR_NETS_TERMS_YEAR_NEW	TRIGGER	2	   BEFORE INSERT

TR_NETS_TERMS_YEAR_NEW	TRIGGER	3	   ON persik.SDU_TERMS_YEAR

TR_NETS_TERMS_YEAR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_TERMS_YEAR_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_TERMS_YEAR_NEW	TRIGGER	6	BEGIN

TR_NETS_TERMS_YEAR_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_NETS_TERMS_YEAR_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_TERMS_YEAR_NEW	TRIGGER	9	     FROM DUAL;

TR_NETS_TERMS_YEAR_NEW	TRIGGER	10	END tr_nets_terms_year_new; 

TR_NETS_TERMS_YEAR_NEW	TRIGGER	11	

TR_NETS_TERMS_YEAR_NEW	TRIGGER	12	

TR_NETS_TERMS_YEAR_NEW	TRIGGER	13	

TR_NETS_STATUS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_STATUS_NEW" 

TR_NETS_STATUS_NEW	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_NETS_STATUS_NEW	TRIGGER	3	ON PERSIK.NETS_STATUS 

TR_NETS_STATUS_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_STATUS_NEW	TRIGGER	5	FOR EACH ROW

TR_NETS_STATUS_NEW	TRIGGER	6	BEGIN

TR_NETS_STATUS_NEW	TRIGGER	7	   SELECT NVL (MAX (ID), 0) + 1 INTO :NEW.ID FROM NETS_STATUS;

TR_NETS_STATUS_NEW	TRIGGER	8	

TR_NETS_STATUS_NEW	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_NETS_STATUS_NEW	TRIGGER	10	END;

TR_NETS_STATUS_NEW	TRIGGER	11	

TR_NETS_STATUS_NEW	TRIGGER	12	

TR_NETS_STATUS_NEW	TRIGGER	13	

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_NETS_PROP_shop_formats_UPD

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	3	   ON persik.NETS_PROP_shop_formats

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	5	   FOR EACH ROW

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	6	BEGIN

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_NETS_PROP_SHOP_FORMATS_UPD	TRIGGER	8	END;
TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_NETS_PROP_shop_formats_NEW

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	3	   ON persik.NETS_PROP_shop_formats

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	6	BEGIN

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_NETS_PROP_SHOP_FORMATS_NEW	TRIGGER	8	END;
TR_NETS_PROPS_YEAR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_PROPS_YEAR_NEW" 

TR_NETS_PROPS_YEAR_NEW	TRIGGER	2	   BEFORE INSERT

TR_NETS_PROPS_YEAR_NEW	TRIGGER	3	   ON persik.nets_props_year

TR_NETS_PROPS_YEAR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PROPS_YEAR_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_PROPS_YEAR_NEW	TRIGGER	6	BEGIN

TR_NETS_PROPS_YEAR_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_NETS_PROPS_YEAR_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_PROPS_YEAR_NEW	TRIGGER	9	     FROM DUAL;

TR_NETS_PROPS_YEAR_NEW	TRIGGER	10	END tr_nets_props_year_new; 

TR_NETS_PROPS_YEAR_NEW	TRIGGER	11	

TR_NETS_PROPS_YEAR_NEW	TRIGGER	12	

TR_NETS_PROPS_YEAR_NEW	TRIGGER	13	

TR_NETS_PROPORTIONS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_NETS_PROPORTIONS_upd

TR_NETS_PROPORTIONS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_PROPORTIONS_UPD	TRIGGER	3	   ON persik.nets_proportions

TR_NETS_PROPORTIONS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PROPORTIONS_UPD	TRIGGER	5	   FOR EACH ROW

TR_NETS_PROPORTIONS_UPD	TRIGGER	6	BEGIN

TR_NETS_PROPORTIONS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_NETS_PROPORTIONS_UPD	TRIGGER	8	END;
TR_NETS_PROPORTIONS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_NETS_PROPORTIONS_NEW

TR_NETS_PROPORTIONS_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_PROPORTIONS_NEW	TRIGGER	3	   ON persik.nets_proportions

TR_NETS_PROPORTIONS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PROPORTIONS_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_PROPORTIONS_NEW	TRIGGER	6	BEGIN

TR_NETS_PROPORTIONS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_NETS_PROPORTIONS_NEW	TRIGGER	8	END;
TR_NETS_PLAN_TYPE_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_PLAN_TYPE_NEW" 

TR_NETS_PLAN_TYPE_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_PLAN_TYPE_NEW	TRIGGER	3	   ON persik.nets_plan_type

TR_NETS_PLAN_TYPE_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PLAN_TYPE_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_PLAN_TYPE_NEW	TRIGGER	6	BEGIN

TR_NETS_PLAN_TYPE_NEW	TRIGGER	7	   SELECT NVL(MAX(ID), 0) + 1

TR_NETS_PLAN_TYPE_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_PLAN_TYPE_NEW	TRIGGER	9	     FROM nets_plan_type;

TR_NETS_PLAN_TYPE_NEW	TRIGGER	10	

TR_NETS_PLAN_TYPE_NEW	TRIGGER	11	   :NEW.lu := SYSDATE;

TR_NETS_PLAN_TYPE_NEW	TRIGGER	12	END; 

TR_NETS_PLAN_TYPE_NEW	TRIGGER	13	

TR_NETS_PLAN_TYPE_NEW	TRIGGER	14	

TR_NETS_PLAN_TYPE_NEW	TRIGGER	15	

TR_NETS_PLAN_MONTH_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_PLAN_MONTH_NEW" 

TR_NETS_PLAN_MONTH_NEW	TRIGGER	2	   BEFORE INSERT

TR_NETS_PLAN_MONTH_NEW	TRIGGER	3	   ON PERSIK.NETS_PLAN_MONTH

TR_NETS_PLAN_MONTH_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PLAN_MONTH_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_PLAN_MONTH_NEW	TRIGGER	6	DECLARE

TR_NETS_PLAN_MONTH_NEW	TRIGGER	7	   m   INTEGER;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	8	BEGIN

TR_NETS_PLAN_MONTH_NEW	TRIGGER	9	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	10	

TR_NETS_PLAN_MONTH_NEW	TRIGGER	11	   IF :new.id_net IS NOT NULL

TR_NETS_PLAN_MONTH_NEW	TRIGGER	12	   THEN

TR_NETS_PLAN_MONTH_NEW	TRIGGER	13	      SELECT COUNT (tn_mkk)

TR_NETS_PLAN_MONTH_NEW	TRIGGER	14	        INTO m

TR_NETS_PLAN_MONTH_NEW	TRIGGER	15	        FROM nets

TR_NETS_PLAN_MONTH_NEW	TRIGGER	16	       WHERE id_net = :NEW.id_net;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	17	   END IF;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	18	

TR_NETS_PLAN_MONTH_NEW	TRIGGER	19	   IF :new.id_net IS NOT NULL AND :new.mkk_ter IS NULL AND m > 0

TR_NETS_PLAN_MONTH_NEW	TRIGGER	20	   THEN

TR_NETS_PLAN_MONTH_NEW	TRIGGER	21	      SELECT tn_mkk

TR_NETS_PLAN_MONTH_NEW	TRIGGER	22	        INTO :NEW.mkk_ter

TR_NETS_PLAN_MONTH_NEW	TRIGGER	23	        FROM nets

TR_NETS_PLAN_MONTH_NEW	TRIGGER	24	       WHERE id_net = :NEW.id_net;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	25	   END IF;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	26	END tr_nets_plan_month_new;

TR_NETS_PLAN_MONTH_NEW	TRIGGER	27	

TR_NETS_PLAN_MONTH_NEW	TRIGGER	28	

TR_NETS_PLAN_MONTH_NEW	TRIGGER	29	

TR_NETS_PAY_TYPES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_PAY_TYPES_NEW" 

TR_NETS_PAY_TYPES_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_PAY_TYPES_NEW	TRIGGER	3	   ON persik.nets_pay_types

TR_NETS_PAY_TYPES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_PAY_TYPES_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_PAY_TYPES_NEW	TRIGGER	6	BEGIN

TR_NETS_PAY_TYPES_NEW	TRIGGER	7	   SELECT NVL(MAX(ID), 0) + 1

TR_NETS_PAY_TYPES_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_PAY_TYPES_NEW	TRIGGER	9	     FROM nets_pay_types;

TR_NETS_PAY_TYPES_NEW	TRIGGER	10	

TR_NETS_PAY_TYPES_NEW	TRIGGER	11	   :NEW.lu := SYSDATE;

TR_NETS_PAY_TYPES_NEW	TRIGGER	12	END; 

TR_NETS_PAY_TYPES_NEW	TRIGGER	13	

TR_NETS_PAY_TYPES_NEW	TRIGGER	14	

TR_NETS_PAY_TYPES_NEW	TRIGGER	15	

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_MEETINGS_YEAR_NEW" 

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	2	   BEFORE INSERT

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	3	   ON persik.nets_meetings_year

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	6	BEGIN

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	9	     FROM DUAL;

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	10	END tr_nets_meetings_year_new; 

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	11	

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	12	

TR_NETS_MEETINGS_YEAR_NEW	TRIGGER	13	

TR_NETS_INS	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_INS" 

TR_NETS_INS	TRIGGER	2	   BEFORE INSERT

TR_NETS_INS	TRIGGER	3	   ON PERSIK.NETS

TR_NETS_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_INS	TRIGGER	5	   FOR EACH ROW

TR_NETS_INS	TRIGGER	6	BEGIN

TR_NETS_INS	TRIGGER	7	   IF :new.id_net IS NULL

TR_NETS_INS	TRIGGER	8	   THEN

TR_NETS_INS	TRIGGER	9	      :new.id_net := seq_all.NEXTVAL;

TR_NETS_INS	TRIGGER	10	   END IF;

TR_NETS_INS	TRIGGER	11	END;

TR_NETS_INS	TRIGGER	12	

TR_NETS_INS	TRIGGER	13	

TR_NETS_DUS_TYPES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_DUS_TYPES_UPD" 

TR_NETS_DUS_TYPES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_DUS_TYPES_UPD	TRIGGER	3	   ON persik.nets_dus_types

TR_NETS_DUS_TYPES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_DUS_TYPES_UPD	TRIGGER	5	   FOR EACH ROW

TR_NETS_DUS_TYPES_UPD	TRIGGER	6	BEGIN

TR_NETS_DUS_TYPES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_NETS_DUS_TYPES_UPD	TRIGGER	8	END; 

TR_NETS_DUS_TYPES_UPD	TRIGGER	9	

TR_NETS_DUS_TYPES_UPD	TRIGGER	10	

TR_NETS_DUS_TYPES_UPD	TRIGGER	11	

TR_NETS_DUS_TYPES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_DUS_TYPES_NEW" 

TR_NETS_DUS_TYPES_NEW	TRIGGER	2	   BEFORE INSERT

TR_NETS_DUS_TYPES_NEW	TRIGGER	3	   ON persik.nets_dus_types

TR_NETS_DUS_TYPES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_DUS_TYPES_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_DUS_TYPES_NEW	TRIGGER	6	BEGIN

TR_NETS_DUS_TYPES_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_NETS_DUS_TYPES_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_DUS_TYPES_NEW	TRIGGER	9	     FROM DUAL;

TR_NETS_DUS_TYPES_NEW	TRIGGER	10	END; 

TR_NETS_DUS_TYPES_NEW	TRIGGER	11	

TR_NETS_DUS_TYPES_NEW	TRIGGER	12	

TR_NETS_DUS_TYPES_NEW	TRIGGER	13	

TR_NETS_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_DEL" 

TR_NETS_DEL	TRIGGER	2	BEFORE DELETE

TR_NETS_DEL	TRIGGER	3	ON PERSIK.NETS 

TR_NETS_DEL	TRIGGER	4	REFERENCING NEW AS New OLD AS Old

TR_NETS_DEL	TRIGGER	5	FOR EACH ROW

TR_NETS_DEL	TRIGGER	6	BEGIN

TR_NETS_DEL	TRIGGER	7	   DELETE FROM nets_plan_month

TR_NETS_DEL	TRIGGER	8	         WHERE id_net = :old.id_net;

TR_NETS_DEL	TRIGGER	9	END tr_nets_del;

TR_NETS_DEL	TRIGGER	10	

TR_NETS_DEL	TRIGGER	11	

TR_NETS_DEL	TRIGGER	12	

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_COOPERATION_TERMS_NEW" 

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	3	   ON persik.sdu_terms

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	5	   FOR EACH ROW

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	6	BEGIN

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	8	     INTO :NEW.ID

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	9	     FROM DUAL;

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	10	

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	11	   :NEW.lu := SYSDATE;

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	12	END; 

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	13	

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	14	

TR_NETS_COOPERATION_TERMS_NEW	TRIGGER	15	

TR_NETS_CONDITIONS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_NETS_CONDITIONS_NEW" 

TR_NETS_CONDITIONS_NEW	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_NETS_CONDITIONS_NEW	TRIGGER	3	ON PERSIK.NETS_conditions 

TR_NETS_CONDITIONS_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

TR_NETS_CONDITIONS_NEW	TRIGGER	5	FOR EACH ROW

TR_NETS_CONDITIONS_NEW	TRIGGER	6	BEGIN

TR_NETS_CONDITIONS_NEW	TRIGGER	7	   SELECT NVL (MAX (ID), 0) + 1 INTO :NEW.ID FROM NETS_conditions;

TR_NETS_CONDITIONS_NEW	TRIGGER	8	

TR_NETS_CONDITIONS_NEW	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_NETS_CONDITIONS_NEW	TRIGGER	10	END; 

TR_NETS_CONDITIONS_NEW	TRIGGER	11	

TR_NETS_CONDITIONS_NEW	TRIGGER	12	

TR_NETS_CONDITIONS_NEW	TRIGGER	13	

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	1	TRIGGER TR_NETPLANFACT_BEFORE_UPD

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	3	   ON NETWORKPLANFACT

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	5	   FOR EACH ROW

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	6	BEGIN

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_NETPLANFACT_BEFORE_UPD	TRIGGER	8	END;
TR_NETPLANFACT_AFTER_UPD	TRIGGER	1	TRIGGER PERSIK.TR_NETPLANFACT_AFTER_UPD

TR_NETPLANFACT_AFTER_UPD	TRIGGER	2	   AFTER INSERT OR UPDATE

TR_NETPLANFACT_AFTER_UPD	TRIGGER	3	   ON PERSIK.NETWORKPLANFACT

TR_NETPLANFACT_AFTER_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_NETPLANFACT_AFTER_UPD	TRIGGER	5	   FOR EACH ROW

TR_NETPLANFACT_AFTER_UPD	TRIGGER	6	BEGIN

TR_NETPLANFACT_AFTER_UPD	TRIGGER	7	   UPDATE nets_plan_month m

TR_NETPLANFACT_AFTER_UPD	TRIGGER	8	      SET payment_format = 1

TR_NETPLANFACT_AFTER_UPD	TRIGGER	9	    WHERE     m.plan_type IN (3, 4)

TR_NETPLANFACT_AFTER_UPD	TRIGGER	10	          AND m.payment_format = 1

TR_NETPLANFACT_AFTER_UPD	TRIGGER	11	          AND m.year = :new.year

TR_NETPLANFACT_AFTER_UPD	TRIGGER	12	          AND m.month = :new.month

TR_NETPLANFACT_AFTER_UPD	TRIGGER	13	          AND m.id_net = (SELECT id_net

TR_NETPLANFACT_AFTER_UPD	TRIGGER	14	                            FROM nets

TR_NETPLANFACT_AFTER_UPD	TRIGGER	15	                           WHERE sw_kod = :new.id_net);

TR_NETPLANFACT_AFTER_UPD	TRIGGER	16	END;
TR_MZ_SPR_VIS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_VIS_UPD" 

TR_MZ_SPR_VIS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_SPR_VIS_UPD	TRIGGER	3	   ON PERSIK.mz_spr_vis

TR_MZ_SPR_VIS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_VIS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_VIS_UPD	TRIGGER	6	BEGIN

TR_MZ_SPR_VIS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_SPR_VIS_UPD	TRIGGER	8	END;

TR_MZ_SPR_VIS_UPD	TRIGGER	9	

TR_MZ_SPR_VIS_UPD	TRIGGER	10	

TR_MZ_SPR_VIS_UPD	TRIGGER	11	

TR_MZ_SPR_VIS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_VIS_NEW" 

TR_MZ_SPR_VIS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MZ_SPR_VIS_NEW	TRIGGER	3	   ON PERSIK.mz_spr_vis

TR_MZ_SPR_VIS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_VIS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_VIS_NEW	TRIGGER	6	BEGIN

TR_MZ_SPR_VIS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MZ_SPR_VIS_NEW	TRIGGER	8	END;

TR_MZ_SPR_VIS_NEW	TRIGGER	9	

TR_MZ_SPR_VIS_NEW	TRIGGER	10	

TR_MZ_SPR_VIS_NEW	TRIGGER	11	

TR_MZ_SPR_RAS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_RAS_UPD" 

TR_MZ_SPR_RAS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_SPR_RAS_UPD	TRIGGER	3	   ON PERSIK.mz_spr_ras

TR_MZ_SPR_RAS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_RAS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_RAS_UPD	TRIGGER	6	BEGIN

TR_MZ_SPR_RAS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_SPR_RAS_UPD	TRIGGER	8	END;

TR_MZ_SPR_RAS_UPD	TRIGGER	9	

TR_MZ_SPR_RAS_UPD	TRIGGER	10	

TR_MZ_SPR_RAS_UPD	TRIGGER	11	

TR_MZ_SPR_RAS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_RAS_NEW" 

TR_MZ_SPR_RAS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MZ_SPR_RAS_NEW	TRIGGER	3	   ON PERSIK.mz_spr_ras

TR_MZ_SPR_RAS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_RAS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_RAS_NEW	TRIGGER	6	BEGIN

TR_MZ_SPR_RAS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MZ_SPR_RAS_NEW	TRIGGER	8	END;

TR_MZ_SPR_RAS_NEW	TRIGGER	9	

TR_MZ_SPR_RAS_NEW	TRIGGER	10	

TR_MZ_SPR_RAS_NEW	TRIGGER	11	

TR_MZ_SPR_PRI_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_PRI_UPD" 

TR_MZ_SPR_PRI_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_SPR_PRI_UPD	TRIGGER	3	   ON PERSIK.mz_spr_pri

TR_MZ_SPR_PRI_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_PRI_UPD	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_PRI_UPD	TRIGGER	6	BEGIN

TR_MZ_SPR_PRI_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_SPR_PRI_UPD	TRIGGER	8	END;

TR_MZ_SPR_PRI_UPD	TRIGGER	9	

TR_MZ_SPR_PRI_UPD	TRIGGER	10	

TR_MZ_SPR_PRI_UPD	TRIGGER	11	

TR_MZ_SPR_PRI_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_PRI_NEW" 

TR_MZ_SPR_PRI_NEW	TRIGGER	2	   BEFORE INSERT

TR_MZ_SPR_PRI_NEW	TRIGGER	3	   ON PERSIK.mz_spr_pri

TR_MZ_SPR_PRI_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_PRI_NEW	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_PRI_NEW	TRIGGER	6	BEGIN

TR_MZ_SPR_PRI_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MZ_SPR_PRI_NEW	TRIGGER	8	END;

TR_MZ_SPR_PRI_NEW	TRIGGER	9	

TR_MZ_SPR_PRI_NEW	TRIGGER	10	

TR_MZ_SPR_PRI_NEW	TRIGGER	11	

TR_MZ_SPR_MZ_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_MZ_UPD" 

TR_MZ_SPR_MZ_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_SPR_MZ_UPD	TRIGGER	3	   ON PERSIK.mz_spr_mz

TR_MZ_SPR_MZ_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_MZ_UPD	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_MZ_UPD	TRIGGER	6	BEGIN

TR_MZ_SPR_MZ_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_SPR_MZ_UPD	TRIGGER	8	END;

TR_MZ_SPR_MZ_UPD	TRIGGER	9	

TR_MZ_SPR_MZ_UPD	TRIGGER	10	

TR_MZ_SPR_MZ_UPD	TRIGGER	11	

TR_MZ_SPR_MZ_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_MZ_NEW" 

TR_MZ_SPR_MZ_NEW	TRIGGER	2	   BEFORE INSERT

TR_MZ_SPR_MZ_NEW	TRIGGER	3	   ON PERSIK.mz_spr_mz

TR_MZ_SPR_MZ_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_MZ_NEW	TRIGGER	5	   FOR EACH ROW

TR_MZ_SPR_MZ_NEW	TRIGGER	6	BEGIN

TR_MZ_SPR_MZ_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MZ_SPR_MZ_NEW	TRIGGER	8	END;

TR_MZ_SPR_MZ_NEW	TRIGGER	9	

TR_MZ_SPR_MZ_NEW	TRIGGER	10	

TR_MZ_SPR_MZ_NEW	TRIGGER	11	

TR_MZ_SPR_INV_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_INV_UPD" 

TR_MZ_SPR_INV_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_SPR_INV_UPD	TRIGGER	3	   ON PERSIK.MZ_SPR_inv    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_INV_UPD	TRIGGER	4	   FOR EACH ROW

TR_MZ_SPR_INV_UPD	TRIGGER	5	BEGIN

TR_MZ_SPR_INV_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MZ_SPR_INV_UPD	TRIGGER	7	END;

TR_MZ_SPR_INV_UPD	TRIGGER	8	

TR_MZ_SPR_INV_UPD	TRIGGER	9	

TR_MZ_SPR_INV_UPD	TRIGGER	10	

TR_MZ_SPR_INV_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_SPR_INV_NEW" 

TR_MZ_SPR_INV_NEW	TRIGGER	2	   BEFORE INSERT

TR_MZ_SPR_INV_NEW	TRIGGER	3	   ON PERSIK.MZ_SPR_inv    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_SPR_INV_NEW	TRIGGER	4	   FOR EACH ROW

TR_MZ_SPR_INV_NEW	TRIGGER	5	BEGIN

TR_MZ_SPR_INV_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MZ_SPR_INV_NEW	TRIGGER	7	END;

TR_MZ_SPR_INV_NEW	TRIGGER	8	

TR_MZ_SPR_INV_NEW	TRIGGER	9	

TR_MZ_SPR_INV_NEW	TRIGGER	10	

TR_MZ_REP_M_PDS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_M_PDS" 

TR_MZ_REP_M_PDS	TRIGGER	2	   BEFORE INSERT

TR_MZ_REP_M_PDS	TRIGGER	3	   ON PERSIK.mz_rep_m_pds

TR_MZ_REP_M_PDS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_M_PDS	TRIGGER	5	   FOR EACH ROW

TR_MZ_REP_M_PDS	TRIGGER	6	BEGIN

TR_MZ_REP_M_PDS	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MZ_REP_M_PDS	TRIGGER	8	END;

TR_MZ_REP_M_PDS	TRIGGER	9	

TR_MZ_REP_M_PDS	TRIGGER	10	

TR_MZ_REP_M_PDS	TRIGGER	11	

TR_MZ_REP_M	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_M" 

TR_MZ_REP_M	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_M	TRIGGER	3	   ON mz_rep_m

TR_MZ_REP_M	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_M	TRIGGER	5	   FOR EACH ROW

TR_MZ_REP_M	TRIGGER	6	DECLARE

TR_MZ_REP_M	TRIGGER	7	BEGIN

TR_MZ_REP_M	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_MZ_REP_M	TRIGGER	9	END;

TR_MZ_REP_M	TRIGGER	10	

TR_MZ_REP_M	TRIGGER	11	

TR_MZ_REP_M	TRIGGER	12	

TR_MZ_REP_F_RSS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_F_RSS" 

TR_MZ_REP_F_RSS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_F_RSS	TRIGGER	3	   ON PERSIK.MZ_REP_F_rss    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_F_RSS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_F_RSS	TRIGGER	5	DECLARE

TR_MZ_REP_F_RSS	TRIGGER	6	BEGIN

TR_MZ_REP_F_RSS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_F_RSS	TRIGGER	8	END;

TR_MZ_REP_F_RSS	TRIGGER	9	

TR_MZ_REP_F_RSS	TRIGGER	10	

TR_MZ_REP_F_RSS	TRIGGER	11	

TR_MZ_REP_F_RAS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_F_RAS" 

TR_MZ_REP_F_RAS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_F_RAS	TRIGGER	3	   ON mz_rep_f_ras

TR_MZ_REP_F_RAS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_F_RAS	TRIGGER	5	   FOR EACH ROW

TR_MZ_REP_F_RAS	TRIGGER	6	DECLARE

TR_MZ_REP_F_RAS	TRIGGER	7	BEGIN

TR_MZ_REP_F_RAS	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_MZ_REP_F_RAS	TRIGGER	9	END;

TR_MZ_REP_F_RAS	TRIGGER	10	

TR_MZ_REP_F_RAS	TRIGGER	11	

TR_MZ_REP_F_RAS	TRIGGER	12	

TR_MZ_REP_D_VIS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_VIS" 

TR_MZ_REP_D_VIS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_VIS	TRIGGER	3	   ON PERSIK.MZ_REP_D_VIS    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_VIS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_VIS	TRIGGER	5	DECLARE

TR_MZ_REP_D_VIS	TRIGGER	6	BEGIN

TR_MZ_REP_D_VIS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_VIS	TRIGGER	8	END;

TR_MZ_REP_D_VIS	TRIGGER	9	

TR_MZ_REP_D_VIS	TRIGGER	10	

TR_MZ_REP_D_VIS	TRIGGER	11	

TR_MZ_REP_D_SPR_VIS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_SPR_VIS" 

TR_MZ_REP_D_SPR_VIS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_SPR_VIS	TRIGGER	3	   ON PERSIK.MZ_REP_D_SPR_VIS    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_SPR_VIS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_SPR_VIS	TRIGGER	5	DECLARE

TR_MZ_REP_D_SPR_VIS	TRIGGER	6	BEGIN

TR_MZ_REP_D_SPR_VIS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_SPR_VIS	TRIGGER	8	END;

TR_MZ_REP_D_SPR_VIS	TRIGGER	9	

TR_MZ_REP_D_SPR_VIS	TRIGGER	10	

TR_MZ_REP_D_SPR_VIS	TRIGGER	11	

TR_MZ_REP_D_SPR_RSS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_SPR_RSS" 

TR_MZ_REP_D_SPR_RSS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_SPR_RSS	TRIGGER	3	   ON PERSIK.MZ_REP_D_SPR_rss    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_SPR_RSS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_SPR_RSS	TRIGGER	5	DECLARE

TR_MZ_REP_D_SPR_RSS	TRIGGER	6	BEGIN

TR_MZ_REP_D_SPR_RSS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_SPR_RSS	TRIGGER	8	END;

TR_MZ_REP_D_SPR_RSS	TRIGGER	9	

TR_MZ_REP_D_SPR_RSS	TRIGGER	10	

TR_MZ_REP_D_SPR_RSS	TRIGGER	11	

TR_MZ_REP_D_SPR_RAS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_SPR_RAS" 

TR_MZ_REP_D_SPR_RAS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_SPR_RAS	TRIGGER	3	   ON PERSIK.MZ_REP_D_SPR_RAS    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_SPR_RAS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_SPR_RAS	TRIGGER	5	DECLARE

TR_MZ_REP_D_SPR_RAS	TRIGGER	6	BEGIN

TR_MZ_REP_D_SPR_RAS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_SPR_RAS	TRIGGER	8	END;

TR_MZ_REP_D_SPR_RAS	TRIGGER	9	

TR_MZ_REP_D_SPR_RAS	TRIGGER	10	

TR_MZ_REP_D_SPR_RAS	TRIGGER	11	

TR_MZ_REP_D_SPR_PRI	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_SPR_PRI" 

TR_MZ_REP_D_SPR_PRI	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_SPR_PRI	TRIGGER	3	   ON PERSIK.MZ_REP_D_SPR_PRI    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_SPR_PRI	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_SPR_PRI	TRIGGER	5	DECLARE

TR_MZ_REP_D_SPR_PRI	TRIGGER	6	BEGIN

TR_MZ_REP_D_SPR_PRI	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_SPR_PRI	TRIGGER	8	END;

TR_MZ_REP_D_SPR_PRI	TRIGGER	9	

TR_MZ_REP_D_SPR_PRI	TRIGGER	10	

TR_MZ_REP_D_SPR_PRI	TRIGGER	11	

TR_MZ_REP_D_SPR_INV	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_SPR_INV" 

TR_MZ_REP_D_SPR_INV	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_SPR_INV	TRIGGER	3	   ON PERSIK.MZ_REP_D_SPR_inv    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_SPR_INV	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_SPR_INV	TRIGGER	5	DECLARE

TR_MZ_REP_D_SPR_INV	TRIGGER	6	BEGIN

TR_MZ_REP_D_SPR_INV	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_SPR_INV	TRIGGER	8	END;

TR_MZ_REP_D_SPR_INV	TRIGGER	9	

TR_MZ_REP_D_SPR_INV	TRIGGER	10	

TR_MZ_REP_D_SPR_INV	TRIGGER	11	

TR_MZ_REP_D_RSS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_RSS" 

TR_MZ_REP_D_RSS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_RSS	TRIGGER	3	   ON PERSIK.MZ_REP_D_rss    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_RSS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_RSS	TRIGGER	5	DECLARE

TR_MZ_REP_D_RSS	TRIGGER	6	BEGIN

TR_MZ_REP_D_RSS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_RSS	TRIGGER	8	END;

TR_MZ_REP_D_RSS	TRIGGER	9	

TR_MZ_REP_D_RSS	TRIGGER	10	

TR_MZ_REP_D_RSS	TRIGGER	11	

TR_MZ_REP_D_RAS	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_RAS" 

TR_MZ_REP_D_RAS	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_RAS	TRIGGER	3	   ON PERSIK.MZ_REP_D_RAS    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_RAS	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_RAS	TRIGGER	5	DECLARE

TR_MZ_REP_D_RAS	TRIGGER	6	BEGIN

TR_MZ_REP_D_RAS	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_RAS	TRIGGER	8	END;

TR_MZ_REP_D_RAS	TRIGGER	9	

TR_MZ_REP_D_RAS	TRIGGER	10	

TR_MZ_REP_D_RAS	TRIGGER	11	

TR_MZ_REP_D_PRI	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_PRI" 

TR_MZ_REP_D_PRI	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_PRI	TRIGGER	3	   ON PERSIK.MZ_REP_D_PRI    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_PRI	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_PRI	TRIGGER	5	DECLARE

TR_MZ_REP_D_PRI	TRIGGER	6	BEGIN

TR_MZ_REP_D_PRI	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_PRI	TRIGGER	8	END;

TR_MZ_REP_D_PRI	TRIGGER	9	

TR_MZ_REP_D_PRI	TRIGGER	10	

TR_MZ_REP_D_PRI	TRIGGER	11	

TR_MZ_REP_D_INV	TRIGGER	1	TRIGGER "PERSIK"."TR_MZ_REP_D_INV" 

TR_MZ_REP_D_INV	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MZ_REP_D_INV	TRIGGER	3	   ON PERSIK.MZ_REP_D_inv    REFERENCING NEW AS NEW OLD AS OLD

TR_MZ_REP_D_INV	TRIGGER	4	   FOR EACH ROW

TR_MZ_REP_D_INV	TRIGGER	5	DECLARE

TR_MZ_REP_D_INV	TRIGGER	6	BEGIN

TR_MZ_REP_D_INV	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MZ_REP_D_INV	TRIGGER	8	END;

TR_MZ_REP_D_INV	TRIGGER	9	

TR_MZ_REP_D_INV	TRIGGER	10	

TR_MZ_REP_D_INV	TRIGGER	11	

TR_MS_TASK_TYPE_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ms_task_type_UPD

TR_MS_TASK_TYPE_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TASK_TYPE_UPD	TRIGGER	3	   ON PERSIK.ms_task_type

TR_MS_TASK_TYPE_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_TYPE_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_TYPE_UPD	TRIGGER	6	BEGIN

TR_MS_TASK_TYPE_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TASK_TYPE_UPD	TRIGGER	8	END;
TR_MS_TASK_TYPE_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ms_task_type_NEW

TR_MS_TASK_TYPE_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_TASK_TYPE_NEW	TRIGGER	3	   ON PERSIK.ms_task_type

TR_MS_TASK_TYPE_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_TYPE_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_TYPE_NEW	TRIGGER	6	BEGIN

TR_MS_TASK_TYPE_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_MS_TASK_TYPE_NEW	TRIGGER	8	   THEN

TR_MS_TASK_TYPE_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_MS_TASK_TYPE_NEW	TRIGGER	10	   END IF;

TR_MS_TASK_TYPE_NEW	TRIGGER	11	END;
TR_MS_TASK_STATUS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ms_task_status_UPD

TR_MS_TASK_STATUS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TASK_STATUS_UPD	TRIGGER	3	   ON PERSIK.ms_task_status

TR_MS_TASK_STATUS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_STATUS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_STATUS_UPD	TRIGGER	6	BEGIN

TR_MS_TASK_STATUS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TASK_STATUS_UPD	TRIGGER	8	END;
TR_MS_TASK_STATUS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ms_task_status_NEW

TR_MS_TASK_STATUS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_TASK_STATUS_NEW	TRIGGER	3	   ON PERSIK.ms_task_status

TR_MS_TASK_STATUS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_STATUS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_STATUS_NEW	TRIGGER	6	BEGIN

TR_MS_TASK_STATUS_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_MS_TASK_STATUS_NEW	TRIGGER	8	   THEN

TR_MS_TASK_STATUS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_MS_TASK_STATUS_NEW	TRIGGER	10	   END IF;

TR_MS_TASK_STATUS_NEW	TRIGGER	11	END;
TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MS_TASK_STATUS_log_UPD

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	3	   ON PERSIK.MS_TASK_STATUS_log

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	6	BEGIN

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TASK_STATUS_LOG_UPD	TRIGGER	8	END;
TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	1	TRIGGER PERSIK.TR_MS_TASK_STATUS_log_NEW

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	3	   ON PERSIK.MS_TASK_STATUS_log

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	6	BEGIN

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_TASK_STATUS_LOG_NEW	TRIGGER	8	END;
TR_MS_TASK_CHAT_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MS_TASK_CHAT_UPD

TR_MS_TASK_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TASK_CHAT_UPD	TRIGGER	3	   ON PERSIK.MS_TASK_CHAT

TR_MS_TASK_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_CHAT_UPD	TRIGGER	6	BEGIN

TR_MS_TASK_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TASK_CHAT_UPD	TRIGGER	8	END;
TR_MS_TASK_CHAT_INS	TRIGGER	1	TRIGGER PERSIK.TR_MS_TASK_CHAT_INS

TR_MS_TASK_CHAT_INS	TRIGGER	2	   BEFORE INSERT

TR_MS_TASK_CHAT_INS	TRIGGER	3	   ON PERSIK.MS_TASK_CHAT

TR_MS_TASK_CHAT_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_CHAT_INS	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_CHAT_INS	TRIGGER	6	BEGIN

TR_MS_TASK_CHAT_INS	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_TASK_CHAT_INS	TRIGGER	8	END;
TR_MS_TASK_1	TRIGGER	1	TRIGGER PERSIK.TR_MS_TASK_1

TR_MS_TASK_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TASK_1	TRIGGER	3	   ON PERSIK.MS_TASK

TR_MS_TASK_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TASK_1	TRIGGER	5	   FOR EACH ROW

TR_MS_TASK_1	TRIGGER	6	DECLARE

TR_MS_TASK_1	TRIGGER	7	   v_mail      VARCHAR2 (255);

TR_MS_TASK_1	TRIGGER	8	   v_address   VARCHAR2 (255);

TR_MS_TASK_1	TRIGGER	9	   v_agent     VARCHAR2 (255);

TR_MS_TASK_1	TRIGGER	10	   v_status    INTEGER;

TR_MS_TASK_1	TRIGGER	11	BEGIN

TR_MS_TASK_1	TRIGGER	12	   :NEW.lu := SYSDATE;

TR_MS_TASK_1	TRIGGER	13	

TR_MS_TASK_1	TRIGGER	14	   IF INSERTING

TR_MS_TASK_1	TRIGGER	15	   THEN

TR_MS_TASK_1	TRIGGER	16	      :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_TASK_1	TRIGGER	17	   END IF;

TR_MS_TASK_1	TRIGGER	18	

TR_MS_TASK_1	TRIGGER	19	   IF (   INSERTING

TR_MS_TASK_1	TRIGGER	20	       OR (    UPDATING

TR_MS_TASK_1	TRIGGER	21	           AND (:new.ag_id <> :old.ag_id OR :new.kod_tp <> :old.kod_tp)))

TR_MS_TASK_1	TRIGGER	22	   THEN

TR_MS_TASK_1	TRIGGER	23	      SELECT MAX (rh_tn)

TR_MS_TASK_1	TRIGGER	24	        INTO :new.svms_tn

TR_MS_TASK_1	TRIGGER	25	        FROM ms_rep_routes1 r

TR_MS_TASK_1	TRIGGER	26	       WHERE     TRUNC (rb_data, 'mm') = TRUNC (SYSDATE, 'mm')

TR_MS_TASK_1	TRIGGER	27	             AND rb_ag_id = :new.ag_id

TR_MS_TASK_1	TRIGGER	28	             AND rb_kodtp = :new.kod_tp

TR_MS_TASK_1	TRIGGER	29	             AND ROWNUM = 1;

TR_MS_TASK_1	TRIGGER	30	   END IF;

TR_MS_TASK_1	TRIGGER	31	

TR_MS_TASK_1	TRIGGER	32	   IF INSERTING AND :new.svms_tn IS NOT NULL

TR_MS_TASK_1	TRIGGER	33	   THEN

TR_MS_TASK_1	TRIGGER	34	      SELECT e_mail

TR_MS_TASK_1	TRIGGER	35	        INTO v_mail

TR_MS_TASK_1	TRIGGER	36	        FROM user_list

TR_MS_TASK_1	TRIGGER	37	       WHERE tn = :new.svms_tn;

TR_MS_TASK_1	TRIGGER	38	

TR_MS_TASK_1	TRIGGER	39	      SELECT ur_tz_name || ' ' || tz_address

TR_MS_TASK_1	TRIGGER	40	        INTO v_address

TR_MS_TASK_1	TRIGGER	41	        FROM cpp

TR_MS_TASK_1	TRIGGER	42	       WHERE kodtp = :new.kod_tp;

TR_MS_TASK_1	TRIGGER	43	

TR_MS_TASK_1	TRIGGER	44	

TR_MS_TASK_1	TRIGGER	45	      SELECT name

TR_MS_TASK_1	TRIGGER	46	        INTO v_agent

TR_MS_TASK_1	TRIGGER	47	        FROM routes_agents

TR_MS_TASK_1	TRIGGER	48	       WHERE id = :new.ag_id;

TR_MS_TASK_1	TRIGGER	49	

TR_MS_TASK_1	TRIGGER	50	

TR_MS_TASK_1	TRIGGER	51	      pr_sendmail (

TR_MS_TASK_1	TRIGGER	52	         v_mail,

TR_MS_TASK_1	TRIGGER	53	            'Создана задача №'

TR_MS_TASK_1	TRIGGER	54	         || :new.id

TR_MS_TASK_1	TRIGGER	55	         || ' заказчиком '

TR_MS_TASK_1	TRIGGER	56	         || v_agent

TR_MS_TASK_1	TRIGGER	57	         || '',

TR_MS_TASK_1	TRIGGER	58	            'Добрый день.<br>На портале создана задача №'

TR_MS_TASK_1	TRIGGER	59	         || :new.id

TR_MS_TASK_1	TRIGGER	60	         || ' заказчиком '

TR_MS_TASK_1	TRIGGER	61	         || v_agent

TR_MS_TASK_1	TRIGGER	62	         || '.<br>'

TR_MS_TASK_1	TRIGGER	63	         || 'Торговая точка - '

TR_MS_TASK_1	TRIGGER	64	         || v_address

TR_MS_TASK_1	TRIGGER	65	         || '.<br>'

TR_MS_TASK_1	TRIGGER	66	         || 'Задача - '

TR_MS_TASK_1	TRIGGER	67	         || :new.descr

TR_MS_TASK_1	TRIGGER	68	         || '.<br>'

TR_MS_TASK_1	TRIGGER	69	         || 'перейдите по <a href="https://ps.avk.ua/?action=ms_task&id='

TR_MS_TASK_1	TRIGGER	70	         || :new.id

TR_MS_TASK_1	TRIGGER	71	         || '&edit=1">ссылке</a> для детального ознакомления и начала работ по задаче.');

TR_MS_TASK_1	TRIGGER	72	   END IF;

TR_MS_TASK_1	TRIGGER	73	

TR_MS_TASK_1	TRIGGER	74	   IF (UPDATING AND (:new.status <> :old.status))

TR_MS_TASK_1	TRIGGER	75	   THEN

TR_MS_TASK_1	TRIGGER	76	      SELECT kod

TR_MS_TASK_1	TRIGGER	77	        INTO v_status

TR_MS_TASK_1	TRIGGER	78	        FROM ms_task_status

TR_MS_TASK_1	TRIGGER	79	       WHERE id = :new.status;

TR_MS_TASK_1	TRIGGER	80	

TR_MS_TASK_1	TRIGGER	81	      SELECT email

TR_MS_TASK_1	TRIGGER	82	        INTO v_mail

TR_MS_TASK_1	TRIGGER	83	        FROM routes_agents_pwd

TR_MS_TASK_1	TRIGGER	84	       WHERE login = :new.creator;

TR_MS_TASK_1	TRIGGER	85	

TR_MS_TASK_1	TRIGGER	86	      IF v_mail IS NOT NULL

TR_MS_TASK_1	TRIGGER	87	      THEN

TR_MS_TASK_1	TRIGGER	88	         IF v_status = 1 -- correcting task

TR_MS_TASK_1	TRIGGER	89	         THEN

TR_MS_TASK_1	TRIGGER	90	            pr_sendmail (

TR_MS_TASK_1	TRIGGER	91	               v_mail,

TR_MS_TASK_1	TRIGGER	92	               'Изменение статуса задачи',

TR_MS_TASK_1	TRIGGER	93	                  'По Вашей задаче №'

TR_MS_TASK_1	TRIGGER	94	               || :new.id

TR_MS_TASK_1	TRIGGER	95	               || ' требуется предоставить уточнение. Для перехода нажмите <a href="http://merchservice.com.ua/login.php?action=ms_task_list&id='

TR_MS_TASK_1	TRIGGER	96	               || :new.id

TR_MS_TASK_1	TRIGGER	97	               || '&edit=1">ссылку</a> ');

TR_MS_TASK_1	TRIGGER	98	         END IF;

TR_MS_TASK_1	TRIGGER	99	

TR_MS_TASK_1	TRIGGER	100	         IF v_status = 4 -- task is done

TR_MS_TASK_1	TRIGGER	101	         THEN

TR_MS_TASK_1	TRIGGER	102	            pr_sendmail (

TR_MS_TASK_1	TRIGGER	103	               v_mail,

TR_MS_TASK_1	TRIGGER	104	               'Изменение статуса задачи',

TR_MS_TASK_1	TRIGGER	105	                  'Ваша задача №'

TR_MS_TASK_1	TRIGGER	106	               || :new.id

TR_MS_TASK_1	TRIGGER	107	               || ' выполнена. Для ознакомления с итогами перейдите по <a href="http://merchservice.com.ua/login.php?action=ms_task_list&id='

TR_MS_TASK_1	TRIGGER	108	               || :new.id

TR_MS_TASK_1	TRIGGER	109	               || '&edit=1">ссылке</a> ');

TR_MS_TASK_1	TRIGGER	110	         END IF;

TR_MS_TASK_1	TRIGGER	111	      END IF;

TR_MS_TASK_1	TRIGGER	112	   END IF;

TR_MS_TASK_1	TRIGGER	113	END;
TR_MS_TABEL_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MS_TABEL_UPD

TR_MS_TABEL_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TABEL_UPD	TRIGGER	3	   ON PERSIK.ms_tabel

TR_MS_TABEL_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TABEL_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TABEL_UPD	TRIGGER	6	BEGIN

TR_MS_TABEL_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TABEL_UPD	TRIGGER	8	END;
TR_MS_TABEL_DT_UPD	TRIGGER	1	TRIGGER TR_MS_TABEL_DT_UPD

TR_MS_TABEL_DT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TABEL_DT_UPD	TRIGGER	3	   ON MS_TABEL_DT

TR_MS_TABEL_DT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TABEL_DT_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TABEL_DT_UPD	TRIGGER	6	BEGIN

TR_MS_TABEL_DT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TABEL_DT_UPD	TRIGGER	8	END;
TR_MS_TABEL_DAYS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MS_TABEL_DAYS_UPD

TR_MS_TABEL_DAYS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_TABEL_DAYS_UPD	TRIGGER	3	   ON PERSIK.ms_tabel_days

TR_MS_TABEL_DAYS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_TABEL_DAYS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_TABEL_DAYS_UPD	TRIGGER	6	BEGIN

TR_MS_TABEL_DAYS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_TABEL_DAYS_UPD	TRIGGER	8	

TR_MS_TABEL_DAYS_UPD	TRIGGER	9	   SELECT c.data

TR_MS_TABEL_DAYS_UPD	TRIGGER	10	     INTO :new.dt

TR_MS_TABEL_DAYS_UPD	TRIGGER	11	     FROM routes_head h, calendar c

TR_MS_TABEL_DAYS_UPD	TRIGGER	12	    WHERE     h.id = :new.head_id

TR_MS_TABEL_DAYS_UPD	TRIGGER	13	          AND h.data = TRUNC (c.data, 'mm')

TR_MS_TABEL_DAYS_UPD	TRIGGER	14	          AND c.dm = :new.day_num;

TR_MS_TABEL_DAYS_UPD	TRIGGER	15	END;
TR_MS_SENDMASTER_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MS_SENDMASTER_upd

TR_MS_SENDMASTER_UPD	TRIGGER	2	   BEFORE UPDATE OF ag_id

TR_MS_SENDMASTER_UPD	TRIGGER	3	   ON PERSIK.ms_sendmaster

TR_MS_SENDMASTER_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_SENDMASTER_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_SENDMASTER_UPD	TRIGGER	6	BEGIN

TR_MS_SENDMASTER_UPD	TRIGGER	7	   :new.login := NULL;

TR_MS_SENDMASTER_UPD	TRIGGER	8	END;
TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_MS_SENDMASTER_reports_NEW

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	3	   ON PERSIK.MS_SENDMASTER_reports

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	6	BEGIN

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_SENDMASTER_REPORTS_NEW	TRIGGER	8	END tr_MS_SENDMASTER_reports_new;
TR_MS_SENDMASTER_NEW	TRIGGER	1	TRIGGER PERSIK.TR_MS_SENDMASTER_NEW

TR_MS_SENDMASTER_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_SENDMASTER_NEW	TRIGGER	3	   ON PERSIK.ms_sendmaster

TR_MS_SENDMASTER_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_SENDMASTER_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_SENDMASTER_NEW	TRIGGER	6	BEGIN

TR_MS_SENDMASTER_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_SENDMASTER_NEW	TRIGGER	8	END tr_ms_sendmaster_new;
TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ms_sendmaster_days_UPD

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	3	   ON PERSIK.ms_sendmaster_days

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	6	BEGIN

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_SENDMASTER_DAYS_UPD	TRIGGER	8	END;
TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ms_sendmaster_days_NEW

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	3	   ON PERSIK.ms_sendmaster_days

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	6	BEGIN

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_SENDMASTER_DAYS_NEW	TRIGGER	8	END;
TR_MS_NETS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MS_NETS_UPD" 

TR_MS_NETS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_NETS_UPD	TRIGGER	3	   ON PERSIK.ms_nets

TR_MS_NETS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_NETS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_NETS_UPD	TRIGGER	6	BEGIN

TR_MS_NETS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_NETS_UPD	TRIGGER	8	END;

TR_MS_NETS_UPD	TRIGGER	9	

TR_MS_NETS_UPD	TRIGGER	10	

TR_MS_NETS_UPD	TRIGGER	11	

TR_MS_NETS_INS	TRIGGER	1	TRIGGER "PERSIK"."TR_MS_NETS_INS" 

TR_MS_NETS_INS	TRIGGER	2	   BEFORE INSERT

TR_MS_NETS_INS	TRIGGER	3	   ON PERSIK.ms_nets

TR_MS_NETS_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_NETS_INS	TRIGGER	5	   FOR EACH ROW

TR_MS_NETS_INS	TRIGGER	6	BEGIN

TR_MS_NETS_INS	TRIGGER	7	   SELECT NVL (MAX (ID_NET), 0) + 1 INTO :NEW.ID_NET FROM ms_nets;

TR_MS_NETS_INS	TRIGGER	8	END;

TR_MS_NETS_INS	TRIGGER	9	

TR_MS_NETS_INS	TRIGGER	10	

TR_MS_NETS_INS	TRIGGER	11	

TR_MS_FILES_TZ_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MS_FILES_TZ_UPD" 

TR_MS_FILES_TZ_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_FILES_TZ_UPD	TRIGGER	3	   ON ms_files_tz    REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FILES_TZ_UPD	TRIGGER	4	   FOR EACH ROW

TR_MS_FILES_TZ_UPD	TRIGGER	5	BEGIN

TR_MS_FILES_TZ_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MS_FILES_TZ_UPD	TRIGGER	7	END;

TR_MS_FILES_TZ_UPD	TRIGGER	8	

TR_MS_FILES_TZ_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MS_FILES_TZ_NEW" 

TR_MS_FILES_TZ_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_FILES_TZ_NEW	TRIGGER	3	   ON ms_files_tz    REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FILES_TZ_NEW	TRIGGER	4	   FOR EACH ROW

TR_MS_FILES_TZ_NEW	TRIGGER	5	BEGIN

TR_MS_FILES_TZ_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MS_FILES_TZ_NEW	TRIGGER	7	END;

TR_MS_FILES_TZ_NEW	TRIGGER	8	

TR_MS_FILES_NET_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MS_FILES_NET_UPD" 

TR_MS_FILES_NET_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_FILES_NET_UPD	TRIGGER	3	   ON ms_files_net    REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FILES_NET_UPD	TRIGGER	4	   FOR EACH ROW

TR_MS_FILES_NET_UPD	TRIGGER	5	BEGIN

TR_MS_FILES_NET_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MS_FILES_NET_UPD	TRIGGER	7	END;

TR_MS_FILES_NET_UPD	TRIGGER	8	

TR_MS_FILES_NET_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MS_FILES_NET_NEW" 

TR_MS_FILES_NET_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_FILES_NET_NEW	TRIGGER	3	   ON ms_files_net    REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FILES_NET_NEW	TRIGGER	4	   FOR EACH ROW

TR_MS_FILES_NET_NEW	TRIGGER	5	BEGIN

TR_MS_FILES_NET_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MS_FILES_NET_NEW	TRIGGER	7	END;

TR_MS_FILES_NET_NEW	TRIGGER	8	

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ms_faq_SECTIONS_NEW

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	3	   ON PERSIK.ms_faq_SECTIONS

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	6	BEGIN

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_FAQ_SECTIONS_NEW	TRIGGER	8	END tr_ms_faq_sections_new;
TR_MS_FAQ_RIGHTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ms_faq_RIGHTS_NEW

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	3	   ON PERSIK.ms_faq_RIGHTS

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	6	BEGIN

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MS_FAQ_RIGHTS_NEW	TRIGGER	8	END tr_ms_faq_rights_new;
TR_MS_FAQ_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ms_faq_NEW

TR_MS_FAQ_NEW	TRIGGER	2	   BEFORE INSERT

TR_MS_FAQ_NEW	TRIGGER	3	   ON PERSIK.ms_faq

TR_MS_FAQ_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_FAQ_NEW	TRIGGER	5	   FOR EACH ROW

TR_MS_FAQ_NEW	TRIGGER	6	BEGIN

TR_MS_FAQ_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_FAQ_NEW	TRIGGER	8	END tr_ms_faq_new;
TR_MS_AG_CAT_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ms_ag_cat_UPD

TR_MS_AG_CAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MS_AG_CAT_UPD	TRIGGER	3	   ON PERSIK.ms_ag_cat

TR_MS_AG_CAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MS_AG_CAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_MS_AG_CAT_UPD	TRIGGER	6	BEGIN

TR_MS_AG_CAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MS_AG_CAT_UPD	TRIGGER	8	END;
TR_MS_AG_CAT	TRIGGER	1	TRIGGER TR_ms_ag_cat

TR_MS_AG_CAT	TRIGGER	2	   BEFORE INSERT

TR_MS_AG_CAT	TRIGGER	3	   ON PERSIK.ms_ag_cat

TR_MS_AG_CAT	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MS_AG_CAT	TRIGGER	5	   FOR EACH ROW

TR_MS_AG_CAT	TRIGGER	6	BEGIN

TR_MS_AG_CAT	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MS_AG_CAT	TRIGGER	8	END;
TR_MSV1_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MSV1_UPD

TR_MSV1_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MSV1_UPD	TRIGGER	3	   ON PERSIK.MSV

TR_MSV1_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MSV1_UPD	TRIGGER	5	   FOR EACH ROW

TR_MSV1_UPD	TRIGGER	6	BEGIN

TR_MSV1_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MSV1_UPD	TRIGGER	8	END;
TR_MSRFC_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MSRFC_UPD" 

TR_MSRFC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MSRFC_UPD	TRIGGER	3	   ON MERCH_SPEC_REPORT_FILES_CHAT

TR_MSRFC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MSRFC_UPD	TRIGGER	5	   FOR EACH ROW

TR_MSRFC_UPD	TRIGGER	6	BEGIN

TR_MSRFC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MSRFC_UPD	TRIGGER	8	END;

TR_MSRFC_UPD	TRIGGER	9	

TR_MSRFC_INS	TRIGGER	1	TRIGGER PERSIK.TR_MSRFC_INS

TR_MSRFC_INS	TRIGGER	2	   BEFORE INSERT

TR_MSRFC_INS	TRIGGER	3	   ON PERSIK.MERCH_SPEC_REPORT_FILES_CHAT

TR_MSRFC_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MSRFC_INS	TRIGGER	5	   FOR EACH ROW

TR_MSRFC_INS	TRIGGER	6	DECLARE

TR_MSRFC_INS	TRIGGER	7	   subj       VARCHAR (255);

TR_MSRFC_INS	TRIGGER	8	   from_fio   VARCHAR (255);

TR_MSRFC_INS	TRIGGER	9	   text       VARCHAR (1024);

TR_MSRFC_INS	TRIGGER	10	   v_spd      INTEGER;

TR_MSRFC_INS	TRIGGER	11	   net        VARCHAR (255);

TR_MSRFC_INS	TRIGGER	12	   tpn        VARCHAR (255);

TR_MSRFC_INS	TRIGGER	13	   tpa        VARCHAR (255);

TR_MSRFC_INS	TRIGGER	14	   v_kod_tp   INTEGER;

TR_MSRFC_INS	TRIGGER	15	   v_dt       DATE;

TR_MSRFC_INS	TRIGGER	16	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_MSRFC_INS	TRIGGER	17	BEGIN

TR_MSRFC_INS	TRIGGER	18	   IF :new.id IS NULL

TR_MSRFC_INS	TRIGGER	19	   THEN

TR_MSRFC_INS	TRIGGER	20	      :new.id := seq_all.NEXTVAL;

TR_MSRFC_INS	TRIGGER	21	   END IF;

TR_MSRFC_INS	TRIGGER	22	

TR_MSRFC_INS	TRIGGER	23	   SELECT NVL (is_spd, -1)

TR_MSRFC_INS	TRIGGER	24	     INTO v_spd

TR_MSRFC_INS	TRIGGER	25	     FROM user_list u, routes_agents_pwd p

TR_MSRFC_INS	TRIGGER	26	    WHERE :new.login = u.login AND u.login = p.login(+);

TR_MSRFC_INS	TRIGGER	27	

TR_MSRFC_INS	TRIGGER	28	   UPDATE MERCH_SPEC_REPORT_FILES

TR_MSRFC_INS	TRIGGER	29	      SET last_is_spd = v_spd

TR_MSRFC_INS	TRIGGER	30	    WHERE id = :new.msr_file_id;

TR_MSRFC_INS	TRIGGER	31	

TR_MSRFC_INS	TRIGGER	32	   COMMIT;

TR_MSRFC_INS	TRIGGER	33	END;
TR_MSRFCF_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MSRFCF_UPD" 

TR_MSRFCF_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MSRFCF_UPD	TRIGGER	3	   ON MERCH_SPEC_REPORT_FILES_CHAT_F

TR_MSRFCF_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MSRFCF_UPD	TRIGGER	5	   FOR EACH ROW

TR_MSRFCF_UPD	TRIGGER	6	BEGIN

TR_MSRFCF_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MSRFCF_UPD	TRIGGER	8	END;

TR_MSRFCF_UPD	TRIGGER	9	

TR_MSRFCF_INS	TRIGGER	1	TRIGGER "PERSIK"."TR_MSRFCF_INS" 

TR_MSRFCF_INS	TRIGGER	2	   BEFORE INSERT

TR_MSRFCF_INS	TRIGGER	3	   ON MERCH_SPEC_REPORT_FILES_CHAT_F

TR_MSRFCF_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MSRFCF_INS	TRIGGER	5	   FOR EACH ROW

TR_MSRFCF_INS	TRIGGER	6	DECLARE

TR_MSRFCF_INS	TRIGGER	7	   subj       VARCHAR (255);

TR_MSRFCF_INS	TRIGGER	8	   from_fio   VARCHAR (255);

TR_MSRFCF_INS	TRIGGER	9	   text       VARCHAR (1024);

TR_MSRFCF_INS	TRIGGER	10	   spd        INTEGER;

TR_MSRFCF_INS	TRIGGER	11	   net        VARCHAR (255);

TR_MSRFCF_INS	TRIGGER	12	   tpn        VARCHAR (255);

TR_MSRFCF_INS	TRIGGER	13	   tpa        VARCHAR (255);

TR_MSRFCF_INS	TRIGGER	14	   v_kod_tp   INTEGER;

TR_MSRFCF_INS	TRIGGER	15	   v_dt       DATE;

TR_MSRFCF_INS	TRIGGER	16	BEGIN

TR_MSRFCF_INS	TRIGGER	17	   IF :new.id IS NULL

TR_MSRFCF_INS	TRIGGER	18	   THEN

TR_MSRFCF_INS	TRIGGER	19	      :new.id := seq_all.NEXTVAL;

TR_MSRFCF_INS	TRIGGER	20	   END IF;

TR_MSRFCF_INS	TRIGGER	21	END;

TR_MSRFCF_INS	TRIGGER	22	

TR_MR_ZP_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_MR_ZP_UPD2

TR_MR_ZP_UPD2	TRIGGER	2	   BEFORE UPDATE OF part2_sum, part2_pin, part2_dt

TR_MR_ZP_UPD2	TRIGGER	3	   ON PERSIK.MR_ZP

TR_MR_ZP_UPD2	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MR_ZP_UPD2	TRIGGER	5	   FOR EACH ROW

TR_MR_ZP_UPD2	TRIGGER	6	BEGIN

TR_MR_ZP_UPD2	TRIGGER	7	   :new.part2_lu := SYSDATE;

TR_MR_ZP_UPD2	TRIGGER	8	END;
TR_MR_ZP_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_MR_ZP_UPD1

TR_MR_ZP_UPD1	TRIGGER	2	   BEFORE UPDATE OF part1_sum, part1_pin, part1_dt

TR_MR_ZP_UPD1	TRIGGER	3	   ON PERSIK.MR_ZP

TR_MR_ZP_UPD1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MR_ZP_UPD1	TRIGGER	5	   FOR EACH ROW

TR_MR_ZP_UPD1	TRIGGER	6	BEGIN

TR_MR_ZP_UPD1	TRIGGER	7	   :new.part1_lu := SYSDATE;

TR_MR_ZP_UPD1	TRIGGER	8	END;
TR_MR_ZP_UPD	TRIGGER	1	TRIGGER PERSIK.tr_mr_zp_upd

TR_MR_ZP_UPD	TRIGGER	2	   BEFORE UPDATE OF pin

TR_MR_ZP_UPD	TRIGGER	3	   ON PERSIK.MR_ZP

TR_MR_ZP_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MR_ZP_UPD	TRIGGER	5	   FOR EACH ROW

TR_MR_ZP_UPD	TRIGGER	6	BEGIN

TR_MR_ZP_UPD	TRIGGER	7	   :new.pin_lu := SYSDATE;

TR_MR_ZP_UPD	TRIGGER	8	END;
TR_MR_ZP_NEW	TRIGGER	1	TRIGGER PERSIK.tr_mr_zp_new

TR_MR_ZP_NEW	TRIGGER	2	   BEFORE INSERT

TR_MR_ZP_NEW	TRIGGER	3	   ON PERSIK.MR_ZP

TR_MR_ZP_NEW	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MR_ZP_NEW	TRIGGER	5	   FOR EACH ROW

TR_MR_ZP_NEW	TRIGGER	6	BEGIN

TR_MR_ZP_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MR_ZP_NEW	TRIGGER	8	   :new.h_fio_otv := md5hash (:new.fio_otv);

TR_MR_ZP_NEW	TRIGGER	9	END;
TR_MR_ZPM_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_MR_ZPM_UPD2

TR_MR_ZPM_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF Part2

TR_MR_ZPM_UPD2	TRIGGER	3	   ON PERSIK.MR_ZPM

TR_MR_ZPM_UPD2	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MR_ZPM_UPD2	TRIGGER	5	   FOR EACH ROW

TR_MR_ZPM_UPD2	TRIGGER	6	BEGIN

TR_MR_ZPM_UPD2	TRIGGER	7	   :new.part2_lu := SYSDATE;

TR_MR_ZPM_UPD2	TRIGGER	8	END;
TR_MR_ZPM_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_MR_ZPM_UPD1

TR_MR_ZPM_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF Part1

TR_MR_ZPM_UPD1	TRIGGER	3	   ON PERSIK.MR_ZPM

TR_MR_ZPM_UPD1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MR_ZPM_UPD1	TRIGGER	5	   FOR EACH ROW

TR_MR_ZPM_UPD1	TRIGGER	6	BEGIN

TR_MR_ZPM_UPD1	TRIGGER	7	   :new.part1_lu := SYSDATE;

TR_MR_ZPM_UPD1	TRIGGER	8	END;
TR_MRCR_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MRCR_UPD

TR_MRCR_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MRCR_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_CAL_REGIONS

TR_MRCR_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MRCR_UPD	TRIGGER	5	   FOR EACH ROW

TR_MRCR_UPD	TRIGGER	6	BEGIN

TR_MRCR_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MRCR_UPD	TRIGGER	8	END;
TR_MRCC_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MRCC_UPD

TR_MRCC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MRCC_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_CAL_chains

TR_MRCC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MRCC_UPD	TRIGGER	5	   FOR EACH ROW

TR_MRCC_UPD	TRIGGER	6	BEGIN

TR_MRCC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MRCC_UPD	TRIGGER	8	END;
TR_MOVE_STAFF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MOVE_STAFF_NEW" 

TR_MOVE_STAFF_NEW	TRIGGER	2	   BEFORE INSERT

TR_MOVE_STAFF_NEW	TRIGGER	3	   ON PERSIK.MOVE_STAFF

TR_MOVE_STAFF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MOVE_STAFF_NEW	TRIGGER	5	   FOR EACH ROW

TR_MOVE_STAFF_NEW	TRIGGER	6	BEGIN

TR_MOVE_STAFF_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_MOVE_STAFF_NEW	TRIGGER	8	   THEN

TR_MOVE_STAFF_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_MOVE_STAFF_NEW	TRIGGER	10	   END IF;

TR_MOVE_STAFF_NEW	TRIGGER	11	

TR_MOVE_STAFF_NEW	TRIGGER	12	   SELECT u1.fio

TR_MOVE_STAFF_NEW	TRIGGER	13	     INTO :new.chief_fio

TR_MOVE_STAFF_NEW	TRIGGER	14	     FROM full f, user_list u1

TR_MOVE_STAFF_NEW	TRIGGER	15	    WHERE f.slave = :new.tn AND f.full = 1 AND u1.tn = f.master;

TR_MOVE_STAFF_NEW	TRIGGER	16	END tr_MOVE_STAFF_new;

TR_MOVE_STAFF_NEW	TRIGGER	17	

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MOVE_STAFF_BUD_FIL_NEW" 

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	3	   ON MOVE_STAFF_BUD_FIL

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	6	BEGIN

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	8	   THEN

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	10	   END IF;

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	11	END tr_MOVE_STAFF_BUD_FIL_new;

TR_MOVE_STAFF_BUD_FIL_NEW	TRIGGER	12	

TR_MOVE_STAFF_1	TRIGGER	1	TRIGGER "PERSIK"."TR_MOVE_STAFF_1" 

TR_MOVE_STAFF_1	TRIGGER	2	   BEFORE UPDATE OF accepted

TR_MOVE_STAFF_1	TRIGGER	3	   ON PERSIK.MOVE_STAFF

TR_MOVE_STAFF_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MOVE_STAFF_1	TRIGGER	5	   FOR EACH ROW

TR_MOVE_STAFF_1	TRIGGER	6	DECLARE

TR_MOVE_STAFF_1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_MOVE_STAFF_1	TRIGGER	8	BEGIN

TR_MOVE_STAFF_1	TRIGGER	9	   :new.accept_data := SYSDATE;

TR_MOVE_STAFF_1	TRIGGER	10	   add_job_move_stuff (:new.id, :new.datamove);

TR_MOVE_STAFF_1	TRIGGER	11	END;

TR_MOVE_STAFF_1	TRIGGER	12	

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_REPORT_UPD" 

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	3	   ON PERSIK.MERCH_SPEC_REPORT

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	6	BEGIN

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	8	END;

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	9	

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	10	

TR_MERCH_SPEC_REPORT_UPD	TRIGGER	11	

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_SPEC_REPORT_PR_UPD 

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	3	   ON PERSIK.MERCH_SPEC_REPORT_PR    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	5	BEGIN

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_REPORT_PR_UPD	TRIGGER	7	END;
TR_MERCH_SPEC_REPORT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_REPORT_NEW" 

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	3	   ON PERSIK.MERCH_SPEC_REPORT

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	6	BEGIN

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	8	END;

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	9	

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	10	

TR_MERCH_SPEC_REPORT_NEW	TRIGGER	11	

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_REPORT_FILES_UPD" 

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	3	   ON PERSIK.MERCH_SPEC_REPORT_FILES    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	5	BEGIN

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	7	END;

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	8	

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	9	

TR_MERCH_SPEC_REPORT_FILES_UPD	TRIGGER	10	

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_REPORT_FILES_NEW" 

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	3	   ON PERSIK.MERCH_SPEC_REPORT_FILES    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	5	BEGIN

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	7	END;

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	8	

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	9	

TR_MERCH_SPEC_REPORT_FILES_NEW	TRIGGER	10	

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_HEAD_UPD" 

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	3	   ON PERSIK.MERCH_SPEC_HEAD    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	5	BEGIN

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	7	END;

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	8	

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	9	

TR_MERCH_SPEC_HEAD_UPD	TRIGGER	10	

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_HEAD_NEW" 

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	3	   ON PERSIK.MERCH_SPEC_HEAD    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	5	BEGIN

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	7	END;

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	8	

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	9	

TR_MERCH_SPEC_HEAD_NEW	TRIGGER	10	

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_FLD_AG_UPD" 

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	3	   ON PERSIK.merch_spec_fld_ag    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	5	BEGIN

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	7	END;

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	8	

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	9	

TR_MERCH_SPEC_FLD_AG_UPD	TRIGGER	10	

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_FLD_AG_NEW" 

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	3	   ON PERSIK.merch_spec_fld_ag    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	5	BEGIN

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	7	END;

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	8	

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	9	

TR_MERCH_SPEC_FLD_AG_NEW	TRIGGER	10	

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_FIELDS_UPD" 

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	3	   ON PERSIK.MERCH_SPEC_FIELDS    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	5	BEGIN

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	7	END;

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	8	

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	9	

TR_MERCH_SPEC_FIELDS_UPD	TRIGGER	10	

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_FIELDS_NEW" 

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	3	   ON PERSIK.MERCH_SPEC_FIELDS    REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	4	   FOR EACH ROW

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	5	BEGIN

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	7	END;

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	8	

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	9	

TR_MERCH_SPEC_FIELDS_NEW	TRIGGER	10	

TR_MERCH_SPEC_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_BODY_UPD" 

TR_MERCH_SPEC_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_SPEC_BODY_UPD	TRIGGER	3	   ON PERSIK.MERCH_SPEC_BODY

TR_MERCH_SPEC_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_SPEC_BODY_UPD	TRIGGER	6	BEGIN

TR_MERCH_SPEC_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_SPEC_BODY_UPD	TRIGGER	8	END;

TR_MERCH_SPEC_BODY_UPD	TRIGGER	9	

TR_MERCH_SPEC_BODY_UPD	TRIGGER	10	

TR_MERCH_SPEC_BODY_UPD	TRIGGER	11	

TR_MERCH_SPEC_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_SPEC_BODY_NEW" 

TR_MERCH_SPEC_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_SPEC_BODY_NEW	TRIGGER	3	   ON PERSIK.MERCH_SPEC_BODY

TR_MERCH_SPEC_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_SPEC_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_SPEC_BODY_NEW	TRIGGER	6	BEGIN

TR_MERCH_SPEC_BODY_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_MERCH_SPEC_BODY_NEW	TRIGGER	8	END;

TR_MERCH_SPEC_BODY_NEW	TRIGGER	9	

TR_MERCH_SPEC_BODY_NEW	TRIGGER	10	

TR_MERCH_SPEC_BODY_NEW	TRIGGER	11	

TR_MERCH_REPORT_VV_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_REPORT_VV_UPD" 

TR_MERCH_REPORT_VV_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_VV_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_VV

TR_MERCH_REPORT_VV_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_VV_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_VV_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_VV_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_VV_UPD	TRIGGER	8	END;

TR_MERCH_REPORT_VV_UPD	TRIGGER	9	

TR_MERCH_REPORT_VV_UPD	TRIGGER	10	

TR_MERCH_REPORT_VV_UPD	TRIGGER	11	

TR_MERCH_REPORT_VV_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_REPORT_VV_NEW" 

TR_MERCH_REPORT_VV_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_VV_NEW	TRIGGER	3	   ON PERSIK.MERCH_REPORT_VV

TR_MERCH_REPORT_VV_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_VV_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_VV_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_VV_NEW	TRIGGER	7	   :new.id := seq_all.NEXTVAL;

TR_MERCH_REPORT_VV_NEW	TRIGGER	8	END;

TR_MERCH_REPORT_VV_NEW	TRIGGER	9	

TR_MERCH_REPORT_VV_NEW	TRIGGER	10	

TR_MERCH_REPORT_VV_NEW	TRIGGER	11	

TR_MERCH_REPORT_VP_UPD	TRIGGER	1	TRIGGER TR_merch_report_VP_UPD

TR_MERCH_REPORT_VP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_VP_UPD	TRIGGER	3	   ON merch_report_VP

TR_MERCH_REPORT_VP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_VP_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_VP_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_VP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_VP_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_VP_NEW	TRIGGER	1	TRIGGER TR_merch_report_VP_NEW

TR_MERCH_REPORT_VP_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_VP_NEW	TRIGGER	3	   ON merch_report_VP

TR_MERCH_REPORT_VP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_VP_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_VP_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_VP_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_MERCH_REPORT_VP_NEW	TRIGGER	8	   THEN

TR_MERCH_REPORT_VP_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_MERCH_REPORT_VP_NEW	TRIGGER	10	   END IF;

TR_MERCH_REPORT_VP_NEW	TRIGGER	11	END;
TR_MERCH_REPORT_SB_UPD	TRIGGER	1	TRIGGER TR_MERCH_REPORT_SB_UPD

TR_MERCH_REPORT_SB_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_SB_UPD	TRIGGER	3	   ON MERCH_REPORT_SB

TR_MERCH_REPORT_SB_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_SB_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_SB_NEW	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_SB_NEW

TR_MERCH_REPORT_SB_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_SB_NEW	TRIGGER	3	   ON PERSIK.MERCH_REPORT_SB

TR_MERCH_REPORT_SB_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MERCH_REPORT_SB_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_SB_HEAD_UPD2

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	2	   BEFORE UPDATE OF ok_ms

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	3	   ON PERSIK.MERCH_REPORT_SB_HEAD

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	7	   IF :new.ok_ms = 1

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	8	   THEN

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	9	      :NEW.ok_ms_lu := SYSDATE;

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	10	   ELSE

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	11	      :NEW.ok_ms_lu := NULL;

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	12	   END IF;

TR_MERCH_REPORT_SB_HEAD_UPD2	TRIGGER	13	END;
TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_SB_HEAD_UPD1

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	2	   BEFORE UPDATE OF ok_kk

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	3	   ON PERSIK.MERCH_REPORT_SB_HEAD

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	7	   IF :new.ok_kk = 1

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	8	   THEN

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	9	      :NEW.ok_kk_lu := SYSDATE;

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	10	   ELSE

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	11	      :NEW.ok_kk_lu := null;

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	12	   END IF;

TR_MERCH_REPORT_SB_HEAD_UPD1	TRIGGER	13	END;
TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	1	TRIGGER TR_MERCH_REPORT_SB_HEAD_UPD

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	3	   ON MERCH_REPORT_SB_HEAD

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_SB_HEAD_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	1	TRIGGER TR_MERCH_REPORT_SB_HEAD_NEW

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	3	   ON MERCH_REPORT_SB_HEAD

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MERCH_REPORT_SB_HEAD_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	1	TRIGGER TR_merch_report_sb_comm_UPD

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	3	   ON merch_report_sb_comm

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_SB_COMM_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	1	TRIGGER TR_merch_report_sb_comm_NEW

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	3	   ON merch_report_sb_comm

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_MERCH_REPORT_SB_COMM_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_OK_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_OK_UPD

TR_MERCH_REPORT_OK_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_OK_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_OK

TR_MERCH_REPORT_OK_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_OK_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_OK_UPD	TRIGGER	6	DECLARE

TR_MERCH_REPORT_OK_UPD	TRIGGER	7	   subj      VARCHAR (255);

TR_MERCH_REPORT_OK_UPD	TRIGGER	8	   text      VARCHAR (4000);

TR_MERCH_REPORT_OK_UPD	TRIGGER	9	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_MERCH_REPORT_OK_UPD	TRIGGER	10	   v_mails   VARCHAR2 (4000);

TR_MERCH_REPORT_OK_UPD	TRIGGER	11	BEGIN

TR_MERCH_REPORT_OK_UPD	TRIGGER	12	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_OK_UPD	TRIGGER	13	

TR_MERCH_REPORT_OK_UPD	TRIGGER	14	   IF :new.svms_ok = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	15	   THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	16	      FOR a IN (SELECT DISTINCT ra.name ag_name,

TR_MERCH_REPORT_OK_UPD	TRIGGER	17	                                ra.id ag_id,

TR_MERCH_REPORT_OK_UPD	TRIGGER	18	                                cpp1.tz_oblast,

TR_MERCH_REPORT_OK_UPD	TRIGGER	19	                                cpp1.city,

TR_MERCH_REPORT_OK_UPD	TRIGGER	20	                                n.net_name,

TR_MERCH_REPORT_OK_UPD	TRIGGER	21	                                cpp1.tz_address,

TR_MERCH_REPORT_OK_UPD	TRIGGER	22	                                u.fio

TR_MERCH_REPORT_OK_UPD	TRIGGER	23	                  FROM merch_report mr,

TR_MERCH_REPORT_OK_UPD	TRIGGER	24	                       routes_body1 rb,

TR_MERCH_REPORT_OK_UPD	TRIGGER	25	                       routes_head rh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	26	                       routes_head_agents rha,

TR_MERCH_REPORT_OK_UPD	TRIGGER	27	                       routes_agents ra,

TR_MERCH_REPORT_OK_UPD	TRIGGER	28	                       routes_tp rt,

TR_MERCH_REPORT_OK_UPD	TRIGGER	29	                       cpp cpp1,

TR_MERCH_REPORT_OK_UPD	TRIGGER	30	                       svms_oblast s,

TR_MERCH_REPORT_OK_UPD	TRIGGER	31	                       ms_nets n,

TR_MERCH_REPORT_OK_UPD	TRIGGER	32	                       (SELECT DISTINCT data, dm FROM calendar) c,

TR_MERCH_REPORT_OK_UPD	TRIGGER	33	                       routes_logins_oblast rlr,

TR_MERCH_REPORT_OK_UPD	TRIGGER	34	                       routes_logins_nets rln,

TR_MERCH_REPORT_OK_UPD	TRIGGER	35	                       routes_agents_pwd p,

TR_MERCH_REPORT_OK_UPD	TRIGGER	36	                       user_list u

TR_MERCH_REPORT_OK_UPD	TRIGGER	37	                 WHERE     u.tn = s.tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	38	                       AND rb.ag_id = p.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	39	                       AND cpp1.tz_oblast = rlr.oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	40	                       AND rln.id_net = n.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	41	                       AND rln.login = p.login

TR_MERCH_REPORT_OK_UPD	TRIGGER	42	                       AND rlr.login = p.login

TR_MERCH_REPORT_OK_UPD	TRIGGER	43	                       AND mr.dt = :new.dt

TR_MERCH_REPORT_OK_UPD	TRIGGER	44	                       AND mr.dt = c.data

TR_MERCH_REPORT_OK_UPD	TRIGGER	45	                       AND rb.day_num = c.dm

TR_MERCH_REPORT_OK_UPD	TRIGGER	46	                       AND rb.id = mr.rb_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	47	                       AND rh.id = rb.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	48	                       AND rh.id = rha.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	49	                       AND ra.id = rha.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	50	                       AND ra.id = rb.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	51	                       AND rh.id = rt.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	52	                       AND rb.kodtp = rt.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	53	                       AND rh.tn = s.tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	54	                       AND rb.vv = rha.vv

TR_MERCH_REPORT_OK_UPD	TRIGGER	55	                       AND rha.vv = rt.vv

TR_MERCH_REPORT_OK_UPD	TRIGGER	56	                       AND cpp1.tz_oblast = s.oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	57	                       AND cpp1.kodtp = rb.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	58	                       AND cpp1.kodtp = rt.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	59	                       AND n.id_net = cpp1.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	60	                       AND rh.id = :new.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	61	                       AND (SELECT COUNT (*) - SUM (oos)

TR_MERCH_REPORT_OK_UPD	TRIGGER	62	                              FROM MS_REP_HBR_DT_VIEW msh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	63	                                   merch_spec_body msb,

TR_MERCH_REPORT_OK_UPD	TRIGGER	64	                                   merch_spec_report msr

TR_MERCH_REPORT_OK_UPD	TRIGGER	65	                             WHERE     msh.kod_tp = cpp1.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	66	                                   AND msb.head_id = msh.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	67	                                   AND msh.ag_id = ra.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	68	                                   AND msh.id_net = n.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	69	                                   AND msb.id = msr.spec_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	70	                                   AND msr.dt = mr.dt

TR_MERCH_REPORT_OK_UPD	TRIGGER	71	                                   AND msh.data = msr.dt) = 0

TR_MERCH_REPORT_OK_UPD	TRIGGER	72	                       /*AND (SELECT svms_ok

TR_MERCH_REPORT_OK_UPD	TRIGGER	73	                              FROM merch_report_ok

TR_MERCH_REPORT_OK_UPD	TRIGGER	74	                             WHERE dt = mr.dt AND head_id = rh.id) = 1*/

TR_MERCH_REPORT_OK_UPD	TRIGGER	75	                       AND p.email IS NOT NULL)

TR_MERCH_REPORT_OK_UPD	TRIGGER	76	      LOOP

TR_MERCH_REPORT_OK_UPD	TRIGGER	77	         subj :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	78	               'OOS по 100% позиций спецификации, '

TR_MERCH_REPORT_OK_UPD	TRIGGER	79	            || a.ag_name;

TR_MERCH_REPORT_OK_UPD	TRIGGER	80	         text :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	81	               'В ходе визита мерчандайзера М-Сервис '

TR_MERCH_REPORT_OK_UPD	TRIGGER	82	            || TO_CHAR (:new.dt, 'dd.mm.yyyy')

TR_MERCH_REPORT_OK_UPD	TRIGGER	83	            || ' по торговому залу: '

TR_MERCH_REPORT_OK_UPD	TRIGGER	84	            || a.tz_oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	85	            || ', '

TR_MERCH_REPORT_OK_UPD	TRIGGER	86	            || a.city

TR_MERCH_REPORT_OK_UPD	TRIGGER	87	            || ', '

TR_MERCH_REPORT_OK_UPD	TRIGGER	88	            || a.net_name

TR_MERCH_REPORT_OK_UPD	TRIGGER	89	            || ', '

TR_MERCH_REPORT_OK_UPD	TRIGGER	90	            || a.tz_address

TR_MERCH_REPORT_OK_UPD	TRIGGER	91	            || ' зафиксирован 100% OOS по всем позициям ассортиментой матрицы (спецификации).'

TR_MERCH_REPORT_OK_UPD	TRIGGER	92	            || '<br>'

TR_MERCH_REPORT_OK_UPD	TRIGGER	93	            || 'Ответственный за данный ТЗ СВ МС: '

TR_MERCH_REPORT_OK_UPD	TRIGGER	94	            || a.fio;

TR_MERCH_REPORT_OK_UPD	TRIGGER	95	

TR_MERCH_REPORT_OK_UPD	TRIGGER	96	         SELECT wm_concat (e_mail)

TR_MERCH_REPORT_OK_UPD	TRIGGER	97	           INTO v_mails

TR_MERCH_REPORT_OK_UPD	TRIGGER	98	           FROM (  SELECT *

TR_MERCH_REPORT_OK_UPD	TRIGGER	99	                     FROM (SELECT e_mail

TR_MERCH_REPORT_OK_UPD	TRIGGER	100	                             FROM user_list

TR_MERCH_REPORT_OK_UPD	TRIGGER	101	                            WHERE tn = (SELECT tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	102	                                          FROM routes_head

TR_MERCH_REPORT_OK_UPD	TRIGGER	103	                                         WHERE id = :new.head_id)

TR_MERCH_REPORT_OK_UPD	TRIGGER	104	                           UNION

TR_MERCH_REPORT_OK_UPD	TRIGGER	105	                           SELECT e_mail

TR_MERCH_REPORT_OK_UPD	TRIGGER	106	                             FROM user_list

TR_MERCH_REPORT_OK_UPD	TRIGGER	107	                            WHERE is_ma = 1 AND e_mail IS NOT NULL

TR_MERCH_REPORT_OK_UPD	TRIGGER	108	                           UNION

TR_MERCH_REPORT_OK_UPD	TRIGGER	109	                           SELECT p.email

TR_MERCH_REPORT_OK_UPD	TRIGGER	110	                             FROM merch_report mr,

TR_MERCH_REPORT_OK_UPD	TRIGGER	111	                                  routes_body1 rb,

TR_MERCH_REPORT_OK_UPD	TRIGGER	112	                                  routes_head rh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	113	                                  routes_head_agents rha,

TR_MERCH_REPORT_OK_UPD	TRIGGER	114	                                  routes_agents ra,

TR_MERCH_REPORT_OK_UPD	TRIGGER	115	                                  routes_tp rt,

TR_MERCH_REPORT_OK_UPD	TRIGGER	116	                                  cpp cpp1,

TR_MERCH_REPORT_OK_UPD	TRIGGER	117	                                  svms_oblast s,

TR_MERCH_REPORT_OK_UPD	TRIGGER	118	                                  ms_nets n,

TR_MERCH_REPORT_OK_UPD	TRIGGER	119	                                  (SELECT DISTINCT data, dm FROM calendar) c,

TR_MERCH_REPORT_OK_UPD	TRIGGER	120	                                  routes_logins_oblast rlr,

TR_MERCH_REPORT_OK_UPD	TRIGGER	121	                                  routes_logins_nets rln,

TR_MERCH_REPORT_OK_UPD	TRIGGER	122	                                  routes_agents_pwd p,

TR_MERCH_REPORT_OK_UPD	TRIGGER	123	                                  user_list u

TR_MERCH_REPORT_OK_UPD	TRIGGER	124	                            WHERE     u.tn = s.tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	125	                                  AND rb.ag_id = p.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	126	                                  AND cpp1.tz_oblast = rlr.oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	127	                                  AND rln.id_net = n.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	128	                                  AND rln.login = p.login

TR_MERCH_REPORT_OK_UPD	TRIGGER	129	                                  AND rlr.login = p.login

TR_MERCH_REPORT_OK_UPD	TRIGGER	130	                                  AND mr.dt = :new.dt

TR_MERCH_REPORT_OK_UPD	TRIGGER	131	                                  AND mr.dt = c.data

TR_MERCH_REPORT_OK_UPD	TRIGGER	132	                                  AND rb.day_num = c.dm

TR_MERCH_REPORT_OK_UPD	TRIGGER	133	                                  AND rb.id = mr.rb_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	134	                                  AND rh.id = rb.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	135	                                  AND rh.id = rha.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	136	                                  AND ra.id = rha.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	137	                                  AND ra.id = rb.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	138	                                  AND rh.id = rt.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	139	                                  AND rb.kodtp = rt.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	140	                                  AND rh.tn = s.tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	141	                                  AND rb.vv = rha.vv

TR_MERCH_REPORT_OK_UPD	TRIGGER	142	                                  AND rha.vv = rt.vv

TR_MERCH_REPORT_OK_UPD	TRIGGER	143	                                  AND cpp1.tz_oblast = s.oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	144	                                  AND cpp1.kodtp = rb.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	145	                                  AND cpp1.kodtp = rt.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	146	                                  AND n.id_net = cpp1.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	147	                                  AND rh.id = :new.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	148	                                  AND (SELECT COUNT (*) - SUM (oos)

TR_MERCH_REPORT_OK_UPD	TRIGGER	149	                                         FROM MS_REP_HBR_DT_VIEW msh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	150	                                              merch_spec_body msb,

TR_MERCH_REPORT_OK_UPD	TRIGGER	151	                                              merch_spec_report msr

TR_MERCH_REPORT_OK_UPD	TRIGGER	152	                                        WHERE     msh.kod_tp = cpp1.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	153	                                              AND msb.head_id = msh.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	154	                                              AND msh.ag_id = ra.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	155	                                              AND msh.id_net = n.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	156	                                              AND msb.id = msr.spec_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	157	                                              AND msr.dt = mr.dt

TR_MERCH_REPORT_OK_UPD	TRIGGER	158	                                              AND msh.data = msr.dt) = 0

TR_MERCH_REPORT_OK_UPD	TRIGGER	159	                                  /*AND (SELECT SUM (oos)

TR_MERCH_REPORT_OK_UPD	TRIGGER	160	                                         FROM merch_spec_head msh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	161	                                              merch_spec_body msb,

TR_MERCH_REPORT_OK_UPD	TRIGGER	162	                                              merch_spec_report msr

TR_MERCH_REPORT_OK_UPD	TRIGGER	163	                                        WHERE     msh.kod_tp = cpp1.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	164	                                              AND msb.head_id = msh.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	165	                                              AND msh.ag_id = ra.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	166	                                              AND msh.id_net = n.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	167	                                              AND msb.id = msr.spec_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	168	                                              AND msr.dt = mr.dt) =

TR_MERCH_REPORT_OK_UPD	TRIGGER	169	                                         (SELECT COUNT (*)

TR_MERCH_REPORT_OK_UPD	TRIGGER	170	                                            FROM merch_spec_head msh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	171	                                                 merch_spec_body msb

TR_MERCH_REPORT_OK_UPD	TRIGGER	172	                                           WHERE     msh.kod_tp = cpp1.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	173	                                                 AND msb.head_id = msh.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	174	                                                 AND msh.ag_id = ra.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	175	                                                 AND msh.id_net = n.id_net)*/

TR_MERCH_REPORT_OK_UPD	TRIGGER	176	                                  /*AND (SELECT svms_ok

TR_MERCH_REPORT_OK_UPD	TRIGGER	177	                                         FROM merch_report_ok

TR_MERCH_REPORT_OK_UPD	TRIGGER	178	                                        WHERE dt = mr.dt AND head_id = rh.id) = 1*/

TR_MERCH_REPORT_OK_UPD	TRIGGER	179	                                  AND p.email IS NOT NULL

TR_MERCH_REPORT_OK_UPD	TRIGGER	180	                                  AND ra.id = a.ag_id)

TR_MERCH_REPORT_OK_UPD	TRIGGER	181	                 ORDER BY DBMS_RANDOM.VALUE);

TR_MERCH_REPORT_OK_UPD	TRIGGER	182	

TR_MERCH_REPORT_OK_UPD	TRIGGER	183	         pr_sendmail_ms (v_mails, subj, text);

TR_MERCH_REPORT_OK_UPD	TRIGGER	184	      END LOOP;

TR_MERCH_REPORT_OK_UPD	TRIGGER	185	

TR_MERCH_REPORT_OK_UPD	TRIGGER	186	

TR_MERCH_REPORT_OK_UPD	TRIGGER	187	      /*FOR a

TR_MERCH_REPORT_OK_UPD	TRIGGER	188	         IN (  SELECT aa.aa_id,

TR_MERCH_REPORT_OK_UPD	TRIGGER	189	                      aa.INFO_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	190	                      aa.PROMO_ITEM_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	191	                      aa.SMALL_STOCK,

TR_MERCH_REPORT_OK_UPD	TRIGGER	192	                      aa.DMP_NOT_PROVIDED,

TR_MERCH_REPORT_OK_UPD	TRIGGER	193	                      aa.PROMO_PRICE_LIST_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	194	                      aa.PROMO_PRICE_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	195	                      aa.OTHER_COMM,

TR_MERCH_REPORT_OK_UPD	TRIGGER	196	                      rb.kodtp,

TR_MERCH_REPORT_OK_UPD	TRIGGER	197	                      wm_concat (p.email) email

TR_MERCH_REPORT_OK_UPD	TRIGGER	198	                 FROM routes_body1 rb,

TR_MERCH_REPORT_OK_UPD	TRIGGER	199	                      routes_head rh,

TR_MERCH_REPORT_OK_UPD	TRIGGER	200	                      routes_head_agents rha,

TR_MERCH_REPORT_OK_UPD	TRIGGER	201	                      routes_tp rt,

TR_MERCH_REPORT_OK_UPD	TRIGGER	202	                      cpp cpp1,

TR_MERCH_REPORT_OK_UPD	TRIGGER	203	                      svms_oblast s,

TR_MERCH_REPORT_OK_UPD	TRIGGER	204	                      ms_nets n,

TR_MERCH_REPORT_OK_UPD	TRIGGER	205	                      (SELECT DISTINCT data, dm FROM calendar) c,

TR_MERCH_REPORT_OK_UPD	TRIGGER	206	                      routes_logins_oblast rlr,

TR_MERCH_REPORT_OK_UPD	TRIGGER	207	                      routes_logins_nets rln,

TR_MERCH_REPORT_OK_UPD	TRIGGER	208	                      routes_agents_pwd p,

TR_MERCH_REPORT_OK_UPD	TRIGGER	209	                      user_list u,

TR_MERCH_REPORT_OK_UPD	TRIGGER	210	                      MERCH_REPORT_CAL_REMINDERS r,

TR_MERCH_REPORT_OK_UPD	TRIGGER	211	                      MERCH_REPORT_CAL_AA_H aa_h,

TR_MERCH_REPORT_OK_UPD	TRIGGER	212	                      merch_report_aa_report aa

TR_MERCH_REPORT_OK_UPD	TRIGGER	213	                WHERE     rh.data = TRUNC (c.data, 'mm')

TR_MERCH_REPORT_OK_UPD	TRIGGER	214	                      AND u.tn = rh.tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	215	                      AND rb.day_num = c.dm

TR_MERCH_REPORT_OK_UPD	TRIGGER	216	                      AND rh.id = rb.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	217	                      AND rh.id = rha.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	218	                      AND rha.ag_id = rb.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	219	                      AND rh.id = rt.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	220	                      AND rb.kodtp = rt.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	221	                      AND rh.tn = s.tn

TR_MERCH_REPORT_OK_UPD	TRIGGER	222	                      AND rb.vv = rha.vv

TR_MERCH_REPORT_OK_UPD	TRIGGER	223	                      AND rha.vv = rt.vv

TR_MERCH_REPORT_OK_UPD	TRIGGER	224	                      AND cpp1.tz_oblast = s.oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	225	                      AND cpp1.kodtp = rb.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	226	                      AND cpp1.kodtp = rt.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	227	                      AND n.id_net = cpp1.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	228	                      AND (rb.DAY_enabled_MR = 1)

TR_MERCH_REPORT_OK_UPD	TRIGGER	229	                      AND c.data = r.data

TR_MERCH_REPORT_OK_UPD	TRIGGER	230	                      AND rh.id = r.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	231	                      AND rb.ag_id = r.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	232	                      AND rb.kodtp = r.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	233	                      AND r.aa_id = aa_h.id

TR_MERCH_REPORT_OK_UPD	TRIGGER	234	                      AND rb.ag_id = aa.ag_id(+)

TR_MERCH_REPORT_OK_UPD	TRIGGER	235	                      AND rb.kodtp = aa.kodtp(+)

TR_MERCH_REPORT_OK_UPD	TRIGGER	236	                      AND rb.ag_id = p.ag_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	237	                      AND cpp1.tz_oblast = rlr.oblast

TR_MERCH_REPORT_OK_UPD	TRIGGER	238	                      AND rln.id_net = n.id_net

TR_MERCH_REPORT_OK_UPD	TRIGGER	239	                      AND rln.login = p.login

TR_MERCH_REPORT_OK_UPD	TRIGGER	240	                      AND rlr.login = p.login

TR_MERCH_REPORT_OK_UPD	TRIGGER	241	                      AND p.email IS NOT NULL

TR_MERCH_REPORT_OK_UPD	TRIGGER	242	                      AND c.data = :new.dt

TR_MERCH_REPORT_OK_UPD	TRIGGER	243	                      AND rh.id = :new.head_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	244	                      AND aa.started = 0

TR_MERCH_REPORT_OK_UPD	TRIGGER	245	             GROUP BY aa.aa_id,

TR_MERCH_REPORT_OK_UPD	TRIGGER	246	                      aa.INFO_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	247	                      aa.PROMO_ITEM_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	248	                      aa.SMALL_STOCK,

TR_MERCH_REPORT_OK_UPD	TRIGGER	249	                      aa.DMP_NOT_PROVIDED,

TR_MERCH_REPORT_OK_UPD	TRIGGER	250	                      aa.PROMO_PRICE_LIST_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	251	                      aa.PROMO_PRICE_ABSENT,

TR_MERCH_REPORT_OK_UPD	TRIGGER	252	                      aa.OTHER_COMM,

TR_MERCH_REPORT_OK_UPD	TRIGGER	253	                      rb.kodtp)

TR_MERCH_REPORT_OK_UPD	TRIGGER	254	      LOOP

TR_MERCH_REPORT_OK_UPD	TRIGGER	255	         subj :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	256	               'По Акции № '

TR_MERCH_REPORT_OK_UPD	TRIGGER	257	            || a.aa_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	258	            || ' не соблюдаются условия проведения';

TR_MERCH_REPORT_OK_UPD	TRIGGER	259	         text := 'Не соблюдение акции:<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	260	

TR_MERCH_REPORT_OK_UPD	TRIGGER	261	         IF a.INFO_ABSENT = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	262	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	263	            text :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	264	               text || 'Нет инфо в ТЗ по активности<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	265	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	266	

TR_MERCH_REPORT_OK_UPD	TRIGGER	267	         IF a.PROMO_ITEM_ABSENT = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	268	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	269	            text := text || 'Нет акционного товара<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	270	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	271	

TR_MERCH_REPORT_OK_UPD	TRIGGER	272	         IF a.SMALL_STOCK = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	273	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	274	            text :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	275	                  text

TR_MERCH_REPORT_OK_UPD	TRIGGER	276	               || 'Недостаточный товарный запас<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	277	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	278	

TR_MERCH_REPORT_OK_UPD	TRIGGER	279	         IF a.DMP_NOT_PROVIDED = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	280	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	281	            text := text || 'Не предоставлено ДМП<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	282	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	283	

TR_MERCH_REPORT_OK_UPD	TRIGGER	284	         IF a.PROMO_PRICE_LIST_ABSENT = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	285	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	286	            text :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	287	                  text

TR_MERCH_REPORT_OK_UPD	TRIGGER	288	               || 'Не предоставлен акционный ценник<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	289	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	290	

TR_MERCH_REPORT_OK_UPD	TRIGGER	291	         IF a.PROMO_PRICE_ABSENT = 1

TR_MERCH_REPORT_OK_UPD	TRIGGER	292	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	293	            text := text || 'Нет акционной цены<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	294	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	295	

TR_MERCH_REPORT_OK_UPD	TRIGGER	296	         IF a.OTHER_COMM IS NOT NULL

TR_MERCH_REPORT_OK_UPD	TRIGGER	297	         THEN

TR_MERCH_REPORT_OK_UPD	TRIGGER	298	            text :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	299	                  text

TR_MERCH_REPORT_OK_UPD	TRIGGER	300	               || 'Прочие комментарии: '

TR_MERCH_REPORT_OK_UPD	TRIGGER	301	               || a.OTHER_COMM

TR_MERCH_REPORT_OK_UPD	TRIGGER	302	               || '<br>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	303	         END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	304	

TR_MERCH_REPORT_OK_UPD	TRIGGER	305	         text :=

TR_MERCH_REPORT_OK_UPD	TRIGGER	306	               text

TR_MERCH_REPORT_OK_UPD	TRIGGER	307	            || '<a href="merchservice.com.ua/login.php?action=merch_report_aa_report&id='

TR_MERCH_REPORT_OK_UPD	TRIGGER	308	            || a.aa_id

TR_MERCH_REPORT_OK_UPD	TRIGGER	309	            || '&kodtp='

TR_MERCH_REPORT_OK_UPD	TRIGGER	310	            || a.kodtp

TR_MERCH_REPORT_OK_UPD	TRIGGER	311	            || '&print=1">отчет по акции</a>';

TR_MERCH_REPORT_OK_UPD	TRIGGER	312	

TR_MERCH_REPORT_OK_UPD	TRIGGER	313	         pr_sendmail_ms (a.email, subj, text);

TR_MERCH_REPORT_OK_UPD	TRIGGER	314	      END LOOP;*/

TR_MERCH_REPORT_OK_UPD	TRIGGER	315	   END IF;

TR_MERCH_REPORT_OK_UPD	TRIGGER	316	END;
TR_MERCH_REPORT_OK_N	TRIGGER	1	TRIGGER TR_MERCH_REPORT_OK_N 

TR_MERCH_REPORT_OK_N	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_OK_N	TRIGGER	3	   ON MERCH_REPORT_OK

TR_MERCH_REPORT_OK_N	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_OK_N	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_OK_N	TRIGGER	6	BEGIN

TR_MERCH_REPORT_OK_N	TRIGGER	7	   :new.id := seq_all.NEXTVAL;

TR_MERCH_REPORT_OK_N	TRIGGER	8	END;
TR_MERCH_REPORT_OK_LOG	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_OK_LOG

TR_MERCH_REPORT_OK_LOG	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

TR_MERCH_REPORT_OK_LOG	TRIGGER	3	   ON PERSIK.MERCH_REPORT_OK

TR_MERCH_REPORT_OK_LOG	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_OK_LOG	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_OK_LOG	TRIGGER	6	DECLARE

TR_MERCH_REPORT_OK_LOG	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_MERCH_REPORT_OK_LOG	TRIGGER	8	   v_head_id   VARCHAR2 (255);

TR_MERCH_REPORT_OK_LOG	TRIGGER	9	   v_dt        VARCHAR2 (255);

TR_MERCH_REPORT_OK_LOG	TRIGGER	10	   v_svms_ok   VARCHAR2 (255);

TR_MERCH_REPORT_OK_LOG	TRIGGER	11	   v_mode      VARCHAR2 (255);

TR_MERCH_REPORT_OK_LOG	TRIGGER	12	BEGIN

TR_MERCH_REPORT_OK_LOG	TRIGGER	13	   IF INSERTING

TR_MERCH_REPORT_OK_LOG	TRIGGER	14	   THEN

TR_MERCH_REPORT_OK_LOG	TRIGGER	15	      v_mode := 'insert';

TR_MERCH_REPORT_OK_LOG	TRIGGER	16	      v_head_id := :new.head_id;

TR_MERCH_REPORT_OK_LOG	TRIGGER	17	      v_dt := TO_CHAR (:new.dt, 'yyyy-mm-dd hh24:mi:ss');

TR_MERCH_REPORT_OK_LOG	TRIGGER	18	      v_svms_ok := :new.svms_ok;

TR_MERCH_REPORT_OK_LOG	TRIGGER	19	   END IF;

TR_MERCH_REPORT_OK_LOG	TRIGGER	20	

TR_MERCH_REPORT_OK_LOG	TRIGGER	21	   IF UPDATING

TR_MERCH_REPORT_OK_LOG	TRIGGER	22	   THEN

TR_MERCH_REPORT_OK_LOG	TRIGGER	23	      v_mode := 'update';

TR_MERCH_REPORT_OK_LOG	TRIGGER	24	      v_head_id := :old.head_id || '=>' || :new.head_id;

TR_MERCH_REPORT_OK_LOG	TRIGGER	25	      v_dt :=

TR_MERCH_REPORT_OK_LOG	TRIGGER	26	            TO_CHAR (:old.dt, 'yyyy-mm-dd hh24:mi:ss')

TR_MERCH_REPORT_OK_LOG	TRIGGER	27	         || '=>'

TR_MERCH_REPORT_OK_LOG	TRIGGER	28	         || TO_CHAR (:new.dt, 'yyyy-mm-dd hh24:mi:ss');

TR_MERCH_REPORT_OK_LOG	TRIGGER	29	      v_svms_ok := :old.svms_ok || '=>' || :new.svms_ok;

TR_MERCH_REPORT_OK_LOG	TRIGGER	30	   END IF;

TR_MERCH_REPORT_OK_LOG	TRIGGER	31	

TR_MERCH_REPORT_OK_LOG	TRIGGER	32	   IF DELETING

TR_MERCH_REPORT_OK_LOG	TRIGGER	33	   THEN

TR_MERCH_REPORT_OK_LOG	TRIGGER	34	      v_mode := 'delete';

TR_MERCH_REPORT_OK_LOG	TRIGGER	35	      v_head_id := :old.head_id;

TR_MERCH_REPORT_OK_LOG	TRIGGER	36	      v_dt := TO_CHAR (:old.dt, 'yyyy-mm-dd hh24:mi:ss');

TR_MERCH_REPORT_OK_LOG	TRIGGER	37	      v_svms_ok := :old.svms_ok;

TR_MERCH_REPORT_OK_LOG	TRIGGER	38	   END IF;

TR_MERCH_REPORT_OK_LOG	TRIGGER	39	

TR_MERCH_REPORT_OK_LOG	TRIGGER	40	   INSERT INTO full_log (prg, text)

TR_MERCH_REPORT_OK_LOG	TRIGGER	41	           VALUES (

TR_MERCH_REPORT_OK_LOG	TRIGGER	42	                     'merch_report_ok',

TR_MERCH_REPORT_OK_LOG	TRIGGER	43	                        'MODE='

TR_MERCH_REPORT_OK_LOG	TRIGGER	44	                     || v_mode

TR_MERCH_REPORT_OK_LOG	TRIGGER	45	                     || ' '

TR_MERCH_REPORT_OK_LOG	TRIGGER	46	                     || 'TABLE=merch_report_ok'

TR_MERCH_REPORT_OK_LOG	TRIGGER	47	                     || CHR (10)

TR_MERCH_REPORT_OK_LOG	TRIGGER	48	                     || 'KEYS: head_id: '

TR_MERCH_REPORT_OK_LOG	TRIGGER	49	                     || v_head_id

TR_MERCH_REPORT_OK_LOG	TRIGGER	50	                     || ' dt: '

TR_MERCH_REPORT_OK_LOG	TRIGGER	51	                     || v_dt

TR_MERCH_REPORT_OK_LOG	TRIGGER	52	                     || CHR (10)

TR_MERCH_REPORT_OK_LOG	TRIGGER	53	                     || 'VALS: svms_ok: '

TR_MERCH_REPORT_OK_LOG	TRIGGER	54	                     || v_svms_ok);

TR_MERCH_REPORT_OK_LOG	TRIGGER	55	

TR_MERCH_REPORT_OK_LOG	TRIGGER	56	   COMMIT;

TR_MERCH_REPORT_OK_LOG	TRIGGER	57	END;
TR_MERCH_REPORT_LOG	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_LOG

TR_MERCH_REPORT_LOG	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

TR_MERCH_REPORT_LOG	TRIGGER	3	   ON PERSIK.MERCH_REPORT

TR_MERCH_REPORT_LOG	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_LOG	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_LOG	TRIGGER	6	DECLARE

TR_MERCH_REPORT_LOG	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_MERCH_REPORT_LOG	TRIGGER	8	   v_id        VARCHAR2 (255);

TR_MERCH_REPORT_LOG	TRIGGER	9	   v_rb_id     VARCHAR2 (255);

TR_MERCH_REPORT_LOG	TRIGGER	10	   v_dt        VARCHAR2 (255);

TR_MERCH_REPORT_LOG	TRIGGER	11	   v_mr_fakt   VARCHAR2 (255);

TR_MERCH_REPORT_LOG	TRIGGER	12	   v_mr_text   VARCHAR2 (512);

TR_MERCH_REPORT_LOG	TRIGGER	13	   v_mode      VARCHAR2 (255);

TR_MERCH_REPORT_LOG	TRIGGER	14	   v_svms_ok   INTEGER;

TR_MERCH_REPORT_LOG	TRIGGER	15	   c           INTEGER;

TR_MERCH_REPORT_LOG	TRIGGER	16	BEGIN

TR_MERCH_REPORT_LOG	TRIGGER	17	   /*IF INSERTING OR UPDATING

TR_MERCH_REPORT_LOG	TRIGGER	18	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	19	      SELECT COUNT (*)

TR_MERCH_REPORT_LOG	TRIGGER	20	        INTO c

TR_MERCH_REPORT_LOG	TRIGGER	21	        FROM routes_head h, routes_body1 b, calendar c

TR_MERCH_REPORT_LOG	TRIGGER	22	       WHERE     h.id = b.head_id

TR_MERCH_REPORT_LOG	TRIGGER	23	             AND b.id = :new.rb_id

TR_MERCH_REPORT_LOG	TRIGGER	24	             AND h.data = TRUNC (c.data, 'mm')

TR_MERCH_REPORT_LOG	TRIGGER	25	             AND c.dm = b.day_num

TR_MERCH_REPORT_LOG	TRIGGER	26	             AND :new.dt = c.data;

TR_MERCH_REPORT_LOG	TRIGGER	27	

TR_MERCH_REPORT_LOG	TRIGGER	28	      IF c = 0

TR_MERCH_REPORT_LOG	TRIGGER	29	      THEN

TR_MERCH_REPORT_LOG	TRIGGER	30	         ADD_LOG (

TR_MERCH_REPORT_LOG	TRIGGER	31	            'merch_report',

TR_MERCH_REPORT_LOG	TRIGGER	32	               'error. missing key pair. rb_id: '

TR_MERCH_REPORT_LOG	TRIGGER	33	            || :new.rb_id

TR_MERCH_REPORT_LOG	TRIGGER	34	            || ' dt: '

TR_MERCH_REPORT_LOG	TRIGGER	35	            || TO_CHAR (:new.dt, 'yyyy.mm.dd')

TR_MERCH_REPORT_LOG	TRIGGER	36	            || ' MODE='

TR_MERCH_REPORT_LOG	TRIGGER	37	            || v_mode

TR_MERCH_REPORT_LOG	TRIGGER	38	            || ' '

TR_MERCH_REPORT_LOG	TRIGGER	39	            || 'TABLE=merch_report');

TR_MERCH_REPORT_LOG	TRIGGER	40	

TR_MERCH_REPORT_LOG	TRIGGER	41	         raise_application_error (

TR_MERCH_REPORT_LOG	TRIGGER	42	            -20001,

TR_MERCH_REPORT_LOG	TRIGGER	43	               'error. missing key pair. rb_id: '

TR_MERCH_REPORT_LOG	TRIGGER	44	            || :new.rb_id

TR_MERCH_REPORT_LOG	TRIGGER	45	            || ' dt: '

TR_MERCH_REPORT_LOG	TRIGGER	46	            || TO_CHAR (:new.dt, 'yyyy.mm.dd'));

TR_MERCH_REPORT_LOG	TRIGGER	47	      END IF;

TR_MERCH_REPORT_LOG	TRIGGER	48	   END IF;*/

TR_MERCH_REPORT_LOG	TRIGGER	49	

TR_MERCH_REPORT_LOG	TRIGGER	50	   IF INSERTING

TR_MERCH_REPORT_LOG	TRIGGER	51	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	52	      v_mode := 'insert';

TR_MERCH_REPORT_LOG	TRIGGER	53	      v_rb_id := :new.rb_id;

TR_MERCH_REPORT_LOG	TRIGGER	54	      v_id := seq_all.NEXTVAL;

TR_MERCH_REPORT_LOG	TRIGGER	55	      v_dt := TO_CHAR (:new.dt, 'yyyy.mm.dd');

TR_MERCH_REPORT_LOG	TRIGGER	56	      v_mr_fakt := :new.mr_fakt;

TR_MERCH_REPORT_LOG	TRIGGER	57	      v_mr_text := :new.mr_text;

TR_MERCH_REPORT_LOG	TRIGGER	58	   END IF;

TR_MERCH_REPORT_LOG	TRIGGER	59	

TR_MERCH_REPORT_LOG	TRIGGER	60	   IF UPDATING

TR_MERCH_REPORT_LOG	TRIGGER	61	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	62	      v_mode := 'update';

TR_MERCH_REPORT_LOG	TRIGGER	63	      v_rb_id := :old.rb_id || '=>' || :new.rb_id;

TR_MERCH_REPORT_LOG	TRIGGER	64	      v_id := :old.id || '=>' || :new.id;

TR_MERCH_REPORT_LOG	TRIGGER	65	      v_dt :=

TR_MERCH_REPORT_LOG	TRIGGER	66	            TO_CHAR (:old.dt, 'yyyy.mm.dd')

TR_MERCH_REPORT_LOG	TRIGGER	67	         || '=>'

TR_MERCH_REPORT_LOG	TRIGGER	68	         || TO_CHAR (:new.dt, 'yyyy.mm.dd');

TR_MERCH_REPORT_LOG	TRIGGER	69	      v_mr_fakt := :old.mr_fakt || '=>' || :new.mr_fakt;

TR_MERCH_REPORT_LOG	TRIGGER	70	      v_mr_text := :old.mr_text || '=>' || :new.mr_text;

TR_MERCH_REPORT_LOG	TRIGGER	71	   END IF;

TR_MERCH_REPORT_LOG	TRIGGER	72	

TR_MERCH_REPORT_LOG	TRIGGER	73	   IF DELETING

TR_MERCH_REPORT_LOG	TRIGGER	74	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	75	      v_mode := 'delete';

TR_MERCH_REPORT_LOG	TRIGGER	76	      v_rb_id := :old.rb_id;

TR_MERCH_REPORT_LOG	TRIGGER	77	      v_id := :old.id;

TR_MERCH_REPORT_LOG	TRIGGER	78	      v_dt := TO_CHAR (:old.dt, 'yyyy.mm.dd');

TR_MERCH_REPORT_LOG	TRIGGER	79	      v_mr_fakt := :old.mr_fakt;

TR_MERCH_REPORT_LOG	TRIGGER	80	      v_mr_text := :old.mr_text;

TR_MERCH_REPORT_LOG	TRIGGER	81	   END IF;

TR_MERCH_REPORT_LOG	TRIGGER	82	

TR_MERCH_REPORT_LOG	TRIGGER	83	   SELECT SUM (NVL (o.svms_ok, 0))

TR_MERCH_REPORT_LOG	TRIGGER	84	     INTO v_svms_ok

TR_MERCH_REPORT_LOG	TRIGGER	85	     FROM (SELECT h.id, c.data

TR_MERCH_REPORT_LOG	TRIGGER	86	             FROM routes_head h, routes_body1 b, calendar c

TR_MERCH_REPORT_LOG	TRIGGER	87	            WHERE     h.id = b.head_id

TR_MERCH_REPORT_LOG	TRIGGER	88	                  AND b.id = :old.rb_id

TR_MERCH_REPORT_LOG	TRIGGER	89	                  AND h.data = TRUNC (c.data, 'mm')

TR_MERCH_REPORT_LOG	TRIGGER	90	                  AND c.dm = b.day_num

TR_MERCH_REPORT_LOG	TRIGGER	91	                  AND :old.dt = c.data

TR_MERCH_REPORT_LOG	TRIGGER	92	           UNION

TR_MERCH_REPORT_LOG	TRIGGER	93	           SELECT h.id, c.data

TR_MERCH_REPORT_LOG	TRIGGER	94	             FROM routes_head h, routes_body1 b, calendar c

TR_MERCH_REPORT_LOG	TRIGGER	95	            WHERE     h.id = b.head_id

TR_MERCH_REPORT_LOG	TRIGGER	96	                  AND b.id = :new.rb_id

TR_MERCH_REPORT_LOG	TRIGGER	97	                  AND h.data = TRUNC (c.data, 'mm')

TR_MERCH_REPORT_LOG	TRIGGER	98	                  AND c.dm = b.day_num

TR_MERCH_REPORT_LOG	TRIGGER	99	                  AND :new.dt = c.data) t,

TR_MERCH_REPORT_LOG	TRIGGER	100	          merch_report_ok o

TR_MERCH_REPORT_LOG	TRIGGER	101	    WHERE t.id = o.head_id(+) AND t.data = o.dt(+);

TR_MERCH_REPORT_LOG	TRIGGER	102	

TR_MERCH_REPORT_LOG	TRIGGER	103	

TR_MERCH_REPORT_LOG	TRIGGER	104	   IF     v_svms_ok > 0

TR_MERCH_REPORT_LOG	TRIGGER	105	      AND NOT (   (    INSERTING

TR_MERCH_REPORT_LOG	TRIGGER	106	                   AND :new.mr_fakt IS NULL

TR_MERCH_REPORT_LOG	TRIGGER	107	                   AND :new.mr_text IS NULL)

TR_MERCH_REPORT_LOG	TRIGGER	108	               OR (DELETING AND :old.mr_fakt IS NULL AND :old.mr_text IS NULL))

TR_MERCH_REPORT_LOG	TRIGGER	109	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	110	      ADD_LOG (

TR_MERCH_REPORT_LOG	TRIGGER	111	         'merch_report',

TR_MERCH_REPORT_LOG	TRIGGER	112	            'access denied. report is confirmed. MODE='

TR_MERCH_REPORT_LOG	TRIGGER	113	         || v_mode

TR_MERCH_REPORT_LOG	TRIGGER	114	         || ' '

TR_MERCH_REPORT_LOG	TRIGGER	115	         || 'TABLE=merch_report'

TR_MERCH_REPORT_LOG	TRIGGER	116	         || CHR (10)

TR_MERCH_REPORT_LOG	TRIGGER	117	         || 'KEYS: rb_id: '

TR_MERCH_REPORT_LOG	TRIGGER	118	         || v_rb_id

TR_MERCH_REPORT_LOG	TRIGGER	119	         || ' id: '

TR_MERCH_REPORT_LOG	TRIGGER	120	         || v_id

TR_MERCH_REPORT_LOG	TRIGGER	121	         || ' dt: '

TR_MERCH_REPORT_LOG	TRIGGER	122	         || v_dt

TR_MERCH_REPORT_LOG	TRIGGER	123	         || CHR (10)

TR_MERCH_REPORT_LOG	TRIGGER	124	         || 'VALS: mr_fakt: '

TR_MERCH_REPORT_LOG	TRIGGER	125	         || v_mr_fakt

TR_MERCH_REPORT_LOG	TRIGGER	126	         || ' mr_text: '

TR_MERCH_REPORT_LOG	TRIGGER	127	         || v_mr_text);

TR_MERCH_REPORT_LOG	TRIGGER	128	

TR_MERCH_REPORT_LOG	TRIGGER	129	      raise_application_error (-20001, 'access denied. report is confirmed.');

TR_MERCH_REPORT_LOG	TRIGGER	130	   END IF;

TR_MERCH_REPORT_LOG	TRIGGER	131	

TR_MERCH_REPORT_LOG	TRIGGER	132	   IF INSERTING OR UPDATING

TR_MERCH_REPORT_LOG	TRIGGER	133	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	134	      :NEW.lu := SYSDATE;

TR_MERCH_REPORT_LOG	TRIGGER	135	   END IF;

TR_MERCH_REPORT_LOG	TRIGGER	136	

TR_MERCH_REPORT_LOG	TRIGGER	137	   IF INSERTING

TR_MERCH_REPORT_LOG	TRIGGER	138	   THEN

TR_MERCH_REPORT_LOG	TRIGGER	139	      :NEW.ID := v_id;

TR_MERCH_REPORT_LOG	TRIGGER	140	   END IF;

TR_MERCH_REPORT_LOG	TRIGGER	141	

TR_MERCH_REPORT_LOG	TRIGGER	142	   ADD_LOG (

TR_MERCH_REPORT_LOG	TRIGGER	143	      'merch_report',

TR_MERCH_REPORT_LOG	TRIGGER	144	         'MODE='

TR_MERCH_REPORT_LOG	TRIGGER	145	      || v_mode

TR_MERCH_REPORT_LOG	TRIGGER	146	      || ' '

TR_MERCH_REPORT_LOG	TRIGGER	147	      || 'TABLE=merch_report'

TR_MERCH_REPORT_LOG	TRIGGER	148	      || CHR (10)

TR_MERCH_REPORT_LOG	TRIGGER	149	      || 'KEYS: rb_id: '

TR_MERCH_REPORT_LOG	TRIGGER	150	      || v_rb_id

TR_MERCH_REPORT_LOG	TRIGGER	151	      || ' id: '

TR_MERCH_REPORT_LOG	TRIGGER	152	      || v_id

TR_MERCH_REPORT_LOG	TRIGGER	153	      || ' dt: '

TR_MERCH_REPORT_LOG	TRIGGER	154	      || v_dt

TR_MERCH_REPORT_LOG	TRIGGER	155	      || CHR (10)

TR_MERCH_REPORT_LOG	TRIGGER	156	      || 'VALS: mr_fakt: '

TR_MERCH_REPORT_LOG	TRIGGER	157	      || v_mr_fakt

TR_MERCH_REPORT_LOG	TRIGGER	158	      || ' mr_text: '

TR_MERCH_REPORT_LOG	TRIGGER	159	      || v_mr_text);

TR_MERCH_REPORT_LOG	TRIGGER	160	END;
TR_MERCH_REPORT_GPS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_REPORT_GPS_UPD" 

TR_MERCH_REPORT_GPS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_GPS_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_gps

TR_MERCH_REPORT_GPS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_GPS_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_GPS_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_GPS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_GPS_UPD	TRIGGER	8	END;

TR_MERCH_REPORT_GPS_UPD	TRIGGER	9	

TR_MERCH_REPORT_GPS_UPD	TRIGGER	10	

TR_MERCH_REPORT_GPS_UPD	TRIGGER	11	

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_GPS_tmp_UPD 

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_GPS_tmp

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_GPS_TMP_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_UPD	TRIGGER	1	TRIGGER TR_merch_report_cal_UPD

TR_MERCH_REPORT_CAL_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_UPD	TRIGGER	3	   ON merch_report_cal

TR_MERCH_REPORT_CAL_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_CAL_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_SOK	TRIGGER	1	TRIGGER tr_MERCH_REPORT_CAL_SOK

TR_MERCH_REPORT_CAL_SOK	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_SOK	TRIGGER	3	   ON MERCH_REPORT_CAL_SOK

TR_MERCH_REPORT_CAL_SOK	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MERCH_REPORT_CAL_SOK	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_SOK	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_SOK	TRIGGER	7	   :new.lu := SYSDATE;

TR_MERCH_REPORT_CAL_SOK	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	1	TRIGGER TR_merch_report_cal_rep_UPD

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	3	   ON merch_report_cal_rep

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_CAL_REP_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	1	TRIGGER tr_merch_report_cal_reminders

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	2	BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	3	ON MERCH_REPORT_CAL_REMINDERS

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	4	REFERENCING NEW AS New OLD AS Old

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	5	FOR EACH ROW

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	6	/* Formatted on 06/08/2015 16:37:34 (QP5 v5.227.12220.39724) */

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	7	BEGIN

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	8	   :new.lu := SYSDATE;

TR_MERCH_REPORT_CAL_REMINDERS	TRIGGER	9	END;
TR_MERCH_REPORT_CAL_NEWA	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_CAL_NEWA

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	2	   AFTER INSERT

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	3	   ON PERSIK.MERCH_REPORT_CAL

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	7	   INSERT INTO MERCH_REPORT_CAL_CHAINS (parent, chain)

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	8	      SELECT :new.id, id_net FROM ms_nets;

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	9	

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	10	   INSERT INTO MERCH_REPORT_CAL_REGIONS (parent, region)

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	11	      SELECT DISTINCT :new.id, cpp.h_tz_oblast

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	12	        FROM cpp

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	13	       WHERE cpp.h_tz_oblast IS NOT NULL;

TR_MERCH_REPORT_CAL_NEWA	TRIGGER	14	END;
TR_MERCH_REPORT_CAL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_CAL_NEW

TR_MERCH_REPORT_CAL_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_CAL_NEW	TRIGGER	3	   ON PERSIK.MERCH_REPORT_CAL

TR_MERCH_REPORT_CAL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_MERCH_REPORT_CAL_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	1	TRIGGER TR_merch_report_cal_freq_UPD

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	3	   ON merch_report_cal_freq

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_CAL_FREQ_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	1	TRIGGER PERSIK.TR_merch_report_cal_freq_NEW

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	3	   ON PERSIK.MERCH_REPORT_CAL_FREQ

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_MERCH_REPORT_CAL_FREQ_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_REPORT_CAL_AA_S_UPD

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	3	   ON PERSIK.MERCH_REPORT_CAL_AA_S

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_CAL_AA_S_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	1	TRIGGER TR_MERCH_report_cal_aa_s_NEW

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	3	   ON MERCH_report_cal_aa_s

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_MERCH_REPORT_CAL_AA_S_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	1	TRIGGER TR_MERCH_report_cal_aa_o_UPD

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	3	   ON MERCH_report_cal_aa_o

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_CAL_AA_O_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	1	TRIGGER TR_MERCH_report_cal_aa_h_UPD

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	3	   ON MERCH_report_cal_aa_h

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_REPORT_CAL_AA_H_UPD	TRIGGER	8	END;
TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	1	TRIGGER TR_MERCH_report_cal_aa_h_NEW

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	3	   ON MERCH_report_cal_aa_h

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	6	BEGIN

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_MERCH_REPORT_CAL_AA_H_NEW	TRIGGER	8	END;
TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	1	TRIGGER PERSIK.tr_merch_report_aa_report_s

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	3	   ON PERSIK.merch_report_aa_report_s

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	6	BEGIN

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	7	   :new.lu := SYSDATE;

TR_MERCH_REPORT_AA_REPORT_S	TRIGGER	8	END;
TR_MERCH_REPORT_AA_REPORT	TRIGGER	1	TRIGGER PERSIK.tr_merch_report_aa_report

TR_MERCH_REPORT_AA_REPORT	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_REPORT_AA_REPORT	TRIGGER	3	   ON PERSIK.merch_report_aa_report

TR_MERCH_REPORT_AA_REPORT	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_MERCH_REPORT_AA_REPORT	TRIGGER	5	   FOR EACH ROW

TR_MERCH_REPORT_AA_REPORT	TRIGGER	6	BEGIN

TR_MERCH_REPORT_AA_REPORT	TRIGGER	7	   :new.lu := SYSDATE;

TR_MERCH_REPORT_AA_REPORT	TRIGGER	8	END;
TR_MERCH_DT_AG_UPD	TRIGGER	1	TRIGGER PERSIK.TR_MERCH_DT_AG_UPD

TR_MERCH_DT_AG_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_DT_AG_UPD	TRIGGER	3	   ON PERSIK.MERCH_DT_AG

TR_MERCH_DT_AG_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_DT_AG_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_DT_AG_UPD	TRIGGER	6	BEGIN

TR_MERCH_DT_AG_UPD	TRIGGER	7	   IF :new.lu_fio IS NOT NULL

TR_MERCH_DT_AG_UPD	TRIGGER	8	   THEN

TR_MERCH_DT_AG_UPD	TRIGGER	9	      :NEW.lu := SYSDATE;

TR_MERCH_DT_AG_UPD	TRIGGER	10	   END IF;

TR_MERCH_DT_AG_UPD	TRIGGER	11	END;
TR_MERCH_DT_AG_NEW	TRIGGER	1	TRIGGER TR_MERCH_DT_AG_NEW

TR_MERCH_DT_AG_NEW	TRIGGER	2	   BEFORE INSERT

TR_MERCH_DT_AG_NEW	TRIGGER	3	   ON MERCH_DT_AG

TR_MERCH_DT_AG_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_DT_AG_NEW	TRIGGER	5	   FOR EACH ROW

TR_MERCH_DT_AG_NEW	TRIGGER	6	BEGIN

TR_MERCH_DT_AG_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_MERCH_DT_AG_NEW	TRIGGER	8	END;
TR_MERCH_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_CHAT_UPD" 

TR_MERCH_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_CHAT_UPD	TRIGGER	3	   ON MERCH_CHAT

TR_MERCH_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_CHAT_UPD	TRIGGER	6	BEGIN

TR_MERCH_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_CHAT_UPD	TRIGGER	8	END;

TR_MERCH_CHAT_UPD	TRIGGER	9	

TR_MERCH_CHAT_INS	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_CHAT_INS" 

TR_MERCH_CHAT_INS	TRIGGER	2	   BEFORE INSERT

TR_MERCH_CHAT_INS	TRIGGER	3	   ON MERCH_CHAT

TR_MERCH_CHAT_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_CHAT_INS	TRIGGER	5	   FOR EACH ROW

TR_MERCH_CHAT_INS	TRIGGER	6	DECLARE

TR_MERCH_CHAT_INS	TRIGGER	7	   subj       VARCHAR (255);

TR_MERCH_CHAT_INS	TRIGGER	8	   from_fio   VARCHAR (255);

TR_MERCH_CHAT_INS	TRIGGER	9	   text       VARCHAR (1024);

TR_MERCH_CHAT_INS	TRIGGER	10	   spd        INTEGER;

TR_MERCH_CHAT_INS	TRIGGER	11	   net        VARCHAR (255);

TR_MERCH_CHAT_INS	TRIGGER	12	   tpn        VARCHAR (255);

TR_MERCH_CHAT_INS	TRIGGER	13	   tpa        VARCHAR (255);

TR_MERCH_CHAT_INS	TRIGGER	14	   v_kod_tp   INTEGER;

TR_MERCH_CHAT_INS	TRIGGER	15	   v_dt       DATE;

TR_MERCH_CHAT_INS	TRIGGER	16	BEGIN

TR_MERCH_CHAT_INS	TRIGGER	17	   IF :new.id IS NULL

TR_MERCH_CHAT_INS	TRIGGER	18	   THEN

TR_MERCH_CHAT_INS	TRIGGER	19	      :new.id := seq_all.NEXTVAL;

TR_MERCH_CHAT_INS	TRIGGER	20	   END IF;

TR_MERCH_CHAT_INS	TRIGGER	21	

TR_MERCH_CHAT_INS	TRIGGER	22	END;

TR_MERCH_CHAT_INS	TRIGGER	23	

TR_MERCH_CHAT_F_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_CHAT_F_UPD" 

TR_MERCH_CHAT_F_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_CHAT_F_UPD	TRIGGER	3	   ON MERCH_CHAT_F

TR_MERCH_CHAT_F_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_CHAT_F_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_CHAT_F_UPD	TRIGGER	6	BEGIN

TR_MERCH_CHAT_F_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_CHAT_F_UPD	TRIGGER	8	END;

TR_MERCH_CHAT_F_UPD	TRIGGER	9	

TR_MERCH_CHAT_F_INS	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_CHAT_F_INS" 

TR_MERCH_CHAT_F_INS	TRIGGER	2	   BEFORE INSERT

TR_MERCH_CHAT_F_INS	TRIGGER	3	   ON MERCH_CHAT_F

TR_MERCH_CHAT_F_INS	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_CHAT_F_INS	TRIGGER	5	   FOR EACH ROW

TR_MERCH_CHAT_F_INS	TRIGGER	6	DECLARE

TR_MERCH_CHAT_F_INS	TRIGGER	7	   subj       VARCHAR (255);

TR_MERCH_CHAT_F_INS	TRIGGER	8	   from_fio   VARCHAR (255);

TR_MERCH_CHAT_F_INS	TRIGGER	9	   text       VARCHAR (1024);

TR_MERCH_CHAT_F_INS	TRIGGER	10	   spd        INTEGER;

TR_MERCH_CHAT_F_INS	TRIGGER	11	   net        VARCHAR (255);

TR_MERCH_CHAT_F_INS	TRIGGER	12	   tpn        VARCHAR (255);

TR_MERCH_CHAT_F_INS	TRIGGER	13	   tpa        VARCHAR (255);

TR_MERCH_CHAT_F_INS	TRIGGER	14	   v_kod_tp   INTEGER;

TR_MERCH_CHAT_F_INS	TRIGGER	15	   v_dt       DATE;

TR_MERCH_CHAT_F_INS	TRIGGER	16	BEGIN

TR_MERCH_CHAT_F_INS	TRIGGER	17	   IF :new.id IS NULL

TR_MERCH_CHAT_F_INS	TRIGGER	18	   THEN

TR_MERCH_CHAT_F_INS	TRIGGER	19	      :new.id := seq_all.NEXTVAL;

TR_MERCH_CHAT_F_INS	TRIGGER	20	   END IF;

TR_MERCH_CHAT_F_INS	TRIGGER	21	END;

TR_MERCH_CHAT_F_INS	TRIGGER	22	

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_MERCH_CHAT_CLOSED_UPD" 

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	3	   ON MERCH_CHAT_CLOSED

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	5	   FOR EACH ROW

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	6	BEGIN

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	8	END;

TR_MERCH_CHAT_CLOSED_UPD	TRIGGER	9	

TR_LOC_TR_LOC_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_LOC_TR_LOC_UPD" 

TR_LOC_TR_LOC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_LOC_TR_LOC_UPD	TRIGGER	3	   ON PERSIK.TR_LOC    REFERENCING NEW AS NEW OLD AS OLD

TR_LOC_TR_LOC_UPD	TRIGGER	4	   FOR EACH ROW

TR_LOC_TR_LOC_UPD	TRIGGER	5	BEGIN

TR_LOC_TR_LOC_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_LOC_TR_LOC_UPD	TRIGGER	7	END;

TR_LOC_TR_LOC_UPD	TRIGGER	8	

TR_LOC_TR_LOC_UPD	TRIGGER	9	

TR_LOC_TR_LOC_UPD	TRIGGER	10	

TR_LOC_TR_LOC_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_LOC_TR_LOC_NEW" 

TR_LOC_TR_LOC_NEW	TRIGGER	2	   BEFORE INSERT

TR_LOC_TR_LOC_NEW	TRIGGER	3	   ON PERSIK.TR_LOC    REFERENCING NEW AS NEW OLD AS OLD

TR_LOC_TR_LOC_NEW	TRIGGER	4	   FOR EACH ROW

TR_LOC_TR_LOC_NEW	TRIGGER	5	BEGIN

TR_LOC_TR_LOC_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_LOC_TR_LOC_NEW	TRIGGER	7	   THEN

TR_LOC_TR_LOC_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_LOC_TR_LOC_NEW	TRIGGER	9	   END IF;

TR_LOC_TR_LOC_NEW	TRIGGER	10	END;

TR_LOC_TR_LOC_NEW	TRIGGER	11	

TR_LOC_TR_LOC_NEW	TRIGGER	12	

TR_LOC_TR_LOC_NEW	TRIGGER	13	

TR_LISTS_UPD_NAME	TRIGGER	1	TRIGGER PERSIK.tr_lists_upd_name

TR_LISTS_UPD_NAME	TRIGGER	2	   BEFORE UPDATE OF name

TR_LISTS_UPD_NAME	TRIGGER	3	   ON PERSIK.LISTS

TR_LISTS_UPD_NAME	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_LISTS_UPD_NAME	TRIGGER	5	   FOR EACH ROW

TR_LISTS_UPD_NAME	TRIGGER	6	BEGIN

TR_LISTS_UPD_NAME	TRIGGER	7	   UPDATE BUD_RU_FF_SUBTYPES

TR_LISTS_UPD_NAME	TRIGGER	8	      SET name = :new.name

TR_LISTS_UPD_NAME	TRIGGER	9	    WHERE list_id = :new.id;

TR_LISTS_UPD_NAME	TRIGGER	10	END;
TR_LISTS_UPD	TRIGGER	1	TRIGGER tr_lists_upd

TR_LISTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_LISTS_UPD	TRIGGER	3	   ON lists

TR_LISTS_UPD	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_LISTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_LISTS_UPD	TRIGGER	6	BEGIN

TR_LISTS_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_LISTS_UPD	TRIGGER	8	END;
TR_LISTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_LISTS_NEW

TR_LISTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_LISTS_NEW	TRIGGER	3	   ON PERSIK.LISTS

TR_LISTS_NEW	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_LISTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_LISTS_NEW	TRIGGER	6	DECLARE

TR_LISTS_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_LISTS_NEW	TRIGGER	8	   v_get_list   VARCHAR2 (4000);

TR_LISTS_NEW	TRIGGER	9	   v_get_item   VARCHAR2 (4000);

TR_LISTS_NEW	TRIGGER	10	BEGIN

TR_LISTS_NEW	TRIGGER	11	   IF :new.id IS NULL

TR_LISTS_NEW	TRIGGER	12	   THEN

TR_LISTS_NEW	TRIGGER	13	      :new.id := seq_all.NEXTVAL;

TR_LISTS_NEW	TRIGGER	14	   END IF;

TR_LISTS_NEW	TRIGGER	15	

TR_LISTS_NEW	TRIGGER	16	   IF :new.parent = 0

TR_LISTS_NEW	TRIGGER	17	   THEN

TR_LISTS_NEW	TRIGGER	18	      v_get_list :=

TR_LISTS_NEW	TRIGGER	19	            'SELECT id, name FROM lists WHERE parent = '

TR_LISTS_NEW	TRIGGER	20	         || :new.id

TR_LISTS_NEW	TRIGGER	21	         || ' ORDER BY name';

TR_LISTS_NEW	TRIGGER	22	      v_get_item := 'SELECT name FROM lists WHERE id = :id';

TR_LISTS_NEW	TRIGGER	23	

TR_LISTS_NEW	TRIGGER	24	

TR_LISTS_NEW	TRIGGER	25	      INSERT INTO BUD_RU_FF_SUBTYPES (NAME,

TR_LISTS_NEW	TRIGGER	26	                                      GET_LIST,

TR_LISTS_NEW	TRIGGER	27	                                      DPT_ID,

TR_LISTS_NEW	TRIGGER	28	                                      GET_ITEM,

TR_LISTS_NEW	TRIGGER	29	                                      list_id)

TR_LISTS_NEW	TRIGGER	30	           VALUES (:new.NAME,

TR_LISTS_NEW	TRIGGER	31	                   v_get_list,

TR_LISTS_NEW	TRIGGER	32	                   :new.dpt_id,

TR_LISTS_NEW	TRIGGER	33	                   v_get_item,

TR_LISTS_NEW	TRIGGER	34	                   :new.id);

TR_LISTS_NEW	TRIGGER	35	

TR_LISTS_NEW	TRIGGER	36	      COMMIT;

TR_LISTS_NEW	TRIGGER	37	   END IF;

TR_LISTS_NEW	TRIGGER	38	END;
TR_LISTS_DEL	TRIGGER	1	TRIGGER PERSIK.tr_lists_del

TR_LISTS_DEL	TRIGGER	2	   BEFORE DELETE

TR_LISTS_DEL	TRIGGER	3	   ON PERSIK.LISTS

TR_LISTS_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_LISTS_DEL	TRIGGER	5	   FOR EACH ROW

TR_LISTS_DEL	TRIGGER	6	DECLARE

TR_LISTS_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_LISTS_DEL	TRIGGER	8	BEGIN

TR_LISTS_DEL	TRIGGER	9	   DELETE FROM lists

TR_LISTS_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_LISTS_DEL	TRIGGER	11	

TR_LISTS_DEL	TRIGGER	12	   COMMIT;

TR_LISTS_DEL	TRIGGER	13	

TR_LISTS_DEL	TRIGGER	14	   IF :old.parent = 0

TR_LISTS_DEL	TRIGGER	15	   THEN

TR_LISTS_DEL	TRIGGER	16	      DELETE FROM BUD_RU_FF_SUBTYPES

TR_LISTS_DEL	TRIGGER	17	            WHERE list_id = :old.id;

TR_LISTS_DEL	TRIGGER	18	

TR_LISTS_DEL	TRIGGER	19	      COMMIT;

TR_LISTS_DEL	TRIGGER	20	   END IF;

TR_LISTS_DEL	TRIGGER	21	END;
TR_LIMITS_LU	TRIGGER	1	TRIGGER "PERSIK"."TR_LIMITS_LU" 

TR_LIMITS_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_LIMITS_LU	TRIGGER	3	   ON limits

TR_LIMITS_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_LIMITS_LU	TRIGGER	5	   FOR EACH ROW

TR_LIMITS_LU	TRIGGER	6	BEGIN

TR_LIMITS_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_LIMITS_LU	TRIGGER	8	END;

TR_LIMITS_LU	TRIGGER	9	

TR_LIMITS_LU	TRIGGER	10	

TR_KPR_TRANSIT_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_KPR_TRANSIT_TMP_1

TR_KPR_TRANSIT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_KPR_TRANSIT_TMP_1	TRIGGER	3	   ON PERSIK.KPR_TRANSIT_TMP

TR_KPR_TRANSIT_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_KPR_TRANSIT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_KPR_TRANSIT_TMP_1	TRIGGER	6	BEGIN

TR_KPR_TRANSIT_TMP_1	TRIGGER	7	   :new.h_eta := md5hash (:new.eta);

TR_KPR_TRANSIT_TMP_1	TRIGGER	8	   :new.dt := TO_DATE ('01/' || :new.m || '/' || :new.y);

TR_KPR_TRANSIT_TMP_1	TRIGGER	9	

TR_KPR_TRANSIT_TMP_1	TRIGGER	10	   BEGIN

TR_KPR_TRANSIT_TMP_1	TRIGGER	11	      IF :new.country_id IS NOT NULL

TR_KPR_TRANSIT_TMP_1	TRIGGER	12	      THEN

TR_KPR_TRANSIT_TMP_1	TRIGGER	13	         SELECT dpt_id

TR_KPR_TRANSIT_TMP_1	TRIGGER	14	           INTO :new.dpt_id

TR_KPR_TRANSIT_TMP_1	TRIGGER	15	           FROM departments

TR_KPR_TRANSIT_TMP_1	TRIGGER	16	          WHERE manufak = :new.country_id;

TR_KPR_TRANSIT_TMP_1	TRIGGER	17	      END IF;

TR_KPR_TRANSIT_TMP_1	TRIGGER	18	   EXCEPTION

TR_KPR_TRANSIT_TMP_1	TRIGGER	19	      WHEN OTHERS

TR_KPR_TRANSIT_TMP_1	TRIGGER	20	      THEN

TR_KPR_TRANSIT_TMP_1	TRIGGER	21	         NULL;

TR_KPR_TRANSIT_TMP_1	TRIGGER	22	   END;

TR_KPR_TRANSIT_TMP_1	TRIGGER	23	END;
TR_KK_FLT_NETS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_KK_FLT_NETS_NEW" 

TR_KK_FLT_NETS_NEW	TRIGGER	2	   BEFORE INSERT

TR_KK_FLT_NETS_NEW	TRIGGER	3	   ON PERSIK.kk_flt_nets

TR_KK_FLT_NETS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KK_FLT_NETS_NEW	TRIGGER	5	   FOR EACH ROW

TR_KK_FLT_NETS_NEW	TRIGGER	6	BEGIN

TR_KK_FLT_NETS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_KK_FLT_NETS_NEW	TRIGGER	8	END tr_kk_flt_nets_new;

TR_KK_FLT_NETS_NEW	TRIGGER	9	

TR_KK_FLT_NETS_NEW	TRIGGER	10	

TR_KK_FLT_NETS_NEW	TRIGGER	11	

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_KK_FLT_NETS_DETAIL_NEW" 

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	3	   ON PERSIK.KK_FLT_NETS_DETAIL

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	6	BEGIN

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	8	END tr_KK_FLT_NETS_DETAIL_new;

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	9	

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	10	

TR_KK_FLT_NETS_DETAIL_NEW	TRIGGER	11	

TR_KCM_UPD	TRIGGER	1	TRIGGER PERSIK.TR_KCM_UPD

TR_KCM_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_dpu_tn

TR_KCM_UPD	TRIGGER	3	   ON PERSIK.kcm

TR_KCM_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KCM_UPD	TRIGGER	5	   FOR EACH ROW

TR_KCM_UPD	TRIGGER	6	BEGIN

TR_KCM_UPD	TRIGGER	7	   IF :new.ok_dpu_tn IS NULL

TR_KCM_UPD	TRIGGER	8	   THEN

TR_KCM_UPD	TRIGGER	9	      :NEW.ok_dpu_lu := NULL;

TR_KCM_UPD	TRIGGER	10	      :NEW.ok_dpu_fio := NULL;

TR_KCM_UPD	TRIGGER	11	   ELSE

TR_KCM_UPD	TRIGGER	12	      :NEW.ok_dpu_lu := SYSDATE;

TR_KCM_UPD	TRIGGER	13	

TR_KCM_UPD	TRIGGER	14	      SELECT fio

TR_KCM_UPD	TRIGGER	15	        INTO :NEW.ok_dpu_fio

TR_KCM_UPD	TRIGGER	16	        FROM user_list

TR_KCM_UPD	TRIGGER	17	       WHERE tn = :new.ok_dpu_tn;

TR_KCM_UPD	TRIGGER	18	   END IF;

TR_KCM_UPD	TRIGGER	19	END;
TR_KCM_NEW	TRIGGER	1	TRIGGER PERSIK.TR_KCM_NEW

TR_KCM_NEW	TRIGGER	2	   BEFORE INSERT

TR_KCM_NEW	TRIGGER	3	   ON PERSIK.kcm

TR_KCM_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KCM_NEW	TRIGGER	5	   FOR EACH ROW

TR_KCM_NEW	TRIGGER	6	BEGIN

TR_KCM_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_KCM_NEW	TRIGGER	8	   :new.lu := SYSDATE;

TR_KCM_NEW	TRIGGER	9	   :new.y := TO_CHAR (:new.dt, 'yyyy');

TR_KCM_NEW	TRIGGER	10	   :new.m := TO_CHAR (:new.dt, 'mm');

TR_KCM_NEW	TRIGGER	11	END;
TR_KCM_CHAT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_KCM_chat_NEW

TR_KCM_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_KCM_CHAT_NEW	TRIGGER	3	   ON PERSIK.kcm_chat

TR_KCM_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KCM_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_KCM_CHAT_NEW	TRIGGER	6	BEGIN

TR_KCM_CHAT_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_KCM_CHAT_NEW	TRIGGER	8	   :new.lu := SYSDATE;

TR_KCM_CHAT_NEW	TRIGGER	9	   :new.y := TO_CHAR (:new.dt, 'yyyy');

TR_KCM_CHAT_NEW	TRIGGER	10	   :new.m := TO_CHAR (:new.dt, 'mm');

TR_KCM_CHAT_NEW	TRIGGER	11	END;
TR_KCC_NEW	TRIGGER	1	TRIGGER PERSIK.TR_kcc_NEW

TR_KCC_NEW	TRIGGER	2	   BEFORE INSERT

TR_KCC_NEW	TRIGGER	3	   ON PERSIK.kcc

TR_KCC_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KCC_NEW	TRIGGER	5	   FOR EACH ROW

TR_KCC_NEW	TRIGGER	6	BEGIN

TR_KCC_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_KCC_NEW	TRIGGER	8	   :new.lu := SYSDATE;

TR_KCC_NEW	TRIGGER	9	   :new.y := TO_CHAR (:new.dt, 'yyyy');

TR_KCC_NEW	TRIGGER	10	   :new.m := TO_CHAR (:new.dt, 'mm');

TR_KCC_NEW	TRIGGER	11	END;
TR_KCCT_NEW	TRIGGER	1	TRIGGER TR_KCCT_NEW

TR_KCCT_NEW	TRIGGER	2	   BEFORE INSERT

TR_KCCT_NEW	TRIGGER	3	   ON KCCT

TR_KCCT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_KCCT_NEW	TRIGGER	5	   FOR EACH ROW

TR_KCCT_NEW	TRIGGER	6	BEGIN

TR_KCCT_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_KCCT_NEW	TRIGGER	8	   :new.lu := SYSDATE;

TR_KCCT_NEW	TRIGGER	9	   :new.y := TO_CHAR (:new.dt, 'yyyy');

TR_KCCT_NEW	TRIGGER	10	   :new.m := TO_CHAR (:new.dt, 'mm');

TR_KCCT_NEW	TRIGGER	11	END;
TR_IV_UPD_RR	TRIGGER	1	TRIGGER PERSIK.TR_IV_UPD_RR

TR_IV_UPD_RR	TRIGGER	2	   BEFORE INSERT OR UPDATE OF revision_reason

TR_IV_UPD_RR	TRIGGER	3	   ON PERSIK.IV_HEAD

TR_IV_UPD_RR	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_UPD_RR	TRIGGER	5	   FOR EACH ROW

TR_IV_UPD_RR	TRIGGER	6	DECLARE

TR_IV_UPD_RR	TRIGGER	7	   subj         VARCHAR2 (4000);

TR_IV_UPD_RR	TRIGGER	8	   text         VARCHAR2 (4000);

TR_IV_UPD_RR	TRIGGER	9	   v_pos_name   VARCHAR (255);

TR_IV_UPD_RR	TRIGGER	10	   v_dpt_name   VARCHAR (255);

TR_IV_UPD_RR	TRIGGER	11	BEGIN

TR_IV_UPD_RR	TRIGGER	12	   IF :new.current_status = 3 AND :new.revision_reason IS NOT NULL

TR_IV_UPD_RR	TRIGGER	13	   THEN

TR_IV_UPD_RR	TRIGGER	14	      SELECT pos_name

TR_IV_UPD_RR	TRIGGER	15	        INTO v_pos_name

TR_IV_UPD_RR	TRIGGER	16	        FROM pos

TR_IV_UPD_RR	TRIGGER	17	       WHERE pos_id = :new.pos;

TR_IV_UPD_RR	TRIGGER	18	

TR_IV_UPD_RR	TRIGGER	19	      SELECT dpt_name

TR_IV_UPD_RR	TRIGGER	20	        INTO v_dpt_name

TR_IV_UPD_RR	TRIGGER	21	        FROM departments

TR_IV_UPD_RR	TRIGGER	22	       WHERE dpt_id = :new.dpt_id;

TR_IV_UPD_RR	TRIGGER	23	

TR_IV_UPD_RR	TRIGGER	24	      subj :=

TR_IV_UPD_RR	TRIGGER	25	            v_dpt_name

TR_IV_UPD_RR	TRIGGER	26	         || '.'

TR_IV_UPD_RR	TRIGGER	27	         || ' Отправлено на доработку представление-рекомендация на '

TR_IV_UPD_RR	TRIGGER	28	         || :new.fam

TR_IV_UPD_RR	TRIGGER	29	         || ' '

TR_IV_UPD_RR	TRIGGER	30	         || :new.im

TR_IV_UPD_RR	TRIGGER	31	         || ' '

TR_IV_UPD_RR	TRIGGER	32	         || :new.ot

TR_IV_UPD_RR	TRIGGER	33	         || ', должность '

TR_IV_UPD_RR	TRIGGER	34	         || v_pos_name;

TR_IV_UPD_RR	TRIGGER	35	

TR_IV_UPD_RR	TRIGGER	36	      text :=

TR_IV_UPD_RR	TRIGGER	37	            'Причина отправки на доработку: '

TR_IV_UPD_RR	TRIGGER	38	         || :new.revision_reason;

TR_IV_UPD_RR	TRIGGER	39	

TR_IV_UPD_RR	TRIGGER	40	      FOR a

TR_IV_UPD_RR	TRIGGER	41	         IN (SELECT fio, e_mail

TR_IV_UPD_RR	TRIGGER	42	               FROM user_list

TR_IV_UPD_RR	TRIGGER	43	              WHERE tn IN (SELECT tn

TR_IV_UPD_RR	TRIGGER	44	                             FROM iv_body

TR_IV_UPD_RR	TRIGGER	45	                            WHERE     id <

TR_IV_UPD_RR	TRIGGER	46	                                         (SELECT id

TR_IV_UPD_RR	TRIGGER	47	                                            FROM iv_body

TR_IV_UPD_RR	TRIGGER	48	                                           WHERE     accepted = 3

TR_IV_UPD_RR	TRIGGER	49	                                                 AND iid = :new.id)

TR_IV_UPD_RR	TRIGGER	50	                                  AND iid = :new.id))

TR_IV_UPD_RR	TRIGGER	51	      LOOP

TR_IV_UPD_RR	TRIGGER	52	         pr_sendmail (a.e_mail, subj, text);

TR_IV_UPD_RR	TRIGGER	53	      END LOOP;

TR_IV_UPD_RR	TRIGGER	54	   END IF;

TR_IV_UPD_RR	TRIGGER	55	END;
TR_IV_UPD	TRIGGER	1	TRIGGER PERSIK.TR_iv_UPD

TR_IV_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_IV_UPD	TRIGGER	3	   ON PERSIK.IV_HEAD

TR_IV_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_UPD	TRIGGER	5	   FOR EACH ROW

TR_IV_UPD	TRIGGER	6	BEGIN

TR_IV_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_IV_UPD	TRIGGER	8	END;
TR_IV_NEW	TRIGGER	1	TRIGGER PERSIK.TR_IV_NEW

TR_IV_NEW	TRIGGER	2	   BEFORE INSERT

TR_IV_NEW	TRIGGER	3	   ON PERSIK.IV_HEAD

TR_IV_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_NEW	TRIGGER	5	   FOR EACH ROW

TR_IV_NEW	TRIGGER	6	BEGIN

TR_IV_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_IV_NEW	TRIGGER	8	   :NEW.created := SYSDATE;

TR_IV_NEW	TRIGGER	9	   :new.current_acceptor := :new.tn;

TR_IV_NEW	TRIGGER	10	   :new.current_status := 0;

TR_IV_NEW	TRIGGER	11	END;
TR_IV_BODY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_iv_body_UPD

TR_IV_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_IV_BODY_UPD	TRIGGER	3	   ON PERSIK.IV_body

TR_IV_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_IV_BODY_UPD	TRIGGER	6	BEGIN

TR_IV_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_IV_BODY_UPD	TRIGGER	8	END;
TR_IV_BODY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_IV_BODY_NEW

TR_IV_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_IV_BODY_NEW	TRIGGER	3	   ON PERSIK.IV_BODY

TR_IV_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_IV_BODY_NEW	TRIGGER	6	BEGIN

TR_IV_BODY_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_IV_BODY_NEW	TRIGGER	8	   :new.created := SYSDATE;

TR_IV_BODY_NEW	TRIGGER	9	   :new.accepted := 0;

TR_IV_BODY_NEW	TRIGGER	10	END;
TR_IV_BODY_ACCEPTED_UPD	TRIGGER	1	TRIGGER PERSIK.TR_IV_BODY_ACCEPTED_UPD

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF accepted

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	3	   ON PERSIK.IV_BODY

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	5	   FOR EACH ROW

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	6	DECLARE

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	8	   v_current_acceptor       INTEGER;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	9	   v_current_status         INTEGER;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	10	   v_last_id                INTEGER;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	11	   v_count                  INTEGER;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	12	   v_dpt_id                 INTEGER;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	13	   subj                     VARCHAR2 (4000);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	14	   text                     VARCHAR2 (4000);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	15	   text1                    VARCHAR2 (4000);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	16	   text2                    VARCHAR2 (4000);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	17	   v_pos_name               VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	18	   v_dpt_name               VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	19	   v_fam                    VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	20	   v_im                     VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	21	   v_ot                     VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	22	   v_init_fio               VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	23	   v_init_pos_name          VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	24	   v_init_department_name   VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	25	   v_next_mail              VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	26	   v_next_fio               VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	27	   v_next_acc_list          VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	28	   v_curr_acc_fio           VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	29	   v_mentor_fio             VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	30	   v_fio_zpassport          VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	31	   v_email_private          VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	32	   v_territory              VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	33	   v_planned_start          VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	34	   v_prob_period_start      VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	35	   v_prob_period_end        VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	36	   v_cat_on_prob            VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	37	   v_cat_after_prob         VARCHAR2 (255);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	38	BEGIN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	39	   SELECT h.fam,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	40	          h.im,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	41	          h.ot,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	42	          d.dpt_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	43	          p.pos_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	44	          u.fio,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	45	          u.pos_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	46	          u.department_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	47	          h.dpt_id,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	48	          ulm.fio,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	49	          h.fio_zpassport,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	50	          h.email_private,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	51	          h.territory,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	52	          TO_CHAR (h.planned_start, 'dd.mm.yyyy') planned_start,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	53	          TO_CHAR (h.prob_period_start, 'dd.mm.yyyy') prob_period_start,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	54	          TO_CHAR (h.prob_period_end, 'dd.mm.yyyy') prob_period_end,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	55	          h.cat_on_prob,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	56	          h.cat_after_prob

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	57	     INTO v_fam,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	58	          v_im,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	59	          v_ot,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	60	          v_dpt_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	61	          v_pos_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	62	          v_init_fio,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	63	          v_init_pos_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	64	          v_init_department_name,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	65	          v_dpt_id,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	66	          v_mentor_fio,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	67	          v_fio_zpassport,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	68	          v_email_private,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	69	          v_territory,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	70	          v_planned_start,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	71	          v_prob_period_start,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	72	          v_prob_period_end,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	73	          v_cat_on_prob,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	74	          v_cat_after_prob

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	75	     FROM iv_head h,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	76	          departments d,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	77	          pos p,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	78	          user_list u,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	79	          user_list ulm

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	80	    WHERE     h.id = :new.iid

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	81	          AND d.dpt_id = h.dpt_id

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	82	          AND p.pos_id = h.pos

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	83	          AND u.tn = h.tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	84	          AND h.mentor = ulm.tn;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	85	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	86	   SELECT fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	87	     INTO v_curr_acc_fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	88	     FROM user_list

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	89	    WHERE tn = :new.tn;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	90	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	91	   IF :new.accepted = 3

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	92	   /* на доработку*/

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	93	   THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	94	      v_current_status := 3;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	95	   /*

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	96	   если нужно будет перезапускать. то поставим инициатора опять текущим согласователем

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	97	   SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	98	     INTO v_current_acceptor

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	99	     FROM iv_head

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	100	    WHERE id = :new.iid;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	101	   */

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	102	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	103	   END IF;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	104	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	105	   IF :new.accepted = 2

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	106	   /* не подтверждаю */

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	107	   THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	108	      v_current_status := 2;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	109	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	110	      subj :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	111	            v_dpt_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	112	         || '.'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	113	         || ' Отклонена кандидатура '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	114	         || v_fam

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	115	         || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	116	         || v_im

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	117	         || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	118	         || v_ot

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	119	         || ', должность '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	120	         || v_pos_name;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	121	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	122	      text :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	123	            'Сильные стороны кандидата:<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	124	         || :new.strengths

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	125	         || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	126	         || :new.weaknesses;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	127	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	128	      FOR a IN (SELECT fio, e_mail

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	129	                  FROM user_list

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	130	                 WHERE tn IN (SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	131	                                FROM iv_body

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	132	                               WHERE id < :new.id AND iid = :new.iid))

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	133	      LOOP

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	134	         pr_sendmail (a.e_mail, subj, text);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	135	      END LOOP;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	136	   END IF;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	137	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	138	   IF :new.accepted = 1

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	139	   /* подтверждаю */

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	140	   THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	141	      SELECT COUNT (*)

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	142	        INTO v_count

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	143	        FROM iv_body

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	144	       WHERE iid = :new.iid AND id > :new.id;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	145	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	146	      IF v_count > 0

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	147	      THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	148	         /* current acceptor is not last */

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	149	         SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	150	           INTO v_current_acceptor

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	151	           FROM (  SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	152	                     FROM iv_body

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	153	                    WHERE iid = :new.iid AND id > :new.id

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	154	                 ORDER BY id)

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	155	          WHERE ROWNUM = 1;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	156	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	157	         subj :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	158	               v_dpt_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	159	            || '.'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	160	            || ' Собеседование с кандидатом '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	161	            || v_fam

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	162	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	163	            || v_im

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	164	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	165	            || v_ot

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	166	            || ', должность '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	167	            || v_pos_name;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	168	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	169	         SELECT e_mail, fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	170	           INTO v_next_mail, v_next_fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	171	           FROM user_list

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	172	          WHERE tn = (SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	173	                        FROM (  SELECT id, tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	174	                                  FROM iv_body

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	175	                                 WHERE iid = :new.iid AND id > :new.id

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	176	                              ORDER BY id)

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	177	                       WHERE ROWNUM = 1);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	178	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	179	         v_next_acc_list := '';

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	180	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	181	         FOR a IN (SELECT fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	182	                     FROM user_list

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	183	                    WHERE tn IN (SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	184	                                   FROM iv_body

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	185	                                  WHERE id > :new.id AND iid = :new.iid))

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	186	         LOOP

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	187	            v_next_acc_list := v_next_acc_list || a.fio || '<br>';

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	188	         END LOOP;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	189	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	190	         text :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	191	               v_dpt_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	192	            || '.'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	193	            || 'Здравствуйте '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	194	            || v_next_fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	195	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	196	            || v_curr_acc_fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	197	            || ' подтвердил(а) кандидата '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	198	            || v_fam

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	199	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	200	            || v_im

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	201	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	202	            || v_ot

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	203	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	204	            || TO_CHAR (:new.lu, 'dd.mm.yyyy hh24:mi:ss')

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	205	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	206	            || 'Далее собеседование должно пройти у:<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	207	            || v_next_acc_list

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	208	            || 'ФИО инициатора: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	209	            || v_init_fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	210	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	211	            || 'Должность инициатора: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	212	            || v_init_pos_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	213	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	214	            || 'Подразделение инициатора: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	215	            || v_init_department_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	216	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	217	            || '<a href="https://ps.avk.ua/?action=iv_accept">Ссылка на согласование "Представления-рекомендации"</a>';

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	218	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	219	         pr_sendmail (v_next_mail, subj, text);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	220	      ELSE

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	221	         /* current acceptor is last */

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	222	         v_current_status := 1;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	223	         subj :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	224	               v_dpt_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	225	            || '.'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	226	            || ' Завершено согласование кандидата '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	227	            || v_fam

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	228	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	229	            || v_im

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	230	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	231	            || v_ot

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	232	            || ' на должность '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	233	            || v_pos_name;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	234	         text :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	235	               'Здравствуйте<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	236	            || 'Завершено согласование приема кандидата '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	237	            || v_fam

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	238	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	239	            || v_im

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	240	            || ' '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	241	            || v_ot

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	242	            || ' на должность '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	243	            || v_pos_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	244	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	245	            || 'ФИО, должность, подразделение прямого руководителя: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	246	            || v_init_fio

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	247	            || ', '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	248	            || v_init_pos_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	249	            || ', '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	250	            || v_init_department_name

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	251	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	252	            || '';

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	253	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	254	         text1 :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	255	               'Территория: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	256	            || v_territory

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	257	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	258	            || 'Планируемая дата выхода на работу: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	259	            || v_planned_start

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	260	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	261	            || 'Категория на период ИС: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	262	            || v_cat_on_prob

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	263	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	264	            || 'Категория после прохождения ИС: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	265	            || v_cat_after_prob

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	266	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	267	            || 'Испытательный срок (с/по): '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	268	            || v_prob_period_start

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	269	            || ' - '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	270	            || v_prob_period_end

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	271	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	272	            || 'Наставник: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	273	            || v_mentor_fio;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	274	         text2 :=

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	275	               'Просьба создать новый адрес корпоративной электронной почты сотруднику:<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	276	            || 'Имя и фамилия латиницей (как в загранпаспорте): '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	277	            || v_fio_zpassport

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	278	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	279	            || 'Личный адрес электронной почты: '

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	280	            || v_email_private

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	281	            || '<br>'

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	282	            || 'Учетные данные для корпоративной почты просьба выслать на указанный личный адрес нового сотрудника.';

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	283	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	284	         FOR a IN (SELECT val_string

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	285	                     FROM parameters

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	286	                    WHERE     param_name IN ('pers1',

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	287	                                             'pers2',

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	288	                                             'accept1',

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	289	                                             'accept2')

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	290	                          AND dpt_id = v_dpt_id

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	291	                   UNION

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	292	                   SELECT e_mail

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	293	                     FROM user_list

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	294	                    WHERE tn IN (SELECT tn

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	295	                                   FROM iv_body

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	296	                                  WHERE iid = :new.iid))

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	297	         LOOP

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	298	            pr_sendmail (a.val_string, subj, text || text1);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	299	         END LOOP;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	300	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	301	         FOR a IN (SELECT val_string

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	302	                     FROM parameters

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	303	                    WHERE param_name IN ('it1', 'it2') AND dpt_id = v_dpt_id)

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	304	         LOOP

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	305	            pr_sendmail (a.val_string, subj, text || text2);

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	306	         END LOOP;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	307	      END IF;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	308	   END IF;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	309	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	310	   IF v_current_acceptor IS NOT NULL

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	311	   THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	312	      UPDATE iv_head

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	313	         SET current_acceptor = v_current_acceptor

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	314	       WHERE id = :new.iid;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	315	   END IF;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	316	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	317	   IF v_current_status IS NOT NULL

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	318	   THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	319	      UPDATE iv_head

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	320	         SET current_status = v_current_status

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	321	       WHERE id = :new.iid;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	322	   END IF;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	323	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	324	   COMMIT;

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	325	/*   IF :old.accepted IN (1, 2)

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	326	   THEN

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	327	

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	328	      raise_application_error (

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	329	         -20000,

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	330	         'попытка повторного подтверждения кандидата в собеседовании');

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	331	   END IF;*/

TR_IV_BODY_ACCEPTED_UPD	TRIGGER	332	END;
TR_IV_AC_UPD	TRIGGER	1	TRIGGER TR_iv_AC_UPD

TR_IV_AC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_IV_AC_UPD	TRIGGER	3	   ON IV_AC

TR_IV_AC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_IV_AC_UPD	TRIGGER	5	   FOR EACH ROW

TR_IV_AC_UPD	TRIGGER	6	BEGIN

TR_IV_AC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_IV_AC_UPD	TRIGGER	8	END;
TR_INVOICE_UPD_NMKK	TRIGGER	1	TRIGGER "PERSIK"."TR_INVOICE_UPD_NMKK" 

TR_INVOICE_UPD_NMKK	TRIGGER	2	   BEFORE INSERT OR UPDATE OF oK_NMKK

TR_INVOICE_UPD_NMKK	TRIGGER	3	   ON PERSIK.INVOICE

TR_INVOICE_UPD_NMKK	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_UPD_NMKK	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_UPD_NMKK	TRIGGER	6	BEGIN

TR_INVOICE_UPD_NMKK	TRIGGER	7	   IF :NEW.OK_NMKK = 1

TR_INVOICE_UPD_NMKK	TRIGGER	8	   THEN

TR_INVOICE_UPD_NMKK	TRIGGER	9	      :NEW.NMKK_LU := SYSDATE;

TR_INVOICE_UPD_NMKK	TRIGGER	10	   ELSE

TR_INVOICE_UPD_NMKK	TRIGGER	11	      :NEW.NMKK_LU := NULL;

TR_INVOICE_UPD_NMKK	TRIGGER	12	   END IF;

TR_INVOICE_UPD_NMKK	TRIGGER	13	END;

TR_INVOICE_UPD_NMKK	TRIGGER	14	

TR_INVOICE_UPD_NMKK	TRIGGER	15	

TR_INVOICE_UPD_NMKK	TRIGGER	16	

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_UPD_invoice_sended

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	2	   BEFORE INSERT OR UPDATE OF invoice_sended

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	3	   ON PERSIK.INVOICE

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	6	BEGIN

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	7	   IF :NEW.invoice_sended = 1

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	8	   THEN

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	9	      :NEW.invoice_sended_LU := SYSDATE;

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	10	   END IF;

TR_INVOICE_UPD_INVOICE_SENDED	TRIGGER	11	END;
TR_INVOICE_UPD_FM	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_UPD_FM

TR_INVOICE_UPD_FM	TRIGGER	2	   BEFORE INSERT OR UPDATE OF oK_fm

TR_INVOICE_UPD_FM	TRIGGER	3	   ON PERSIK.INVOICE

TR_INVOICE_UPD_FM	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_UPD_FM	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_UPD_FM	TRIGGER	6	BEGIN

TR_INVOICE_UPD_FM	TRIGGER	7	   IF :NEW.OK_fm = 1

TR_INVOICE_UPD_FM	TRIGGER	8	   THEN

TR_INVOICE_UPD_FM	TRIGGER	9	      :NEW.fm_LU := SYSDATE;

TR_INVOICE_UPD_FM	TRIGGER	10	

TR_INVOICE_UPD_FM	TRIGGER	11	      IF :new.promo = 1

TR_INVOICE_UPD_FM	TRIGGER	12	      THEN

TR_INVOICE_UPD_FM	TRIGGER	13	         :new.oplachen := 1;

TR_INVOICE_UPD_FM	TRIGGER	14	      END IF;

TR_INVOICE_UPD_FM	TRIGGER	15	   ELSE

TR_INVOICE_UPD_FM	TRIGGER	16	      :NEW.fm_LU := NULL;

TR_INVOICE_UPD_FM	TRIGGER	17	

TR_INVOICE_UPD_FM	TRIGGER	18	      IF :new.promo = 1

TR_INVOICE_UPD_FM	TRIGGER	19	      THEN

TR_INVOICE_UPD_FM	TRIGGER	20	         :new.oplachen := NULL;

TR_INVOICE_UPD_FM	TRIGGER	21	      END IF;

TR_INVOICE_UPD_FM	TRIGGER	22	   END IF;

TR_INVOICE_UPD_FM	TRIGGER	23	END;
TR_INVOICE_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_INVOICE_UPD" 

TR_INVOICE_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_INVOICE_UPD	TRIGGER	3	   ON persik.invoice

TR_INVOICE_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_UPD	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_UPD	TRIGGER	6	BEGIN

TR_INVOICE_UPD	TRIGGER	7	   :NEW.m := TO_CHAR(:NEW.DATA, 'mm');

TR_INVOICE_UPD	TRIGGER	8	   :NEW.y := TO_CHAR(:NEW.DATA, 'yyyy');

TR_INVOICE_UPD	TRIGGER	9	END tr_invoice_upd; 

TR_INVOICE_UPD	TRIGGER	10	

TR_INVOICE_UPD	TRIGGER	11	

TR_INVOICE_UPD	TRIGGER	12	

TR_INVOICE_REESTR_UP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_REESTR_UP_UPD

TR_INVOICE_REESTR_UP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_INVOICE_REESTR_UP_UPD	TRIGGER	3	   ON PERSIK.invoice_reestr_up

TR_INVOICE_REESTR_UP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_REESTR_UP_UPD	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_REESTR_UP_UPD	TRIGGER	6	BEGIN

TR_INVOICE_REESTR_UP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_INVOICE_REESTR_UP_UPD	TRIGGER	8	END;
TR_INVOICE_REESTR_UP_NEW	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_REESTR_UP_NEW

TR_INVOICE_REESTR_UP_NEW	TRIGGER	2	   BEFORE INSERT

TR_INVOICE_REESTR_UP_NEW	TRIGGER	3	   ON PERSIK.invoice_reestr_up

TR_INVOICE_REESTR_UP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_REESTR_UP_NEW	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_REESTR_UP_NEW	TRIGGER	6	BEGIN

TR_INVOICE_REESTR_UP_NEW	TRIGGER	7	   :NEW.ID := NVL (:new.id, seq_all.NEXTVAL);

TR_INVOICE_REESTR_UP_NEW	TRIGGER	8	END;
TR_INVOICE_NEW	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_NEW

TR_INVOICE_NEW	TRIGGER	2	   BEFORE INSERT

TR_INVOICE_NEW	TRIGGER	3	   ON PERSIK.invoice

TR_INVOICE_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_NEW	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_NEW	TRIGGER	6	BEGIN

TR_INVOICE_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_INVOICE_NEW	TRIGGER	8	END tr_invoice_new;
TR_INVOICE_FILES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_FILES_UPD

TR_INVOICE_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_INVOICE_FILES_UPD	TRIGGER	3	   ON PERSIK.INVOICE_FILES

TR_INVOICE_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_FILES_UPD	TRIGGER	6	BEGIN

TR_INVOICE_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_INVOICE_FILES_UPD	TRIGGER	8	END tr_INVOICE_FILES_upd;
TR_INVOICE_FILES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_FILES_NEW

TR_INVOICE_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_INVOICE_FILES_NEW	TRIGGER	3	   ON PERSIK.INVOICE_FILES

TR_INVOICE_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_FILES_NEW	TRIGGER	6	BEGIN

TR_INVOICE_FILES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_INVOICE_FILES_NEW	TRIGGER	8	END tr_INVOICE_FILES_new;
TR_INVOICE_DETAIL_UPD	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_DETAIL_UPD

TR_INVOICE_DETAIL_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_INVOICE_DETAIL_UPD	TRIGGER	3	   ON PERSIK.INVOICE_DETAIL

TR_INVOICE_DETAIL_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_DETAIL_UPD	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_DETAIL_UPD	TRIGGER	6	BEGIN

TR_INVOICE_DETAIL_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_INVOICE_DETAIL_UPD	TRIGGER	8	

TR_INVOICE_DETAIL_UPD	TRIGGER	9	   UPDATE nets_plan_month

TR_INVOICE_DETAIL_UPD	TRIGGER	10	      SET payer =

TR_INVOICE_DETAIL_UPD	TRIGGER	11	             (SELECT payer

TR_INVOICE_DETAIL_UPD	TRIGGER	12	                FROM invoice

TR_INVOICE_DETAIL_UPD	TRIGGER	13	               WHERE id = :new.invoice)

TR_INVOICE_DETAIL_UPD	TRIGGER	14	    WHERE id = :new.statya;

TR_INVOICE_DETAIL_UPD	TRIGGER	15	END;
TR_INVOICE_DETAIL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_DETAIL_NEW

TR_INVOICE_DETAIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_INVOICE_DETAIL_NEW	TRIGGER	3	   ON PERSIK.INVOICE_DETAIL

TR_INVOICE_DETAIL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_DETAIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_DETAIL_NEW	TRIGGER	6	BEGIN

TR_INVOICE_DETAIL_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_INVOICE_DETAIL_NEW	TRIGGER	8	END tr_invoice_detail_new;
TR_INVOICE_ACTS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_ACTS_UPD

TR_INVOICE_ACTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_INVOICE_ACTS_UPD	TRIGGER	3	   ON PERSIK.INVOICE_ACTS

TR_INVOICE_ACTS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_ACTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_ACTS_UPD	TRIGGER	6	BEGIN

TR_INVOICE_ACTS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_INVOICE_ACTS_UPD	TRIGGER	8	END tr_INVOICE_ACTS_upd;
TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_acts_redisplayed

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	2	   BEFORE INSERT OR UPDATE OF acts_redisplayed

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	3	   ON PERSIK.INVOICE

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	6	BEGIN

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	7	   IF :NEW.acts_redisplayed = 1

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	8	   THEN

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	9	      :NEW.acts_redisplayed_LU := SYSDATE;

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	10	   ELSE

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	11	      :NEW.acts_redisplayed_LU := NULL;

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	12	   END IF;

TR_INVOICE_ACTS_REDISPLAYED	TRIGGER	13	END;
TR_INVOICE_ACTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_INVOICE_ACTS_NEW

TR_INVOICE_ACTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_INVOICE_ACTS_NEW	TRIGGER	3	   ON PERSIK.INVOICE_ACTS

TR_INVOICE_ACTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_INVOICE_ACTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_INVOICE_ACTS_NEW	TRIGGER	6	BEGIN

TR_INVOICE_ACTS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_INVOICE_ACTS_NEW	TRIGGER	8	END tr_INVOICE_ACTS_new;
TR_FULL_LOG_MAIL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_FULL_LOG_MAIL_NEW

TR_FULL_LOG_MAIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_FULL_LOG_MAIL_NEW	TRIGGER	3	   ON PERSIK.FULL_LOG_MAIL

TR_FULL_LOG_MAIL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FULL_LOG_MAIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_FULL_LOG_MAIL_NEW	TRIGGER	6	BEGIN

TR_FULL_LOG_MAIL_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, SEQ_LOG.NEXTVAL);

TR_FULL_LOG_MAIL_NEW	TRIGGER	8	END;
TR_FULLLOG_NEW	TRIGGER	1	TRIGGER PERSIK.TR_FULLLOG_NEW

TR_FULLLOG_NEW	TRIGGER	2	   BEFORE INSERT

TR_FULLLOG_NEW	TRIGGER	3	   ON PERSIK.FULLLOG

TR_FULLLOG_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FULLLOG_NEW	TRIGGER	5	   FOR EACH ROW

TR_FULLLOG_NEW	TRIGGER	6	BEGIN

TR_FULLLOG_NEW	TRIGGER	7	   :NEW.ID := NVL (:new.id, SEQ_LOG.NEXTVAL);

TR_FULLLOG_NEW	TRIGGER	8	END;
TR_FREE_STAFF_SEAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_FREE_STAFF_SEAT_NEW" 

TR_FREE_STAFF_SEAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_FREE_STAFF_SEAT_NEW	TRIGGER	3	   ON PERSIK.free_staff_seat

TR_FREE_STAFF_SEAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FREE_STAFF_SEAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_FREE_STAFF_SEAT_NEW	TRIGGER	6	BEGIN

TR_FREE_STAFF_SEAT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_FREE_STAFF_SEAT_NEW	TRIGGER	8	END tr_free_staff_seat_new;

TR_FREE_STAFF_SEAT_NEW	TRIGGER	9	

TR_FREE_STAFF_SEAT_NEW	TRIGGER	10	

TR_FREE_STAFF_SEAT_NEW	TRIGGER	11	

TR_FREE_STAFF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_FREE_STAFF_NEW" 

TR_FREE_STAFF_NEW	TRIGGER	2	   BEFORE INSERT

TR_FREE_STAFF_NEW	TRIGGER	3	   ON PERSIK.FREE_STAFF

TR_FREE_STAFF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FREE_STAFF_NEW	TRIGGER	5	   FOR EACH ROW

TR_FREE_STAFF_NEW	TRIGGER	6	BEGIN

TR_FREE_STAFF_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_FREE_STAFF_NEW	TRIGGER	8	

TR_FREE_STAFF_NEW	TRIGGER	9	   SELECT u1.fio

TR_FREE_STAFF_NEW	TRIGGER	10	     INTO :new.chief_fio

TR_FREE_STAFF_NEW	TRIGGER	11	     FROM full f, user_list u1

TR_FREE_STAFF_NEW	TRIGGER	12	    WHERE f.slave = :new.tn AND f.full = 1 AND u1.tn = f.master;

TR_FREE_STAFF_NEW	TRIGGER	13	END tr_free_staff_new;

TR_FREE_STAFF_NEW	TRIGGER	14	

TR_FREE_STAFF_NEW	TRIGGER	15	

TR_FREE_STAFF_NEW	TRIGGER	16	

TR_FREE_STAFF_1	TRIGGER	1	TRIGGER "PERSIK"."TR_FREE_STAFF_1" 

TR_FREE_STAFF_1	TRIGGER	2	   BEFORE UPDATE OF accepted

TR_FREE_STAFF_1	TRIGGER	3	   ON FREE_STAFF

TR_FREE_STAFF_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FREE_STAFF_1	TRIGGER	5	   FOR EACH ROW

TR_FREE_STAFF_1	TRIGGER	6	DECLARE

TR_FREE_STAFF_1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_FREE_STAFF_1	TRIGGER	8	BEGIN

TR_FREE_STAFF_1	TRIGGER	9	   :new.accept_data := SYSDATE;

TR_FREE_STAFF_1	TRIGGER	10	   add_job_free_stuff (:new.id, :new.block_portal);

TR_FREE_STAFF_1	TRIGGER	11	   pr_ol_staff_create (:new.id);

TR_FREE_STAFF_1	TRIGGER	12	END;

TR_FREE_STAFF_1	TRIGGER	13	

TR_FILES_SECTIONS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_FILES_SECTIONS_NEW

TR_FILES_SECTIONS_NEW	TRIGGER	2	   BEFORE INSERT

TR_FILES_SECTIONS_NEW	TRIGGER	3	   ON PERSIK.FILES_SECTIONS

TR_FILES_SECTIONS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FILES_SECTIONS_NEW	TRIGGER	5	   FOR EACH ROW

TR_FILES_SECTIONS_NEW	TRIGGER	6	BEGIN

TR_FILES_SECTIONS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_FILES_SECTIONS_NEW	TRIGGER	8	END tr_files_sections_new;
TR_FILES_RIGHTS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_FILES_RIGHTS_NEW" 

TR_FILES_RIGHTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_FILES_RIGHTS_NEW	TRIGGER	3	   ON files_rights

TR_FILES_RIGHTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FILES_RIGHTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_FILES_RIGHTS_NEW	TRIGGER	6	BEGIN

TR_FILES_RIGHTS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_FILES_RIGHTS_NEW	TRIGGER	8	     INTO :NEW.ID

TR_FILES_RIGHTS_NEW	TRIGGER	9	     FROM DUAL;

TR_FILES_RIGHTS_NEW	TRIGGER	10	END tr_files_rights_new; 

TR_FILES_RIGHTS_NEW	TRIGGER	11	

TR_FILES_RIGHTS_NEW	TRIGGER	12	

TR_FILES_RIGHTS_NEW	TRIGGER	13	

TR_FILES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_FILES_NEW

TR_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_FILES_NEW	TRIGGER	3	   ON PERSIK.FILES

TR_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_FILES_NEW	TRIGGER	6	BEGIN

TR_FILES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_FILES_NEW	TRIGGER	8	END tr_files_new;
TR_DZC_VALID_NO_UPD	TRIGGER	1	TRIGGER PERSIK.TR_DZC_VALID_NO_UPD

TR_DZC_VALID_NO_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF valid_no

TR_DZC_VALID_NO_UPD	TRIGGER	3	   ON PERSIK.DZC

TR_DZC_VALID_NO_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_VALID_NO_UPD	TRIGGER	5	   FOR EACH ROW

TR_DZC_VALID_NO_UPD	TRIGGER	6	DECLARE

TR_DZC_VALID_NO_UPD	TRIGGER	7	   msg    VARCHAR2 (4000);

TR_DZC_VALID_NO_UPD	TRIGGER	8	   subj   VARCHAR2 (4000);

TR_DZC_VALID_NO_UPD	TRIGGER	9	BEGIN

TR_DZC_VALID_NO_UPD	TRIGGER	10	   IF :new.valid_no = 1

TR_DZC_VALID_NO_UPD	TRIGGER	11	   THEN

TR_DZC_VALID_NO_UPD	TRIGGER	12	      :NEW.valid_lu := SYSDATE;

TR_DZC_VALID_NO_UPD	TRIGGER	13	

TR_DZC_VALID_NO_UPD	TRIGGER	14	      msg :=

TR_DZC_VALID_NO_UPD	TRIGGER	15	            'Выставил статус "НЕДЕЙСТВИТЕЛЬНАЯ" заявки на компенсацию дистрибьютору - '

TR_DZC_VALID_NO_UPD	TRIGGER	16	         || fn_getname (:new.valid_tn)

TR_DZC_VALID_NO_UPD	TRIGGER	17	         || '<br>Дата выставления статуса: '

TR_DZC_VALID_NO_UPD	TRIGGER	18	         || TO_CHAR (:new.valid_lu, 'dd/mm/yyyy hh24:mi:ss')

TR_DZC_VALID_NO_UPD	TRIGGER	19	         || '<br>Причина выставления статуса:<br>'

TR_DZC_VALID_NO_UPD	TRIGGER	20	         || :new.valid_text;

TR_DZC_VALID_NO_UPD	TRIGGER	21	

TR_DZC_VALID_NO_UPD	TRIGGER	22	      subj :=

TR_DZC_VALID_NO_UPD	TRIGGER	23	            'заявка на компенсацию дистрибьютору №'

TR_DZC_VALID_NO_UPD	TRIGGER	24	         || TO_CHAR (:new.id)

TR_DZC_VALID_NO_UPD	TRIGGER	25	         || ' от '

TR_DZC_VALID_NO_UPD	TRIGGER	26	         || TO_CHAR (:new.created, 'dd/mm/yyyy')

TR_DZC_VALID_NO_UPD	TRIGGER	27	         || ' признана недействительной';

TR_DZC_VALID_NO_UPD	TRIGGER	28	

TR_DZC_VALID_NO_UPD	TRIGGER	29	      FOR a IN (SELECT DISTINCT u.e_mail

TR_DZC_VALID_NO_UPD	TRIGGER	30	                  FROM (SELECT tn

TR_DZC_VALID_NO_UPD	TRIGGER	31	                          FROM DZC_accept

TR_DZC_VALID_NO_UPD	TRIGGER	32	                         WHERE DZC_id = :new.id

TR_DZC_VALID_NO_UPD	TRIGGER	33	                        UNION

TR_DZC_VALID_NO_UPD	TRIGGER	34	                        SELECT :new.tn FROM DUAL) l,

TR_DZC_VALID_NO_UPD	TRIGGER	35	                       user_list u

TR_DZC_VALID_NO_UPD	TRIGGER	36	                 WHERE l.tn = u.tn AND e_mail IS NOT NULL)

TR_DZC_VALID_NO_UPD	TRIGGER	37	      LOOP

TR_DZC_VALID_NO_UPD	TRIGGER	38	         pr_sendmail (a.e_mail, subj, msg);

TR_DZC_VALID_NO_UPD	TRIGGER	39	      END LOOP;

TR_DZC_VALID_NO_UPD	TRIGGER	40	   ELSE

TR_DZC_VALID_NO_UPD	TRIGGER	41	      :NEW.valid_lu := NULL;

TR_DZC_VALID_NO_UPD	TRIGGER	42	      :NEW.valid_tn := NULL;

TR_DZC_VALID_NO_UPD	TRIGGER	43	      :NEW.valid_text := NULL;

TR_DZC_VALID_NO_UPD	TRIGGER	44	   END IF;

TR_DZC_VALID_NO_UPD	TRIGGER	45	END;
TR_DZC_UPD	TRIGGER	1	TRIGGER TR_DZC_UPD

TR_DZC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DZC_UPD	TRIGGER	3	   ON DZC

TR_DZC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_UPD	TRIGGER	5	   FOR EACH ROW

TR_DZC_UPD	TRIGGER	6	BEGIN

TR_DZC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DZC_UPD	TRIGGER	8	END;
TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	1	TRIGGER tr_DZC_REFPRODUCTTYPES_upd

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	2	/* Formatted on 10/09/2015 17:23:28 (QP5 v5.227.12220.39724) */

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	3	BEFORE INSERT OR UPDATE

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	4	ON DZC_REFPRODUCTTYPES

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	5	REFERENCING NEW AS New OLD AS Old

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	6	FOR EACH ROW

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	7	BEGIN

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	8	   :new.h_producttype := md5hash (:new.producttype);

TR_DZC_REFPRODUCTTYPES_UPD	TRIGGER	9	END;
TR_DZC_NEW	TRIGGER	1	TRIGGER TR_DZC_NEW

TR_DZC_NEW	TRIGGER	2	   BEFORE INSERT

TR_DZC_NEW	TRIGGER	3	   ON DZC

TR_DZC_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_NEW	TRIGGER	5	   FOR EACH ROW

TR_DZC_NEW	TRIGGER	6	BEGIN

TR_DZC_NEW	TRIGGER	7	   :new.id := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_DZC_NEW	TRIGGER	8	

TR_DZC_NEW	TRIGGER	9	   :NEW.created := SYSDATE;

TR_DZC_NEW	TRIGGER	10	END;
TR_DZC_FILES_UPD	TRIGGER	1	TRIGGER TR_DZC_FILES_UPD

TR_DZC_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DZC_FILES_UPD	TRIGGER	3	   ON DZC_FILES

TR_DZC_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_DZC_FILES_UPD	TRIGGER	6	BEGIN

TR_DZC_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DZC_FILES_UPD	TRIGGER	8	END;
TR_DZC_FILES_NEW	TRIGGER	1	TRIGGER TR_DZC_FILES_NEW

TR_DZC_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_DZC_FILES_NEW	TRIGGER	3	   ON DZC_FILES

TR_DZC_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_DZC_FILES_NEW	TRIGGER	6	BEGIN

TR_DZC_FILES_NEW	TRIGGER	7	   :new.id := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_DZC_FILES_NEW	TRIGGER	8	END;
TR_DZC_CUSTOMERS_UPD	TRIGGER	1	TRIGGER TR_DZC_CUSTOMERS_UPD

TR_DZC_CUSTOMERS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DZC_CUSTOMERS_UPD	TRIGGER	3	   ON DZC_CUSTOMERS

TR_DZC_CUSTOMERS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_CUSTOMERS_UPD	TRIGGER	5	   FOR EACH ROW

TR_DZC_CUSTOMERS_UPD	TRIGGER	6	BEGIN

TR_DZC_CUSTOMERS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DZC_CUSTOMERS_UPD	TRIGGER	8	END;
TR_DZC_CUSTOMERS_NEW	TRIGGER	1	TRIGGER TR_DZC_CUSTOMERS_NEW

TR_DZC_CUSTOMERS_NEW	TRIGGER	2	   BEFORE INSERT

TR_DZC_CUSTOMERS_NEW	TRIGGER	3	   ON DZC_CUSTOMERS

TR_DZC_CUSTOMERS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_CUSTOMERS_NEW	TRIGGER	5	   FOR EACH ROW

TR_DZC_CUSTOMERS_NEW	TRIGGER	6	BEGIN

TR_DZC_CUSTOMERS_NEW	TRIGGER	7	   :new.id := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_DZC_CUSTOMERS_NEW	TRIGGER	8	END;
TR_DZC_CHAT_UPD	TRIGGER	1	TRIGGER TR_DZC_CHAT_UPD

TR_DZC_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DZC_CHAT_UPD	TRIGGER	3	   ON DZC_CHAT

TR_DZC_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_DZC_CHAT_UPD	TRIGGER	6	BEGIN

TR_DZC_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DZC_CHAT_UPD	TRIGGER	8	END;
TR_DZC_CHAT_NEW	TRIGGER	1	TRIGGER TR_DZC_CHAT_NEW

TR_DZC_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_DZC_CHAT_NEW	TRIGGER	3	   ON DZC_CHAT

TR_DZC_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_DZC_CHAT_NEW	TRIGGER	6	BEGIN

TR_DZC_CHAT_NEW	TRIGGER	7	   :new.id := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_DZC_CHAT_NEW	TRIGGER	8	END;
TR_DZC_ACCEPT_UPD	TRIGGER	1	TRIGGER TR_DZC_ACCEPT_UPD

TR_DZC_ACCEPT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF accepted

TR_DZC_ACCEPT_UPD	TRIGGER	3	   ON DZC_ACCEPT

TR_DZC_ACCEPT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_ACCEPT_UPD	TRIGGER	5	   FOR EACH ROW

TR_DZC_ACCEPT_UPD	TRIGGER	6	DECLARE

TR_DZC_ACCEPT_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_DZC_ACCEPT_UPD	TRIGGER	8	BEGIN

TR_DZC_ACCEPT_UPD	TRIGGER	9	   IF :old.accepted IN (1, 2)

TR_DZC_ACCEPT_UPD	TRIGGER	10	   THEN

TR_DZC_ACCEPT_UPD	TRIGGER	11	      INSERT INTO full_log (text, prg)

TR_DZC_ACCEPT_UPD	TRIGGER	12	           VALUES (

TR_DZC_ACCEPT_UPD	TRIGGER	13	                        'попытка повторного подтверждения заявки на компенсацию дистрибьютору №'

TR_DZC_ACCEPT_UPD	TRIGGER	14	                     || TO_CHAR (:old.DZC_id),

TR_DZC_ACCEPT_UPD	TRIGGER	15	                     'error');

TR_DZC_ACCEPT_UPD	TRIGGER	16	

TR_DZC_ACCEPT_UPD	TRIGGER	17	      COMMIT;

TR_DZC_ACCEPT_UPD	TRIGGER	18	      raise_application_error (

TR_DZC_ACCEPT_UPD	TRIGGER	19	         -20000,

TR_DZC_ACCEPT_UPD	TRIGGER	20	         'попытка повторного подтверждения заявки на компенсацию дистрибьютору');

TR_DZC_ACCEPT_UPD	TRIGGER	21	   ELSE

TR_DZC_ACCEPT_UPD	TRIGGER	22	      :NEW.lu := SYSDATE;

TR_DZC_ACCEPT_UPD	TRIGGER	23	   END IF;

TR_DZC_ACCEPT_UPD	TRIGGER	24	END;
TR_DZC_ACCEPT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_DZC_ACCEPT_NEW

TR_DZC_ACCEPT_NEW	TRIGGER	2	   BEFORE INSERT

TR_DZC_ACCEPT_NEW	TRIGGER	3	   ON PERSIK.DZC_ACCEPT

TR_DZC_ACCEPT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DZC_ACCEPT_NEW	TRIGGER	5	   FOR EACH ROW

TR_DZC_ACCEPT_NEW	TRIGGER	6	DECLARE

TR_DZC_ACCEPT_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_DZC_ACCEPT_NEW	TRIGGER	8	   m   VARCHAR2 (512);

TR_DZC_ACCEPT_NEW	TRIGGER	9	   i   INTEGER;

TR_DZC_ACCEPT_NEW	TRIGGER	10	BEGIN

TR_DZC_ACCEPT_NEW	TRIGGER	11	   --:new.tn := Get_Vac_Repl (:new.tn, 'DZC');

TR_DZC_ACCEPT_NEW	TRIGGER	12	   :new.id := seq_all.NEXTVAL;

TR_DZC_ACCEPT_NEW	TRIGGER	13	   :new.created := SYSDATE;

TR_DZC_ACCEPT_NEW	TRIGGER	14	   :new.accepted := 0;

TR_DZC_ACCEPT_NEW	TRIGGER	15	

TR_DZC_ACCEPT_NEW	TRIGGER	16	   FOR a IN (SELECT child

TR_DZC_ACCEPT_NEW	TRIGGER	17	               FROM assist

TR_DZC_ACCEPT_NEW	TRIGGER	18	              WHERE     parent = :new.tn

TR_DZC_ACCEPT_NEW	TRIGGER	19	                    AND /*(SELECT dpt_id

TR_DZC_ACCEPT_NEW	TRIGGER	20	                           FROM user_list

TR_DZC_ACCEPT_NEW	TRIGGER	21	                          WHERE tn = child)*/

TR_DZC_ACCEPT_NEW	TRIGGER	22	                       dpt_id = (SELECT dpt_id

TR_DZC_ACCEPT_NEW	TRIGGER	23	                                   FROM user_list

TR_DZC_ACCEPT_NEW	TRIGGER	24	                                  WHERE tn = (SELECT tn

TR_DZC_ACCEPT_NEW	TRIGGER	25	                                                FROM DZC

TR_DZC_ACCEPT_NEW	TRIGGER	26	                                               WHERE id = :new.DZC_id))

TR_DZC_ACCEPT_NEW	TRIGGER	27	                    AND accept = 1)

TR_DZC_ACCEPT_NEW	TRIGGER	28	   LOOP

TR_DZC_ACCEPT_NEW	TRIGGER	29	      -- добавляем ассистента, только если в согласователях нет ни его самого ни его рук-ля.

TR_DZC_ACCEPT_NEW	TRIGGER	30	      SELECT COUNT (*)

TR_DZC_ACCEPT_NEW	TRIGGER	31	        INTO i

TR_DZC_ACCEPT_NEW	TRIGGER	32	        FROM DZC_accept

TR_DZC_ACCEPT_NEW	TRIGGER	33	       WHERE DZC_id = :new.DZC_id AND tn IN (:new.tn, a.child);

TR_DZC_ACCEPT_NEW	TRIGGER	34	

TR_DZC_ACCEPT_NEW	TRIGGER	35	      IF i = 0

TR_DZC_ACCEPT_NEW	TRIGGER	36	      THEN

TR_DZC_ACCEPT_NEW	TRIGGER	37	         INSERT INTO DZC_accept (DZC_id, tn, child)

TR_DZC_ACCEPT_NEW	TRIGGER	38	              VALUES (:new.DZC_id, a.child, 1);

TR_DZC_ACCEPT_NEW	TRIGGER	39	

TR_DZC_ACCEPT_NEW	TRIGGER	40	         COMMIT;

TR_DZC_ACCEPT_NEW	TRIGGER	41	      END IF;

TR_DZC_ACCEPT_NEW	TRIGGER	42	   END LOOP;

TR_DZC_ACCEPT_NEW	TRIGGER	43	

TR_DZC_ACCEPT_NEW	TRIGGER	44	   SELECT COUNT (*)

TR_DZC_ACCEPT_NEW	TRIGGER	45	     INTO i

TR_DZC_ACCEPT_NEW	TRIGGER	46	     FROM DZC_accept

TR_DZC_ACCEPT_NEW	TRIGGER	47	    WHERE DZC_id = :new.DZC_id;

TR_DZC_ACCEPT_NEW	TRIGGER	48	

TR_DZC_ACCEPT_NEW	TRIGGER	49	   IF i = 0

TR_DZC_ACCEPT_NEW	TRIGGER	50	   THEN

TR_DZC_ACCEPT_NEW	TRIGGER	51	      :new.accept_order := 1;

TR_DZC_ACCEPT_NEW	TRIGGER	52	   ELSE

TR_DZC_ACCEPT_NEW	TRIGGER	53	      SELECT NVL (MAX (accept_order), 0) + 1

TR_DZC_ACCEPT_NEW	TRIGGER	54	        INTO :new.accept_order

TR_DZC_ACCEPT_NEW	TRIGGER	55	        FROM DZC_accept

TR_DZC_ACCEPT_NEW	TRIGGER	56	       WHERE DZC_id = :new.DZC_id;

TR_DZC_ACCEPT_NEW	TRIGGER	57	   END IF;

TR_DZC_ACCEPT_NEW	TRIGGER	58	

TR_DZC_ACCEPT_NEW	TRIGGER	59	   IF :new.accept_order = 1

TR_DZC_ACCEPT_NEW	TRIGGER	60	   THEN

TR_DZC_ACCEPT_NEW	TRIGGER	61	      SELECT e_mail

TR_DZC_ACCEPT_NEW	TRIGGER	62	        INTO m

TR_DZC_ACCEPT_NEW	TRIGGER	63	        FROM user_list

TR_DZC_ACCEPT_NEW	TRIGGER	64	       WHERE tn = :new.tn;

TR_DZC_ACCEPT_NEW	TRIGGER	65	

TR_DZC_ACCEPT_NEW	TRIGGER	66	      FOR a IN (SELECT DZC.comm,

TR_DZC_ACCEPT_NEW	TRIGGER	67	                       DZC.created,

TR_DZC_ACCEPT_NEW	TRIGGER	68	                       u.fio,

TR_DZC_ACCEPT_NEW	TRIGGER	69	                       u.pos_name,

TR_DZC_ACCEPT_NEW	TRIGGER	70	                       u.department_name,

TR_DZC_ACCEPT_NEW	TRIGGER	71	                       u.e_mail

TR_DZC_ACCEPT_NEW	TRIGGER	72	                  FROM DZC, user_list u

TR_DZC_ACCEPT_NEW	TRIGGER	73	                 WHERE DZC.id = :new.DZC_id AND u.tn = DZC.tn)

TR_DZC_ACCEPT_NEW	TRIGGER	74	      LOOP

TR_DZC_ACCEPT_NEW	TRIGGER	75	         PR_SENDMAIL (

TR_DZC_ACCEPT_NEW	TRIGGER	76	            m,

TR_DZC_ACCEPT_NEW	TRIGGER	77	               'Подтверждение заявки на компенсацию дистрибьютору №'

TR_DZC_ACCEPT_NEW	TRIGGER	78	            || :new.DZC_id

TR_DZC_ACCEPT_NEW	TRIGGER	79	            || ' от '

TR_DZC_ACCEPT_NEW	TRIGGER	80	            || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss'),

TR_DZC_ACCEPT_NEW	TRIGGER	81	               'Заявка на компенсацию дистрибьютору №'

TR_DZC_ACCEPT_NEW	TRIGGER	82	            || :new.DZC_id

TR_DZC_ACCEPT_NEW	TRIGGER	83	            || ' от '

TR_DZC_ACCEPT_NEW	TRIGGER	84	            || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss')

TR_DZC_ACCEPT_NEW	TRIGGER	85	            || ' ожидает вашего подтверждения'

TR_DZC_ACCEPT_NEW	TRIGGER	86	            || '<br>ФИО инициатора: '

TR_DZC_ACCEPT_NEW	TRIGGER	87	            || a.fio

TR_DZC_ACCEPT_NEW	TRIGGER	88	            || '<br>Должность инициатора: '

TR_DZC_ACCEPT_NEW	TRIGGER	89	            || a.pos_name

TR_DZC_ACCEPT_NEW	TRIGGER	90	            || '<br>Подразделение инициатора: '

TR_DZC_ACCEPT_NEW	TRIGGER	91	            || a.department_name);

TR_DZC_ACCEPT_NEW	TRIGGER	92	      END LOOP;

TR_DZC_ACCEPT_NEW	TRIGGER	93	   END IF;

TR_DZC_ACCEPT_NEW	TRIGGER	94	END;
TR_DNPR_STATYA_UPDATE	TRIGGER	1	TRIGGER 
TR_DNPR_STATYA_UPDATE	TRIGGER	2	TR_dnpr_STATYA_UPDATE

TR_DNPR_STATYA_UPDATE	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_DNPR_STATYA_UPDATE	TRIGGER	4	   ON DPNR_STATYA

TR_DNPR_STATYA_UPDATE	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_STATYA_UPDATE	TRIGGER	6	   FOR EACH ROW

TR_DNPR_STATYA_UPDATE	TRIGGER	7	BEGIN

TR_DNPR_STATYA_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_DNPR_STATYA_UPDATE	TRIGGER	9	END;
TR_DNPR_STATYA_NEW	TRIGGER	1	TRIGGER 
TR_DNPR_STATYA_NEW	TRIGGER	2	TR_dnpr_STATYA_NEW

TR_DNPR_STATYA_NEW	TRIGGER	3	   BEFORE INSERT

TR_DNPR_STATYA_NEW	TRIGGER	4	   ON DPNR_STATYA

TR_DNPR_STATYA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_STATYA_NEW	TRIGGER	6	   FOR EACH ROW

TR_DNPR_STATYA_NEW	TRIGGER	7	BEGIN

TR_DNPR_STATYA_NEW	TRIGGER	8	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_DNPR_STATYA_NEW	TRIGGER	9	END;
TR_DNPR_STATYA_DEL	TRIGGER	1	TRIGGER TR_dnpr_STATYA_DEL

TR_DNPR_STATYA_DEL	TRIGGER	2	   BEFORE DELETE

TR_DNPR_STATYA_DEL	TRIGGER	3	   ON DPNR_STATYA

TR_DNPR_STATYA_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_DNPR_STATYA_DEL	TRIGGER	5	   FOR EACH ROW

TR_DNPR_STATYA_DEL	TRIGGER	6	DECLARE

TR_DNPR_STATYA_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_DNPR_STATYA_DEL	TRIGGER	8	BEGIN

TR_DNPR_STATYA_DEL	TRIGGER	9	   DELETE FROM dpnr_STATYA

TR_DNPR_STATYA_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_DNPR_STATYA_DEL	TRIGGER	11	

TR_DNPR_STATYA_DEL	TRIGGER	12	   COMMIT;

TR_DNPR_STATYA_DEL	TRIGGER	13	END;
TR_DNPR_MARKETS_UPD	TRIGGER	1	TRIGGER 
TR_DNPR_MARKETS_UPD	TRIGGER	2	TR_dnpr_markets_UPD

TR_DNPR_MARKETS_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_DNPR_MARKETS_UPD	TRIGGER	4	   ON DPNR_MARKETS

TR_DNPR_MARKETS_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_MARKETS_UPD	TRIGGER	6	   FOR EACH ROW

TR_DNPR_MARKETS_UPD	TRIGGER	7	BEGIN

TR_DNPR_MARKETS_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_DNPR_MARKETS_UPD	TRIGGER	9	END;
TR_DNPR_MARKETS_NEW	TRIGGER	1	TRIGGER 
TR_DNPR_MARKETS_NEW	TRIGGER	2	TR_dnpr_markets_NEW

TR_DNPR_MARKETS_NEW	TRIGGER	3	   BEFORE INSERT

TR_DNPR_MARKETS_NEW	TRIGGER	4	   ON DPNR_MARKETS

TR_DNPR_MARKETS_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_MARKETS_NEW	TRIGGER	6	   FOR EACH ROW

TR_DNPR_MARKETS_NEW	TRIGGER	7	BEGIN

TR_DNPR_MARKETS_NEW	TRIGGER	8	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_DNPR_MARKETS_NEW	TRIGGER	9	END;
TR_DNPR_COMPENSATIONS_UPD	TRIGGER	1	TRIGGER 
TR_DNPR_COMPENSATIONS_UPD	TRIGGER	2	TR_dnpr_compensations_UPD

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	4	   ON DPNR_COMPENSATIONS

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	6	   FOR EACH ROW

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	7	BEGIN

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_DNPR_COMPENSATIONS_UPD	TRIGGER	9	END;
TR_DNPR_COMPENSATIONS_NEW	TRIGGER	1	TRIGGER 
TR_DNPR_COMPENSATIONS_NEW	TRIGGER	2	TR_dnpr_compensations_NEW

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	3	   BEFORE INSERT

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	4	   ON DPNR_COMPENSATIONS

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	6	   FOR EACH ROW

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	7	BEGIN

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	8	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_DNPR_COMPENSATIONS_NEW	TRIGGER	9	END;
TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	1	TRIGGER 
TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	2	TR_dnpr_budjet_head_UPD

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	4	   ON DPNR_BUDJET_HEAD

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	6	   FOR EACH ROW

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	7	BEGIN

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_DNPR_BUDJET_HEAD_UPD	TRIGGER	9	END;
TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	1	TRIGGER 
TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	2	TR_DNPR_BUDJET_HEAD_OK_DOSP

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	3	   BEFORE INSERT OR UPDATE OF ok_dosp

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	4	   ON DPNR_BUDJET_HEAD

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	6	   FOR EACH ROW

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	7	BEGIN

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	8	   IF :new.ok_dosp = 1

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	9	   THEN

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	10	      :NEW.ok_dosp_lu := SYSDATE;

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	11	   ELSE

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	12	      :NEW.ok_dosp_fio := NULL;

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	13	      :NEW.ok_dosp_lu := NULL;

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	14	   END IF;

TR_DNPR_BUDJET_HEAD_OK_DOSP	TRIGGER	15	END;
TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	1	TRIGGER 
TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	2	TR_DNPR_BUDJET_HEAD_OK_CHIEF

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	3	   BEFORE INSERT OR UPDATE OF ok_chief

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	4	   ON DPNR_BUDJET_HEAD

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	6	   FOR EACH ROW

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	7	BEGIN

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	8	   IF :new.ok_chief = 1

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	9	   THEN

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	10	      :NEW.ok_chief_lu := SYSDATE;

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	11	   ELSE

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	12	      :NEW.ok_chief_fio := NULL;

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	13	      :NEW.ok_chief_lu := NULL;

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	14	   END IF;

TR_DNPR_BUDJET_HEAD_OK_CHIEF	TRIGGER	15	END;
TR_DNPR_BUDJET_BODY_UPD	TRIGGER	1	TRIGGER 
TR_DNPR_BUDJET_BODY_UPD	TRIGGER	2	TR_dnpr_budjet_body_UPD

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	4	   ON DPNR_BUDJET_BODY

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	6	   FOR EACH ROW

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	7	BEGIN

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_DNPR_BUDJET_BODY_UPD	TRIGGER	9	END;
TR_DM_CAT_APPEALS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_dm_cat_appeals_UPD

TR_DM_CAT_APPEALS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DM_CAT_APPEALS_UPD	TRIGGER	3	   ON PERSIK.dm_cat_appeals

TR_DM_CAT_APPEALS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DM_CAT_APPEALS_UPD	TRIGGER	5	   FOR EACH ROW

TR_DM_CAT_APPEALS_UPD	TRIGGER	6	BEGIN

TR_DM_CAT_APPEALS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DM_CAT_APPEALS_UPD	TRIGGER	8	END;
TR_DM_CAT_APPEALS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_dm_cat_appeals_NEW

TR_DM_CAT_APPEALS_NEW	TRIGGER	2	   BEFORE INSERT

TR_DM_CAT_APPEALS_NEW	TRIGGER	3	   ON PERSIK.dm_cat_appeals

TR_DM_CAT_APPEALS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DM_CAT_APPEALS_NEW	TRIGGER	5	   FOR EACH ROW

TR_DM_CAT_APPEALS_NEW	TRIGGER	6	BEGIN

TR_DM_CAT_APPEALS_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_DM_CAT_APPEALS_NEW	TRIGGER	8	END;
TR_DISTR_PROT_FILES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_distr_prot_FILES_UPD

TR_DISTR_PROT_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DISTR_PROT_FILES_UPD	TRIGGER	3	   ON PERSIK.distr_prot_FILES

TR_DISTR_PROT_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_PROT_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_DISTR_PROT_FILES_UPD	TRIGGER	6	BEGIN

TR_DISTR_PROT_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DISTR_PROT_FILES_UPD	TRIGGER	8	END;
TR_DISTR_PROT_FILES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_distr_prot_FILES_NEW

TR_DISTR_PROT_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_DISTR_PROT_FILES_NEW	TRIGGER	3	   ON PERSIK.distr_prot_FILES

TR_DISTR_PROT_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_PROT_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_DISTR_PROT_FILES_NEW	TRIGGER	6	BEGIN

TR_DISTR_PROT_FILES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_DISTR_PROT_FILES_NEW	TRIGGER	8	END;
TR_DISTR_PROT_CONQ_UPD	TRIGGER	1	TRIGGER PERSIK.TR_DISTR_PROT_conq_UPD 

TR_DISTR_PROT_CONQ_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DISTR_PROT_CONQ_UPD	TRIGGER	3	   ON PERSIK.DISTR_PROT_conq

TR_DISTR_PROT_CONQ_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_PROT_CONQ_UPD	TRIGGER	5	   FOR EACH ROW

TR_DISTR_PROT_CONQ_UPD	TRIGGER	6	BEGIN

TR_DISTR_PROT_CONQ_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DISTR_PROT_CONQ_UPD	TRIGGER	8	END;
TR_DISTR_PROT_CONQ_NEW	TRIGGER	1	TRIGGER PERSIK.TR_DISTR_PROT_conq_NEW 

TR_DISTR_PROT_CONQ_NEW	TRIGGER	2	   BEFORE INSERT

TR_DISTR_PROT_CONQ_NEW	TRIGGER	3	   ON PERSIK.DISTR_PROT_conq

TR_DISTR_PROT_CONQ_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_PROT_CONQ_NEW	TRIGGER	5	   FOR EACH ROW

TR_DISTR_PROT_CONQ_NEW	TRIGGER	6	BEGIN

TR_DISTR_PROT_CONQ_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_DISTR_PROT_CONQ_NEW	TRIGGER	8	END;
TR_DISTR_PROT_CAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_DISTR_PROT_CAT_UPD" 

TR_DISTR_PROT_CAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DISTR_PROT_CAT_UPD	TRIGGER	3	   ON distr_prot_cat

TR_DISTR_PROT_CAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_PROT_CAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_DISTR_PROT_CAT_UPD	TRIGGER	6	BEGIN

TR_DISTR_PROT_CAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DISTR_PROT_CAT_UPD	TRIGGER	8	END;

TR_DISTR_PROT_CAT_UPD	TRIGGER	9	

TR_DISTR_PROT_CAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_DISTR_PROT_CAT_NEW" 

TR_DISTR_PROT_CAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_DISTR_PROT_CAT_NEW	TRIGGER	3	   ON distr_prot_cat

TR_DISTR_PROT_CAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_PROT_CAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_DISTR_PROT_CAT_NEW	TRIGGER	6	BEGIN

TR_DISTR_PROT_CAT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_DISTR_PROT_CAT_NEW	TRIGGER	8	END;

TR_DISTR_PROT_CAT_NEW	TRIGGER	9	

TR_DISTR_OWNERSHIP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_distr_ownership_UPD

TR_DISTR_OWNERSHIP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DISTR_OWNERSHIP_UPD	TRIGGER	3	   ON PERSIK.distr_ownership

TR_DISTR_OWNERSHIP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_OWNERSHIP_UPD	TRIGGER	5	   FOR EACH ROW

TR_DISTR_OWNERSHIP_UPD	TRIGGER	6	BEGIN

TR_DISTR_OWNERSHIP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DISTR_OWNERSHIP_UPD	TRIGGER	8	END;
TR_DISTR_OWNERSHIP_NEW	TRIGGER	1	TRIGGER PERSIK.TR_distr_ownership_NEW

TR_DISTR_OWNERSHIP_NEW	TRIGGER	2	   BEFORE INSERT

TR_DISTR_OWNERSHIP_NEW	TRIGGER	3	   ON PERSIK.distr_ownership

TR_DISTR_OWNERSHIP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_OWNERSHIP_NEW	TRIGGER	5	   FOR EACH ROW

TR_DISTR_OWNERSHIP_NEW	TRIGGER	6	BEGIN

TR_DISTR_OWNERSHIP_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_DISTR_OWNERSHIP_NEW	TRIGGER	8	END;
TR_DISTR_ACTIVITY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_DISTR_activity_UPD

TR_DISTR_ACTIVITY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DISTR_ACTIVITY_UPD	TRIGGER	3	   ON PERSIK.distr_activity

TR_DISTR_ACTIVITY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_ACTIVITY_UPD	TRIGGER	5	   FOR EACH ROW

TR_DISTR_ACTIVITY_UPD	TRIGGER	6	BEGIN

TR_DISTR_ACTIVITY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DISTR_ACTIVITY_UPD	TRIGGER	8	END;
TR_DISTR_ACTIVITY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_DISTR_activity_NEW

TR_DISTR_ACTIVITY_NEW	TRIGGER	2	   BEFORE INSERT

TR_DISTR_ACTIVITY_NEW	TRIGGER	3	   ON PERSIK.distr_activity

TR_DISTR_ACTIVITY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DISTR_ACTIVITY_NEW	TRIGGER	5	   FOR EACH ROW

TR_DISTR_ACTIVITY_NEW	TRIGGER	6	BEGIN

TR_DISTR_ACTIVITY_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_DISTR_ACTIVITY_NEW	TRIGGER	8	END;
TR_DIMPRODUCT_VP_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_DIMPRODUCT_VP_UPD" 

TR_DIMPRODUCT_VP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DIMPRODUCT_VP_UPD	TRIGGER	3	   ON dimproduct_vp

TR_DIMPRODUCT_VP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DIMPRODUCT_VP_UPD	TRIGGER	5	   FOR EACH ROW

TR_DIMPRODUCT_VP_UPD	TRIGGER	6	BEGIN

TR_DIMPRODUCT_VP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_DIMPRODUCT_VP_UPD	TRIGGER	8	END;

TR_DIMPRODUCT_VP_UPD	TRIGGER	9	

TR_DIMPRODUCT_VP_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_DIMPRODUCT_VP_NEW" 

TR_DIMPRODUCT_VP_NEW	TRIGGER	2	   BEFORE INSERT

TR_DIMPRODUCT_VP_NEW	TRIGGER	3	   ON dimproduct_vp

TR_DIMPRODUCT_VP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_DIMPRODUCT_VP_NEW	TRIGGER	5	   FOR EACH ROW

TR_DIMPRODUCT_VP_NEW	TRIGGER	6	BEGIN

TR_DIMPRODUCT_VP_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_DIMPRODUCT_VP_NEW	TRIGGER	8	   THEN

TR_DIMPRODUCT_VP_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_DIMPRODUCT_VP_NEW	TRIGGER	10	   END IF;

TR_DIMPRODUCT_VP_NEW	TRIGGER	11	END;

TR_DIMPRODUCT_VP_NEW	TRIGGER	12	

TR_DIMPRODUCT_TMP_1	TRIGGER	1	TRIGGER "PERSIK"."TR_DIMPRODUCT_TMP_1" 

TR_DIMPRODUCT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_DIMPRODUCT_TMP_1	TRIGGER	3	   ON PERSIK.DIMPRODUCT_TMP

TR_DIMPRODUCT_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_DIMPRODUCT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_DIMPRODUCT_TMP_1	TRIGGER	6	BEGIN

TR_DIMPRODUCT_TMP_1	TRIGGER	7	   :new.H_product_group_avk := md5hash (:new.product_group_avk);

TR_DIMPRODUCT_TMP_1	TRIGGER	8	   :new.h_altgroup := md5hash (:new.altgroup);

TR_DIMPRODUCT_TMP_1	TRIGGER	9	END;

TR_DIMPRODUCT_TMP_1	TRIGGER	10	

TR_DEPARTMENTS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_DEPARTMENTS_NEW" 

TR_DEPARTMENTS_NEW	TRIGGER	2	BEFORE INSERT

TR_DEPARTMENTS_NEW	TRIGGER	3	ON PERSIK.DEPARTMENTS 

TR_DEPARTMENTS_NEW	TRIGGER	4	REFERENCING NEW AS New OLD AS Old

TR_DEPARTMENTS_NEW	TRIGGER	5	FOR EACH ROW

TR_DEPARTMENTS_NEW	TRIGGER	6	DECLARE

TR_DEPARTMENTS_NEW	TRIGGER	7	   tmpVar   NUMBER;

TR_DEPARTMENTS_NEW	TRIGGER	8	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_DEPARTMENTS_NEW	TRIGGER	9	BEGIN

TR_DEPARTMENTS_NEW	TRIGGER	10	   SELECT MAX (dpt_id) + 1 INTO :new.dpt_id FROM departments;

TR_DEPARTMENTS_NEW	TRIGGER	11	END TR_DEPARTMENTS_NEW;

TR_DEPARTMENTS_NEW	TRIGGER	12	

TR_DEPARTMENTS_NEW	TRIGGER	13	

TR_DEPARTMENTS_NEW	TRIGGER	14	

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	1	TRIGGER PERSIK.TR_DEPARTMENTS_cur_id_upd

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF cur_id

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	3	   ON PERSIK.DEPARTMENTS

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	5	   FOR EACH ROW

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	6	BEGIN

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	7	   IF :new.cur_id IS NULL

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	8	   THEN

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	9	      :new.valuta := NULL;

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	10	   ELSE

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	11	      SELECT name

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	12	        INTO :new.valuta

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	13	        FROM currencies

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	14	       WHERE id = :new.cur_id;

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	15	   END IF;

TR_DEPARTMENTS_CUR_ID_UPD	TRIGGER	16	END;
TR_CURRENCIES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_CURRENCIES_UPD

TR_CURRENCIES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_CURRENCIES_UPD	TRIGGER	3	   ON PERSIK.CURRENCIES

TR_CURRENCIES_UPD	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_CURRENCIES_UPD	TRIGGER	5	   FOR EACH ROW

TR_CURRENCIES_UPD	TRIGGER	6	BEGIN

TR_CURRENCIES_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_CURRENCIES_UPD	TRIGGER	8	

TR_CURRENCIES_UPD	TRIGGER	9	   UPDATE departments

TR_CURRENCIES_UPD	TRIGGER	10	      SET valuta = :new.name

TR_CURRENCIES_UPD	TRIGGER	11	    WHERE cur_id = :new.id;

TR_CURRENCIES_UPD	TRIGGER	12	END;
TR_CURRENCIES_NEW	TRIGGER	1	TRIGGER TR_currencies_NEW

TR_CURRENCIES_NEW	TRIGGER	2	   BEFORE INSERT

TR_CURRENCIES_NEW	TRIGGER	3	   ON currencies

TR_CURRENCIES_NEW	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_CURRENCIES_NEW	TRIGGER	5	   FOR EACH ROW

TR_CURRENCIES_NEW	TRIGGER	6	BEGIN

TR_CURRENCIES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_CURRENCIES_NEW	TRIGGER	8	END;
TR_CPP_UPD_NET	TRIGGER	1	TRIGGER PERSIK.TR_CPP_UPD_net

TR_CPP_UPD_NET	TRIGGER	2	   BEFORE INSERT OR UPDATE OF id_net

TR_CPP_UPD_NET	TRIGGER	3	   ON persik.cpp

TR_CPP_UPD_NET	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_CPP_UPD_NET	TRIGGER	5	   FOR EACH ROW

TR_CPP_UPD_NET	TRIGGER	6	BEGIN

TR_CPP_UPD_NET	TRIGGER	7	   UPDATE merch_spec_head

TR_CPP_UPD_NET	TRIGGER	8	      SET id_net = :new.id_net

TR_CPP_UPD_NET	TRIGGER	9	    WHERE kod_tp = :new.kodtp;

TR_CPP_UPD_NET	TRIGGER	10	END;
TR_CPP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_CPP_UPD

TR_CPP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_CPP_UPD	TRIGGER	3	   ON persik.cpp

TR_CPP_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_CPP_UPD	TRIGGER	5	   FOR EACH ROW

TR_CPP_UPD	TRIGGER	6	BEGIN

TR_CPP_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_CPP_UPD	TRIGGER	8	   :new.h_tz_oblast := md5hash (:new.tz_oblast);

TR_CPP_UPD	TRIGGER	9	   :new.h_city := md5hash (:new.city);

TR_CPP_UPD	TRIGGER	10	END;
TR_CPP_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_CPP_NEW" 

TR_CPP_NEW	TRIGGER	2	   BEFORE INSERT

TR_CPP_NEW	TRIGGER	3	   ON PERSIK.CPP

TR_CPP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_CPP_NEW	TRIGGER	5	   FOR EACH ROW

TR_CPP_NEW	TRIGGER	6	BEGIN

TR_CPP_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_CPP_NEW	TRIGGER	8	

TR_CPP_NEW	TRIGGER	9	   :new.kodtp := :new.id;

TR_CPP_NEW	TRIGGER	10	END;

TR_CPP_NEW	TRIGGER	11	

TR_CPP_NEW	TRIGGER	12	

TR_CPP_NEW	TRIGGER	13	

TR_CLUSTERS_UPD	TRIGGER	1	TRIGGER tr_clusters_upd

TR_CLUSTERS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_CLUSTERS_UPD	TRIGGER	3	   ON clusters

TR_CLUSTERS_UPD	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_CLUSTERS_UPD	TRIGGER	5	   FOR EACH ROW

TR_CLUSTERS_UPD	TRIGGER	6	BEGIN

TR_CLUSTERS_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_CLUSTERS_UPD	TRIGGER	8	END;
TR_CLUSTERS_NEW	TRIGGER	1	TRIGGER TR_clusters_NEW

TR_CLUSTERS_NEW	TRIGGER	2	   BEFORE INSERT

TR_CLUSTERS_NEW	TRIGGER	3	   ON clusters

TR_CLUSTERS_NEW	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_CLUSTERS_NEW	TRIGGER	5	   FOR EACH ROW

TR_CLUSTERS_NEW	TRIGGER	6	BEGIN

TR_CLUSTERS_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_CLUSTERS_NEW	TRIGGER	8	   THEN

TR_CLUSTERS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_CLUSTERS_NEW	TRIGGER	10	   END IF;

TR_CLUSTERS_NEW	TRIGGER	11	END;
TR_CLUSTERS_FILS_UPD	TRIGGER	1	TRIGGER tr_clusters_fils_upd

TR_CLUSTERS_FILS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_CLUSTERS_FILS_UPD	TRIGGER	3	   ON clusters_fils

TR_CLUSTERS_FILS_UPD	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_CLUSTERS_FILS_UPD	TRIGGER	5	   FOR EACH ROW

TR_CLUSTERS_FILS_UPD	TRIGGER	6	BEGIN

TR_CLUSTERS_FILS_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_CLUSTERS_FILS_UPD	TRIGGER	8	END;
TR_BUD_TN_FIL_NEW	TRIGGER	1	TRIGGER TR_BUD_tn_fil_NEW

TR_BUD_TN_FIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_TN_FIL_NEW	TRIGGER	3	   ON PERSIK.BUD_tn_fil

TR_BUD_TN_FIL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_TN_FIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_TN_FIL_NEW	TRIGGER	6	BEGIN

TR_BUD_TN_FIL_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_BUD_TN_FIL_NEW	TRIGGER	8	END;
TR_BUD_TN_FIL_DU	TRIGGER	1	TRIGGER PERSIK.TR_BUD_tn_fil_DU

TR_BUD_TN_FIL_DU	TRIGGER	2	   BEFORE DELETE OR UPDATE

TR_BUD_TN_FIL_DU	TRIGGER	3	   ON PERSIK.BUD_tn_fil

TR_BUD_TN_FIL_DU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_TN_FIL_DU	TRIGGER	5	   FOR EACH ROW

TR_BUD_TN_FIL_DU	TRIGGER	6	DECLARE

TR_BUD_TN_FIL_DU	TRIGGER	7	   ci   INTEGER;

TR_BUD_TN_FIL_DU	TRIGGER	8	   co   INTEGER;

TR_BUD_TN_FIL_DU	TRIGGER	9	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_TN_FIL_DU	TRIGGER	10	BEGIN

TR_BUD_TN_FIL_DU	TRIGGER	11	   /*

TR_BUD_TN_FIL_DU	TRIGGER	12	      SELECT COUNT (*)

TR_BUD_TN_FIL_DU	TRIGGER	13	        INTO ci

TR_BUD_TN_FIL_DU	TRIGGER	14	        FROM bud_ru_cash_in_head

TR_BUD_TN_FIL_DU	TRIGGER	15	       WHERE db = :old.tn AND fil = :old.bud_id;

TR_BUD_TN_FIL_DU	TRIGGER	16	

TR_BUD_TN_FIL_DU	TRIGGER	17	      SELECT COUNT (*)

TR_BUD_TN_FIL_DU	TRIGGER	18	        INTO co

TR_BUD_TN_FIL_DU	TRIGGER	19	        FROM bud_ru_cash_out_head

TR_BUD_TN_FIL_DU	TRIGGER	20	       WHERE db = :old.tn AND fil = :old.bud_id;

TR_BUD_TN_FIL_DU	TRIGGER	21	

TR_BUD_TN_FIL_DU	TRIGGER	22	      IF ci > 0 OR co > 0

TR_BUD_TN_FIL_DU	TRIGGER	23	      THEN

TR_BUD_TN_FIL_DU	TRIGGER	24	         INSERT INTO full_log (text, prg)

TR_BUD_TN_FIL_DU	TRIGGER	25	              VALUES (

TR_BUD_TN_FIL_DU	TRIGGER	26	                           'Связка ДБ '

TR_BUD_TN_FIL_DU	TRIGGER	27	                        || :old.tn

TR_BUD_TN_FIL_DU	TRIGGER	28	                        || ' - филиал '

TR_BUD_TN_FIL_DU	TRIGGER	29	                        || :old.bud_id

TR_BUD_TN_FIL_DU	TRIGGER	30	                        || ' не может быть изменена/удалена, т.к имеются подчиненные записи',

TR_BUD_TN_FIL_DU	TRIGGER	31	                        'bud');

TR_BUD_TN_FIL_DU	TRIGGER	32	

TR_BUD_TN_FIL_DU	TRIGGER	33	         COMMIT;

TR_BUD_TN_FIL_DU	TRIGGER	34	         RAISE_APPLICATION_ERROR (

TR_BUD_TN_FIL_DU	TRIGGER	35	            -20213,

TR_BUD_TN_FIL_DU	TRIGGER	36	               'Связка ДБ '

TR_BUD_TN_FIL_DU	TRIGGER	37	            || :old.tn

TR_BUD_TN_FIL_DU	TRIGGER	38	            || ' - филиал '

TR_BUD_TN_FIL_DU	TRIGGER	39	            || :old.bud_id

TR_BUD_TN_FIL_DU	TRIGGER	40	            || ' не может быть изменена/удалена, т.к имеются подчиненные записи');

TR_BUD_TN_FIL_DU	TRIGGER	41	      END IF;

TR_BUD_TN_FIL_DU	TRIGGER	42	      */

TR_BUD_TN_FIL_DU	TRIGGER	43	   NULL;

TR_BUD_TN_FIL_DU	TRIGGER	44	END;
TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	1	TRIGGER PERSIK.TR_BUD_SVOD_TAF_UPD_OK_T2

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_t2_tn

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	3	   ON PERSIK.BUD_SVOD_TAF

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	5	   FOR EACH ROW

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	6	BEGIN

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	7	   IF :new.ok_t1_tn IS NULL AND UPDATING

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	8	   THEN

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	9	      RAISE_APPLICATION_ERROR (

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	10	         -20213,

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	11	         'ВСТМ 2й этап не может подтвердить, т.к. отчет не подтвержден ВСТМ 1й этап');

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	12	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	13	

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	14	   IF :new.ok_t2_tn IS NULL

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	15	   THEN

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	16	      :NEW.ok_t2_lu := NULL;

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	17	      :NEW.ok_t2_fio := NULL;

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	18	   ELSE

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	19	      :NEW.ok_t2_lu := SYSDATE;

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	20	

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	21	      SELECT fio

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	22	        INTO :NEW.ok_t2_fio

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	23	        FROM user_list

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	24	       WHERE tn = :new.ok_t2_tn;

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	25	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_T2	TRIGGER	26	END;
TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	1	TRIGGER PERSIK.TR_BUD_SVOD_TAF_UPD_OK_T1

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_t1_tn

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	3	   ON PERSIK.BUD_SVOD_TAF

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	5	   FOR EACH ROW

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	6	BEGIN

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	7	   IF :new.ok_t2_tn IS NOT NULL

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	8	   THEN

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	9	      RAISE_APPLICATION_ERROR (

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	10	         -20213,

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	11	         'ВСТМ 1й этап не может подтвердить, т.к. отчет уже подтвержден ВСТМ 2й этап');

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	12	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	13	

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	14	   IF :new.ok_pr_tn IS NULL AND UPDATING

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	15	   THEN

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	16	      RAISE_APPLICATION_ERROR (

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	17	         -20213,

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	18	         'ВСТМ 1й этап не может подтвердить, т.к. отчет не подтвержден прямым рук-лем ДБ');

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	19	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	20	

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	21	   IF :new.ok_t1_tn IS NULL

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	22	   THEN

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	23	      :NEW.ok_t1_lu := NULL;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	24	      :NEW.ok_t1_fio := NULL;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	25	   ELSE

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	26	      :NEW.ok_t1_lu := SYSDATE;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	27	

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	28	      SELECT fio

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	29	        INTO :NEW.ok_t1_fio

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	30	        FROM user_list

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	31	       WHERE tn = :new.ok_t1_tn;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	32	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_T1	TRIGGER	33	END;
TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	1	TRIGGER PERSIK.TR_BUD_SVOD_TAf_UPD_ok_pr

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_pr_tn

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	3	   ON PERSIK.BUD_SVOD_TAF

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	5	   FOR EACH ROW

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	6	BEGIN

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	7	   IF :new.ok_t1_tn IS NOT NULL

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	8	   THEN

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	9	      RAISE_APPLICATION_ERROR (

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	10	         -20213,

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	11	         'Прямой рук-ль ДБ не может подтвердить, т.к. отчет уже подтвержден ВСТМ 1й этап');

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	12	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	13	

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	14	   IF :new.ok_pr_tn IS NULL

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	15	   THEN

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	16	      :NEW.ok_pr_lu := NULL;

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	17	      :NEW.ok_pr_fio := NULL;

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	18	   ELSE

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	19	      :NEW.ok_pr_lu := SYSDATE;

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	20	

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	21	      SELECT fio

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	22	        INTO :NEW.ok_pr_fio

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	23	        FROM user_list

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	24	       WHERE tn = :new.ok_pr_tn;

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	25	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_PR	TRIGGER	26	END;
TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	1	TRIGGER PERSIK.TR_BUD_SVOD_TAF_UPD_OK_DB

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_db_tn

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	3	   ON PERSIK.BUD_SVOD_TAF

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	5	   FOR EACH ROW

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	6	DECLARE

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	7	   v_is_kk    INTEGER;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	8	   v_dpt_id   INTEGER;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	9	   v_mails    VARCHAR2 (4000);

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	10	   v_subj     VARCHAR2 (4000);

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	11	   v_text     VARCHAR2 (4000);

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	12	   v_dt       VARCHAR2 (255);

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	13	   v_dt_val   VARCHAR2 (255);

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	14	   v_tn_pr    INTEGER;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	15	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	16	BEGIN

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	17	   IF :new.ok_pr_tn IS NOT NULL

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	18	   THEN

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	19	      RAISE_APPLICATION_ERROR (

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	20	         -20213,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	21	         'ДБ не может подтвердить, т.к. отчет уже подтвержден прямым рук-лем ДБ');

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	22	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	23	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	24	   IF :new.ok_db_tn IS NULL

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	25	   THEN

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	26	      :NEW.ok_db_lu := NULL;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	27	      :NEW.ok_db_fio := NULL;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	28	   ELSE

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	29	      :NEW.ok_db_lu := SYSDATE;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	30	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	31	      SELECT fio, NVL (is_kk, 0), dpt_id

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	32	        INTO :NEW.ok_db_fio, v_is_kk, v_dpt_id

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	33	        FROM user_list

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	34	       WHERE tn = :new.ok_db_tn;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	35	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	36	      SELECT wm_concat (e_mail)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	37	        INTO v_mails

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	38	        FROM user_list

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	39	       WHERE     dpt_id = v_dpt_id

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	40	             AND (   (v_is_kk = 0 AND is_traid = 1)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	41	                  OR (v_is_kk = 1 AND is_traid_kk = 1));

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	42	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	43	      SELECT mt || ' ' || y

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	44	        INTO v_dt

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	45	        FROM calendar

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	46	       WHERE data = :new.dt;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	47	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	48	      SELECT master

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	49	        INTO v_tn_pr

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	50	        FROM full

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	51	       WHERE slave = :new.ok_db_tn AND full = 1;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	52	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	53	      SELECT e_mail

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	54	        INTO v_mails

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	55	        FROM user_list

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	56	       WHERE tn = v_tn_pr;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	57	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	58	      v_dt_val := TO_CHAR (:new.dt, 'dd.mm.yyyy');

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	59	      v_subj :=

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	60	            'Закрытие отчета по фондам за '

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	61	         || v_dt

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	62	         || ', ДБ '

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	63	         || :NEW.ok_db_fio;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	64	      v_text :=

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	65	            'Для подтверждения отчета перейдите по <a href="https://ps.avk.ua/?action=bud_svod_ta&dt='

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	66	         || v_dt_val

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	67	         || '&db='

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	68	         || :new.ok_db_tn

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	69	         || '&select=1">ссылке</a>';

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	70	      PR_SENDMAIL (v_mails, v_subj, v_text);

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	71	   /*

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	72	   insert values from the column "ЗП фактическая на руки, грн."

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	73	   to database when DB sets the checkbox "ДБ"

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	74	   on the form "Аналитика / Титул: Подтверждение отчета"

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	75	   */

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	76	   /*FOR a

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	77	      IN (SELECT sv.id,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	78	                 ROUND (

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	79	                      CASE

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	80	                         WHEN DECODE (

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	81	                                 NVL (vp.val_plan, 0),

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	82	                                 0, 0,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	83	                                   (  NVL (vp.val_fact, 0)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	84	                                    + NVL (s.coffee, 0))

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	85	                                 / vp.val_plan

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	86	                                 * 100) < 80

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	87	                         THEN

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	88	                            0.01

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	89	                         ELSE

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	90	                            0.02

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	91	                      END

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	92	                    * sv.sales)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	93	                    zp_fakt

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	94	            FROM (  SELECT m.tab_num,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	95	                           m.h_eta,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	96	                           m.eta,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	97	                           m.eta_tab_number,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	98	                           SUM (m.summa) summa,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	99	                           SUM (m.coffee) coffee

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	100	                      FROM a14mega m

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	101	                     WHERE m.dpt_id = v_dpt_id AND :new.dt = m.dt

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	102	                  GROUP BY m.tab_num,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	103	                           m.h_eta,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	104	                           m.eta,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	105	                           m.eta_tab_number) s,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	106	                 user_list u,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	107	                 bud_svod_zp sv,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	108	                 (SELECT h_eta,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	109	                         (NVL (val_plan, 0) + NVL (coffee_plan, 0)) * 1000

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	110	                            val_plan,

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	111	                         val_fact * 1000 val_fact

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	112	                    FROM kpr k

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	113	                   WHERE k.dpt_id = v_dpt_id AND :new.dt = k.dt) vp

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	114	           WHERE     :new.fil = sv.fil

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	115	                 AND s.tab_num = u.tab_num

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	116	                 AND u.dpt_id = v_dpt_id

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	117	                 AND :new.dt = sv.dt(+)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	118	                 AND v_dpt_id = sv.dpt_id(+)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	119	                 AND s.h_eta = sv.h_eta(+)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	120	                 AND s.h_eta = vp.h_eta(+)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	121	                 AND (u.tn IN (SELECT slave

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	122	                                 FROM full

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	123	                                WHERE master = :new.ok_db_tn))

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	124	                 AND sv.unscheduled = 0)

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	125	   LOOP

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	126	      UPDATE bud_svod_zp

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	127	         SET zp_fakt = a.zp_fakt

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	128	       WHERE id = a.id;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	129	

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	130	      COMMIT;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	131	   END LOOP;*/

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	132	   END IF;

TR_BUD_SVOD_TAF_UPD_OK_DB	TRIGGER	133	END;
TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_VALID_NO_UPD

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	2	   BEFORE UPDATE OF valid_no

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	7	   msg    VARCHAR2 (4000);

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	8	   subj   VARCHAR2 (4000);

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	9	BEGIN

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	10	   IF :new.valid_no = 1

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	11	   THEN

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	12	      DELETE FROM nets_plan_month

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	13	            WHERE bud_z_id = :new.id;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	14	

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	15	      DELETE FROM invoice

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	16	            WHERE bud_z_id = :new.id;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	17	

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	18	      :NEW.valid_lu := SYSDATE;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	19	

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	20	      msg :=

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	21	            'Выставил статус «НЕДЕЙСТВИТЕЛЬНАЯ заявка на проведение активности» - '

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	22	         || fn_getname (:new.valid_tn)

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	23	         || '<br>Дата выставления статуса: '

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	24	         || TO_CHAR (:new.valid_lu, 'dd/mm/yyyy hh24:mi:ss')

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	25	         || '<br>Причина выставления статуса:<br>'

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	26	         || :new.valid_text;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	27	

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	28	      subj :=

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	29	            'заявка на проведение активности №'

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	30	         || TO_CHAR (:new.id)

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	31	         || ' от '

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	32	         || TO_CHAR (:new.created, 'dd/mm/yyyy')

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	33	         || ' признана недействительной';

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	34	

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	35	      FOR a IN (SELECT DISTINCT u.e_mail

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	36	                  FROM (SELECT tn

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	37	                          FROM bud_ru_zay_executors

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	38	                         WHERE z_id = :new.id

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	39	                        UNION

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	40	                        SELECT tn

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	41	                          FROM bud_ru_zay_accept

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	42	                         WHERE z_id = :new.id

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	43	                        UNION

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	44	                        SELECT :new.tn FROM DUAL) l,

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	45	                       user_list u

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	46	                 WHERE l.tn = u.tn AND e_mail IS NOT NULL)

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	47	      LOOP

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	48	         pr_sendmail (a.e_mail, subj, msg);

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	49	      END LOOP;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	50	   ELSE

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	51	      :NEW.valid_lu := NULL;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	52	      :NEW.valid_tn := NULL;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	53	      :NEW.valid_text := NULL;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	54	   END IF;

TR_BUD_RU_ZAY_VALID_NO_UPD	TRIGGER	55	END;
TR_BUD_RU_ZAY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_UPD

TR_BUD_RU_ZAY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ZAY_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_UPD	TRIGGER	8	END;
TR_BUD_RU_ZAY_TN_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_tn_UPD

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF tn

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	7	   IF :new.tn IS NOT NULL

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	8	   THEN

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	9	      SELECT NVL (u1.tn, u2.tn) tn, NVL (u1.fio, u2.fio) fio

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	10	        INTO :new.rm_tn, :new.rm_fio

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	11	        FROM user_list u1,

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	12	             user_list u,

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	13	             parents p,

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	14	             user_list u2

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	15	       WHERE     u1.is_rm(+) = 1

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	16	             AND u1.region_name(+) = u.region_name

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	17	             AND u1.datauvol(+) IS NULL

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	18	             AND u.tn = :new.tn

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	19	             AND u.dpt_id = u1.dpt_id(+)

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	20	             AND u.tn = p.tn(+)

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	21	             AND u2.tn(+) = p.parent

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	22	             AND ROWNUM = 1;

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	23	   END IF;

TR_BUD_RU_ZAY_TN_UPD	TRIGGER	24	END;
TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ZAY_REP_CHAT_UPD" 

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	3	   ON BUD_RU_ZAY_REP_CHAT

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	8	END;

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	9	

TR_BUD_RU_ZAY_REP_CHAT_UPD	TRIGGER	10	

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ZAY_REP_CHAT_NEW" 

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	3	   ON BUD_RU_ZAY_REP_CHAT

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	8	END;

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	9	

TR_BUD_RU_ZAY_REP_CHAT_NEW	TRIGGER	10	

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	1	TRIGGER TR_BUD_RU_ZAY_REPORT_SHORT_UPD

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	2	   BEFORE UPDATE OF report_short

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	7	   c   INTEGER;

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	8	BEGIN

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	9	   IF :new.report_short = 1

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	10	   THEN

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	11	      SELECT COUNT (*)

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	12	        INTO c

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	13	        FROM bud_ru_zay_accept a, user_list u

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	14	       WHERE a.z_id = :new.id AND u.tn = a.tn AND u.pos_id = 75;

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	15	

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	16	      IF c = 0

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	17	      THEN

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	18	         UPDATE BUD_RU_ZAY_accept

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	19	            SET rep_accepted = NULL

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	20	          WHERE z_id = :new.id AND accept_order > 1;

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	21	      ELSE

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	22	         UPDATE BUD_RU_ZAY_accept

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	23	            SET rep_accepted = NULL

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	24	          WHERE     z_id = :new.id

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	25	                AND tn NOT IN (SELECT a.tn

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	26	                                 FROM bud_ru_zay_accept a, user_list u

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	27	                                WHERE     a.z_id = :new.id

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	28	                                      AND u.tn = a.tn

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	29	                                      AND u.pos_id = 75);

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	30	      END IF;

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	31	   END IF;

TR_BUD_RU_ZAY_REPORT_SHORT_UPD	TRIGGER	32	END;
TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_REPORT_DONE_UPD

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	2	   BEFORE UPDATE OF report_done

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	7	   c        DATE;

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	8	   email_   VARCHAR (255);

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	9	BEGIN

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	10	   IF :new.report_done = 1

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	11	   THEN

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	12	      :new.report_done_lu := SYSDATE;

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	13	

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	14	      SELECT e_mail

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	15	        INTO email_

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	16	        FROM user_list

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	17	       WHERE tn = (SELECT tn

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	18	                     FROM bud_ru_zay_accept

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	19	                    WHERE     z_id = :new.id

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	20	                          AND accept_order = (SELECT MIN (accept_order)

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	21	                                                FROM bud_ru_zay_accept

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	22	                                               WHERE z_id = :new.id));

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	23	

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	24	      PR_SENDMAIL (

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	25	         email_,

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	26	            'Подтверждение отчета по активности №'

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	27	         || :new.id

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	28	         || ' от '

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	29	         || TO_CHAR (:new.created, 'dd/mm/yyyy hh24:mi:ss'),

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	30	            'Отчет по активности №'

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	31	         || :new.id

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	32	         || ' от '

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	33	         || TO_CHAR (:new.created, 'dd/mm/yyyy hh24:mi:ss')

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	34	         || ' ожидает вашего подтверждения');

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	35	   ELSE

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	36	      :new.report_done_lu := NULL;

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	37	   END IF;

TR_BUD_RU_ZAY_REPORT_DONE_UPD	TRIGGER	38	END;
TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_REPORT_DATA_UPD

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	2	   BEFORE UPDATE OF report_data

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	7	   msg    VARCHAR2 (4000);

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	8	   subj   VARCHAR2 (4000);

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	9	BEGIN

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	10	   IF :new.report_data IS NOT NULL

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	11	   THEN

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	12	      :new.report_data_lu := SYSDATE;

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	13	      msg :=

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	14	            'По вашей заявки на проведение активности №'

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	15	         || TO_CHAR (:new.id)

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	16	         || ' от '

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	17	         || TO_CHAR (:new.created, 'dd/mm/yyyy')

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	18	         || ' выставлен граничный срок подачи отчета - до <b>'

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	19	         || TO_CHAR (:new.report_data, 'dd/mm/yyyy')

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	20	         || '</b><br>'

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	21	         || 'Комментарий: '

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	22	         || :new.report_data_text

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	23	         || '<br>'

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	24	         || 'Просьба принять данную информацию к сведению и включить в свой план работ';

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	25	

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	26	      subj :=

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	27	            'Срок отчета по заявке на проведение активности №'

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	28	         || TO_CHAR (:new.id)

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	29	         || ' от '

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	30	         || TO_CHAR (:new.created, 'dd/mm/yyyy');

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	31	

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	32	      FOR a IN (SELECT DISTINCT u.e_mail

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	33	                  FROM user_list u

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	34	                 WHERE :new.tn = u.tn AND e_mail IS NOT NULL)

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	35	      LOOP

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	36	         pr_sendmail (a.e_mail, subj, msg);

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	37	      END LOOP;

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	38	   ELSE

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	39	      :new.report_data_lu := NULL;

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	40	      :new.report_data_tn := NULL;

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	41	      :new.report_data_text := NULL;

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	42	   END IF;

TR_BUD_RU_ZAY_REPORT_DATA_UPD	TRIGGER	43	END;
TR_BUD_RU_ZAY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_NEW

TR_BUD_RU_ZAY_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ZAY_NEW	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY

TR_BUD_RU_ZAY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_NEW	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_NEW	TRIGGER	7	   v_tu   INTEGER;

TR_BUD_RU_ZAY_NEW	TRIGGER	8	BEGIN

TR_BUD_RU_ZAY_NEW	TRIGGER	9	   IF :NEW.ID IS NULL

TR_BUD_RU_ZAY_NEW	TRIGGER	10	   THEN

TR_BUD_RU_ZAY_NEW	TRIGGER	11	      SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_BUD_RU_ZAY_NEW	TRIGGER	12	   END IF;

TR_BUD_RU_ZAY_NEW	TRIGGER	13	

TR_BUD_RU_ZAY_NEW	TRIGGER	14	   :NEW.created := SYSDATE;

TR_BUD_RU_ZAY_NEW	TRIGGER	15	

TR_BUD_RU_ZAY_NEW	TRIGGER	16	   /*

TR_BUD_RU_ZAY_NEW	TRIGGER	17	   В Целях на переговоры

TR_BUD_RU_ZAY_NEW	TRIGGER	18	   в момент сохранения дата окончания не равна дате начала + 365 дней.

TR_BUD_RU_ZAY_NEW	TRIGGER	19	   Необходимо добавить в момент сохранения

TR_BUD_RU_ZAY_NEW	TRIGGER	20	   и отправку на согласования "Целей на переговоры" отработку сценария,

TR_BUD_RU_ZAY_NEW	TRIGGER	21	   где дата окончания выставляется как дата начала + 365 дней.

TR_BUD_RU_ZAY_NEW	TRIGGER	22	   */

TR_BUD_RU_ZAY_NEW	TRIGGER	23	

TR_BUD_RU_ZAY_NEW	TRIGGER	24	   SELECT NVL (tu, 0)

TR_BUD_RU_ZAY_NEW	TRIGGER	25	     INTO v_tu

TR_BUD_RU_ZAY_NEW	TRIGGER	26	     FROM bud_ru_st_ras

TR_BUD_RU_ZAY_NEW	TRIGGER	27	    WHERE id = :new.kat;

TR_BUD_RU_ZAY_NEW	TRIGGER	28	

TR_BUD_RU_ZAY_NEW	TRIGGER	29	   IF v_tu = 1

TR_BUD_RU_ZAY_NEW	TRIGGER	30	   THEN

TR_BUD_RU_ZAY_NEW	TRIGGER	31	      :new.dt_end := :new.dt_start + 365;

TR_BUD_RU_ZAY_NEW	TRIGGER	32	   END IF;

TR_BUD_RU_ZAY_NEW	TRIGGER	33	END;
TR_BUD_RU_ZAY_FF_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_FF_UPD

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY_FF

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	8	

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	9	   IF :new.val_list IS NOT NULL

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	10	   THEN

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	11	      SELECT fn_query2str (REPLACE (st.get_item, ':id', :new.val_list), ',')

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	12	        INTO :new.val_list_name

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	13	        FROM bud_ru_ff ff, bud_ru_ff_subtypes st

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	14	       WHERE :new.ff_id = ff.id AND ff.subtype = st.id;

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	15	   END IF;

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	16	

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	17	   IF :new.rep_val_list IS NOT NULL

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	18	   THEN

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	19	      SELECT fn_query2str (REPLACE (st.get_item, ':id', :new.rep_val_list),

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	20	                           ',')

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	21	        INTO :new.rep_val_list_name

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	22	        FROM bud_ru_ff ff, bud_ru_ff_subtypes st

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	23	       WHERE :new.ff_id = ff.id AND ff.subtype = st.id;

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	24	   END IF;

TR_BUD_RU_ZAY_FF_UPD	TRIGGER	25	END;
TR_BUD_RU_ZAY_FF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ZAY_FF_NEW" 

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	3	   ON BUD_RU_ZAY_FF

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	8	   c        DATE;

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	9	   email_   VARCHAR (255);

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	10	BEGIN

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	11	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	12	END;

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	13	

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	14	

TR_BUD_RU_ZAY_FF_NEW	TRIGGER	15	

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_bud_ru_zay_EXECUTORS_UPD

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	3	   ON PERSIK.bud_ru_zay_EXECUTORS

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_EXECUTORS_UPD	TRIGGER	8	END;
TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_bud_ru_zay_EXECUTORS_NEW

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	3	   ON PERSIK.bud_ru_zay_EXECUTORS

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	8	BEGIN

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	9	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	10	

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	11	

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	12	   SELECT NVL (MAX (execute_order), 0) + 1

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	13	     INTO :new.execute_order

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	14	     FROM bud_ru_zay_EXECUTORS

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	15	    WHERE z_id = :new.z_id;

TR_BUD_RU_ZAY_EXECUTORS_NEW	TRIGGER	16	END;
TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ZAY_CHAT_UPD" 

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	3	   ON bud_ru_zay_CHAT

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	8	END;

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	9	

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	10	

TR_BUD_RU_ZAY_CHAT_UPD	TRIGGER	11	

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ZAY_CHAT_NEW" 

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	3	   ON bud_ru_zay_CHAT

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	8	END;

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	9	

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	10	

TR_BUD_RU_ZAY_CHAT_NEW	TRIGGER	11	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_ACCEPT_UPD_REP1

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	2	   BEFORE UPDATE OF rep_failure

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	7	   :NEW.rep_lu := SYSDATE;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP1	TRIGGER	8	END;
TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_ACCEPT_UPD_REP

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	2	   BEFORE UPDATE OF rep_accepted

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	8	   p_report_short   INTEGER;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	9	BEGIN

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	10	   IF :new.rep_accepted IS NULL

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	11	   THEN

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	12	      :NEW.rep_lu := NULL;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	13	   ELSE

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	14	      :NEW.rep_lu := SYSDATE;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	15	   END IF;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	16	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	17	   IF :new.rep_accepted = 2

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	18	   THEN

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	19	      UPDATE bud_ru_zay

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	20	         SET report_done = NULL

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	21	       WHERE id = :new.z_id;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	22	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	23	      COMMIT;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	24	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	25	      SELECT report_short

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	26	        INTO p_report_short

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	27	        FROM bud_ru_zay

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	28	       WHERE id = :new.z_id;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	29	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	30	      IF p_report_short = 1

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	31	      THEN

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	32	         UPDATE BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	33	            SET rep_accepted = 0, rep_failure = NULL, rep_lu = NULL

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	34	          WHERE z_id = :new.z_id AND id <> :new.id AND rep_accepted IS NOT NULL /*accept_order = 1*/

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	35	                                                                               ;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	36	      ELSE

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	37	         UPDATE BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	38	            SET rep_accepted = 0, rep_failure = NULL, rep_lu = NULL

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	39	          WHERE z_id = :new.z_id AND id <> :new.id;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	40	      END IF;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	41	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	42	      COMMIT;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	43	

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	44	      :new.rep_accepted := 0;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	45	      :new.rep_failure := NULL;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	46	      :new.rep_lu := NULL;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	47	   ELSE

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	48	      IF :new.rep_accepted = 0

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	49	      THEN

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	50	         :new.rep_failure := NULL;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	51	         :new.rep_lu := NULL;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	52	      END IF;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	53	   END IF;

TR_BUD_RU_ZAY_ACCEPT_UPD_REP	TRIGGER	54	END;
TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_ACCEPT_UPD1

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	2	   BEFORE UPDATE OF failure

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_ACCEPT_UPD1	TRIGGER	8	END;
TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ZAY_ACCEPT_UPD" 

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF accepted

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	8	END;

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	9	

TR_BUD_RU_ZAY_ACCEPT_UPD	TRIGGER	10	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_ZAY_ACCEPT_NEW

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	3	   ON PERSIK.BUD_RU_ZAY_ACCEPT

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	6	DECLARE

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	8	   v_woac     INTEGER;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	9	   v_tu       INTEGER;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	10	   doc_type   VARCHAR2 (255);

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	11	BEGIN

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	12	   :new.id := seq_all.NEXTVAL;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	13	   :NEW.created := SYSDATE;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	14	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	15	   DBMS_OUTPUT.put_line (:new.z_id || ' ' || :new.id || ' ' || :new.tn);

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	16	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	17	   IF :new.accepted IS NULL

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	18	   THEN

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	19	      :new.tn := Get_Vac_Repl (:new.tn, 'tma');

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	20	      :new.accepted := 0;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	21	      :new.rep_accepted := 0;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	22	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	23	      SELECT NVL (woac, 0), NVL (tu, 0)

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	24	        INTO v_woac, v_tu

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	25	        FROM bud_ru_st_ras

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	26	       WHERE id = (SELECT kat

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	27	                     FROM bud_ru_zay

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	28	                    WHERE id = :new.z_id);

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	29	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	30	      IF v_tu = 1

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	31	      THEN

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	32	         doc_type := 'цели на переговоры';

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	33	      ELSE

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	34	         doc_type :=

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	35	            'заявка на проведение активности';

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	36	      END IF;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	37	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	38	      IF v_woac = 0

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	39	      THEN

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	40	         FOR a IN (SELECT child

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	41	                     FROM assist

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	42	                    WHERE     parent = :new.tn

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	43	                          AND dpt_id = (SELECT dpt_id

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	44	                                          FROM user_list

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	45	                                         WHERE tn = (SELECT tn

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	46	                                                       FROM bud_ru_zay

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	47	                                                      WHERE id = :new.Z_ID))

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	48	                          AND accept = 1)

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	49	         LOOP

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	50	            DELETE FROM bud_ru_zay_accept

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	51	                  WHERE     Z_ID = :new.Z_ID

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	52	                        AND tn = Get_Vac_Repl (a.child, 'tma');

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	53	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	54	            COMMIT;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	55	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	56	            DBMS_OUTPUT.put_line (

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	57	                  'inserting child z_id '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	58	               || :new.z_id

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	59	               || ' tn '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	60	               || a.child

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	61	               || ' child '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	62	               || 1);

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	63	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	64	            INSERT INTO bud_ru_zay_accept (Z_ID, tn, child)

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	65	                 VALUES (:new.Z_ID, Get_Vac_Repl (a.child, 'tma'), 1);

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	66	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	67	            COMMIT;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	68	         END LOOP;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	69	      END IF;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	70	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	71	      SELECT NVL (MAX (accept_order), 0) + 1

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	72	        INTO :new.accept_order

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	73	        FROM bud_ru_zay_accept

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	74	       WHERE Z_ID = :new.Z_ID;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	75	

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	76	      IF :new.accept_order = 1

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	77	      THEN

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	78	         FOR a IN (SELECT bud_ru_zay.created,

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	79	                          u.fio,

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	80	                          u.pos_name,

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	81	                          u.department_name,

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	82	                          u.e_mail

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	83	                     FROM bud_ru_zay, user_list u

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	84	                    WHERE bud_ru_zay.id = :new.z_id AND u.tn = bud_ru_zay.tn)

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	85	         LOOP

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	86	            PR_SENDMAIL (

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	87	               a.e_mail,

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	88	                  'Подтверждение, '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	89	               || doc_type

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	90	               || ' №'

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	91	               || :new.Z_ID

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	92	               || ' от '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	93	               || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss'),

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	94	                  doc_type

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	95	               || ' №'

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	96	               || :new.Z_ID

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	97	               || ' от '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	98	               || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss')

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	99	               || ' ожидает вашего подтверждения'

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	100	               || '<br>ФИО инициатора: '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	101	               || a.fio

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	102	               || '<br>Должность инициатора: '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	103	               || a.pos_name

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	104	               || '<br>Подразделение инициатора: '

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	105	               || a.department_name);

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	106	         END LOOP;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	107	      END IF;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	108	   END IF;

TR_BUD_RU_ZAY_ACCEPT_NEW	TRIGGER	109	END;
TR_BUD_RU_ST_RAS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ST_RAS_UPD" 

TR_BUD_RU_ST_RAS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ST_RAS_UPD	TRIGGER	3	   ON bud_ru_st_ras

TR_BUD_RU_ST_RAS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ST_RAS_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ST_RAS_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ST_RAS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ST_RAS_UPD	TRIGGER	8	END;

TR_BUD_RU_ST_RAS_UPD	TRIGGER	9	

TR_BUD_RU_ST_RAS_UPD	TRIGGER	10	

TR_BUD_RU_ST_RAS_UPD	TRIGGER	11	

TR_BUD_RU_ST_RAS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ST_RAS_NEW" 

TR_BUD_RU_ST_RAS_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ST_RAS_NEW	TRIGGER	3	   ON bud_ru_st_ras

TR_BUD_RU_ST_RAS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ST_RAS_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ST_RAS_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_ST_RAS_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BUD_RU_ST_RAS_NEW	TRIGGER	8	   THEN

TR_BUD_RU_ST_RAS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_ST_RAS_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_ST_RAS_NEW	TRIGGER	11	END;

TR_BUD_RU_ST_RAS_NEW	TRIGGER	12	

TR_BUD_RU_ST_RAS_NEW	TRIGGER	13	

TR_BUD_RU_ST_RAS_NEW	TRIGGER	14	

TR_BUD_RU_ST_PRI_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ST_PRI_UPD" 

TR_BUD_RU_ST_PRI_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_ST_PRI_UPD	TRIGGER	3	   ON BUD_RU_ST_PRI

TR_BUD_RU_ST_PRI_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ST_PRI_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ST_PRI_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_ST_PRI_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_ST_PRI_UPD	TRIGGER	8	END;

TR_BUD_RU_ST_PRI_UPD	TRIGGER	9	

TR_BUD_RU_ST_PRI_UPD	TRIGGER	10	

TR_BUD_RU_ST_PRI_UPD	TRIGGER	11	

TR_BUD_RU_ST_PRI_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_ST_PRI_NEW" 

TR_BUD_RU_ST_PRI_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_ST_PRI_NEW	TRIGGER	3	   ON BUD_RU_ST_PRI

TR_BUD_RU_ST_PRI_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_ST_PRI_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_ST_PRI_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_ST_PRI_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BUD_RU_ST_PRI_NEW	TRIGGER	8	   THEN

TR_BUD_RU_ST_PRI_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_ST_PRI_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_ST_PRI_NEW	TRIGGER	11	END;

TR_BUD_RU_ST_PRI_NEW	TRIGGER	12	

TR_BUD_RU_ST_PRI_NEW	TRIGGER	13	

TR_BUD_RU_ST_PRI_NEW	TRIGGER	14	

TR_BUD_RU_FF_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_RU_FF_UPD

TR_BUD_RU_FF_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_FF_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_FF

TR_BUD_RU_FF_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_FF_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_FF_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_FF_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_FF_UPD	TRIGGER	8	

TR_BUD_RU_FF_UPD	TRIGGER	9	   IF :new.TYPE = 'number'

TR_BUD_RU_FF_UPD	TRIGGER	10	   THEN

TR_BUD_RU_FF_UPD	TRIGGER	11	      :new.class := 'number5';

TR_BUD_RU_FF_UPD	TRIGGER	12	   ELSE

TR_BUD_RU_FF_UPD	TRIGGER	13	      :new.class := :new.TYPE;

TR_BUD_RU_FF_UPD	TRIGGER	14	   END IF;

TR_BUD_RU_FF_UPD	TRIGGER	15	

TR_BUD_RU_FF_UPD	TRIGGER	16	   IF :new.TYPE <> 'list'

TR_BUD_RU_FF_UPD	TRIGGER	17	   THEN

TR_BUD_RU_FF_UPD	TRIGGER	18	      :new.subtype := NULL;

TR_BUD_RU_FF_UPD	TRIGGER	19	   END IF;

TR_BUD_RU_FF_UPD	TRIGGER	20	END;
TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_FF_SUBTYPES_UPD" 

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	3	   ON BUD_RU_FF_SUBTYPES

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	6	BEGIN

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	8	END;

TR_BUD_RU_FF_SUBTYPES_UPD	TRIGGER	9	

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_FF_SUBTYPES_NEW" 

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	3	   ON BUD_RU_FF_SUBTYPES

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	8	   THEN

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	11	END;

TR_BUD_RU_FF_SUBTYPES_NEW	TRIGGER	12	

TR_BUD_RU_FF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_FF_NEW" 

TR_BUD_RU_FF_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_FF_NEW	TRIGGER	3	   ON BUD_RU_FF

TR_BUD_RU_FF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_FF_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_FF_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_FF_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BUD_RU_FF_NEW	TRIGGER	8	   THEN

TR_BUD_RU_FF_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_FF_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_FF_NEW	TRIGGER	11	END;

TR_BUD_RU_FF_NEW	TRIGGER	12	

TR_BUD_RU_FF_NEW	TRIGGER	13	

TR_BUD_RU_FF_NEW	TRIGGER	14	

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_HEAD_U_T" 

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_traid_tn

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	3	   ON BUD_RU_CASH_OUT_HEAD

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	7	   IF :new.ok_traid_tn IS NOT NULL

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	8	   THEN

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	9	      SELECT fio

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	10	        INTO :NEW.ok_traid_fio

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	11	        FROM user_list

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	12	       WHERE tn = :new.ok_traid_tn;

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	13	

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	14	      :NEW.ok_traid_lu := SYSDATE;

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	15	   ELSE

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	16	      :NEW.ok_traid_lu := NULL;

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	17	      :NEW.ok_traid_fio := NULL;

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	18	   END IF;

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	19	END;

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	20	

TR_BUD_RU_CASH_OUT_HEAD_U_T	TRIGGER	21	

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_HEAD_U_DB" 

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_db_tn

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	3	   ON BUD_RU_CASH_OUT_HEAD

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	7	   IF :new.ok_db_tn IS NOT NULL

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	8	   THEN

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	9	      SELECT fio

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	10	        INTO :NEW.ok_db_fio

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	11	        FROM user_list

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	12	       WHERE tn = :new.ok_db_tn;

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	13	

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	14	      :NEW.ok_db_lu := SYSDATE;

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	15	   ELSE

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	16	      :NEW.ok_db_lu := NULL;

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	17	      :NEW.ok_db_fio := NULL;

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	18	   END IF;

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	19	END;

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	20	

TR_BUD_RU_CASH_OUT_HEAD_U_DB	TRIGGER	21	

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_HEAD_U" 

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	3	   ON BUD_RU_CASH_OUT_HEAD

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	8	END;

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	9	

TR_BUD_RU_CASH_OUT_HEAD_U	TRIGGER	10	

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_HEAD_NEW" 

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	3	   ON BUD_RU_CASH_OUT_HEAD

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	8	   THEN

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	11	END;

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	12	

TR_BUD_RU_CASH_OUT_HEAD_NEW	TRIGGER	13	

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_HEAD_C" 

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	3	   ON PERSIK.BUD_RU_CASH_out_HEAD

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	6	DECLARE

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	7	   c   INTEGER;

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	8	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	9	BEGIN

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	10	   SELECT COUNT (*)

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	11	     INTO c

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	12	     FROM bud_tn_fil

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	13	    WHERE tn = :new.db AND bud_id = :new.fil;

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	14	

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	15	   IF c = 0

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	16	   THEN

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	17	      INSERT INTO full_log (text, prg)

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	18	           VALUES (

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	19	                        'Связка ДБ '

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	20	                     || :new.db

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	21	                     || ' - филиал '

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	22	                     || :new.fil

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	23	                     || ' не найдена '

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	24	                     || TO_CHAR (:new.dt, 'dd.mm.yyyy'),

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	25	                     'bud');

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	26	

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	27	      COMMIT;

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	28	      RAISE_APPLICATION_ERROR (

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	29	         -20213,

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	30	         'Связка ДБ-филиал не найдена');

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	31	   END IF;

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	32	END;

TR_BUD_RU_CASH_OUT_HEAD_C	TRIGGER	33	

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_BODY_UPD" 

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_CASH_OUT_BODY

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	6	DECLARE

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	8	BEGIN

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	10	

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	11	   UPDATE BUD_RU_CASH_OUT_HEAD

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	12	      SET lu = :new.lu

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	13	    WHERE id = :new.head_id;

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	14	

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	15	   COMMIT;

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	16	END;

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	17	

TR_BUD_RU_CASH_OUT_BODY_UPD	TRIGGER	18	

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_OUT_BODY_NEW" 

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	3	   ON BUD_RU_CASH_OUT_BODY

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	8	   THEN

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	11	END;

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	12	

TR_BUD_RU_CASH_OUT_BODY_NEW	TRIGGER	13	

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_HEAD_U_T" 

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_traid_tn

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	3	   ON BUD_RU_cash_IN_HEAD

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	7	   IF :new.ok_traid_tn IS NOT NULL

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	8	   THEN

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	9	      SELECT fio

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	10	        INTO :NEW.ok_traid_fio

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	11	        FROM user_list

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	12	       WHERE tn = :new.ok_traid_tn;

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	13	

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	14	      :NEW.ok_traid_lu := SYSDATE;

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	15	   ELSE

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	16	      :NEW.ok_traid_lu := NULL;

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	17	      :NEW.ok_traid_fio := NULL;

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	18	   END IF;

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	19	END;

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	20	

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	21	

TR_BUD_RU_CASH_IN_HEAD_U_T	TRIGGER	22	

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_HEAD_U_F" 

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_fil

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	3	   ON PERSIK.BUD_RU_CASH_IN_HEAD

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	7	   IF NVL (:new.ok_fil, 0) = 1

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	8	   THEN

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	9	      --IF NVL (:old.ok_fil, 0) <> NVL (:new.ok_fil, 0)

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	10	      --THEN

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	11	         :new.ok_fil_lu := SYSDATE;

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	12	      --END IF;

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	13	   ELSE

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	14	      :NEW.ok_fil_lu := NULL;

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	15	      :NEW.ok_fil_text := NULL;

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	16	   END IF;

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	17	END;

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	18	

TR_BUD_RU_CASH_IN_HEAD_U_F	TRIGGER	19	

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_HEAD_U_DB" 

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_db_tn

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	3	   ON BUD_RU_cash_IN_HEAD

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	7	   IF :new.ok_db_tn IS NOT NULL

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	8	   THEN

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	9	      SELECT fio

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	10	        INTO :NEW.ok_db_fio

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	11	        FROM user_list

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	12	       WHERE tn = :new.ok_db_tn;

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	13	

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	14	      :NEW.ok_db_lu := SYSDATE;

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	15	   ELSE

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	16	      :NEW.ok_db_lu := NULL;

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	17	      :NEW.ok_db_fio := NULL;

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	18	   END IF;

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	19	END;

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	20	

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	21	

TR_BUD_RU_CASH_IN_HEAD_U_DB	TRIGGER	22	

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_HEAD_U" 

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	3	   ON PERSIK.BUD_RU_CASH_IN_HEAD

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	8	END;

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	9	

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	10	

TR_BUD_RU_CASH_IN_HEAD_U	TRIGGER	11	

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_HEAD_NEW" 

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	3	   ON BUD_RU_cash_IN_HEAD

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	8	   THEN

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	11	END;

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	12	

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	13	

TR_BUD_RU_CASH_IN_HEAD_NEW	TRIGGER	14	

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_HEAD_C" 

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	3	   ON PERSIK.BUD_RU_CASH_IN_HEAD

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	6	DECLARE

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	7	   c   INTEGER;

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	8	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	9	BEGIN

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	10	   SELECT COUNT (*)

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	11	     INTO c

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	12	     FROM bud_tn_fil

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	13	    WHERE tn = :new.db AND bud_id = :new.fil;

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	14	

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	15	   IF c = 0

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	16	   THEN

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	17	      INSERT INTO full_log (text, prg)

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	18	           VALUES (

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	19	                        'Связка ДБ '

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	20	                     || :new.db

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	21	                     || ' - филиал '

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	22	                     || :new.fil

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	23	                     || ' не найдена '

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	24	                     || TO_CHAR (:new.dt, 'dd.mm.yyyy'),

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	25	                     'bud');

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	26	

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	27	      COMMIT;

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	28	      RAISE_APPLICATION_ERROR (

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	29	         -20213,

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	30	         'Связка ДБ-филиал не найдена');

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	31	   END IF;

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	32	END;

TR_BUD_RU_CASH_IN_HEAD_C	TRIGGER	33	

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_BODY_UPD" 

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	3	   ON PERSIK.BUD_RU_CASH_IN_BODY

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	6	DECLARE

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	8	BEGIN

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	9	   :NEW.lu := SYSDATE;

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	10	

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	11	   UPDATE BUD_RU_CASH_IN_HEAD

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	12	      SET lu = :new.lu

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	13	    WHERE id = :new.head_id;

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	14	

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	15	   COMMIT;

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	16	END;

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	17	

TR_BUD_RU_CASH_IN_BODY_UPD	TRIGGER	18	

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_RU_CASH_IN_BODY_NEW" 

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	3	   ON BUD_RU_cash_IN_BODY

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	6	BEGIN

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	8	   THEN

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	10	   END IF;

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	11	END;

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	12	

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	13	

TR_BUD_RU_CASH_IN_BODY_NEW	TRIGGER	14	

TR_BUD_PAY_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_PAY_UPD" 

TR_BUD_PAY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_PAY_UPD	TRIGGER	3	   ON PERSIK.BUD_PAY    REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_PAY_UPD	TRIGGER	4	   FOR EACH ROW

TR_BUD_PAY_UPD	TRIGGER	5	BEGIN

TR_BUD_PAY_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_BUD_PAY_UPD	TRIGGER	7	END;

TR_BUD_PAY_UPD	TRIGGER	8	

TR_BUD_PAY_UPD	TRIGGER	9	

TR_BUD_PAY_UPD	TRIGGER	10	

TR_BUD_PAY_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_PAY_NEW" 

TR_BUD_PAY_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_PAY_NEW	TRIGGER	3	   ON PERSIK.BUD_PAY    REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_PAY_NEW	TRIGGER	4	   FOR EACH ROW

TR_BUD_PAY_NEW	TRIGGER	5	BEGIN

TR_BUD_PAY_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_BUD_PAY_NEW	TRIGGER	7	   THEN

TR_BUD_PAY_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_BUD_PAY_NEW	TRIGGER	9	   END IF;

TR_BUD_PAY_NEW	TRIGGER	10	END;

TR_BUD_PAY_NEW	TRIGGER	11	

TR_BUD_PAY_NEW	TRIGGER	12	

TR_BUD_PAY_NEW	TRIGGER	13	

TR_BUD_ND_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_ND_UPD" 

TR_BUD_ND_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_ND_UPD	TRIGGER	3	   ON bud_nd

TR_BUD_ND_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_ND_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_ND_UPD	TRIGGER	6	BEGIN

TR_BUD_ND_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_ND_UPD	TRIGGER	8	END;

TR_BUD_ND_UPD	TRIGGER	9	

TR_BUD_ND_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_ND_NEW" 

TR_BUD_ND_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_ND_NEW	TRIGGER	3	   ON bud_nd

TR_BUD_ND_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_ND_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_ND_NEW	TRIGGER	6	BEGIN

TR_BUD_ND_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BUD_ND_NEW	TRIGGER	8	   THEN

TR_BUD_ND_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_ND_NEW	TRIGGER	10	   END IF;

TR_BUD_ND_NEW	TRIGGER	11	END;

TR_BUD_ND_NEW	TRIGGER	12	

TR_BUD_INCOME_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_INCOME_NEW

TR_BUD_INCOME_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_INCOME_NEW	TRIGGER	3	   ON PERSIK.BUD_INCOME

TR_BUD_INCOME_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_INCOME_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_INCOME_NEW	TRIGGER	6	DECLARE

TR_BUD_INCOME_NEW	TRIGGER	7	   m   INTEGER;

TR_BUD_INCOME_NEW	TRIGGER	8	BEGIN

TR_BUD_INCOME_NEW	TRIGGER	9	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_BUD_INCOME_NEW	TRIGGER	10	END;
TR_BUD_FUNDS_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FUNDS_UPD1

TR_BUD_FUNDS_UPD1	TRIGGER	2	   BEFORE UPDATE OF norm

TR_BUD_FUNDS_UPD1	TRIGGER	3	   ON PERSIK.BUD_FUNDS

TR_BUD_FUNDS_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_UPD1	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_UPD1	TRIGGER	6	BEGIN

TR_BUD_FUNDS_UPD1	TRIGGER	7	   UPDATE bud_funds_norm

TR_BUD_FUNDS_UPD1	TRIGGER	8	      SET norm = :new.norm

TR_BUD_FUNDS_UPD1	TRIGGER	9	    WHERE fund = :new.id AND dt > TRUNC (SYSDATE, 'mm');

TR_BUD_FUNDS_UPD1	TRIGGER	10	END;
TR_BUD_FUNDS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_FUNDS_UPD" 

TR_BUD_FUNDS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FUNDS_UPD	TRIGGER	3	   ON PERSIK.BUD_FUNDS    REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_UPD	TRIGGER	4	   FOR EACH ROW

TR_BUD_FUNDS_UPD	TRIGGER	5	BEGIN

TR_BUD_FUNDS_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_BUD_FUNDS_UPD	TRIGGER	7	END;

TR_BUD_FUNDS_UPD	TRIGGER	8	

TR_BUD_FUNDS_UPD	TRIGGER	9	

TR_BUD_FUNDS_UPD	TRIGGER	10	

TR_BUD_FUNDS_NORM_LU	TRIGGER	1	TRIGGER tr_BUD_FUNDS_norm_lu

TR_BUD_FUNDS_NORM_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FUNDS_NORM_LU	TRIGGER	3	   ON BUD_FUNDS_norm

TR_BUD_FUNDS_NORM_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_NORM_LU	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_NORM_LU	TRIGGER	6	BEGIN

TR_BUD_FUNDS_NORM_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FUNDS_NORM_LU	TRIGGER	8	END;
TR_BUD_FUNDS_NEW_AFTER	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FUNDS_NEW_after

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	2	   AFTER INSERT

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	3	   ON PERSIK.BUD_FUNDS

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	6	BEGIN

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	7	   INSERT INTO bud_funds_norm (dt, fund, norm)

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	8	        SELECT c.data, :new.id, :new.norm

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	9	          FROM calendar c

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	10	         WHERE c.data = TRUNC (c.data, 'mm')

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	11	      ORDER BY c.data;

TR_BUD_FUNDS_NEW_AFTER	TRIGGER	12	END;
TR_BUD_FUNDS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FUNDS_NEW

TR_BUD_FUNDS_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_FUNDS_NEW	TRIGGER	3	   ON PERSIK.BUD_FUNDS

TR_BUD_FUNDS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_NEW	TRIGGER	6	BEGIN

TR_BUD_FUNDS_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BUD_FUNDS_NEW	TRIGGER	8	   THEN

TR_BUD_FUNDS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_FUNDS_NEW	TRIGGER	10	   END IF;

TR_BUD_FUNDS_NEW	TRIGGER	11	END;
TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FUNDS_LIMITS_F_LU_PV

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	2	   BEFORE INSERT OR UPDATE OF plan_val

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	3	   ON PERSIK.BUD_FUNDS_LIMITS_F

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	6	DECLARE

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	8	   delta   FLOAT;

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	9	BEGIN

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	10	   SELECT   SUM (accepted_plan_val)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	11	          - SUM (plan_val)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	12	          + NVL (:old.plan_val, 0)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	13	          - NVL (:new.plan_val, 0)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	14	     INTO delta

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	15	     FROM (  SELECT dbf.id,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	16	                    dbf.name,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	17	                    SUM (fd.plan_val) plan_val,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	18	                    accepted.plan_val accepted_plan_val

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	19	               FROM (  SELECT l.tn,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	20	                              b.plan,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	21	                              f.id,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	22	                              f.name

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	23	                         FROM (SELECT *

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	24	                                 FROM bud_funds_limits_b

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	25	                                WHERE dt = :new.dt AND dpt_id = :new.dpt_id) b,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	26	                              (SELECT DISTINCT tf.tn

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	27	                                 FROM bud_tn_fil tf, bud_fil f

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	28	                                WHERE tf.bud_id = f.id AND f.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	29	                               UNION

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	30	                               SELECT db

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	31	                                 FROM bud_funds_limits_b

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	32	                                WHERE dt = :new.dt AND dpt_id = :new.dpt_id) l,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	33	                              user_list u,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	34	                              bud_funds f

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	35	                        WHERE     b.db(+) = l.tn

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	36	                              AND l.tn = u.tn

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	37	                              AND NVL (u.is_kk, 0) = :new.kk

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	38	                              AND f.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	39	                              AND f.planned = 1

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	40	                     ORDER BY l.tn, f.id) dbf,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	41	                    (SELECT *

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	42	                       FROM bud_funds_limits_f

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	43	                      WHERE     dt = :new.dt

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	44	                            AND dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	45	                            AND kk = :new.kk) fd,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	46	                    (  SELECT z.tn, z.funds, SUM (z_fakt.val_number) fakt

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	47	                         FROM bud_ru_zay z,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	48	                              (SELECT z_id, val_number

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	49	                                 FROM bud_ru_zay_ff

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	50	                                WHERE ff_id IN (SELECT id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	51	                                                  FROM bud_ru_ff

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	52	                                                 WHERE var_name IN ('v3', 'v4')))

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	53	                              z_fakt,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	54	                              user_list u

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	55	                        WHERE     z.tn = u.tn

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	56	                              AND NVL (u.is_kk, 0) = :new.kk

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	57	                              AND u.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	58	                              AND TRUNC (z.dt_start, 'mm') = :new.dt

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	59	                              AND z.id = z_fakt.z_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	60	                              AND report_data IS NOT NULL

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	61	                              AND (SELECT accepted

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	62	                                     FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	63	                                    WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	64	                                          AND accept_order =

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	65	                                                 DECODE (

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	66	                                                    NVL (

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	67	                                                       (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	68	                                                          FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	69	                                                         WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	70	                                                               AND accepted = 2),

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	71	                                                       0),

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	72	                                                    0, (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	73	                                                          FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	74	                                                         WHERE z_id = z.id),

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	75	                                                    (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	76	                                                       FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	77	                                                      WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	78	                                                            AND accepted = 2))) =

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	79	                                     1

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	80	                     /*AND (SELECT rep_accepted

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	81	                                   FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	82	                                  WHERE     z_id = z.id AND INN_not_ReportMA (tn) = 0

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	83	                                        AND accept_order =

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	84	                                               DECODE (

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	85	                                                  NVL (

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	86	                                                     (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	87	                                                        FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	88	                                                       WHERE z_id = z.id AND rep_accepted = 2 AND INN_not_ReportMA (tn) = 0),

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	89	                                                   0),

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	90	                                                  0, (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	91	                                                        FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	92	                                                       WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	93	                                                             AND rep_accepted IS NOT NULL AND INN_not_ReportMA (tn) = 0),

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	94	                                                  (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	95	                                                     FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	96	                                                    WHERE z_id = z.id AND rep_accepted = 2 AND INN_not_ReportMA (tn) = 0))) =

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	97	                                  1*/

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	98	                     /*раскомменитровать,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	99	                     если все-таки нужно будет брать

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	100	                     согласованные отчеты, а не заявки*/

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	101	                     GROUP BY z.tn, z.funds) fakt,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	102	                    (SELECT *

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	103	                       FROM bud_funds_limits_ft ft, bud_funds_limits_h h

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	104	                      WHERE     ft.dt = :new.dt

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	105	                            AND ft.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	106	                            AND ft.kk = :new.kk

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	107	                            AND ft.dt = h.dt

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	108	                            AND ft.dpt_id = h.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	109	                            AND ft.kk = h.kk

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	110	                            AND h.ok_dpu = 1) accepted

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	111	              WHERE     fd.fund(+) = dbf.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	112	                    AND fakt.funds(+) = dbf.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	113	                    AND dbf.tn = fd.db(+)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	114	                    AND dbf.tn = fakt.tn(+)

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	115	                    AND accepted.fund(+) = dbf.id

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	116	                    AND dbf.id = :new.fund

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	117	           GROUP BY dbf.id, dbf.name, accepted.plan_val);

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	118	

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	119	   IF delta < 0

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	120	   THEN

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	121	      raise_application_error (

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	122	         -20000,

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	123	         'превышен лимит ' || TO_CHAR (delta));

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	124	   END IF;

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	125	

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	126	   COMMIT;

TR_BUD_FUNDS_LIMITS_F_LU_PV	TRIGGER	127	END;
TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FUNDS_LIMITS_F_LU_PLV

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	2	   BEFORE INSERT OR UPDATE OF planl_val

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	3	   ON PERSIK.BUD_FUNDS_LIMITS_F

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	6	DECLARE

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	8	   delta   FLOAT;

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	9	BEGIN

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	10	   SELECT   SUM (accepted_planl_val)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	11	          - SUM (planl_val)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	12	          + NVL (:old.planl_val, 0)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	13	          - NVL (:new.planl_val, 0)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	14	     INTO delta

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	15	     FROM (  SELECT dbf.id,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	16	                    dbf.name,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	17	                    SUM (fd.planl_val) planl_val,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	18	                    accepted.planl_val accepted_planl_val

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	19	               FROM (  SELECT l.tn,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	20	                              b.plan,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	21	                              f.id,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	22	                              f.name

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	23	                         FROM (SELECT *

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	24	                                 FROM bud_funds_limits_b

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	25	                                WHERE dt = :new.dt AND dpt_id = :new.dpt_id) b,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	26	                              (SELECT DISTINCT tf.tn

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	27	                                 FROM bud_tn_fil tf, bud_fil f

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	28	                                WHERE tf.bud_id = f.id AND f.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	29	                               UNION

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	30	                               SELECT db

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	31	                                 FROM bud_funds_limits_b

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	32	                                WHERE dt = :new.dt AND dpt_id = :new.dpt_id) l,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	33	                              user_list u,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	34	                              bud_funds f

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	35	                        WHERE     b.db(+) = l.tn

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	36	                              AND l.tn = u.tn

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	37	                              AND NVL (u.is_kk, 0) = :new.kk

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	38	                              AND f.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	39	                              AND f.planned = 1

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	40	                     ORDER BY l.tn, f.id) dbf,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	41	                    (SELECT *

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	42	                       FROM bud_funds_limits_f

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	43	                      WHERE     dt = :new.dt

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	44	                            AND dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	45	                            AND kk = :new.kk) fd,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	46	                    (  SELECT z.tn, z.funds, SUM (z_fakt.val_number) fakt

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	47	                         FROM bud_ru_zay z,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	48	                              (SELECT z_id, val_number

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	49	                                 FROM bud_ru_zay_ff

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	50	                                WHERE ff_id IN (SELECT id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	51	                                                  FROM bud_ru_ff

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	52	                                                 WHERE var_name IN ('v3', 'v4')))

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	53	                              z_fakt,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	54	                              user_list u

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	55	                        WHERE     z.tn = u.tn

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	56	                              AND NVL (u.is_kk, 0) = :new.kk

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	57	                              AND u.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	58	                              AND TRUNC (z.dt_start, 'mm') = :new.dt

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	59	                              AND z.id = z_fakt.z_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	60	                              AND report_data IS NOT NULL

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	61	                              AND (SELECT accepted

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	62	                                     FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	63	                                    WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	64	                                          AND accept_order =

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	65	                                                 DECODE (

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	66	                                                    NVL (

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	67	                                                       (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	68	                                                          FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	69	                                                         WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	70	                                                               AND accepted = 2),

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	71	                                                       0),

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	72	                                                    0, (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	73	                                                          FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	74	                                                         WHERE z_id = z.id),

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	75	                                                    (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	76	                                                       FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	77	                                                      WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	78	                                                            AND accepted = 2))) =

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	79	                                     1

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	80	                     /*AND (SELECT rep_accepted

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	81	                                   FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	82	                                  WHERE     z_id = z.id AND INN_not_ReportMA (tn) = 0

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	83	                                        AND accept_order =

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	84	                                               DECODE (

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	85	                                                  NVL (

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	86	                                                     (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	87	                                                        FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	88	                                                       WHERE z_id = z.id AND rep_accepted = 2 AND INN_not_ReportMA (tn) = 0),

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	89	                                                   0),

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	90	                                                  0, (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	91	                                                        FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	92	                                                       WHERE     z_id = z.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	93	                                                             AND rep_accepted IS NOT NULL AND INN_not_ReportMA (tn) = 0),

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	94	                                                  (SELECT MAX (accept_order)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	95	                                                     FROM bud_ru_zay_accept

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	96	                                                    WHERE z_id = z.id AND rep_accepted = 2 AND INN_not_ReportMA (tn) = 0))) =

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	97	                                  1*/

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	98	                     /*раскомменитровать,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	99	                     если все-таки нужно будет брать

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	100	                     согласованные отчеты, а не заявки*/

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	101	                     GROUP BY z.tn, z.funds) fakt,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	102	                    (SELECT *

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	103	                       FROM bud_funds_limits_ft ft, bud_funds_limits_h h

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	104	                      WHERE     ft.dt = :new.dt

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	105	                            AND ft.dpt_id = :new.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	106	                            AND ft.kk = :new.kk

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	107	                            AND ft.dt = h.dt

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	108	                            AND ft.dpt_id = h.dpt_id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	109	                            AND ft.kk = h.kk

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	110	                            AND h.ok_dpu = 1) accepted

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	111	              WHERE     fd.fund(+) = dbf.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	112	                    AND fakt.funds(+) = dbf.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	113	                    AND dbf.tn = fd.db(+)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	114	                    AND dbf.tn = fakt.tn(+)

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	115	                    AND accepted.fund(+) = dbf.id

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	116	                    AND dbf.id = :new.fund

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	117	           GROUP BY dbf.id, dbf.name, accepted.planl_val);

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	118	

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	119	   IF delta < 0

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	120	   THEN

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	121	      raise_application_error (

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	122	         -20000,

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	123	         'превышен лимит ' || TO_CHAR (delta));

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	124	   END IF;

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	125	

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	126	   COMMIT;

TR_BUD_FUNDS_LIMITS_F_LU_PLV	TRIGGER	127	END;
TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FUNDS_LIMITS_F_LU

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	3	   ON PERSIK.BUD_FUNDS_LIMITS_F

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	6	BEGIN

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FUNDS_LIMITS_F_LU	TRIGGER	8	END;
TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	1	TRIGGER tr_BUD_FUNDS_LIMITS_FT_lu

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	3	   ON BUD_FUNDS_LIMITS_FT

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	6	BEGIN

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FUNDS_LIMITS_FT_LU	TRIGGER	8	END;
TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	1	TRIGGER tr_BUD_FUNDS_LIMITS_b_lu

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	3	   ON BUD_FUNDS_LIMITS_b

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	5	   FOR EACH ROW

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	6	BEGIN

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FUNDS_LIMITS_B_LU	TRIGGER	8	END;
TR_BUD_FIL_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_UPD

TR_BUD_FIL_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FIL_UPD	TRIGGER	3	   ON PERSIK.BUD_FIL

TR_BUD_FIL_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_UPD	TRIGGER	6	BEGIN

TR_BUD_FIL_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FIL_UPD	TRIGGER	8	END;
TR_BUD_FIL_NEW1	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_NEW1

TR_BUD_FIL_NEW1	TRIGGER	2	   AFTER INSERT

TR_BUD_FIL_NEW1	TRIGGER	3	   ON PERSIK.bud_fil

TR_BUD_FIL_NEW1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_BUD_FIL_NEW1	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_NEW1	TRIGGER	6	BEGIN

TR_BUD_FIL_NEW1	TRIGGER	7	   FOR a IN (  SELECT *

TR_BUD_FIL_NEW1	TRIGGER	8	                 FROM bud_fil_contacts_dolgn

TR_BUD_FIL_NEW1	TRIGGER	9	                WHERE dpt_id = :new.dpt_id

TR_BUD_FIL_NEW1	TRIGGER	10	             ORDER BY sort)

TR_BUD_FIL_NEW1	TRIGGER	11	   LOOP

TR_BUD_FIL_NEW1	TRIGGER	12	      INSERT INTO bud_fil_contacts (fil, dolgn, required)

TR_BUD_FIL_NEW1	TRIGGER	13	           VALUES (:new.id, a.name, 1);

TR_BUD_FIL_NEW1	TRIGGER	14	   END LOOP;

TR_BUD_FIL_NEW1	TRIGGER	15	END;
TR_BUD_FIL_NEW	TRIGGER	1	TRIGGER TR_BUD_FIL_NEW

TR_BUD_FIL_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_FIL_NEW	TRIGGER	3	   ON BUD_FIL

TR_BUD_FIL_NEW	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_BUD_FIL_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_NEW	TRIGGER	6	DECLARE

TR_BUD_FIL_NEW	TRIGGER	7	   i   INTEGER;

TR_BUD_FIL_NEW	TRIGGER	8	BEGIN

TR_BUD_FIL_NEW	TRIGGER	9	   IF :new.id IS NULL

TR_BUD_FIL_NEW	TRIGGER	10	   THEN

TR_BUD_FIL_NEW	TRIGGER	11	      :new.id := seq_all.NEXTVAL;

TR_BUD_FIL_NEW	TRIGGER	12	   END IF;

TR_BUD_FIL_NEW	TRIGGER	13	

TR_BUD_FIL_NEW	TRIGGER	14	   i := SEQ_FIL.NEXTVAL;

TR_BUD_FIL_NEW	TRIGGER	15	   :new.login := 'fil' || SUBSTR ('0000' || TO_CHAR (i), -5, 5);

TR_BUD_FIL_NEW	TRIGGER	16	

TR_BUD_FIL_NEW	TRIGGER	17	   INSERT INTO spr_users (fio,

TR_BUD_FIL_NEW	TRIGGER	18	                          PASSWORD,

TR_BUD_FIL_NEW	TRIGGER	19	                          login,

TR_BUD_FIL_NEW	TRIGGER	20	                          access_ocenka,

TR_BUD_FIL_NEW	TRIGGER	21	                          tn)

TR_BUD_FIL_NEW	TRIGGER	22	        VALUES (:new.name,

TR_BUD_FIL_NEW	TRIGGER	23	                DBMS_RANDOM.STRING ('A', 4),

TR_BUD_FIL_NEW	TRIGGER	24	                :new.login,

TR_BUD_FIL_NEW	TRIGGER	25	                1,

TR_BUD_FIL_NEW	TRIGGER	26	                0);

TR_BUD_FIL_NEW	TRIGGER	27	END;
TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_DISCOUNT_HEAD_U_TN

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	2	   BEFORE INSERT OR UPDATE OF tn

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	3	   ON PERSIK.BUD_FIL_DISCOUNT_HEAD

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	6	BEGIN

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	7	   IF :new.tn IS NULL

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	8	   THEN

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	9	      :NEW.lu := NULL;

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	10	      :NEW.fio := NULL;

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	11	   ELSE

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	12	      :NEW.lu := SYSDATE;

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	13	   END IF;

TR_BUD_FIL_DISCOUNT_HEAD_U_TN	TRIGGER	14	END;
TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_DISCOUNT_HEAD_U_DTN

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	2	   BEFORE INSERT OR UPDATE OF dpu_tn

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	3	   ON PERSIK.BUD_FIL_DISCOUNT_HEAD

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	6	BEGIN

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	7	   IF :new.dpu_tn IS NULL

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	8	   THEN

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	9	      :NEW.dpu_lu := NULL;

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	10	      :NEW.dpu_fio := NULL;

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	11	   ELSE

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	12	      :NEW.dpu_lu := SYSDATE;

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	13	   END IF;

TR_BUD_FIL_DISCOUNT_HEAD_U_DTN	TRIGGER	14	END;
TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	1	TRIGGER TR_bud_fil_discount_body_UPD

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	3	   ON bud_fil_discount_body

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	6	BEGIN

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FIL_DISCOUNT_BODY_UPD	TRIGGER	8	END;
TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_CONTRACTS_UPD

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	3	   ON PERSIK.BUD_FIL_CONTRACTS

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	6	BEGIN

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FIL_CONTRACTS_UPD	TRIGGER	8	END;
TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_CONTRACTS_NEW

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	3	   ON PERSIK.BUD_FIL_CONTRACTS

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	6	BEGIN

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	8	   THEN

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	10	   END IF;

TR_BUD_FIL_CONTRACTS_NEW	TRIGGER	11	END;
TR_BUD_FIL_CONTACTS_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_CONTACTS_UPD

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	3	   ON PERSIK.BUD_FIL_CONTACTS

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	6	BEGIN

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FIL_CONTACTS_UPD	TRIGGER	8	END;
TR_BUD_FIL_CONTACTS_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_CONTACTS_NEW

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	3	   ON PERSIK.BUD_FIL_CONTACTS

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	6	BEGIN

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	8	   THEN

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	10	   END IF;

TR_BUD_FIL_CONTACTS_NEW	TRIGGER	11	END;
TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_CONTACTS_DOLGN_UPD

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	3	   ON PERSIK.BUD_FIL_CONTACTS_DOLGN

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	6	BEGIN

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BUD_FIL_CONTACTS_DOLGN_UPD	TRIGGER	8	END;
TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BUD_FIL_CONTACTS_DOLGN_NEW

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	3	   ON PERSIK.BUD_FIL_CONTACTS_DOLGN

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	5	   FOR EACH ROW

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	6	BEGIN

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	7	   IF :NEW.ID IS NULL

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	8	   THEN

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	10	   END IF;

TR_BUD_FIL_CONTACTS_DOLGN_NEW	TRIGGER	11	END;
TR_BUD_DOC_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_DOC_UPD" 

TR_BUD_DOC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BUD_DOC_UPD	TRIGGER	3	   ON PERSIK.BUD_DOC    REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_DOC_UPD	TRIGGER	4	   FOR EACH ROW

TR_BUD_DOC_UPD	TRIGGER	5	BEGIN

TR_BUD_DOC_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_BUD_DOC_UPD	TRIGGER	7	END;

TR_BUD_DOC_UPD	TRIGGER	8	

TR_BUD_DOC_UPD	TRIGGER	9	

TR_BUD_DOC_UPD	TRIGGER	10	

TR_BUD_DOC_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BUD_DOC_NEW" 

TR_BUD_DOC_NEW	TRIGGER	2	   BEFORE INSERT

TR_BUD_DOC_NEW	TRIGGER	3	   ON PERSIK.BUD_DOC    REFERENCING NEW AS NEW OLD AS OLD

TR_BUD_DOC_NEW	TRIGGER	4	   FOR EACH ROW

TR_BUD_DOC_NEW	TRIGGER	5	BEGIN

TR_BUD_DOC_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_BUD_DOC_NEW	TRIGGER	7	   THEN

TR_BUD_DOC_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_BUD_DOC_NEW	TRIGGER	9	   END IF;

TR_BUD_DOC_NEW	TRIGGER	10	END;

TR_BUD_DOC_NEW	TRIGGER	11	

TR_BUD_DOC_NEW	TRIGGER	12	

TR_BUD_DOC_NEW	TRIGGER	13	

TR_BOX_DPU_UPD	TRIGGER	1	TRIGGER PERSIK.TR_box_dpu_UPD

TR_BOX_DPU_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BOX_DPU_UPD	TRIGGER	3	   ON PERSIK.BOX_DPU

TR_BOX_DPU_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DPU_UPD	TRIGGER	5	   FOR EACH ROW

TR_BOX_DPU_UPD	TRIGGER	6	BEGIN

TR_BOX_DPU_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BOX_DPU_UPD	TRIGGER	8	END;
TR_BOX_DPU_NEW	TRIGGER	1	TRIGGER PERSIK.TR_box_dpu_NEW

TR_BOX_DPU_NEW	TRIGGER	2	   BEFORE INSERT

TR_BOX_DPU_NEW	TRIGGER	3	   ON PERSIK.BOX_DPU

TR_BOX_DPU_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DPU_NEW	TRIGGER	5	   FOR EACH ROW

TR_BOX_DPU_NEW	TRIGGER	6	BEGIN

TR_BOX_DPU_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_BOX_DPU_NEW	TRIGGER	8	   :NEW.created := SYSDATE;

TR_BOX_DPU_NEW	TRIGGER	9	END;
TR_BOX_DM_UPD	TRIGGER	1	TRIGGER PERSIK.TR_box_dm_UPD

TR_BOX_DM_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BOX_DM_UPD	TRIGGER	3	   ON PERSIK.box_dm

TR_BOX_DM_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DM_UPD	TRIGGER	5	   FOR EACH ROW

TR_BOX_DM_UPD	TRIGGER	6	BEGIN

TR_BOX_DM_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BOX_DM_UPD	TRIGGER	8	END;
TR_BOX_DM_NEW	TRIGGER	1	TRIGGER PERSIK.TR_box_dm_NEW

TR_BOX_DM_NEW	TRIGGER	2	   BEFORE INSERT

TR_BOX_DM_NEW	TRIGGER	3	   ON PERSIK.box_dm

TR_BOX_DM_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DM_NEW	TRIGGER	5	   FOR EACH ROW

TR_BOX_DM_NEW	TRIGGER	6	BEGIN

TR_BOX_DM_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_BOX_DM_NEW	TRIGGER	8	   :NEW.created := SYSDATE;

TR_BOX_DM_NEW	TRIGGER	9	END;
TR_BOX_DM_FILES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BOX_DM_FILES_UPD

TR_BOX_DM_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BOX_DM_FILES_UPD	TRIGGER	3	   ON PERSIK.BOX_DM_FILES

TR_BOX_DM_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DM_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_BOX_DM_FILES_UPD	TRIGGER	6	BEGIN

TR_BOX_DM_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BOX_DM_FILES_UPD	TRIGGER	8	END;
TR_BOX_DM_FILES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BOX_DM_FILES_NEW

TR_BOX_DM_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_BOX_DM_FILES_NEW	TRIGGER	3	   ON PERSIK.BOX_DM_FILES

TR_BOX_DM_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DM_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_BOX_DM_FILES_NEW	TRIGGER	6	BEGIN

TR_BOX_DM_FILES_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_BOX_DM_FILES_NEW	TRIGGER	8	END;
TR_BOX_DM_CHAT_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BOX_DM_CHAT_UPD

TR_BOX_DM_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BOX_DM_CHAT_UPD	TRIGGER	3	   ON PERSIK.BOX_DM_CHAT

TR_BOX_DM_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DM_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_BOX_DM_CHAT_UPD	TRIGGER	6	DECLARE

TR_BOX_DM_CHAT_UPD	TRIGGER	7	   v_creator   INTEGER;

TR_BOX_DM_CHAT_UPD	TRIGGER	8	   v_last_dp   INTEGER;

TR_BOX_DM_CHAT_UPD	TRIGGER	9	   subj        VARCHAR2 (4000);

TR_BOX_DM_CHAT_UPD	TRIGGER	10	   text        VARCHAR2 (4000);

TR_BOX_DM_CHAT_UPD	TRIGGER	11	   mail        VARCHAR2 (4000);

TR_BOX_DM_CHAT_UPD	TRIGGER	12	BEGIN

TR_BOX_DM_CHAT_UPD	TRIGGER	13	   :NEW.lu := SYSDATE;

TR_BOX_DM_CHAT_UPD	TRIGGER	14	

TR_BOX_DM_CHAT_UPD	TRIGGER	15	   SELECT creator

TR_BOX_DM_CHAT_UPD	TRIGGER	16	     INTO v_creator

TR_BOX_DM_CHAT_UPD	TRIGGER	17	     FROM box_dm

TR_BOX_DM_CHAT_UPD	TRIGGER	18	    WHERE id = :new.box_id;

TR_BOX_DM_CHAT_UPD	TRIGGER	19	

TR_BOX_DM_CHAT_UPD	TRIGGER	20	   IF v_creator = :new.tn

TR_BOX_DM_CHAT_UPD	TRIGGER	21	   THEN

TR_BOX_DM_CHAT_UPD	TRIGGER	22	      v_last_dp := 0;

TR_BOX_DM_CHAT_UPD	TRIGGER	23	   ELSE

TR_BOX_DM_CHAT_UPD	TRIGGER	24	      v_last_dp := 1;

TR_BOX_DM_CHAT_UPD	TRIGGER	25	   END IF;

TR_BOX_DM_CHAT_UPD	TRIGGER	26	

TR_BOX_DM_CHAT_UPD	TRIGGER	27	   UPDATE box_dm

TR_BOX_DM_CHAT_UPD	TRIGGER	28	      SET last_dp = v_last_dp

TR_BOX_DM_CHAT_UPD	TRIGGER	29	    WHERE id = :new.box_id;

TR_BOX_DM_CHAT_UPD	TRIGGER	30	

TR_BOX_DM_CHAT_UPD	TRIGGER	31	   IF v_last_dp = 1

TR_BOX_DM_CHAT_UPD	TRIGGER	32	   THEN

TR_BOX_DM_CHAT_UPD	TRIGGER	33	      subj := 'Ответ на сообщение координатору';

TR_BOX_DM_CHAT_UPD	TRIGGER	34	      text := :new.text;

TR_BOX_DM_CHAT_UPD	TRIGGER	35	

TR_BOX_DM_CHAT_UPD	TRIGGER	36	      SELECT e_mail

TR_BOX_DM_CHAT_UPD	TRIGGER	37	        INTO mail

TR_BOX_DM_CHAT_UPD	TRIGGER	38	        FROM user_list

TR_BOX_DM_CHAT_UPD	TRIGGER	39	       WHERE tn = v_creator;

TR_BOX_DM_CHAT_UPD	TRIGGER	40	

TR_BOX_DM_CHAT_UPD	TRIGGER	41	      pr_sendmail (mail, subj, text);

TR_BOX_DM_CHAT_UPD	TRIGGER	42	   END IF;

TR_BOX_DM_CHAT_UPD	TRIGGER	43	END;
TR_BOX_DM_CHAT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_BOX_DM_CHAT_NEW

TR_BOX_DM_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_BOX_DM_CHAT_NEW	TRIGGER	3	   ON PERSIK.BOX_DM_CHAT

TR_BOX_DM_CHAT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_DM_CHAT_NEW	TRIGGER	5	   FOR EACH ROW

TR_BOX_DM_CHAT_NEW	TRIGGER	6	BEGIN

TR_BOX_DM_CHAT_NEW	TRIGGER	7	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_BOX_DM_CHAT_NEW	TRIGGER	8	END;
TR_BOX_CHAT_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BOX_CHAT_UPD

TR_BOX_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BOX_CHAT_UPD	TRIGGER	3	   ON PERSIK.BOX_DPU_CHAT

TR_BOX_CHAT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_CHAT_UPD	TRIGGER	5	   FOR EACH ROW

TR_BOX_CHAT_UPD	TRIGGER	6	DECLARE

TR_BOX_CHAT_UPD	TRIGGER	7	   v_creator   INTEGER;

TR_BOX_CHAT_UPD	TRIGGER	8	   v_last_dp   INTEGER;

TR_BOX_CHAT_UPD	TRIGGER	9	   subj        VARCHAR2 (4000);

TR_BOX_CHAT_UPD	TRIGGER	10	   text        VARCHAR2 (4000);

TR_BOX_CHAT_UPD	TRIGGER	11	   mail        VARCHAR2 (4000);

TR_BOX_CHAT_UPD	TRIGGER	12	BEGIN

TR_BOX_CHAT_UPD	TRIGGER	13	   :NEW.lu := SYSDATE;

TR_BOX_CHAT_UPD	TRIGGER	14	

TR_BOX_CHAT_UPD	TRIGGER	15	   SELECT creator

TR_BOX_CHAT_UPD	TRIGGER	16	     INTO v_creator

TR_BOX_CHAT_UPD	TRIGGER	17	     FROM box_dpu

TR_BOX_CHAT_UPD	TRIGGER	18	    WHERE id = :new.box_id;

TR_BOX_CHAT_UPD	TRIGGER	19	

TR_BOX_CHAT_UPD	TRIGGER	20	   IF v_creator = :new.tn

TR_BOX_CHAT_UPD	TRIGGER	21	   THEN

TR_BOX_CHAT_UPD	TRIGGER	22	      v_last_dp := 0;

TR_BOX_CHAT_UPD	TRIGGER	23	   ELSE

TR_BOX_CHAT_UPD	TRIGGER	24	      v_last_dp := 1;

TR_BOX_CHAT_UPD	TRIGGER	25	   END IF;

TR_BOX_CHAT_UPD	TRIGGER	26	

TR_BOX_CHAT_UPD	TRIGGER	27	   UPDATE box_dpu

TR_BOX_CHAT_UPD	TRIGGER	28	      SET last_dp = v_last_dp

TR_BOX_CHAT_UPD	TRIGGER	29	    WHERE id = :new.box_id;

TR_BOX_CHAT_UPD	TRIGGER	30	

TR_BOX_CHAT_UPD	TRIGGER	31	   IF v_last_dp = 1

TR_BOX_CHAT_UPD	TRIGGER	32	   THEN

TR_BOX_CHAT_UPD	TRIGGER	33	      subj :=

TR_BOX_CHAT_UPD	TRIGGER	34	         'Ответ на запрос на горячую линию исполнительного директора';

TR_BOX_CHAT_UPD	TRIGGER	35	      text := :new.text;

TR_BOX_CHAT_UPD	TRIGGER	36	

TR_BOX_CHAT_UPD	TRIGGER	37	      SELECT e_mail

TR_BOX_CHAT_UPD	TRIGGER	38	        INTO mail

TR_BOX_CHAT_UPD	TRIGGER	39	        FROM user_list

TR_BOX_CHAT_UPD	TRIGGER	40	       WHERE tn = v_creator;

TR_BOX_CHAT_UPD	TRIGGER	41	

TR_BOX_CHAT_UPD	TRIGGER	42	      pr_sendmail (mail, subj, text);

TR_BOX_CHAT_UPD	TRIGGER	43	   END IF;

TR_BOX_CHAT_UPD	TRIGGER	44	END;
TR_BOX_CHAT_NEW	TRIGGER	1	TRIGGER 
TR_BOX_CHAT_NEW	TRIGGER	2	TR_box_CHAT_NEW

TR_BOX_CHAT_NEW	TRIGGER	3	   BEFORE INSERT

TR_BOX_CHAT_NEW	TRIGGER	4	   ON BOX_DPU_CHAT

TR_BOX_CHAT_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BOX_CHAT_NEW	TRIGGER	6	   FOR EACH ROW

TR_BOX_CHAT_NEW	TRIGGER	7	BEGIN

TR_BOX_CHAT_NEW	TRIGGER	8	   :NEW.ID := NVL (:NEW.ID, seq_all.NEXTVAL);

TR_BOX_CHAT_NEW	TRIGGER	9	END;
TR_BONUS_TYPES_UPDATE	TRIGGER	1	TRIGGER TR_bonus_types_UPDATE

TR_BONUS_TYPES_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BONUS_TYPES_UPDATE	TRIGGER	3	   ON bonus_types

TR_BONUS_TYPES_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_TYPES_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_BONUS_TYPES_UPDATE	TRIGGER	6	BEGIN

TR_BONUS_TYPES_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BONUS_TYPES_UPDATE	TRIGGER	8	END;
TR_BONUS_TYPES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_bonus_types_NEW

TR_BONUS_TYPES_NEW	TRIGGER	2	   BEFORE INSERT

TR_BONUS_TYPES_NEW	TRIGGER	3	   ON PERSIK.BONUS_TYPES

TR_BONUS_TYPES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_TYPES_NEW	TRIGGER	5	   FOR EACH ROW

TR_BONUS_TYPES_NEW	TRIGGER	6	BEGIN

TR_BONUS_TYPES_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_BONUS_TYPES_NEW	TRIGGER	8	

TR_BONUS_TYPES_NEW	TRIGGER	9	   IF :new.parent = 0

TR_BONUS_TYPES_NEW	TRIGGER	10	   THEN

TR_BONUS_TYPES_NEW	TRIGGER	11	      :new.koef := 1;

TR_BONUS_TYPES_NEW	TRIGGER	12	   END IF;

TR_BONUS_TYPES_NEW	TRIGGER	13	END;
TR_BONUS_TYPES_DEL	TRIGGER	1	TRIGGER TR_bonus_types_DEL

TR_BONUS_TYPES_DEL	TRIGGER	2	   BEFORE DELETE

TR_BONUS_TYPES_DEL	TRIGGER	3	   ON bonus_types

TR_BONUS_TYPES_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_BONUS_TYPES_DEL	TRIGGER	5	   FOR EACH ROW

TR_BONUS_TYPES_DEL	TRIGGER	6	DECLARE

TR_BONUS_TYPES_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BONUS_TYPES_DEL	TRIGGER	8	BEGIN

TR_BONUS_TYPES_DEL	TRIGGER	9	   DELETE FROM bonus_types

TR_BONUS_TYPES_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_BONUS_TYPES_DEL	TRIGGER	11	

TR_BONUS_TYPES_DEL	TRIGGER	12	   COMMIT;

TR_BONUS_TYPES_DEL	TRIGGER	13	END;
TR_BONUS_HEAD_UPD	TRIGGER	1	TRIGGER PERSIK.TR_bonus_head_UPD

TR_BONUS_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BONUS_HEAD_UPD	TRIGGER	3	   ON PERSIK.BONUS_HEAD

TR_BONUS_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

TR_BONUS_HEAD_UPD	TRIGGER	6	BEGIN

TR_BONUS_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BONUS_HEAD_UPD	TRIGGER	8	

TR_BONUS_HEAD_UPD	TRIGGER	9	   IF :new.bonus_subtype IS NOT NULL

TR_BONUS_HEAD_UPD	TRIGGER	10	   THEN

TR_BONUS_HEAD_UPD	TRIGGER	11	      SELECT parent

TR_BONUS_HEAD_UPD	TRIGGER	12	        INTO :new.bonus_type

TR_BONUS_HEAD_UPD	TRIGGER	13	        FROM bonus_types

TR_BONUS_HEAD_UPD	TRIGGER	14	       WHERE id = :new.bonus_subtype;

TR_BONUS_HEAD_UPD	TRIGGER	15	   ELSE

TR_BONUS_HEAD_UPD	TRIGGER	16	      :new.bonus_type := NULL;

TR_BONUS_HEAD_UPD	TRIGGER	17	   END IF;

TR_BONUS_HEAD_UPD	TRIGGER	18	END;
TR_BONUS_HEAD_NEW	TRIGGER	1	TRIGGER TR_bonus_head_NEW

TR_BONUS_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

TR_BONUS_HEAD_NEW	TRIGGER	3	   ON bonus_head

TR_BONUS_HEAD_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_HEAD_NEW	TRIGGER	5	   FOR EACH ROW

TR_BONUS_HEAD_NEW	TRIGGER	6	DECLARE

TR_BONUS_HEAD_NEW	TRIGGER	7	   c   INTEGER;

TR_BONUS_HEAD_NEW	TRIGGER	8	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_BONUS_HEAD_NEW	TRIGGER	9	BEGIN

TR_BONUS_HEAD_NEW	TRIGGER	10	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_BONUS_HEAD_NEW	TRIGGER	11	   :NEW.created := SYSDATE;

TR_BONUS_HEAD_NEW	TRIGGER	12	END;
TR_BONUS_FILES_UPD	TRIGGER	1	TRIGGER TR_bonus_FILES_UPD

TR_BONUS_FILES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BONUS_FILES_UPD	TRIGGER	3	   ON bonus_FILES

TR_BONUS_FILES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_FILES_UPD	TRIGGER	5	   FOR EACH ROW

TR_BONUS_FILES_UPD	TRIGGER	6	BEGIN

TR_BONUS_FILES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BONUS_FILES_UPD	TRIGGER	8	END;
TR_BONUS_FILES_NEW	TRIGGER	1	TRIGGER TR_bonus_FILES_NEW

TR_BONUS_FILES_NEW	TRIGGER	2	   BEFORE INSERT

TR_BONUS_FILES_NEW	TRIGGER	3	   ON bonus_FILES

TR_BONUS_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_FILES_NEW	TRIGGER	5	   FOR EACH ROW

TR_BONUS_FILES_NEW	TRIGGER	6	BEGIN

TR_BONUS_FILES_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_BONUS_FILES_NEW	TRIGGER	8	END;
TR_BONUS_BODY_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_BONUS_BODY_UPD1

TR_BONUS_BODY_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF cur_id

TR_BONUS_BODY_UPD1	TRIGGER	3	   ON PERSIK.BONUS_BODY

TR_BONUS_BODY_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_BODY_UPD1	TRIGGER	5	   FOR EACH ROW

TR_BONUS_BODY_UPD1	TRIGGER	6	BEGIN

TR_BONUS_BODY_UPD1	TRIGGER	7	   SELECT name

TR_BONUS_BODY_UPD1	TRIGGER	8	     INTO :new.cur_name

TR_BONUS_BODY_UPD1	TRIGGER	9	     FROM currencies

TR_BONUS_BODY_UPD1	TRIGGER	10	    WHERE id = :new.cur_id;

TR_BONUS_BODY_UPD1	TRIGGER	11	END;
TR_BONUS_BODY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_BONUS_BODY_UPD

TR_BONUS_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BONUS_BODY_UPD	TRIGGER	3	   ON PERSIK.BONUS_BODY

TR_BONUS_BODY_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_BODY_UPD	TRIGGER	5	   FOR EACH ROW

TR_BONUS_BODY_UPD	TRIGGER	6	BEGIN

TR_BONUS_BODY_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BONUS_BODY_UPD	TRIGGER	8	

TR_BONUS_BODY_UPD	TRIGGER	9	   IF :new.tn IS NOT NULL OR :new.h_eta IS NOT NULL

TR_BONUS_BODY_UPD	TRIGGER	10	   THEN

TR_BONUS_BODY_UPD	TRIGGER	11	      BEGIN

TR_BONUS_BODY_UPD	TRIGGER	12	         SELECT fio,

TR_BONUS_BODY_UPD	TRIGGER	13	                pos_name,

TR_BONUS_BODY_UPD	TRIGGER	14	                region_name,

TR_BONUS_BODY_UPD	TRIGGER	15	                department_name,

TR_BONUS_BODY_UPD	TRIGGER	16	                tab_num

TR_BONUS_BODY_UPD	TRIGGER	17	           INTO :new.fio,

TR_BONUS_BODY_UPD	TRIGGER	18	                :new.pos_name,

TR_BONUS_BODY_UPD	TRIGGER	19	                :new.region,

TR_BONUS_BODY_UPD	TRIGGER	20	                :new.department,

TR_BONUS_BODY_UPD	TRIGGER	21	                :new.tab_num

TR_BONUS_BODY_UPD	TRIGGER	22	           FROM user_list

TR_BONUS_BODY_UPD	TRIGGER	23	          WHERE (   (    h_eta = :new.h_eta

TR_BONUS_BODY_UPD	TRIGGER	24	                     AND dpt_id = (SELECT dpt_id

TR_BONUS_BODY_UPD	TRIGGER	25	                                     FROM bonus_head

TR_BONUS_BODY_UPD	TRIGGER	26	                                    WHERE id = :new.bonus_id))

TR_BONUS_BODY_UPD	TRIGGER	27	                 OR tn = :new.tn);

TR_BONUS_BODY_UPD	TRIGGER	28	

TR_BONUS_BODY_UPD	TRIGGER	29	         SELECT tn, fio

TR_BONUS_BODY_UPD	TRIGGER	30	           INTO :new.chief_tn, :new.chief_fio

TR_BONUS_BODY_UPD	TRIGGER	31	           FROM user_list

TR_BONUS_BODY_UPD	TRIGGER	32	          WHERE tn IN

TR_BONUS_BODY_UPD	TRIGGER	33	                   ( (SELECT parent

TR_BONUS_BODY_UPD	TRIGGER	34	                        FROM parents

TR_BONUS_BODY_UPD	TRIGGER	35	                       WHERE tn = :new.tn),

TR_BONUS_BODY_UPD	TRIGGER	36	                    (SELECT chief_tn

TR_BONUS_BODY_UPD	TRIGGER	37	                       FROM parents_eta

TR_BONUS_BODY_UPD	TRIGGER	38	                      WHERE     h_eta = :new.h_eta

TR_BONUS_BODY_UPD	TRIGGER	39	                            AND dpt_id = (SELECT dpt_id

TR_BONUS_BODY_UPD	TRIGGER	40	                                            FROM bonus_head

TR_BONUS_BODY_UPD	TRIGGER	41	                                           WHERE id = :new.bonus_id)));

TR_BONUS_BODY_UPD	TRIGGER	42	      EXCEPTION

TR_BONUS_BODY_UPD	TRIGGER	43	         WHEN OTHERS

TR_BONUS_BODY_UPD	TRIGGER	44	         THEN

TR_BONUS_BODY_UPD	TRIGGER	45	            NULL;

TR_BONUS_BODY_UPD	TRIGGER	46	      END;

TR_BONUS_BODY_UPD	TRIGGER	47	   END IF;

TR_BONUS_BODY_UPD	TRIGGER	48	END;
TR_BONUS_BODY_NEW	TRIGGER	1	TRIGGER TR_bonus_body_NEW

TR_BONUS_BODY_NEW	TRIGGER	2	   BEFORE INSERT

TR_BONUS_BODY_NEW	TRIGGER	3	   ON bonus_body

TR_BONUS_BODY_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BONUS_BODY_NEW	TRIGGER	5	   FOR EACH ROW

TR_BONUS_BODY_NEW	TRIGGER	6	BEGIN

TR_BONUS_BODY_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_BONUS_BODY_NEW	TRIGGER	8	END;
TR_BEG_VISIT_TO_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_TO_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_TO_UA_UPD" 

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	4	   ON BEG_VISIT_TO

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	9	END;

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	10	

TR_BEG_VISIT_TO_UA_UPD	TRIGGER	11	
TR_BEG_VISIT_TO_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_TO_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_TO_UA_NEW" 

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	4	   ON BEG_VISIT_TO

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	9	   THEN

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	12	END;

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	13	

TR_BEG_VISIT_TO_UA_NEW	TRIGGER	14	
TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_TO_F_UA_UPD" 

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	4	   ON BEG_VISIT_TO_F

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	9	END;

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	10	

TR_BEG_VISIT_TO_F_UA_UPD	TRIGGER	11	
TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_TO_F_UA_NEW" 

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	4	   ON BEG_VISIT_TO_F

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	9	   THEN

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	12	END;

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	13	

TR_BEG_VISIT_TO_F_UA_NEW	TRIGGER	14	
TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_SKU_UA_UPD" 

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	4	   ON BEG_VISIT_SKU

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	9	END;

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	10	

TR_BEG_VISIT_SKU_UA_UPD	TRIGGER	11	
TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_SKU_UA_NEW" 

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	4	   ON BEG_VISIT_SKU

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	9	   THEN

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	12	END;

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	13	

TR_BEG_VISIT_SKU_UA_NEW	TRIGGER	14	
TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_HEAD_UA_UPD" 

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	4	   ON BEG_VISIT_HEAD

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	9	END;

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	10	

TR_BEG_VISIT_HEAD_UA_UPD	TRIGGER	11	
TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_HEAD_UA_NEW" 

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	4	   ON BEG_VISIT_HEAD

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	9	   THEN

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	12	END;

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	13	

TR_BEG_VISIT_HEAD_UA_NEW	TRIGGER	14	
TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_GRUP_UA_UPD" 

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	4	   ON BEG_VISIT_GRUP

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	9	END;

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	10	

TR_BEG_VISIT_GRUP_UA_UPD	TRIGGER	11	
TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_VISIT_GRUP_UA_NEW" 

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	4	   ON BEG_VISIT_GRUP

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	9	   THEN

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	12	END;

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	13	

TR_BEG_VISIT_GRUP_UA_NEW	TRIGGER	14	
TR_BEG_TO_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BEG_TO_UPD" 

TR_BEG_TO_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BEG_TO_UPD	TRIGGER	3	   ON beg_to

TR_BEG_TO_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_TO_UPD	TRIGGER	5	   FOR EACH ROW

TR_BEG_TO_UPD	TRIGGER	6	BEGIN

TR_BEG_TO_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BEG_TO_UPD	TRIGGER	8	END;

TR_BEG_TO_UPD	TRIGGER	9	

TR_BEG_TO_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BEG_TO_NEW" 

TR_BEG_TO_NEW	TRIGGER	2	   BEFORE INSERT

TR_BEG_TO_NEW	TRIGGER	3	   ON beg_to

TR_BEG_TO_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_TO_NEW	TRIGGER	5	   FOR EACH ROW

TR_BEG_TO_NEW	TRIGGER	6	BEGIN

TR_BEG_TO_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BEG_TO_NEW	TRIGGER	8	   THEN

TR_BEG_TO_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BEG_TO_NEW	TRIGGER	10	   END IF;

TR_BEG_TO_NEW	TRIGGER	11	END;

TR_BEG_TO_NEW	TRIGGER	12	

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_ROUTES_HEAD_UA_UPD" 

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	4	   ON BEG_ROUTES_HEAD

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	9	END;

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	10	

TR_BEG_ROUTES_HEAD_UA_UPD	TRIGGER	11	
TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_ROUTES_HEAD_UA_NEW" 

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	4	   ON BEG_ROUTES_HEAD

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	9	   THEN

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	12	END;

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	13	

TR_BEG_ROUTES_HEAD_UA_NEW	TRIGGER	14	
TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	1	TRIGGER 
TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	2	"PERSIK"."TR_BEG_ROUTES_BODY_UA_UPD" 

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	4	   ON BEG_ROUTES_BODY

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	6	   FOR EACH ROW

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	7	BEGIN

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	8	   :NEW.lu := SYSDATE;

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	9	END;

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	10	

TR_BEG_ROUTES_BODY_UA_UPD	TRIGGER	11	
TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	1	TRIGGER 
TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	2	"PERSIK"."TR_BEG_ROUTES_BODY_UA_NEW" 

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	3	   BEFORE INSERT

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	4	   ON BEG_ROUTES_BODY

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	5	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	6	   FOR EACH ROW

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	7	BEGIN

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	8	   IF :new.id IS NULL

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	9	   THEN

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	10	      :new.id := seq_all.NEXTVAL;

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	11	   END IF;

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	12	END;

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	13	

TR_BEG_ROUTES_BODY_UA_NEW	TRIGGER	14	
TR_BEG_FF_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BEG_FF_UPD" 

TR_BEG_FF_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BEG_FF_UPD	TRIGGER	3	   ON BEG_FF

TR_BEG_FF_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_FF_UPD	TRIGGER	5	   FOR EACH ROW

TR_BEG_FF_UPD	TRIGGER	6	BEGIN

TR_BEG_FF_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BEG_FF_UPD	TRIGGER	8	END;

TR_BEG_FF_UPD	TRIGGER	9	

TR_BEG_FF_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BEG_FF_NEW" 

TR_BEG_FF_NEW	TRIGGER	2	   BEFORE INSERT

TR_BEG_FF_NEW	TRIGGER	3	   ON BEG_FF

TR_BEG_FF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BEG_FF_NEW	TRIGGER	5	   FOR EACH ROW

TR_BEG_FF_NEW	TRIGGER	6	BEGIN

TR_BEG_FF_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_BEG_FF_NEW	TRIGGER	8	   THEN

TR_BEG_FF_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_BEG_FF_NEW	TRIGGER	10	   END IF;

TR_BEG_FF_NEW	TRIGGER	11	END;

TR_BEG_FF_NEW	TRIGGER	12	

TR_BANKS_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_BANKS_UPD" 

TR_BANKS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_BANKS_UPD	TRIGGER	3	   ON persik.banks

TR_BANKS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BANKS_UPD	TRIGGER	5	   FOR EACH ROW

TR_BANKS_UPD	TRIGGER	6	BEGIN

TR_BANKS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_BANKS_UPD	TRIGGER	8	END;

TR_BANKS_UPD	TRIGGER	9	

TR_BANKS_UPD	TRIGGER	10	

TR_BANKS_UPD	TRIGGER	11	

TR_BANKS_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_BANKS_NEW" 

TR_BANKS_NEW	TRIGGER	2	   BEFORE INSERT

TR_BANKS_NEW	TRIGGER	3	   ON persik.banks

TR_BANKS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_BANKS_NEW	TRIGGER	5	   FOR EACH ROW

TR_BANKS_NEW	TRIGGER	6	BEGIN

TR_BANKS_NEW	TRIGGER	7	   SELECT seq_all.NEXTVAL

TR_BANKS_NEW	TRIGGER	8	     INTO :NEW.ID

TR_BANKS_NEW	TRIGGER	9	     FROM DUAL;

TR_BANKS_NEW	TRIGGER	10	END;

TR_BANKS_NEW	TRIGGER	11	

TR_BANKS_NEW	TRIGGER	12	

TR_BANKS_NEW	TRIGGER	13	

TR_ADVANCE_TN_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ADVANCE_tn_UPD

TR_ADVANCE_TN_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ADVANCE_TN_UPD	TRIGGER	3	   ON PERSIK.ADVANCE_TN

TR_ADVANCE_TN_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ADVANCE_TN_UPD	TRIGGER	5	   FOR EACH ROW

TR_ADVANCE_TN_UPD	TRIGGER	6	BEGIN

TR_ADVANCE_TN_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ADVANCE_TN_UPD	TRIGGER	8	

TR_ADVANCE_TN_UPD	TRIGGER	9	   IF :new.cur_id IS NULL

TR_ADVANCE_TN_UPD	TRIGGER	10	   THEN

TR_ADVANCE_TN_UPD	TRIGGER	11	      SELECT cur_id

TR_ADVANCE_TN_UPD	TRIGGER	12	        INTO :new.cur_id

TR_ADVANCE_TN_UPD	TRIGGER	13	        FROM user_list

TR_ADVANCE_TN_UPD	TRIGGER	14	       WHERE tn = :new.tn;

TR_ADVANCE_TN_UPD	TRIGGER	15	   END IF;

TR_ADVANCE_TN_UPD	TRIGGER	16	END;
TR_ADVANCE_POS_UPD	TRIGGER	1	TRIGGER TR_advance_pos_UPD

TR_ADVANCE_POS_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ADVANCE_POS_UPD	TRIGGER	3	   ON advance_pos

TR_ADVANCE_POS_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ADVANCE_POS_UPD	TRIGGER	5	   FOR EACH ROW

TR_ADVANCE_POS_UPD	TRIGGER	6	BEGIN

TR_ADVANCE_POS_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ADVANCE_POS_UPD	TRIGGER	8	END;
TR_ADVANCE_OK_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_ADVANCE_OK_UPD1

TR_ADVANCE_OK_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_ndp

TR_ADVANCE_OK_UPD1	TRIGGER	3	   ON PERSIK.ADVANCE_OK

TR_ADVANCE_OK_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ADVANCE_OK_UPD1	TRIGGER	5	   FOR EACH ROW

TR_ADVANCE_OK_UPD1	TRIGGER	6	BEGIN

TR_ADVANCE_OK_UPD1	TRIGGER	7	   IF :NEW.ok_ndp = 1

TR_ADVANCE_OK_UPD1	TRIGGER	8	   THEN

TR_ADVANCE_OK_UPD1	TRIGGER	9	      :new.ok_ndp_lu := SYSDATE;

TR_ADVANCE_OK_UPD1	TRIGGER	10	   ELSE

TR_ADVANCE_OK_UPD1	TRIGGER	11	      :new.ok_ndp_lu := NULL;

TR_ADVANCE_OK_UPD1	TRIGGER	12	      :new.ok_ndp_fio := NULL;

TR_ADVANCE_OK_UPD1	TRIGGER	13	   END IF;

TR_ADVANCE_OK_UPD1	TRIGGER	14	END;
TR_ADVANCE_OK_UPD	TRIGGER	1	TRIGGER TR_ADVANCE_OK_UPD

TR_ADVANCE_OK_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_ADVANCE_OK_UPD	TRIGGER	3	   ON ADVANCE_OK

TR_ADVANCE_OK_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_ADVANCE_OK_UPD	TRIGGER	5	   FOR EACH ROW

TR_ADVANCE_OK_UPD	TRIGGER	6	BEGIN

TR_ADVANCE_OK_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_ADVANCE_OK_UPD	TRIGGER	8	END;
TR_AC_VALID_NO_UPD	TRIGGER	1	TRIGGER PERSIK.TR_AC_VALID_NO_UPD

TR_AC_VALID_NO_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF valid_no

TR_AC_VALID_NO_UPD	TRIGGER	3	   ON PERSIK.AC

TR_AC_VALID_NO_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_VALID_NO_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_VALID_NO_UPD	TRIGGER	6	DECLARE

TR_AC_VALID_NO_UPD	TRIGGER	7	   msg    VARCHAR2 (4000);

TR_AC_VALID_NO_UPD	TRIGGER	8	   subj   VARCHAR2 (4000);

TR_AC_VALID_NO_UPD	TRIGGER	9	BEGIN

TR_AC_VALID_NO_UPD	TRIGGER	10	   IF :new.valid_no = 1

TR_AC_VALID_NO_UPD	TRIGGER	11	   THEN

TR_AC_VALID_NO_UPD	TRIGGER	12	      :NEW.valid_lu := SYSDATE;

TR_AC_VALID_NO_UPD	TRIGGER	13	

TR_AC_VALID_NO_UPD	TRIGGER	14	      msg :=

TR_AC_VALID_NO_UPD	TRIGGER	15	            'Выставил статус «недействительный отчет по АЦ» - '

TR_AC_VALID_NO_UPD	TRIGGER	16	         || fn_getname (:new.valid_tn)

TR_AC_VALID_NO_UPD	TRIGGER	17	         || '<br>Дата выставления статуса: '

TR_AC_VALID_NO_UPD	TRIGGER	18	         || TO_CHAR (:new.valid_lu, 'dd/mm/yyyy hh24:mi:ss')

TR_AC_VALID_NO_UPD	TRIGGER	19	         || '<br>Причина выставления статуса:<br>'

TR_AC_VALID_NO_UPD	TRIGGER	20	         || :new.valid_text;

TR_AC_VALID_NO_UPD	TRIGGER	21	

TR_AC_VALID_NO_UPD	TRIGGER	22	      subj :=

TR_AC_VALID_NO_UPD	TRIGGER	23	            'отчет по АЦ №'

TR_AC_VALID_NO_UPD	TRIGGER	24	         || TO_CHAR (:new.id)

TR_AC_VALID_NO_UPD	TRIGGER	25	         || ' по теме: '

TR_AC_VALID_NO_UPD	TRIGGER	26	         || :new.head

TR_AC_VALID_NO_UPD	TRIGGER	27	         || ' от '

TR_AC_VALID_NO_UPD	TRIGGER	28	         || TO_CHAR (:new.created, 'dd/mm/yyyy')

TR_AC_VALID_NO_UPD	TRIGGER	29	         || ' признан недействительным';

TR_AC_VALID_NO_UPD	TRIGGER	30	

TR_AC_VALID_NO_UPD	TRIGGER	31	      FOR a IN (SELECT DISTINCT u.e_mail

TR_AC_VALID_NO_UPD	TRIGGER	32	                  FROM (SELECT tn

TR_AC_VALID_NO_UPD	TRIGGER	33	                          FROM ac_comm

TR_AC_VALID_NO_UPD	TRIGGER	34	                         WHERE ac_id = :new.id

TR_AC_VALID_NO_UPD	TRIGGER	35	                        UNION

TR_AC_VALID_NO_UPD	TRIGGER	36	                        SELECT tn

TR_AC_VALID_NO_UPD	TRIGGER	37	                          FROM ac_accept

TR_AC_VALID_NO_UPD	TRIGGER	38	                         WHERE ac_id = :new.id

TR_AC_VALID_NO_UPD	TRIGGER	39	                        UNION

TR_AC_VALID_NO_UPD	TRIGGER	40	                        SELECT :new.tn FROM DUAL) l,

TR_AC_VALID_NO_UPD	TRIGGER	41	                       user_list u

TR_AC_VALID_NO_UPD	TRIGGER	42	                 WHERE l.tn = u.tn AND e_mail IS NOT NULL)

TR_AC_VALID_NO_UPD	TRIGGER	43	      LOOP

TR_AC_VALID_NO_UPD	TRIGGER	44	         pr_sendmail (a.e_mail, subj, msg);

TR_AC_VALID_NO_UPD	TRIGGER	45	      END LOOP;

TR_AC_VALID_NO_UPD	TRIGGER	46	   ELSE

TR_AC_VALID_NO_UPD	TRIGGER	47	      :NEW.valid_lu := NULL;

TR_AC_VALID_NO_UPD	TRIGGER	48	      :NEW.valid_tn := NULL;

TR_AC_VALID_NO_UPD	TRIGGER	49	      :NEW.valid_text := NULL;

TR_AC_VALID_NO_UPD	TRIGGER	50	   END IF;

TR_AC_VALID_NO_UPD	TRIGGER	51	END;
TR_AC_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_UPD" 

TR_AC_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_UPD	TRIGGER	3	   ON ac

TR_AC_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_UPD	TRIGGER	6	BEGIN

TR_AC_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_UPD	TRIGGER	8	END;

TR_AC_UPD	TRIGGER	9	

TR_AC_TEST_UPD	TRIGGER	1	TRIGGER PERSIK.TR_AC_TEST_UPD

TR_AC_TEST_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_TEST_UPD	TRIGGER	3	   ON PERSIK.ac_test

TR_AC_TEST_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_TEST_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_TEST_UPD	TRIGGER	6	BEGIN

TR_AC_TEST_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_TEST_UPD	TRIGGER	8	END;
TR_AC_TEST_RES_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ac_TEST_RES_UPD 

TR_AC_TEST_RES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_TEST_RES_UPD	TRIGGER	3	   ON PERSIK.ac_TEST_RES

TR_AC_TEST_RES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_TEST_RES_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_TEST_RES_UPD	TRIGGER	6	BEGIN

TR_AC_TEST_RES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_TEST_RES_UPD	TRIGGER	8	END;
TR_AC_TEST_RES_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ac_TEST_RES_NEW 

TR_AC_TEST_RES_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_TEST_RES_NEW	TRIGGER	3	   ON PERSIK.ac_TEST_RES

TR_AC_TEST_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_TEST_RES_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_TEST_RES_NEW	TRIGGER	6	BEGIN

TR_AC_TEST_RES_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_AC_TEST_RES_NEW	TRIGGER	8	   THEN

TR_AC_TEST_RES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_AC_TEST_RES_NEW	TRIGGER	10	   END IF;

TR_AC_TEST_RES_NEW	TRIGGER	11	END;
TR_AC_TEST_NEW	TRIGGER	1	TRIGGER PERSIK.TR_AC_TEST_NEW

TR_AC_TEST_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_TEST_NEW	TRIGGER	3	   ON PERSIK.ac_test

TR_AC_TEST_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_TEST_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_TEST_NEW	TRIGGER	6	BEGIN

TR_AC_TEST_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_AC_TEST_NEW	TRIGGER	8	   THEN

TR_AC_TEST_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_AC_TEST_NEW	TRIGGER	10	   END IF;

TR_AC_TEST_NEW	TRIGGER	11	END;
TR_AC_TEST_HISTORY_UPD	TRIGGER	1	TRIGGER PERSIK.TR_ac_TEST_HISTORY_UPD 

TR_AC_TEST_HISTORY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_TEST_HISTORY_UPD	TRIGGER	3	   ON PERSIK.ac_TEST_HISTORY    REFERENCING NEW AS NEW OLD AS OLD

TR_AC_TEST_HISTORY_UPD	TRIGGER	4	   FOR EACH ROW

TR_AC_TEST_HISTORY_UPD	TRIGGER	5	BEGIN

TR_AC_TEST_HISTORY_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_AC_TEST_HISTORY_UPD	TRIGGER	7	END;
TR_AC_TEST_HISTORY_NEW	TRIGGER	1	TRIGGER PERSIK.TR_ac_TEST_HISTORY_NEW 

TR_AC_TEST_HISTORY_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_TEST_HISTORY_NEW	TRIGGER	3	   ON PERSIK.ac_TEST_HISTORY    REFERENCING NEW AS NEW OLD AS OLD

TR_AC_TEST_HISTORY_NEW	TRIGGER	4	   FOR EACH ROW

TR_AC_TEST_HISTORY_NEW	TRIGGER	5	BEGIN

TR_AC_TEST_HISTORY_NEW	TRIGGER	6	   IF :new.id IS NULL

TR_AC_TEST_HISTORY_NEW	TRIGGER	7	   THEN

TR_AC_TEST_HISTORY_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TR_AC_TEST_HISTORY_NEW	TRIGGER	9	   END IF;

TR_AC_TEST_HISTORY_NEW	TRIGGER	10	END;
TR_AC_TEST_DEL	TRIGGER	1	TRIGGER TR_ac_test_DEL

TR_AC_TEST_DEL	TRIGGER	2	   BEFORE DELETE

TR_AC_TEST_DEL	TRIGGER	3	   ON PERSIK.ac_test

TR_AC_TEST_DEL	TRIGGER	4	   REFERENCING NEW AS new OLD AS old

TR_AC_TEST_DEL	TRIGGER	5	   FOR EACH ROW

TR_AC_TEST_DEL	TRIGGER	6	DECLARE

TR_AC_TEST_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_TEST_DEL	TRIGGER	8	BEGIN

TR_AC_TEST_DEL	TRIGGER	9	   DELETE FROM ac_test

TR_AC_TEST_DEL	TRIGGER	10	         WHERE parent = :old.id;

TR_AC_TEST_DEL	TRIGGER	11	

TR_AC_TEST_DEL	TRIGGER	12	   COMMIT;

TR_AC_TEST_DEL	TRIGGER	13	END;
TR_AC_OK_ACCEPT_TN	TRIGGER	1	TRIGGER PERSIK.TR_AC_OK_ACCEPT_TN 

TR_AC_OK_ACCEPT_TN	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_accept_tn

TR_AC_OK_ACCEPT_TN	TRIGGER	3	   ON PERSIK.AC

TR_AC_OK_ACCEPT_TN	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_OK_ACCEPT_TN	TRIGGER	5	   FOR EACH ROW

TR_AC_OK_ACCEPT_TN	TRIGGER	6	DECLARE

TR_AC_OK_ACCEPT_TN	TRIGGER	7	   msg    VARCHAR2 (4000);

TR_AC_OK_ACCEPT_TN	TRIGGER	8	   subj   VARCHAR2 (4000);

TR_AC_OK_ACCEPT_TN	TRIGGER	9	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_OK_ACCEPT_TN	TRIGGER	10	BEGIN

TR_AC_OK_ACCEPT_TN	TRIGGER	11	   IF :new.ok_accept_tn IS NOT NULL

TR_AC_OK_ACCEPT_TN	TRIGGER	12	   THEN

TR_AC_OK_ACCEPT_TN	TRIGGER	13	      :NEW.ok_accept_lu := SYSDATE;

TR_AC_OK_ACCEPT_TN	TRIGGER	14	

TR_AC_OK_ACCEPT_TN	TRIGGER	15	      SELECT fio

TR_AC_OK_ACCEPT_TN	TRIGGER	16	        INTO :NEW.ok_accept_fio

TR_AC_OK_ACCEPT_TN	TRIGGER	17	        FROM user_list

TR_AC_OK_ACCEPT_TN	TRIGGER	18	       WHERE tn = :new.ok_accept_tn;

TR_AC_OK_ACCEPT_TN	TRIGGER	19	

TR_AC_OK_ACCEPT_TN	TRIGGER	20	      FOR a

TR_AC_OK_ACCEPT_TN	TRIGGER	21	         IN (SELECT u.fio creator,

TR_AC_OK_ACCEPT_TN	TRIGGER	22	                    u.pos_name creator_pos_name,

TR_AC_OK_ACCEPT_TN	TRIGGER	23	                    u.department_name creator_department_name,

TR_AC_OK_ACCEPT_TN	TRIGGER	24	                    u1.fio init,

TR_AC_OK_ACCEPT_TN	TRIGGER	25	                    u1.pos_name init_pos_name,

TR_AC_OK_ACCEPT_TN	TRIGGER	26	                    u1.department_name init_department_name,

TR_AC_OK_ACCEPT_TN	TRIGGER	27	                    u1.e_mail init_mail,

TR_AC_OK_ACCEPT_TN	TRIGGER	28	                    c.y

TR_AC_OK_ACCEPT_TN	TRIGGER	29	               FROM ac,

TR_AC_OK_ACCEPT_TN	TRIGGER	30	                    user_list u,

TR_AC_OK_ACCEPT_TN	TRIGGER	31	                    user_list u1,

TR_AC_OK_ACCEPT_TN	TRIGGER	32	                    calendar c

TR_AC_OK_ACCEPT_TN	TRIGGER	33	              WHERE     ac.id = :new.id

TR_AC_OK_ACCEPT_TN	TRIGGER	34	                    AND ac.tn = u.tn

TR_AC_OK_ACCEPT_TN	TRIGGER	35	                    AND ac.init_tn = u1.tn

TR_AC_OK_ACCEPT_TN	TRIGGER	36	                    AND ac.dt = c.data)

TR_AC_OK_ACCEPT_TN	TRIGGER	37	      LOOP

TR_AC_OK_ACCEPT_TN	TRIGGER	38	         subj :=

TR_AC_OK_ACCEPT_TN	TRIGGER	39	               'Проведение ассессмент-центра '

TR_AC_OK_ACCEPT_TN	TRIGGER	40	            || TO_CHAR (:new.dt, 'dd.mm.yyyy')

TR_AC_OK_ACCEPT_TN	TRIGGER	41	            || '';

TR_AC_OK_ACCEPT_TN	TRIGGER	42	

TR_AC_OK_ACCEPT_TN	TRIGGER	43	         msg :=

TR_AC_OK_ACCEPT_TN	TRIGGER	44	               'Здравствуйте.<p>'

TR_AC_OK_ACCEPT_TN	TRIGGER	45	            || TO_CHAR (:new.dt, 'dd.mm.yyyy')

TR_AC_OK_ACCEPT_TN	TRIGGER	46	            || ' был проведен ассессмент центр:<br>место проведения: '

TR_AC_OK_ACCEPT_TN	TRIGGER	47	            || :new.place

TR_AC_OK_ACCEPT_TN	TRIGGER	48	            || '<br>ФИО создателя: '

TR_AC_OK_ACCEPT_TN	TRIGGER	49	            || a.creator

TR_AC_OK_ACCEPT_TN	TRIGGER	50	            || '<br>Должность создателя: '

TR_AC_OK_ACCEPT_TN	TRIGGER	51	            || a.creator_pos_name

TR_AC_OK_ACCEPT_TN	TRIGGER	52	            || '<br>Подразделение создателя: '

TR_AC_OK_ACCEPT_TN	TRIGGER	53	            || a.creator_department_name

TR_AC_OK_ACCEPT_TN	TRIGGER	54	            || '<br>ФИО сотрудника, инициирующего проведение АЦ: '

TR_AC_OK_ACCEPT_TN	TRIGGER	55	            || a.init

TR_AC_OK_ACCEPT_TN	TRIGGER	56	            || '<br>Должность сотрудника, инициирующего проведение АЦ: '

TR_AC_OK_ACCEPT_TN	TRIGGER	57	            || a.init_pos_name

TR_AC_OK_ACCEPT_TN	TRIGGER	58	            || '<br>Подразделение сотрудника, инициирующего проведение АЦ: '

TR_AC_OK_ACCEPT_TN	TRIGGER	59	            || a.init_department_name

TR_AC_OK_ACCEPT_TN	TRIGGER	60	            || '<br>Вакантная позиция 1:'

TR_AC_OK_ACCEPT_TN	TRIGGER	61	            || :new.vac1

TR_AC_OK_ACCEPT_TN	TRIGGER	62	            || '<br>Вакантная позиция 2:'

TR_AC_OK_ACCEPT_TN	TRIGGER	63	            || :new.vac2

TR_AC_OK_ACCEPT_TN	TRIGGER	64	            || '<br>Вакантная позиция 3:'

TR_AC_OK_ACCEPT_TN	TRIGGER	65	            || :new.vac3

TR_AC_OK_ACCEPT_TN	TRIGGER	66	            || '</p>';

TR_AC_OK_ACCEPT_TN	TRIGGER	67	

TR_AC_OK_ACCEPT_TN	TRIGGER	68	         msg := msg || '<p>Принятые решения:</p>';

TR_AC_OK_ACCEPT_TN	TRIGGER	69	

TR_AC_OK_ACCEPT_TN	TRIGGER	70	

TR_AC_OK_ACCEPT_TN	TRIGGER	71	         FOR b IN (  SELECT m.*,

TR_AC_OK_ACCEPT_TN	TRIGGER	72	                            h.os_ac,

TR_AC_OK_ACCEPT_TN	TRIGGER	73	                            h.goal,

TR_AC_OK_ACCEPT_TN	TRIGGER	74	                            h.findings

TR_AC_OK_ACCEPT_TN	TRIGGER	75	                       FROM (SELECT i.id,

TR_AC_OK_ACCEPT_TN	TRIGGER	76	                                    u.fio,

TR_AC_OK_ACCEPT_TN	TRIGGER	77	                                    u.e_mail mail,

TR_AC_OK_ACCEPT_TN	TRIGGER	78	                                    i.memb_int_order sort,

TR_AC_OK_ACCEPT_TN	TRIGGER	79	                                    'int' ie,

TR_AC_OK_ACCEPT_TN	TRIGGER	80	                                    'внутренний' iet,

TR_AC_OK_ACCEPT_TN	TRIGGER	81	                                    i.ac_id,

TR_AC_OK_ACCEPT_TN	TRIGGER	82	                                    NULL resume

TR_AC_OK_ACCEPT_TN	TRIGGER	83	                               FROM ac_memb_int i, user_list u

TR_AC_OK_ACCEPT_TN	TRIGGER	84	                              WHERE i.ac_id = :new.id AND u.tn = i.tn

TR_AC_OK_ACCEPT_TN	TRIGGER	85	                             UNION

TR_AC_OK_ACCEPT_TN	TRIGGER	86	                             SELECT i.id,

TR_AC_OK_ACCEPT_TN	TRIGGER	87	                                    i.fam || ' ' || i.im || ' ' || i.otch fio,

TR_AC_OK_ACCEPT_TN	TRIGGER	88	                                    i.email mail,

TR_AC_OK_ACCEPT_TN	TRIGGER	89	                                    i.memb_ext_order sort,

TR_AC_OK_ACCEPT_TN	TRIGGER	90	                                    'ext' ie,

TR_AC_OK_ACCEPT_TN	TRIGGER	91	                                    'внешний' iet,

TR_AC_OK_ACCEPT_TN	TRIGGER	92	                                    i.ac_id,

TR_AC_OK_ACCEPT_TN	TRIGGER	93	                                    i.resume

TR_AC_OK_ACCEPT_TN	TRIGGER	94	                               FROM ac_memb_ext i

TR_AC_OK_ACCEPT_TN	TRIGGER	95	                              WHERE i.ac_id = :new.id) m,

TR_AC_OK_ACCEPT_TN	TRIGGER	96	                            os_ac_head h

TR_AC_OK_ACCEPT_TN	TRIGGER	97	                      WHERE     m.id = h.ac_memb_id

TR_AC_OK_ACCEPT_TN	TRIGGER	98	                            AND (SELECT DECODE (

TR_AC_OK_ACCEPT_TN	TRIGGER	99	                                           SUM (

TR_AC_OK_ACCEPT_TN	TRIGGER	100	                                              CASE

TR_AC_OK_ACCEPT_TN	TRIGGER	101	                                                 WHEN res_id IN

TR_AC_OK_ACCEPT_TN	TRIGGER	102	                                                         ( (SELECT id

TR_AC_OK_ACCEPT_TN	TRIGGER	103	                                                              FROM ac_golos_res

TR_AC_OK_ACCEPT_TN	TRIGGER	104	                                                             WHERE true_val = 1))

TR_AC_OK_ACCEPT_TN	TRIGGER	105	                                                 THEN

TR_AC_OK_ACCEPT_TN	TRIGGER	106	                                                    0

TR_AC_OK_ACCEPT_TN	TRIGGER	107	                                                 ELSE

TR_AC_OK_ACCEPT_TN	TRIGGER	108	                                                    1

TR_AC_OK_ACCEPT_TN	TRIGGER	109	                                              END),

TR_AC_OK_ACCEPT_TN	TRIGGER	110	                                           0, 1,

TR_AC_OK_ACCEPT_TN	TRIGGER	111	                                           0)

TR_AC_OK_ACCEPT_TN	TRIGGER	112	                                   FROM ac_golos

TR_AC_OK_ACCEPT_TN	TRIGGER	113	                                  WHERE ac_id = :new.id AND memb_id = m.id) = 1

TR_AC_OK_ACCEPT_TN	TRIGGER	114	                   ORDER BY m.fio)

TR_AC_OK_ACCEPT_TN	TRIGGER	115	         LOOP

TR_AC_OK_ACCEPT_TN	TRIGGER	116	            msg :=

TR_AC_OK_ACCEPT_TN	TRIGGER	117	                  msg

TR_AC_OK_ACCEPT_TN	TRIGGER	118	               /*только по сотрудникам, у которых итоговое панельное решение "Да"*/

TR_AC_OK_ACCEPT_TN	TRIGGER	119	               || '<p>'

TR_AC_OK_ACCEPT_TN	TRIGGER	120	               || b.fio

TR_AC_OK_ACCEPT_TN	TRIGGER	121	               || '<br>Решение оценочной комиссии:'

TR_AC_OK_ACCEPT_TN	TRIGGER	122	               || b.findings

TR_AC_OK_ACCEPT_TN	TRIGGER	123	               || '<br>ОС участнику АЦ:'

TR_AC_OK_ACCEPT_TN	TRIGGER	124	               || b.os_ac

TR_AC_OK_ACCEPT_TN	TRIGGER	125	               || '<br>Цель участника на ДЦ:'

TR_AC_OK_ACCEPT_TN	TRIGGER	126	               || b.goal

TR_AC_OK_ACCEPT_TN	TRIGGER	127	               || '<br>Ссылка на детализацию <a href="https://ps.avk.ua/?action=os_ac&y='

TR_AC_OK_ACCEPT_TN	TRIGGER	128	               || a.y

TR_AC_OK_ACCEPT_TN	TRIGGER	129	               || '&ac_id='

TR_AC_OK_ACCEPT_TN	TRIGGER	130	               || :new.id

TR_AC_OK_ACCEPT_TN	TRIGGER	131	               || '&memb_id='

TR_AC_OK_ACCEPT_TN	TRIGGER	132	               || b.id

TR_AC_OK_ACCEPT_TN	TRIGGER	133	               || '">ОС по участнику АЦ</a>'

TR_AC_OK_ACCEPT_TN	TRIGGER	134	               || '</p>';

TR_AC_OK_ACCEPT_TN	TRIGGER	135	         END LOOP;

TR_AC_OK_ACCEPT_TN	TRIGGER	136	      END LOOP;

TR_AC_OK_ACCEPT_TN	TRIGGER	137	

TR_AC_OK_ACCEPT_TN	TRIGGER	138	

TR_AC_OK_ACCEPT_TN	TRIGGER	139	      FOR a IN (SELECT val_string e_mail

TR_AC_OK_ACCEPT_TN	TRIGGER	140	                  FROM parameters

TR_AC_OK_ACCEPT_TN	TRIGGER	141	                 WHERE     dpt_id = (SELECT dpt_id

TR_AC_OK_ACCEPT_TN	TRIGGER	142	                                       FROM user_list

TR_AC_OK_ACCEPT_TN	TRIGGER	143	                                      WHERE tn = :new.init_tn)

TR_AC_OK_ACCEPT_TN	TRIGGER	144	                       AND param_name IN ('pers1', 'pers2')

TR_AC_OK_ACCEPT_TN	TRIGGER	145	                       AND val_string IS NOT NULL)

TR_AC_OK_ACCEPT_TN	TRIGGER	146	      LOOP

TR_AC_OK_ACCEPT_TN	TRIGGER	147	         pr_sendmail (a.e_mail, subj, msg);

TR_AC_OK_ACCEPT_TN	TRIGGER	148	      END LOOP;

TR_AC_OK_ACCEPT_TN	TRIGGER	149	   ELSE

TR_AC_OK_ACCEPT_TN	TRIGGER	150	      :NEW.ok_accept_lu := NULL;

TR_AC_OK_ACCEPT_TN	TRIGGER	151	      :NEW.ok_accept_fio := NULL;

TR_AC_OK_ACCEPT_TN	TRIGGER	152	   END IF;

TR_AC_OK_ACCEPT_TN	TRIGGER	153	END;
TR_AC_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_NEW" 

TR_AC_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_NEW	TRIGGER	3	   ON PERSIK.AC

TR_AC_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_NEW	TRIGGER	6	/*DECLARE

TR_AC_NEW	TRIGGER	7	   z   INTEGER;

TR_AC_NEW	TRIGGER	8	   PRAGMA AUTONOMOUS_TRANSACTION;*/

TR_AC_NEW	TRIGGER	9	BEGIN

TR_AC_NEW	TRIGGER	10	   IF :NEW.ID IS NULL

TR_AC_NEW	TRIGGER	11	   THEN

TR_AC_NEW	TRIGGER	12	      :NEW.ID := seq_all.NEXTVAL;

TR_AC_NEW	TRIGGER	13	   END IF;

TR_AC_NEW	TRIGGER	14	

TR_AC_NEW	TRIGGER	15	   :NEW.created := SYSDATE;

TR_AC_NEW	TRIGGER	16	

TR_AC_NEW	TRIGGER	17	  /* BEGIN

TR_AC_NEW	TRIGGER	18	      SELECT val_number

TR_AC_NEW	TRIGGER	19	        INTO z

TR_AC_NEW	TRIGGER	20	        FROM parameters

TR_AC_NEW	TRIGGER	21	       WHERE     param_name = 'vacation'

TR_AC_NEW	TRIGGER	22	             AND dpt_id = (SELECT dpt_id

TR_AC_NEW	TRIGGER	23	                             FROM user_list

TR_AC_NEW	TRIGGER	24	                            WHERE tn = :new.init_tn);

TR_AC_NEW	TRIGGER	25	   EXCEPTION

TR_AC_NEW	TRIGGER	26	      WHEN OTHERS

TR_AC_NEW	TRIGGER	27	      THEN

TR_AC_NEW	TRIGGER	28	         NULL;

TR_AC_NEW	TRIGGER	29	   END;

TR_AC_NEW	TRIGGER	30	

TR_AC_NEW	TRIGGER	31	   IF z IS NOT NULL

TR_AC_NEW	TRIGGER	32	   THEN

TR_AC_NEW	TRIGGER	33	      INSERT INTO ac_accept (ac_id, tn)

TR_AC_NEW	TRIGGER	34	           VALUES (:new.id, z);

TR_AC_NEW	TRIGGER	35	

TR_AC_NEW	TRIGGER	36	      COMMIT;

TR_AC_NEW	TRIGGER	37	   END IF;

TR_AC_NEW	TRIGGER	38	

TR_AC_NEW	TRIGGER	39	   INSERT INTO ac_accept (ac_id, tn)

TR_AC_NEW	TRIGGER	40	        VALUES (:new.id, 2923402273);

TR_AC_NEW	TRIGGER	41	

TR_AC_NEW	TRIGGER	42	   COMMIT;*/

TR_AC_NEW	TRIGGER	43	   :new.recipient := 2923402273;

TR_AC_NEW	TRIGGER	44	END;

TR_AC_NEW	TRIGGER	45	

TR_AC_MEMB_INT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_MEMB_INT_UPD" 

TR_AC_MEMB_INT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_MEMB_INT_UPD	TRIGGER	3	   ON AC_MEMB_INT

TR_AC_MEMB_INT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_UPD	TRIGGER	6	BEGIN

TR_AC_MEMB_INT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_MEMB_INT_UPD	TRIGGER	8	END;

TR_AC_MEMB_INT_UPD	TRIGGER	9	

TR_AC_MEMB_INT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_MEMB_INT_NEW" 

TR_AC_MEMB_INT_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_MEMB_INT_NEW	TRIGGER	3	   ON AC_MEMB_INT

TR_AC_MEMB_INT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_NEW	TRIGGER	6	DECLARE

TR_AC_MEMB_INT_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_INT_NEW	TRIGGER	8	BEGIN

TR_AC_MEMB_INT_NEW	TRIGGER	9	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_AC_MEMB_INT_NEW	TRIGGER	10	

TR_AC_MEMB_INT_NEW	TRIGGER	11	

TR_AC_MEMB_INT_NEW	TRIGGER	12	   SELECT NVL (MAX (MEMB_INT_order), 0) + 1

TR_AC_MEMB_INT_NEW	TRIGGER	13	     INTO :new.MEMB_INT_order

TR_AC_MEMB_INT_NEW	TRIGGER	14	     FROM ac_MEMB_INT

TR_AC_MEMB_INT_NEW	TRIGGER	15	    WHERE ac_id = :new.ac_id;

TR_AC_MEMB_INT_NEW	TRIGGER	16	END;

TR_AC_MEMB_INT_NEW	TRIGGER	17	

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_ac_memb_int_MATH_UPD2

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF math_test_ball

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	3	   ON PERSIK.ac_memb_int

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	6	BEGIN

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	7	   IF :new.math_test = 2

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	8	   THEN

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	9	      INSERT INTO ac_test_history (ac_id,

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	10	                                   test_id,

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	11	                                   memb_id,

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	12	                                   ball)

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	13	           VALUES (:new.ac_id,

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	14	                   :new.ac_test_math,

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	15	                   :new.id,

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	16	                   :new.math_test_ball);

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	17	   END IF;

TR_AC_MEMB_INT_MATH_UPD2	TRIGGER	18	END;
TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_ac_memb_int_MATH_UPD1

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF math_test

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	3	   ON PERSIK.ac_memb_int

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	6	DECLARE

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	8	BEGIN

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	9	   IF :new.math_test = 0

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	10	   THEN

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	11	      :NEW.math_test_lu := NULL;

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	12	   ELSE

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	13	      :NEW.math_test_lu := SYSDATE;

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	14	   END IF;

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	15	

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	16	   IF :new.math_test = 2

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	17	   THEN

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	18	      :NEW.math_test_count := NVL (:old.math_test_count, 0) + 1;

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	19	   END IF;

TR_AC_MEMB_INT_MATH_UPD1	TRIGGER	20	END;
TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_ac_memb_int_LOGIC_UPD2

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF logic_test_ball

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	3	   ON PERSIK.ac_memb_int

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	6	BEGIN

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	7	   IF :new.logic_test = 2

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	8	   THEN

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	9	      INSERT INTO ac_test_history (ac_id,

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	10	                                   test_id,

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	11	                                   memb_id,

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	12	                                   ball)

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	13	           VALUES (:new.ac_id,

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	14	                   :new.ac_test_logic,

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	15	                   :new.id,

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	16	                   :new.logic_test_ball);

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	17	   END IF;

TR_AC_MEMB_INT_LOGIC_UPD2	TRIGGER	18	END;
TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_ac_memb_int_LOGIC_UPD1

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF logic_test

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	3	   ON PERSIK.ac_memb_int

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	6	DECLARE

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	8	BEGIN

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	9	   IF :new.logic_test = 0

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	10	   THEN

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	11	      :NEW.logic_test_lu := NULL;

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	12	   ELSE

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	13	      :NEW.logic_test_lu := SYSDATE;

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	14	   END IF;

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	15	

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	16	   IF :new.logic_test = 2

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	17	   THEN

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	18	      :NEW.logic_test_count := NVL (:old.logic_test_count, 0) + 1;

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	19	   END IF;

TR_AC_MEMB_INT_LOGIC_UPD1	TRIGGER	20	END;
TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	1	TRIGGER PERSIK.TR_ac_memb_int_ADD_JOB_MATH

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	2	   BEFORE INSERT OR UPDATE OF math_test

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	3	   ON PERSIK.ac_memb_int

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	6	DECLARE

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	8	BEGIN

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	9	   IF :new.math_test = 1

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	10	   THEN

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	11	      --   add_job (48, 'BEGIN tr_test_off(' || :new.id || '); END;');

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	12	      NULL;

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	13	   END IF;

TR_AC_MEMB_INT_ADD_JOB_MATH	TRIGGER	14	END;
TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	1	TRIGGER PERSIK.TR_ac_memb_int_ADD_JOB_LOGIC

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	2	   BEFORE INSERT OR UPDATE OF logic_test

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	3	   ON PERSIK.ac_memb_int

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	6	DECLARE

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	8	BEGIN

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	9	   IF :new.logic_test = 1

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	10	   THEN

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	11	      --   add_job (48, 'BEGIN tr_test_off(' || :new.id || '); END;');

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	12	      NULL;

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	13	   END IF;

TR_AC_MEMB_INT_ADD_JOB_LOGIC	TRIGGER	14	END;
TR_AC_MEMB_EXT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_MEMB_EXT_UPD" 

TR_AC_MEMB_EXT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_MEMB_EXT_UPD	TRIGGER	3	   ON AC_MEMB_EXT

TR_AC_MEMB_EXT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_UPD	TRIGGER	6	BEGIN

TR_AC_MEMB_EXT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_MEMB_EXT_UPD	TRIGGER	8	END;

TR_AC_MEMB_EXT_UPD	TRIGGER	9	

TR_AC_MEMB_EXT_NEW	TRIGGER	1	TRIGGER TR_AC_MEMB_EXT_NEW

TR_AC_MEMB_EXT_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_MEMB_EXT_NEW	TRIGGER	3	   ON AC_MEMB_EXT

TR_AC_MEMB_EXT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_NEW	TRIGGER	6	DECLARE

TR_AC_MEMB_EXT_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_EXT_NEW	TRIGGER	8	   i        INTEGER;

TR_AC_MEMB_EXT_NEW	TRIGGER	9	   login_   VARCHAR (255);

TR_AC_MEMB_EXT_NEW	TRIGGER	10	BEGIN

TR_AC_MEMB_EXT_NEW	TRIGGER	11	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_AC_MEMB_EXT_NEW	TRIGGER	12	

TR_AC_MEMB_EXT_NEW	TRIGGER	13	   SELECT NVL (MAX (MEMB_EXT_order), 0) + 1

TR_AC_MEMB_EXT_NEW	TRIGGER	14	     INTO :new.MEMB_EXT_order

TR_AC_MEMB_EXT_NEW	TRIGGER	15	     FROM ac_MEMB_EXT

TR_AC_MEMB_EXT_NEW	TRIGGER	16	    WHERE ac_id = :new.ac_id;

TR_AC_MEMB_EXT_NEW	TRIGGER	17	

TR_AC_MEMB_EXT_NEW	TRIGGER	18	   i := seq_ac.NEXTVAL;

TR_AC_MEMB_EXT_NEW	TRIGGER	19	   login_ := 'ac' || SUBSTR ('00000' || TO_CHAR (i), -5, 5);

TR_AC_MEMB_EXT_NEW	TRIGGER	20	   :NEW.login := login_;

TR_AC_MEMB_EXT_NEW	TRIGGER	21	

TR_AC_MEMB_EXT_NEW	TRIGGER	22	   INSERT INTO spr_users (fio,

TR_AC_MEMB_EXT_NEW	TRIGGER	23	                          PASSWORD,

TR_AC_MEMB_EXT_NEW	TRIGGER	24	                          login,

TR_AC_MEMB_EXT_NEW	TRIGGER	25	                          access_ocenka,

TR_AC_MEMB_EXT_NEW	TRIGGER	26	                          tn)

TR_AC_MEMB_EXT_NEW	TRIGGER	27	        VALUES (:new.fam || ' ' || :new.im || ' ' || :new.otch,

TR_AC_MEMB_EXT_NEW	TRIGGER	28	                DBMS_RANDOM.STRING ('A', 4),

TR_AC_MEMB_EXT_NEW	TRIGGER	29	                login_,

TR_AC_MEMB_EXT_NEW	TRIGGER	30	                1,

TR_AC_MEMB_EXT_NEW	TRIGGER	31	                0);

TR_AC_MEMB_EXT_NEW	TRIGGER	32	

TR_AC_MEMB_EXT_NEW	TRIGGER	33	   COMMIT;

TR_AC_MEMB_EXT_NEW	TRIGGER	34	END;
TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_AC_MEMB_EXT_MATH_UPD2

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF math_test_ball

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	3	   ON PERSIK.ac_memb_ext

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	6	BEGIN

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	7	   IF :new.math_test = 2

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	8	   THEN

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	9	      INSERT INTO ac_test_history (ac_id,

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	10	                                   test_id,

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	11	                                   memb_id,

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	12	                                   ball)

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	13	           VALUES (:new.ac_id,

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	14	                   :new.ac_test_math,

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	15	                   :new.id,

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	16	                   :new.math_test_ball);

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	17	   END IF;

TR_AC_MEMB_EXT_MATH_UPD2	TRIGGER	18	END;
TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_AC_MEMB_EXT_math_UPD1

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF math_test

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	3	   ON PERSIK.ac_memb_ext

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	6	DECLARE

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	8	BEGIN

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	9	   IF :new.math_test = 0

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	10	   THEN

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	11	      :NEW.math_test_lu := NULL;

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	12	   ELSE

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	13	      :NEW.math_test_lu := SYSDATE;

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	14	   END IF;

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	15	

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	16	   IF :new.math_test = 2

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	17	   THEN

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	18	      :NEW.math_test_count := NVL (:old.math_test_count, 0) + 1;

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	19	   END IF;

TR_AC_MEMB_EXT_MATH_UPD1	TRIGGER	20	END;
TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_AC_MEMB_EXT_LOGIC_UPD2

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	2	   BEFORE INSERT OR UPDATE OF logic_test_ball

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	3	   ON PERSIK.ac_memb_ext

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	6	BEGIN

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	7	   IF :new.logic_test = 2

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	8	   THEN

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	9	      INSERT INTO ac_test_history (ac_id,

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	10	                                   test_id,

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	11	                                   memb_id,

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	12	                                   ball)

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	13	           VALUES (:new.ac_id,

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	14	                   :new.ac_test_logic,

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	15	                   :new.id,

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	16	                   :new.logic_test_ball);

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	17	   END IF;

TR_AC_MEMB_EXT_LOGIC_UPD2	TRIGGER	18	END;
TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_AC_MEMB_EXT_logic_UPD1

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF logic_test

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	3	   ON PERSIK.ac_memb_ext

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	6	DECLARE

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	8	BEGIN

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	9	   IF :new.logic_test = 0

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	10	   THEN

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	11	      :NEW.logic_test_lu := NULL;

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	12	   ELSE

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	13	      :NEW.logic_test_lu := SYSDATE;

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	14	   END IF;

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	15	

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	16	   IF :new.logic_test = 2

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	17	   THEN

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	18	      :NEW.logic_test_count := NVL (:old.logic_test_count, 0) + 1;

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	19	   END IF;

TR_AC_MEMB_EXT_LOGIC_UPD1	TRIGGER	20	END;
TR_AC_MEMB_EXT_DEL	TRIGGER	1	TRIGGER TR_AC_MEMB_EXT_DEL

TR_AC_MEMB_EXT_DEL	TRIGGER	2	   BEFORE DELETE

TR_AC_MEMB_EXT_DEL	TRIGGER	3	   ON PERSIK.AC_MEMB_EXT

TR_AC_MEMB_EXT_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_DEL	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_DEL	TRIGGER	6	BEGIN

TR_AC_MEMB_EXT_DEL	TRIGGER	7	   DELETE FROM spr_users

TR_AC_MEMB_EXT_DEL	TRIGGER	8	         WHERE login = :old.login;

TR_AC_MEMB_EXT_DEL	TRIGGER	9	

TR_AC_MEMB_EXT_DEL	TRIGGER	10	   COMMIT;

TR_AC_MEMB_EXT_DEL	TRIGGER	11	END;
TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	1	TRIGGER PERSIK.TR_AC_MEMB_EXT_ADD_JOB_math

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	2	   BEFORE INSERT OR UPDATE OF math_test

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	3	   ON PERSIK.ac_memb_ext

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	6	DECLARE

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	8	BEGIN

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	9	   IF :new.math_test = 1

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	10	   THEN

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	11	      --   add_job (48, 'BEGIN tr_test_off(' || :new.id || '); END;');

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	12	      NULL;

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	13	   END IF;

TR_AC_MEMB_EXT_ADD_JOB_MATH	TRIGGER	14	END;
TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	1	TRIGGER PERSIK.TR_AC_MEMB_EXT_ADD_JOB_logic

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	2	   BEFORE INSERT OR UPDATE OF logic_test

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	3	   ON PERSIK.ac_memb_ext

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	5	   FOR EACH ROW

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	6	DECLARE

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	8	BEGIN

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	9	   IF :new.logic_test = 1

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	10	   THEN

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	11	      --   add_job (48, 'BEGIN tr_test_off(' || :new.id || '); END;');

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	12	      NULL;

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	13	   END IF;

TR_AC_MEMB_EXT_ADD_JOB_LOGIC	TRIGGER	14	END;
TR_AC_GOLOS_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_GOLOS_UPDATE" 

TR_AC_GOLOS_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_GOLOS_UPDATE	TRIGGER	3	   ON AC_GOLOS

TR_AC_GOLOS_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_GOLOS_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_AC_GOLOS_UPDATE	TRIGGER	6	BEGIN

TR_AC_GOLOS_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_GOLOS_UPDATE	TRIGGER	8	END;

TR_AC_GOLOS_UPDATE	TRIGGER	9	

TR_AC_GOLOS_RES_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_GOLOS_RES_UPDATE" 

TR_AC_GOLOS_RES_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_GOLOS_RES_UPDATE	TRIGGER	3	   ON ac_golos_res

TR_AC_GOLOS_RES_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_GOLOS_RES_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_AC_GOLOS_RES_UPDATE	TRIGGER	6	BEGIN

TR_AC_GOLOS_RES_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_GOLOS_RES_UPDATE	TRIGGER	8	END;

TR_AC_GOLOS_RES_UPDATE	TRIGGER	9	

TR_AC_GOLOS_RES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_GOLOS_RES_NEW" 

TR_AC_GOLOS_RES_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_GOLOS_RES_NEW	TRIGGER	3	   ON ac_golos_res

TR_AC_GOLOS_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_GOLOS_RES_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_GOLOS_RES_NEW	TRIGGER	6	BEGIN

TR_AC_GOLOS_RES_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

TR_AC_GOLOS_RES_NEW	TRIGGER	8	END;

TR_AC_GOLOS_RES_NEW	TRIGGER	9	

TR_AC_DEL	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_DEL" 

TR_AC_DEL	TRIGGER	2	   BEFORE DELETE

TR_AC_DEL	TRIGGER	3	   ON PERSIK.AC

TR_AC_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_DEL	TRIGGER	5	   FOR EACH ROW

TR_AC_DEL	TRIGGER	6	/*DECLARE

TR_AC_DEL	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;*/

TR_AC_DEL	TRIGGER	8	BEGIN

TR_AC_DEL	TRIGGER	9	  /* DELETE FROM ac_accept

TR_AC_DEL	TRIGGER	10	         WHERE ac_id = :old.id;

TR_AC_DEL	TRIGGER	11	

TR_AC_DEL	TRIGGER	12	   DELETE FROM ac_comm

TR_AC_DEL	TRIGGER	13	         WHERE ac_id = :old.id;

TR_AC_DEL	TRIGGER	14	

TR_AC_DEL	TRIGGER	15	   DELETE FROM ac_files

TR_AC_DEL	TRIGGER	16	         WHERE ac_id = :old.id;

TR_AC_DEL	TRIGGER	17	

TR_AC_DEL	TRIGGER	18	   DELETE FROM ac_chat

TR_AC_DEL	TRIGGER	19	         WHERE ac_id = :old.id;

TR_AC_DEL	TRIGGER	20	

TR_AC_DEL	TRIGGER	21	   COMMIT;*/

TR_AC_DEL	TRIGGER	22	   null;

TR_AC_DEL	TRIGGER	23	END;

TR_AC_DEL	TRIGGER	24	

TR_AC_COMM_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_COMM_UPD" 

TR_AC_COMM_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_COMM_UPD	TRIGGER	3	   ON AC_COMM

TR_AC_COMM_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_COMM_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_COMM_UPD	TRIGGER	6	BEGIN

TR_AC_COMM_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_COMM_UPD	TRIGGER	8	END;

TR_AC_COMM_UPD	TRIGGER	9	

TR_AC_COMM_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_COMM_NEW" 

TR_AC_COMM_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_COMM_NEW	TRIGGER	3	   ON AC_COMM

TR_AC_COMM_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_COMM_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_COMM_NEW	TRIGGER	6	DECLARE

TR_AC_COMM_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_COMM_NEW	TRIGGER	8	BEGIN

TR_AC_COMM_NEW	TRIGGER	9	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_AC_COMM_NEW	TRIGGER	10	

TR_AC_COMM_NEW	TRIGGER	11	

TR_AC_COMM_NEW	TRIGGER	12	   SELECT NVL (MAX (comm_order), 0) + 1

TR_AC_COMM_NEW	TRIGGER	13	     INTO :new.comm_order

TR_AC_COMM_NEW	TRIGGER	14	     FROM ac_comm

TR_AC_COMM_NEW	TRIGGER	15	    WHERE ac_id = :new.ac_id;

TR_AC_COMM_NEW	TRIGGER	16	END;

TR_AC_COMM_NEW	TRIGGER	17	

TR_AC_CHAT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_CHAT_UPD" 

TR_AC_CHAT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_AC_CHAT_UPD	TRIGGER	3	   ON ac_CHAT    REFERENCING NEW AS NEW OLD AS OLD

TR_AC_CHAT_UPD	TRIGGER	4	   FOR EACH ROW

TR_AC_CHAT_UPD	TRIGGER	5	BEGIN

TR_AC_CHAT_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TR_AC_CHAT_UPD	TRIGGER	7	END;

TR_AC_CHAT_UPD	TRIGGER	8	

TR_AC_CHAT_NEW	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_CHAT_NEW" 

TR_AC_CHAT_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_CHAT_NEW	TRIGGER	3	   ON ac_CHAT    REFERENCING NEW AS NEW OLD AS OLD

TR_AC_CHAT_NEW	TRIGGER	4	   FOR EACH ROW

TR_AC_CHAT_NEW	TRIGGER	5	BEGIN

TR_AC_CHAT_NEW	TRIGGER	6	   SELECT seq_all.NEXTVAL INTO :NEW.ID FROM DUAL;

TR_AC_CHAT_NEW	TRIGGER	7	END;

TR_AC_CHAT_NEW	TRIGGER	8	

TR_AC_ACCEPT_UPD	TRIGGER	1	TRIGGER "PERSIK"."TR_AC_ACCEPT_UPD" 

TR_AC_ACCEPT_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE OF accepted

TR_AC_ACCEPT_UPD	TRIGGER	3	   ON ac_ACCEPT

TR_AC_ACCEPT_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_ACCEPT_UPD	TRIGGER	5	   FOR EACH ROW

TR_AC_ACCEPT_UPD	TRIGGER	6	BEGIN

TR_AC_ACCEPT_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_AC_ACCEPT_UPD	TRIGGER	8	END;

TR_AC_ACCEPT_UPD	TRIGGER	9	

TR_AC_ACCEPT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_AC_ACCEPT_NEW

TR_AC_ACCEPT_NEW	TRIGGER	2	   BEFORE INSERT

TR_AC_ACCEPT_NEW	TRIGGER	3	   ON PERSIK.AC_ACCEPT

TR_AC_ACCEPT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_AC_ACCEPT_NEW	TRIGGER	5	   FOR EACH ROW

TR_AC_ACCEPT_NEW	TRIGGER	6	DECLARE

TR_AC_ACCEPT_NEW	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_AC_ACCEPT_NEW	TRIGGER	8	   m   VARCHAR2 (512);

TR_AC_ACCEPT_NEW	TRIGGER	9	BEGIN

TR_AC_ACCEPT_NEW	TRIGGER	10	   :NEW.ID := seq_all.NEXTVAL;

TR_AC_ACCEPT_NEW	TRIGGER	11	   :NEW.created := SYSDATE;

TR_AC_ACCEPT_NEW	TRIGGER	12	   :new.accepted := 0;

TR_AC_ACCEPT_NEW	TRIGGER	13	

TR_AC_ACCEPT_NEW	TRIGGER	14	   /*:new.tn := fn_Get_ac_Vac_Repl (:new.tn);

TR_AC_ACCEPT_NEW	TRIGGER	15	

TR_AC_ACCEPT_NEW	TRIGGER	16	   FOR a IN (SELECT child

TR_AC_ACCEPT_NEW	TRIGGER	17	               FROM assist

TR_AC_ACCEPT_NEW	TRIGGER	18	              WHERE     parent = :new.tn

TR_AC_ACCEPT_NEW	TRIGGER	19	                    AND dpt_id = (SELECT dpt_id

TR_AC_ACCEPT_NEW	TRIGGER	20	                                   FROM user_list

TR_AC_ACCEPT_NEW	TRIGGER	21	                                  WHERE tn = (SELECT tn

TR_AC_ACCEPT_NEW	TRIGGER	22	                                                FROM ac

TR_AC_ACCEPT_NEW	TRIGGER	23	                                               WHERE id = :new.ac_id))

TR_AC_ACCEPT_NEW	TRIGGER	24	                    AND accept = 1)

TR_AC_ACCEPT_NEW	TRIGGER	25	   LOOP

TR_AC_ACCEPT_NEW	TRIGGER	26	      DELETE FROM ac_accept

TR_AC_ACCEPT_NEW	TRIGGER	27	            WHERE ac_id = :new.ac_id AND tn = a.child;

TR_AC_ACCEPT_NEW	TRIGGER	28	

TR_AC_ACCEPT_NEW	TRIGGER	29	      COMMIT;

TR_AC_ACCEPT_NEW	TRIGGER	30	

TR_AC_ACCEPT_NEW	TRIGGER	31	      INSERT INTO ac_accept (ac_id, tn, child)

TR_AC_ACCEPT_NEW	TRIGGER	32	           VALUES (:new.ac_id, a.child, 1);

TR_AC_ACCEPT_NEW	TRIGGER	33	

TR_AC_ACCEPT_NEW	TRIGGER	34	      COMMIT;

TR_AC_ACCEPT_NEW	TRIGGER	35	   END LOOP;*/

TR_AC_ACCEPT_NEW	TRIGGER	36	

TR_AC_ACCEPT_NEW	TRIGGER	37	   SELECT NVL (MAX (accept_order), 0) + 1

TR_AC_ACCEPT_NEW	TRIGGER	38	     INTO :new.accept_order

TR_AC_ACCEPT_NEW	TRIGGER	39	     FROM ac_accept

TR_AC_ACCEPT_NEW	TRIGGER	40	    WHERE ac_id = :new.ac_id;

TR_AC_ACCEPT_NEW	TRIGGER	41	

TR_AC_ACCEPT_NEW	TRIGGER	42	

TR_AC_ACCEPT_NEW	TRIGGER	43	   IF :new.accept_order = 1

TR_AC_ACCEPT_NEW	TRIGGER	44	   THEN

TR_AC_ACCEPT_NEW	TRIGGER	45	      SELECT e_mail

TR_AC_ACCEPT_NEW	TRIGGER	46	        INTO m

TR_AC_ACCEPT_NEW	TRIGGER	47	        FROM user_list

TR_AC_ACCEPT_NEW	TRIGGER	48	       WHERE tn = :new.tn;

TR_AC_ACCEPT_NEW	TRIGGER	49	

TR_AC_ACCEPT_NEW	TRIGGER	50	

TR_AC_ACCEPT_NEW	TRIGGER	51	      FOR a

TR_AC_ACCEPT_NEW	TRIGGER	52	         IN (SELECT ac.head,

TR_AC_ACCEPT_NEW	TRIGGER	53	                    ac.created,

TR_AC_ACCEPT_NEW	TRIGGER	54	                    ac.place,

TR_AC_ACCEPT_NEW	TRIGGER	55	                    u.fio,

TR_AC_ACCEPT_NEW	TRIGGER	56	                    u.pos_name,

TR_AC_ACCEPT_NEW	TRIGGER	57	                    u.department_name,

TR_AC_ACCEPT_NEW	TRIGGER	58	                    u.e_mail,

TR_AC_ACCEPT_NEW	TRIGGER	59	                    u1.fio init_fio,

TR_AC_ACCEPT_NEW	TRIGGER	60	                    u1.pos_name init_pos_name,

TR_AC_ACCEPT_NEW	TRIGGER	61	                    u1.department_name init_department_name,

TR_AC_ACCEPT_NEW	TRIGGER	62	                    u1.e_mail init_e_mail,

TR_AC_ACCEPT_NEW	TRIGGER	63	                    ac.vac1,

TR_AC_ACCEPT_NEW	TRIGGER	64	                    ac.vac2,

TR_AC_ACCEPT_NEW	TRIGGER	65	                    ac.vac3

TR_AC_ACCEPT_NEW	TRIGGER	66	               FROM ac, user_list u, user_list u1

TR_AC_ACCEPT_NEW	TRIGGER	67	              WHERE     ac.id = :new.ac_id

TR_AC_ACCEPT_NEW	TRIGGER	68	                    AND u.tn = ac.tn

TR_AC_ACCEPT_NEW	TRIGGER	69	                    AND u1.tn = ac.init_tn(+))

TR_AC_ACCEPT_NEW	TRIGGER	70	      LOOP

TR_AC_ACCEPT_NEW	TRIGGER	71	         PR_SENDMAIL (

TR_AC_ACCEPT_NEW	TRIGGER	72	            m,

TR_AC_ACCEPT_NEW	TRIGGER	73	               'Подтверждение заявки на проведение АЦ №'

TR_AC_ACCEPT_NEW	TRIGGER	74	            || :new.ac_id

TR_AC_ACCEPT_NEW	TRIGGER	75	            --|| ' по теме: '

TR_AC_ACCEPT_NEW	TRIGGER	76	            --|| a.head

TR_AC_ACCEPT_NEW	TRIGGER	77	            || ' от '

TR_AC_ACCEPT_NEW	TRIGGER	78	            || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss'),

TR_AC_ACCEPT_NEW	TRIGGER	79	               'Заявка на проведение АЦ №'

TR_AC_ACCEPT_NEW	TRIGGER	80	            || :new.ac_id

TR_AC_ACCEPT_NEW	TRIGGER	81	            --|| ' по теме: '

TR_AC_ACCEPT_NEW	TRIGGER	82	            --|| a.head

TR_AC_ACCEPT_NEW	TRIGGER	83	            || ' от '

TR_AC_ACCEPT_NEW	TRIGGER	84	            || TO_CHAR (a.created, 'dd/mm/yyyy hh24:mi:ss')

TR_AC_ACCEPT_NEW	TRIGGER	85	            || ' ожидает вашего подтверждения'

TR_AC_ACCEPT_NEW	TRIGGER	86	            || '<br>место проведения: '

TR_AC_ACCEPT_NEW	TRIGGER	87	            || a.place

TR_AC_ACCEPT_NEW	TRIGGER	88	            || '<br>ФИО создателя: '

TR_AC_ACCEPT_NEW	TRIGGER	89	            || a.fio

TR_AC_ACCEPT_NEW	TRIGGER	90	            || '<br>Должность создателя: '

TR_AC_ACCEPT_NEW	TRIGGER	91	            || a.pos_name

TR_AC_ACCEPT_NEW	TRIGGER	92	            || '<br>Подразделение создателя: '

TR_AC_ACCEPT_NEW	TRIGGER	93	            || a.department_name

TR_AC_ACCEPT_NEW	TRIGGER	94	            || '<br>ФИО сотрудника, инициирующего проведение АЦ: '

TR_AC_ACCEPT_NEW	TRIGGER	95	            || a.init_fio

TR_AC_ACCEPT_NEW	TRIGGER	96	            || '<br>Должность сотрудника, инициирующего проведение АЦ: '

TR_AC_ACCEPT_NEW	TRIGGER	97	            || a.init_pos_name

TR_AC_ACCEPT_NEW	TRIGGER	98	            || '<br>Подразделение сотрудника, инициирующего проведение АЦ: '

TR_AC_ACCEPT_NEW	TRIGGER	99	            || a.init_department_name

TR_AC_ACCEPT_NEW	TRIGGER	100	            || '<br>Вакантная позиция 1: '

TR_AC_ACCEPT_NEW	TRIGGER	101	            || a.vac1

TR_AC_ACCEPT_NEW	TRIGGER	102	            || '<br>Вакантная позиция 2: '

TR_AC_ACCEPT_NEW	TRIGGER	103	            || a.vac2

TR_AC_ACCEPT_NEW	TRIGGER	104	            || '<br>Вакантная позиция 3: '

TR_AC_ACCEPT_NEW	TRIGGER	105	            || a.vac3

TR_AC_ACCEPT_NEW	TRIGGER	106	            || '<br><a href="https://ps.avk.ua/?action=ac_accept">Ссылка</a> на реестр документов, ожидающих подтверждение<br>');

TR_AC_ACCEPT_NEW	TRIGGER	107	      END LOOP;

TR_AC_ACCEPT_NEW	TRIGGER	108	   END IF;

TR_AC_ACCEPT_NEW	TRIGGER	109	END;
TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	1	TRIGGER tr_ACT_SVOD_db_tn_update

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	2	   BEFORE UPDATE OF DB_TN

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	3	   ON ACT_SVOD

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	6	BEGIN

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	7	   SELECT fio

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	8	     INTO :new.fio_db

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	9	     FROM user_list

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	10	    WHERE tn = :new.db_tn;

TR_ACT_SVOD_DB_TN_UPDATE	TRIGGER	11	END;
TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	1	TRIGGER tr_ACT_SVODt_db_tn_update

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	2	   BEFORE UPDATE OF DB_TN

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	3	   ON ACT_SVODt

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	6	BEGIN

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	7	   SELECT fio

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	8	     INTO :new.fio_db

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	9	     FROM user_list

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	10	    WHERE tn = :new.db_tn;

TR_ACT_SVODT_DB_TN_UPDATE	TRIGGER	11	END;
TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	1	TRIGGER PERSIK.tr_ACT_SVODN_db_tn_update

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	2	   BEFORE UPDATE OF DB_TN

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	3	   ON PERSIK.ACT_SVODN

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	5	   FOR EACH ROW

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	6	BEGIN

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	7	   SELECT fio

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	8	     INTO :new.fio_db

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	9	     FROM user_list

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	10	    WHERE tn = :new.db_tn;

TR_ACT_SVODN_DB_TN_UPDATE	TRIGGER	11	END;
TR_A18TO_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A18TO_UPD

TR_A18TO_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A18TO_UPD	TRIGGER	3	   ON PERSIK.A18TO

TR_A18TO_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A18TO_UPD	TRIGGER	5	   FOR EACH ROW

TR_A18TO_UPD	TRIGGER	6	BEGIN

TR_A18TO_UPD	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A18TO_UPD	TRIGGER	8	   :new.H_URL := md5hash (:new.url);

TR_A18TO_UPD	TRIGGER	9	   :new.H_NAME_TO := md5hash (:new.NAME_TO);

TR_A18TO_UPD	TRIGGER	10	   :new.H_TYPE_STANDART := md5hash (:new.TYPE_STANDART);

TR_A18TO_UPD	TRIGGER	11	END;
TR_A18TOZST_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A18TOZST_UPD

TR_A18TOZST_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A18TOZST_UPD	TRIGGER	3	   ON PERSIK.A18TOZST

TR_A18TOZST_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A18TOZST_UPD	TRIGGER	5	   FOR EACH ROW

TR_A18TOZST_UPD	TRIGGER	6	BEGIN

TR_A18TOZST_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A18TOZST_UPD	TRIGGER	8	END tr_A18TOZST_upd;
TR_A18TOTP_UPD3	TRIGGER	1	TRIGGER PERSIK.TR_A18TOTP_UPD3

TR_A18TOTP_UPD3	TRIGGER	2	   BEFORE UPDATE OF auditor_comm, auditor

TR_A18TOTP_UPD3	TRIGGER	3	   ON PERSIK.A18TOTP

TR_A18TOTP_UPD3	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A18TOTP_UPD3	TRIGGER	5	   FOR EACH ROW

TR_A18TOTP_UPD3	TRIGGER	6	DECLARE

TR_A18TOTP_UPD3	TRIGGER	7	   v_tp_ur     VARCHAR2 (255);

TR_A18TOTP_UPD3	TRIGGER	8	   v_tp_addr   VARCHAR2 (255);

TR_A18TOTP_UPD3	TRIGGER	9	   v_ts_mail   VARCHAR2 (255);

TR_A18TOTP_UPD3	TRIGGER	10	BEGIN

TR_A18TOTP_UPD3	TRIGGER	11	   IF (LENGTH (:new.auditor_comm) > 0 OR :new.auditor = 2)

TR_A18TOTP_UPD3	TRIGGER	12	   THEN

TR_A18TOTP_UPD3	TRIGGER	13	      SELECT DISTINCT t.tp_ur, t.tp_addr, u.e_mail

TR_A18TOTP_UPD3	TRIGGER	14	        INTO v_tp_ur, v_tp_addr, v_ts_mail

TR_A18TOTP_UPD3	TRIGGER	15	        FROM A18TO t, user_list u

TR_A18TOTP_UPD3	TRIGGER	16	       WHERE     u.tab_num = t.tab_num

TR_A18TOTP_UPD3	TRIGGER	17	             AND u.dpt_id = 1

TR_A18TOTP_UPD3	TRIGGER	18	             AND u.is_spd = 1

TR_A18TOTP_UPD3	TRIGGER	19	             AND t.visitdate = :new.visitdate

TR_A18TOTP_UPD3	TRIGGER	20	             AND t.tp_kod_key = :new.tp_kod

TR_A18TOTP_UPD3	TRIGGER	21	             AND t.h_name_to = :new.h_name_to;

TR_A18TOTP_UPD3	TRIGGER	22	

TR_A18TOTP_UPD3	TRIGGER	23	      PR_SENDMAIL (

TR_A18TOTP_UPD3	TRIGGER	24	         v_ts_mail,

TR_A18TOTP_UPD3	TRIGGER	25	         'Стандарт ТО - комментарий ТМ',

TR_A18TOTP_UPD3	TRIGGER	26	            '<b>Дата визита:</b> '

TR_A18TOTP_UPD3	TRIGGER	27	         || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A18TOTP_UPD3	TRIGGER	28	         || '<br>'

TR_A18TOTP_UPD3	TRIGGER	29	         || '<b>ТП:</b> '

TR_A18TOTP_UPD3	TRIGGER	30	         || v_tp_ur

TR_A18TOTP_UPD3	TRIGGER	31	         || '<br>'

TR_A18TOTP_UPD3	TRIGGER	32	         || v_tp_addr

TR_A18TOTP_UPD3	TRIGGER	33	         || '<br>'

TR_A18TOTP_UPD3	TRIGGER	34	         || '<b>ТМ оставил комментарий и/или не подтвердил стандарт:</b> '

TR_A18TOTP_UPD3	TRIGGER	35	         || '<br>'

TR_A18TOTP_UPD3	TRIGGER	36	         || :new.auditor_comm

TR_A18TOTP_UPD3	TRIGGER	37	         || '');

TR_A18TOTP_UPD3	TRIGGER	38	   END IF;

TR_A18TOTP_UPD3	TRIGGER	39	END;
TR_A18TOTP_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_A18TOTP_UPD2

TR_A18TOTP_UPD2	TRIGGER	2	   BEFORE UPDATE OF traid, traid_comm

TR_A18TOTP_UPD2	TRIGGER	3	   ON PERSIK.A18TOTP

TR_A18TOTP_UPD2	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A18TOTP_UPD2	TRIGGER	5	   FOR EACH ROW

TR_A18TOTP_UPD2	TRIGGER	6	DECLARE

TR_A18TOTP_UPD2	TRIGGER	7	   v_tp_ur        VARCHAR2 (255);

TR_A18TOTP_UPD2	TRIGGER	8	   v_tp_addr      VARCHAR2 (255);

TR_A18TOTP_UPD2	TRIGGER	9	   v_ts_mail      VARCHAR2 (255);

TR_A18TOTP_UPD2	TRIGGER	10	   v_tm_mail      VARCHAR2 (255);

TR_A18TOTP_UPD2	TRIGGER	11	   v_traid_text   VARCHAR2 (255);

TR_A18TOTP_UPD2	TRIGGER	12	BEGIN

TR_A18TOTP_UPD2	TRIGGER	13	   :new.traid_lu := SYSDATE;

TR_A18TOTP_UPD2	TRIGGER	14	

TR_A18TOTP_UPD2	TRIGGER	15	   SELECT DISTINCT t.tp_ur,

TR_A18TOTP_UPD2	TRIGGER	16	                   t.tp_addr,

TR_A18TOTP_UPD2	TRIGGER	17	                   u.e_mail,

TR_A18TOTP_UPD2	TRIGGER	18	                   pu.e_mail

TR_A18TOTP_UPD2	TRIGGER	19	     INTO v_tp_ur,

TR_A18TOTP_UPD2	TRIGGER	20	          v_tp_addr,

TR_A18TOTP_UPD2	TRIGGER	21	          v_ts_mail,

TR_A18TOTP_UPD2	TRIGGER	22	          v_tm_mail

TR_A18TOTP_UPD2	TRIGGER	23	     FROM A18TO t,

TR_A18TOTP_UPD2	TRIGGER	24	          user_list u,

TR_A18TOTP_UPD2	TRIGGER	25	          parents p,

TR_A18TOTP_UPD2	TRIGGER	26	          user_list pu

TR_A18TOTP_UPD2	TRIGGER	27	    WHERE     p.parent = pu.tn

TR_A18TOTP_UPD2	TRIGGER	28	          AND p.tn = u.tn

TR_A18TOTP_UPD2	TRIGGER	29	          AND u.tab_num = t.tab_num

TR_A18TOTP_UPD2	TRIGGER	30	          AND u.dpt_id = 1

TR_A18TOTP_UPD2	TRIGGER	31	          AND u.is_spd = 1

TR_A18TOTP_UPD2	TRIGGER	32	          AND t.visitdate = :new.visitdate

TR_A18TOTP_UPD2	TRIGGER	33	          AND t.tp_kod_key = :new.tp_kod

TR_A18TOTP_UPD2	TRIGGER	34	          AND t.h_name_to = :new.h_name_to;

TR_A18TOTP_UPD2	TRIGGER	35	

TR_A18TOTP_UPD2	TRIGGER	36	   SELECT DECODE (

TR_A18TOTP_UPD2	TRIGGER	37	             NVL (:new.traid, 0),

TR_A18TOTP_UPD2	TRIGGER	38	             1,    'стандарт ('

TR_A18TOTP_UPD2	TRIGGER	39	                || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A18TOTP_UPD2	TRIGGER	40	                || ', '

TR_A18TOTP_UPD2	TRIGGER	41	                || :new.tp_kod

TR_A18TOTP_UPD2	TRIGGER	42	                || ') по ТП отклонен ВСТМ',

TR_A18TOTP_UPD2	TRIGGER	43	             '')

TR_A18TOTP_UPD2	TRIGGER	44	     INTO v_traid_text

TR_A18TOTP_UPD2	TRIGGER	45	     FROM DUAL;

TR_A18TOTP_UPD2	TRIGGER	46	

TR_A18TOTP_UPD2	TRIGGER	47	

TR_A18TOTP_UPD2	TRIGGER	48	   PR_SENDMAIL (

TR_A18TOTP_UPD2	TRIGGER	49	      v_ts_mail || ',' || v_tm_mail,

TR_A18TOTP_UPD2	TRIGGER	50	      'Стандарт ТО - комментарий ВСТМ',

TR_A18TOTP_UPD2	TRIGGER	51	         '<b>Дата визита:</b> '

TR_A18TOTP_UPD2	TRIGGER	52	      || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A18TOTP_UPD2	TRIGGER	53	      || '<br>'

TR_A18TOTP_UPD2	TRIGGER	54	      || '<b>ТП:</b> '

TR_A18TOTP_UPD2	TRIGGER	55	      || v_tp_ur

TR_A18TOTP_UPD2	TRIGGER	56	      || '<br>'

TR_A18TOTP_UPD2	TRIGGER	57	      || v_tp_addr

TR_A18TOTP_UPD2	TRIGGER	58	      || '<br>'

TR_A18TOTP_UPD2	TRIGGER	59	      || '<b>ВСТМ оставил комментарий:</b> '

TR_A18TOTP_UPD2	TRIGGER	60	      || '<br>'

TR_A18TOTP_UPD2	TRIGGER	61	      || :new.traid_comm

TR_A18TOTP_UPD2	TRIGGER	62	      || '<br>'

TR_A18TOTP_UPD2	TRIGGER	63	      || v_traid_text);

TR_A18TOTP_UPD2	TRIGGER	64	END;
TR_A18TOTP_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_A18TOTP_UPD1

TR_A18TOTP_UPD1	TRIGGER	2	   BEFORE UPDATE OF auditor

TR_A18TOTP_UPD1	TRIGGER	3	   ON PERSIK.A18TOTP

TR_A18TOTP_UPD1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A18TOTP_UPD1	TRIGGER	5	   FOR EACH ROW

TR_A18TOTP_UPD1	TRIGGER	6	BEGIN

TR_A18TOTP_UPD1	TRIGGER	7	   :new.auditor_lu := SYSDATE;

TR_A18TOTP_UPD1	TRIGGER	8	END;
TR_A18TOTP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A18TOTP_UPD

TR_A18TOTP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A18TOTP_UPD	TRIGGER	3	   ON PERSIK.A18TOTP

TR_A18TOTP_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A18TOTP_UPD	TRIGGER	5	   FOR EACH ROW

TR_A18TOTP_UPD	TRIGGER	6	BEGIN

TR_A18TOTP_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A18TOTP_UPD	TRIGGER	8	END tr_A18TOTP_upd;
TR_A1808SB5_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808sb5_TMP_1

TR_A1808SB5_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808SB5_TMP_1	TRIGGER	3	   ON PERSIK.a1808sb5_TMP

TR_A1808SB5_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808SB5_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808SB5_TMP_1	TRIGGER	6	BEGIN

TR_A1808SB5_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808SB5_TMP_1	TRIGGER	8	      md5hash (

TR_A1808SB5_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808SB5_TMP_1	TRIGGER	10	         || '.'

TR_A1808SB5_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808SB5_TMP_1	TRIGGER	12	         || '.'

TR_A1808SB5_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808SB5_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808SB5_TMP_1	TRIGGER	15	END;
TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1808sb5_ACTION_NAKL_NEW

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1808sb5_ACTION_NAKL

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808SB5_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1808RS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1808rs_TMP_1

TR_A1808RS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808RS_TMP_1	TRIGGER	3	   ON PERSIK.A1808rs_TMP

TR_A1808RS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808RS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808RS_TMP_1	TRIGGER	6	BEGIN

TR_A1808RS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808RS_TMP_1	TRIGGER	8	      md5hash (

TR_A1808RS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808RS_TMP_1	TRIGGER	10	         || '.'

TR_A1808RS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808RS_TMP_1	TRIGGER	12	         || '.'

TR_A1808RS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808RS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808RS_TMP_1	TRIGGER	15	END;
TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1808rs_ACTION_NAKL_NEW

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1808rs_ACTION_NAKL

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808RS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1808MS2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808ms2_TMP_1

TR_A1808MS2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808MS2_TMP_1	TRIGGER	3	   ON PERSIK.a1808ms2_TMP

TR_A1808MS2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808MS2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808MS2_TMP_1	TRIGGER	6	BEGIN

TR_A1808MS2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808MS2_TMP_1	TRIGGER	8	      md5hash (

TR_A1808MS2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808MS2_TMP_1	TRIGGER	10	         || '.'

TR_A1808MS2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808MS2_TMP_1	TRIGGER	12	         || '.'

TR_A1808MS2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808MS2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808MS2_TMP_1	TRIGGER	15	END;
TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1808ms2_ACTION_NAKL_NEW

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1808ms2_ACTION_NAKL

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808MS2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1808MS1_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808ms1_TMP_1

TR_A1808MS1_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808MS1_TMP_1	TRIGGER	3	   ON PERSIK.a1808ms1_TMP

TR_A1808MS1_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808MS1_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808MS1_TMP_1	TRIGGER	6	BEGIN

TR_A1808MS1_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808MS1_TMP_1	TRIGGER	8	      md5hash (

TR_A1808MS1_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808MS1_TMP_1	TRIGGER	10	         || '.'

TR_A1808MS1_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808MS1_TMP_1	TRIGGER	12	         || '.'

TR_A1808MS1_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808MS1_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808MS1_TMP_1	TRIGGER	15	END;
TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1808ms1_ACTION_NAKL_NEW

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1808ms1_ACTION_NAKL

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808MS1_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1808MP_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808mp_TMP_1

TR_A1808MP_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808MP_TMP_1	TRIGGER	3	   ON PERSIK.a1808mp_TMP

TR_A1808MP_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808MP_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808MP_TMP_1	TRIGGER	6	BEGIN

TR_A1808MP_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808MP_TMP_1	TRIGGER	8	END;
TR_A1808MH3_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808mh3_TMP_1

TR_A1808MH3_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808MH3_TMP_1	TRIGGER	3	   ON PERSIK.a1808mh3_TMP

TR_A1808MH3_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808MH3_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808MH3_TMP_1	TRIGGER	6	BEGIN

TR_A1808MH3_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808MH3_TMP_1	TRIGGER	8	      md5hash (

TR_A1808MH3_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808MH3_TMP_1	TRIGGER	10	         || '.'

TR_A1808MH3_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808MH3_TMP_1	TRIGGER	12	         || '.'

TR_A1808MH3_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808MH3_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808MH3_TMP_1	TRIGGER	15	END;
TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1808mh3_ACTION_NAKL_NEW

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1808mh3_ACTION_NAKL

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808MH3_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1808MH2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808mh2_TMP_1

TR_A1808MH2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808MH2_TMP_1	TRIGGER	3	   ON PERSIK.a1808mh2_TMP

TR_A1808MH2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808MH2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808MH2_TMP_1	TRIGGER	6	BEGIN

TR_A1808MH2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808MH2_TMP_1	TRIGGER	8	      md5hash (

TR_A1808MH2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808MH2_TMP_1	TRIGGER	10	         || '.'

TR_A1808MH2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808MH2_TMP_1	TRIGGER	12	         || '.'

TR_A1808MH2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808MH2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808MH2_TMP_1	TRIGGER	15	END;
TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1808mh2_ACTION_NAKL_NEW

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1808mh2_ACTION_NAKL

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808MH2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1808MH1_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1808mh1_TMP_1

TR_A1808MH1_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1808MH1_TMP_1	TRIGGER	3	   ON PERSIK.a1808mh1_TMP

TR_A1808MH1_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1808MH1_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1808MH1_TMP_1	TRIGGER	6	BEGIN

TR_A1808MH1_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1808MH1_TMP_1	TRIGGER	8	      md5hash (

TR_A1808MH1_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1808MH1_TMP_1	TRIGGER	10	         || '.'

TR_A1808MH1_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1808MH1_TMP_1	TRIGGER	12	         || '.'

TR_A1808MH1_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1808MH1_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1808MH1_TMP_1	TRIGGER	15	END;
TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1808mh1_ACTION_NAKL_NEW

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1808mh1_ACTION_NAKL

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1808MH1_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807SS2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807ss2_TMP_1

TR_A1807SS2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807SS2_TMP_1	TRIGGER	3	   ON PERSIK.A1807ss2_TMP

TR_A1807SS2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807SS2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807SS2_TMP_1	TRIGGER	6	BEGIN

TR_A1807SS2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807SS2_TMP_1	TRIGGER	8	      md5hash (

TR_A1807SS2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807SS2_TMP_1	TRIGGER	10	         || '.'

TR_A1807SS2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807SS2_TMP_1	TRIGGER	12	         || '.'

TR_A1807SS2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807SS2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807SS2_TMP_1	TRIGGER	15	END;
TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807ss2_ACTION_NAKL_NEW

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807ss2_ACTION_NAKL

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807SS2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807SS1_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807ss1_TMP_1

TR_A1807SS1_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807SS1_TMP_1	TRIGGER	3	   ON PERSIK.A1807ss1_TMP

TR_A1807SS1_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807SS1_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807SS1_TMP_1	TRIGGER	6	BEGIN

TR_A1807SS1_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807SS1_TMP_1	TRIGGER	8	      md5hash (

TR_A1807SS1_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807SS1_TMP_1	TRIGGER	10	         || '.'

TR_A1807SS1_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807SS1_TMP_1	TRIGGER	12	         || '.'

TR_A1807SS1_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807SS1_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807SS1_TMP_1	TRIGGER	15	END;
TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807ss1_ACTION_NAKL_NEW

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807ss1_ACTION_NAKL

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807SS1_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807SC_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807sc_TMP_1

TR_A1807SC_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807SC_TMP_1	TRIGGER	3	   ON PERSIK.A1807sc_TMP

TR_A1807SC_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807SC_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807SC_TMP_1	TRIGGER	6	BEGIN

TR_A1807SC_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807SC_TMP_1	TRIGGER	8	      md5hash (

TR_A1807SC_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807SC_TMP_1	TRIGGER	10	         || '.'

TR_A1807SC_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807SC_TMP_1	TRIGGER	12	         || '.'

TR_A1807SC_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807SC_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807SC_TMP_1	TRIGGER	15	END;
TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807sc_ACTION_NAKL_NEW

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807sc_ACTION_NAKL

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807SC_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807SC2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807SC2_TMP_1

TR_A1807SC2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807SC2_TMP_1	TRIGGER	3	   ON PERSIK.A1807SC2_TMP

TR_A1807SC2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807SC2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807SC2_TMP_1	TRIGGER	6	BEGIN

TR_A1807SC2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807SC2_TMP_1	TRIGGER	8	      md5hash (

TR_A1807SC2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807SC2_TMP_1	TRIGGER	10	         || '.'

TR_A1807SC2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807SC2_TMP_1	TRIGGER	12	         || '.'

TR_A1807SC2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807SC2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807SC2_TMP_1	TRIGGER	15	END;
TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807SC2_ACTION_NAKL_NEW

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807SC2_ACTION_NAKL

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807SC2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807SB4_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807SB4_TMP_1

TR_A1807SB4_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807SB4_TMP_1	TRIGGER	3	   ON PERSIK.A1807SB4_TMP

TR_A1807SB4_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807SB4_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807SB4_TMP_1	TRIGGER	6	BEGIN

TR_A1807SB4_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807SB4_TMP_1	TRIGGER	8	      md5hash (

TR_A1807SB4_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807SB4_TMP_1	TRIGGER	10	         || '.'

TR_A1807SB4_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807SB4_TMP_1	TRIGGER	12	         || '.'

TR_A1807SB4_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807SB4_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807SB4_TMP_1	TRIGGER	15	END;
TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807SB4_ACTION_NAKL_NEW

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807SB4_ACTION_NAKL

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807SB4_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807MS2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807ms2_TMP_1

TR_A1807MS2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807MS2_TMP_1	TRIGGER	3	   ON PERSIK.A1807ms2_TMP

TR_A1807MS2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807MS2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807MS2_TMP_1	TRIGGER	6	BEGIN

TR_A1807MS2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807MS2_TMP_1	TRIGGER	8	      md5hash (

TR_A1807MS2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807MS2_TMP_1	TRIGGER	10	         || '.'

TR_A1807MS2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807MS2_TMP_1	TRIGGER	12	         || '.'

TR_A1807MS2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807MS2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807MS2_TMP_1	TRIGGER	15	END;
TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807ms2_ACTION_NAKL_NEW

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807ms2_ACTION_NAKL

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807MS2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807MS1_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807ms1_TMP_1

TR_A1807MS1_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807MS1_TMP_1	TRIGGER	3	   ON PERSIK.A1807ms1_TMP

TR_A1807MS1_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807MS1_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807MS1_TMP_1	TRIGGER	6	BEGIN

TR_A1807MS1_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807MS1_TMP_1	TRIGGER	8	      md5hash (

TR_A1807MS1_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807MS1_TMP_1	TRIGGER	10	         || '.'

TR_A1807MS1_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807MS1_TMP_1	TRIGGER	12	         || '.'

TR_A1807MS1_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807MS1_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807MS1_TMP_1	TRIGGER	15	END;
TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807ms1_ACTION_NAKL_NEW

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807ms1_ACTION_NAKL

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807MS1_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1807F_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1807F_TMP_1

TR_A1807F_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1807F_TMP_1	TRIGGER	3	   ON PERSIK.A1807F_TMP

TR_A1807F_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1807F_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1807F_TMP_1	TRIGGER	6	BEGIN

TR_A1807F_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1807F_TMP_1	TRIGGER	8	      md5hash (

TR_A1807F_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1807F_TMP_1	TRIGGER	10	         || '.'

TR_A1807F_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1807F_TMP_1	TRIGGER	12	         || '.'

TR_A1807F_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1807F_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1807F_TMP_1	TRIGGER	15	END;
TR_A1807F_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1807F_ACTION_NAKL_NEW

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1807F_ACTION_NAKL

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1807F_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1806SS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1806SS_TMP_1

TR_A1806SS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1806SS_TMP_1	TRIGGER	3	   ON PERSIK.A1806SS_TMP

TR_A1806SS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1806SS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1806SS_TMP_1	TRIGGER	6	BEGIN

TR_A1806SS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1806SS_TMP_1	TRIGGER	8	      md5hash (

TR_A1806SS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1806SS_TMP_1	TRIGGER	10	         || '.'

TR_A1806SS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1806SS_TMP_1	TRIGGER	12	         || '.'

TR_A1806SS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1806SS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1806SS_TMP_1	TRIGGER	15	END;
TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1806SS_ACTION_NAKL_NEW

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1806SS_ACTION_NAKL

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1806SS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1806SB3_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1806SB3_TMP_1

TR_A1806SB3_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1806SB3_TMP_1	TRIGGER	3	   ON PERSIK.A1806SB3_TMP

TR_A1806SB3_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1806SB3_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1806SB3_TMP_1	TRIGGER	6	BEGIN

TR_A1806SB3_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1806SB3_TMP_1	TRIGGER	8	      md5hash (

TR_A1806SB3_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1806SB3_TMP_1	TRIGGER	10	         || '.'

TR_A1806SB3_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1806SB3_TMP_1	TRIGGER	12	         || '.'

TR_A1806SB3_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1806SB3_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1806SB3_TMP_1	TRIGGER	15	END;
TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1806SB3_ACTION_NAKL_NEW

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1806SB3_ACTION_NAKL

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1806SB3_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1806CH_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1806CH_TMP_1

TR_A1806CH_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1806CH_TMP_1	TRIGGER	3	   ON PERSIK.A1806CH_TMP

TR_A1806CH_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1806CH_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1806CH_TMP_1	TRIGGER	6	BEGIN

TR_A1806CH_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1806CH_TMP_1	TRIGGER	8	END;
TR_A1805SB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1805SB_TMP_1

TR_A1805SB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1805SB_TMP_1	TRIGGER	3	   ON PERSIK.A1805SB_TMP

TR_A1805SB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1805SB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1805SB_TMP_1	TRIGGER	6	BEGIN

TR_A1805SB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1805SB_TMP_1	TRIGGER	8	      md5hash (

TR_A1805SB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1805SB_TMP_1	TRIGGER	10	         || '.'

TR_A1805SB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1805SB_TMP_1	TRIGGER	12	         || '.'

TR_A1805SB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1805SB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1805SB_TMP_1	TRIGGER	15	END;
TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1805SB_ACTION_NAKL_NEW

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1805SB_ACTION_NAKL

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1805SB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1805SB2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1805SB2_TMP_1

TR_A1805SB2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1805SB2_TMP_1	TRIGGER	3	   ON PERSIK.A1805SB2_TMP

TR_A1805SB2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1805SB2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1805SB2_TMP_1	TRIGGER	6	BEGIN

TR_A1805SB2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1805SB2_TMP_1	TRIGGER	8	      md5hash (

TR_A1805SB2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1805SB2_TMP_1	TRIGGER	10	         || '.'

TR_A1805SB2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1805SB2_TMP_1	TRIGGER	12	         || '.'

TR_A1805SB2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1805SB2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1805SB2_TMP_1	TRIGGER	15	END;
TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1805SB2_ACTION_NAKL_NEW

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1805SB2_ACTION_NAKL

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1805SB2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1805SA_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1805SA_TMP_1

TR_A1805SA_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1805SA_TMP_1	TRIGGER	3	   ON PERSIK.A1805SA_TMP

TR_A1805SA_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1805SA_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1805SA_TMP_1	TRIGGER	6	BEGIN

TR_A1805SA_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1805SA_TMP_1	TRIGGER	8	      md5hash (

TR_A1805SA_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1805SA_TMP_1	TRIGGER	10	         || '.'

TR_A1805SA_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1805SA_TMP_1	TRIGGER	12	         || '.'

TR_A1805SA_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1805SA_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1805SA_TMP_1	TRIGGER	15	END;
TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1805SA_ACTION_NAKL_NEW

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1805SA_ACTION_NAKL

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1805SA_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1805DB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1805DB_TMP_1

TR_A1805DB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1805DB_TMP_1	TRIGGER	3	   ON PERSIK.A1805DB_TMP

TR_A1805DB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1805DB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1805DB_TMP_1	TRIGGER	6	BEGIN

TR_A1805DB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1805DB_TMP_1	TRIGGER	8	      md5hash (

TR_A1805DB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1805DB_TMP_1	TRIGGER	10	         || '.'

TR_A1805DB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1805DB_TMP_1	TRIGGER	12	         || '.'

TR_A1805DB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1805DB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1805DB_TMP_1	TRIGGER	15	END;
TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1805DB_ACTION_NAKL_NEW

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1805DB_ACTION_NAKL

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1805DB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1804CEG_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1804ceg_TMP_1

TR_A1804CEG_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1804CEG_TMP_1	TRIGGER	3	   ON PERSIK.A1804ceg_TMP

TR_A1804CEG_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1804CEG_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1804CEG_TMP_1	TRIGGER	6	BEGIN

TR_A1804CEG_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1804CEG_TMP_1	TRIGGER	8	END;
TR_A1804BD_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1804Bd_TMP_1

TR_A1804BD_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1804BD_TMP_1	TRIGGER	3	   ON PERSIK.A1804Bd_TMP

TR_A1804BD_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1804BD_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1804BD_TMP_1	TRIGGER	6	BEGIN

TR_A1804BD_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1804BD_TMP_1	TRIGGER	8	      md5hash (

TR_A1804BD_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1804BD_TMP_1	TRIGGER	10	         || '.'

TR_A1804BD_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1804BD_TMP_1	TRIGGER	12	         || '.'

TR_A1804BD_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1804BD_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1804BD_TMP_1	TRIGGER	15	END;
TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1804Bd_ACTION_NAKL_NEW

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1804Bd_ACTION_NAKL

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1804BD_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1803P5TE_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1803p5te_TMP_1

TR_A1803P5TE_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1803P5TE_TMP_1	TRIGGER	3	   ON PERSIK.A1803p5te_TMP

TR_A1803P5TE_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1803P5TE_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1803P5TE_TMP_1	TRIGGER	6	BEGIN

TR_A1803P5TE_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1803P5TE_TMP_1	TRIGGER	8	END;
TR_A1803CR_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1803cr_TMP_1

TR_A1803CR_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1803CR_TMP_1	TRIGGER	3	   ON PERSIK.a1803cr_TMP

TR_A1803CR_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1803CR_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1803CR_TMP_1	TRIGGER	6	BEGIN

TR_A1803CR_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1803CR_TMP_1	TRIGGER	8	      md5hash (

TR_A1803CR_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1803CR_TMP_1	TRIGGER	10	         || '.'

TR_A1803CR_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1803CR_TMP_1	TRIGGER	12	         || '.'

TR_A1803CR_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1803CR_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1803CR_TMP_1	TRIGGER	15	END;
TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1803cr_ACTION_NAKL_NEW

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1803cr_ACTION_NAKL

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1803CR_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1803BO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1803bo_TMP_1

TR_A1803BO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1803BO_TMP_1	TRIGGER	3	   ON PERSIK.a1803bo_TMP

TR_A1803BO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1803BO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1803BO_TMP_1	TRIGGER	6	BEGIN

TR_A1803BO_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1803BO_TMP_1	TRIGGER	8	      md5hash (

TR_A1803BO_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1803BO_TMP_1	TRIGGER	10	         || '.'

TR_A1803BO_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1803BO_TMP_1	TRIGGER	12	         || '.'

TR_A1803BO_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1803BO_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1803BO_TMP_1	TRIGGER	15	END;
TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1803bo_ACTION_NAKL_NEW

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1803bo_ACTION_NAKL

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1803BO_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1802SS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1802SS_TMP_1

TR_A1802SS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1802SS_TMP_1	TRIGGER	3	   ON PERSIK.A1802SS_TMP

TR_A1802SS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1802SS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1802SS_TMP_1	TRIGGER	6	BEGIN

TR_A1802SS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1802SS_TMP_1	TRIGGER	8	      md5hash (

TR_A1802SS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1802SS_TMP_1	TRIGGER	10	         || '.'

TR_A1802SS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1802SS_TMP_1	TRIGGER	12	         || '.'

TR_A1802SS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1802SS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1802SS_TMP_1	TRIGGER	15	END;
TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1802SS_ACTION_NAKL_NEW

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1802SS_ACTION_NAKL

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1802SS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1802PP_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1802PP_TMP_1

TR_A1802PP_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1802PP_TMP_1	TRIGGER	3	   ON PERSIK.A1802PP_TMP

TR_A1802PP_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1802PP_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1802PP_TMP_1	TRIGGER	6	BEGIN

TR_A1802PP_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1802PP_TMP_1	TRIGGER	8	      md5hash (

TR_A1802PP_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1802PP_TMP_1	TRIGGER	10	         || '.'

TR_A1802PP_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1802PP_TMP_1	TRIGGER	12	         || '.'

TR_A1802PP_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1802PP_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1802PP_TMP_1	TRIGGER	15	END;
TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1802PP_ACTION_NAKL_NEW

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1802PP_ACTION_NAKL

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1802PP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1802CM_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1802CM_TMP_1

TR_A1802CM_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1802CM_TMP_1	TRIGGER	3	   ON PERSIK.A1802CM_TMP

TR_A1802CM_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1802CM_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1802CM_TMP_1	TRIGGER	6	BEGIN

TR_A1802CM_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1802CM_TMP_1	TRIGGER	8	END;
TR_A1802CL_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1802CL_TMP_1

TR_A1802CL_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1802CL_TMP_1	TRIGGER	3	   ON PERSIK.A1802CL_TMP

TR_A1802CL_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1802CL_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1802CL_TMP_1	TRIGGER	6	BEGIN

TR_A1802CL_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1802CL_TMP_1	TRIGGER	8	      md5hash (

TR_A1802CL_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1802CL_TMP_1	TRIGGER	10	         || '.'

TR_A1802CL_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1802CL_TMP_1	TRIGGER	12	         || '.'

TR_A1802CL_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1802CL_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1802CL_TMP_1	TRIGGER	15	END;
TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1802CL_ACTION_NAKL_NEW

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1802CL_ACTION_NAKL

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1802CL_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1802CB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1802cb_TMP_1

TR_A1802CB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1802CB_TMP_1	TRIGGER	3	   ON PERSIK.a1802cb_TMP

TR_A1802CB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1802CB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1802CB_TMP_1	TRIGGER	6	BEGIN

TR_A1802CB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1802CB_TMP_1	TRIGGER	8	      md5hash (

TR_A1802CB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1802CB_TMP_1	TRIGGER	10	         || '.'

TR_A1802CB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1802CB_TMP_1	TRIGGER	12	         || '.'

TR_A1802CB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1802CB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1802CB_TMP_1	TRIGGER	15	END;
TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1802cb_ACTION_NAKL_NEW

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1802cb_ACTION_NAKL

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1802CB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1802CABA_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1802caba_TMP_1

TR_A1802CABA_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1802CABA_TMP_1	TRIGGER	3	   ON PERSIK.A1802caba_TMP

TR_A1802CABA_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1802CABA_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1802CABA_TMP_1	TRIGGER	6	BEGIN

TR_A1802CABA_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1802CABA_TMP_1	TRIGGER	8	      md5hash (

TR_A1802CABA_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1802CABA_TMP_1	TRIGGER	10	         || '.'

TR_A1802CABA_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1802CABA_TMP_1	TRIGGER	12	         || '.'

TR_A1802CABA_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1802CABA_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1802CABA_TMP_1	TRIGGER	15	END;
TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1802caba_ACTION_NAKL_NEW

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1802caba_ACTION_NAKL

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1802CABA_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1801TJ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1801tj_TMP_1

TR_A1801TJ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1801TJ_TMP_1	TRIGGER	3	   ON PERSIK.A1801tj_TMP

TR_A1801TJ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1801TJ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1801TJ_TMP_1	TRIGGER	6	BEGIN

TR_A1801TJ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1801TJ_TMP_1	TRIGGER	8	      md5hash (

TR_A1801TJ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1801TJ_TMP_1	TRIGGER	10	         || '.'

TR_A1801TJ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1801TJ_TMP_1	TRIGGER	12	         || '.'

TR_A1801TJ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1801TJ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1801TJ_TMP_1	TRIGGER	15	END;
TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1801tj_ACTION_NAKL_NEW

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1801tj_ACTION_NAKL

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1801TJ_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1801SK_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1801sk_TMP_1

TR_A1801SK_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1801SK_TMP_1	TRIGGER	3	   ON PERSIK.A1801sk_TMP

TR_A1801SK_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1801SK_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1801SK_TMP_1	TRIGGER	6	BEGIN

TR_A1801SK_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1801SK_TMP_1	TRIGGER	8	      md5hash (

TR_A1801SK_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1801SK_TMP_1	TRIGGER	10	         || '.'

TR_A1801SK_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1801SK_TMP_1	TRIGGER	12	         || '.'

TR_A1801SK_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1801SK_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1801SK_TMP_1	TRIGGER	15	END;
TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1801sk_ACTION_NAKL_NEW

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1801sk_ACTION_NAKL

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1801SK_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1801PO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1801po_TMP_1

TR_A1801PO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1801PO_TMP_1	TRIGGER	3	   ON PERSIK.A1801po_TMP

TR_A1801PO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1801PO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1801PO_TMP_1	TRIGGER	6	BEGIN

TR_A1801PO_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1801PO_TMP_1	TRIGGER	8	      md5hash (

TR_A1801PO_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1801PO_TMP_1	TRIGGER	10	         || '.'

TR_A1801PO_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1801PO_TMP_1	TRIGGER	12	         || '.'

TR_A1801PO_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1801PO_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1801PO_TMP_1	TRIGGER	15	END;
TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1801po_ACTION_NAKL_NEW

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1801po_ACTION_NAKL

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1801PO_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1801NYG_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1801nyg_TMP_1

TR_A1801NYG_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1801NYG_TMP_1	TRIGGER	3	   ON PERSIK.A1801nyg_TMP

TR_A1801NYG_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1801NYG_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1801NYG_TMP_1	TRIGGER	6	BEGIN

TR_A1801NYG_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1801NYG_TMP_1	TRIGGER	8	      md5hash (

TR_A1801NYG_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1801NYG_TMP_1	TRIGGER	10	         || '.'

TR_A1801NYG_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1801NYG_TMP_1	TRIGGER	12	         || '.'

TR_A1801NYG_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1801NYG_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1801NYG_TMP_1	TRIGGER	15	END;
TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1801nyg_ACTION_NAKL_NEW

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1801nyg_ACTION_NAKL

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1801NYG_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1801CT_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1801ct_TMP_1

TR_A1801CT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1801CT_TMP_1	TRIGGER	3	   ON PERSIK.A1801ct_TMP

TR_A1801CT_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1801CT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1801CT_TMP_1	TRIGGER	6	BEGIN

TR_A1801CT_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1801CT_TMP_1	TRIGGER	8	      md5hash (

TR_A1801CT_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1801CT_TMP_1	TRIGGER	10	         || '.'

TR_A1801CT_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1801CT_TMP_1	TRIGGER	12	         || '.'

TR_A1801CT_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1801CT_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1801CT_TMP_1	TRIGGER	15	END;
TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1801ct_ACTION_NAKL_NEW

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1801ct_ACTION_NAKL

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1801CT_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1801CC_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1801CC_TMP_1

TR_A1801CC_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1801CC_TMP_1	TRIGGER	3	   ON PERSIK.A1801CC_TMP

TR_A1801CC_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1801CC_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1801CC_TMP_1	TRIGGER	6	BEGIN

TR_A1801CC_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1801CC_TMP_1	TRIGGER	8	END;
TR_A1712NYO3_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712nyo3_TMP_1

TR_A1712NYO3_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712NYO3_TMP_1	TRIGGER	3	   ON PERSIK.a1712nyo3_TMP

TR_A1712NYO3_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712NYO3_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712NYO3_TMP_1	TRIGGER	6	BEGIN

TR_A1712NYO3_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712NYO3_TMP_1	TRIGGER	8	END;
TR_A1712NYO2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712nyo2_TMP_1

TR_A1712NYO2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712NYO2_TMP_1	TRIGGER	3	   ON PERSIK.a1712nyo2_TMP

TR_A1712NYO2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712NYO2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712NYO2_TMP_1	TRIGGER	6	BEGIN

TR_A1712NYO2_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712NYO2_TMP_1	TRIGGER	8	END;
TR_A1712NYO1_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712nyo1_TMP_1

TR_A1712NYO1_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712NYO1_TMP_1	TRIGGER	3	   ON PERSIK.a1712nyo1_TMP

TR_A1712NYO1_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712NYO1_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712NYO1_TMP_1	TRIGGER	6	BEGIN

TR_A1712NYO1_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712NYO1_TMP_1	TRIGGER	8	END;
TR_A1712ES_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712es_TMP_1

TR_A1712ES_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712ES_TMP_1	TRIGGER	3	   ON PERSIK.a1712es_TMP

TR_A1712ES_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712ES_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712ES_TMP_1	TRIGGER	6	BEGIN

TR_A1712ES_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1712ES_TMP_1	TRIGGER	8	      md5hash (

TR_A1712ES_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1712ES_TMP_1	TRIGGER	10	         || '.'

TR_A1712ES_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1712ES_TMP_1	TRIGGER	12	         || '.'

TR_A1712ES_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1712ES_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712ES_TMP_1	TRIGGER	15	END;
TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1712es_ACTION_NAKL_NEW

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1712es_ACTION_NAKL

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1712ES_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1712CB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712cb_TMP_1

TR_A1712CB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712CB_TMP_1	TRIGGER	3	   ON PERSIK.a1712cb_TMP

TR_A1712CB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712CB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712CB_TMP_1	TRIGGER	6	BEGIN

TR_A1712CB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1712CB_TMP_1	TRIGGER	8	      md5hash (

TR_A1712CB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1712CB_TMP_1	TRIGGER	10	         || '.'

TR_A1712CB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1712CB_TMP_1	TRIGGER	12	         || '.'

TR_A1712CB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1712CB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712CB_TMP_1	TRIGGER	15	END;
TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1712cb_ACTION_NAKL_NEW

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1712cb_ACTION_NAKL

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1712CB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1712CBR_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712cbr_TMP_1

TR_A1712CBR_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712CBR_TMP_1	TRIGGER	3	   ON PERSIK.a1712cbr_TMP

TR_A1712CBR_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712CBR_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712CBR_TMP_1	TRIGGER	6	BEGIN

TR_A1712CBR_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1712CBR_TMP_1	TRIGGER	8	      md5hash (

TR_A1712CBR_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1712CBR_TMP_1	TRIGGER	10	         || '.'

TR_A1712CBR_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1712CBR_TMP_1	TRIGGER	12	         || '.'

TR_A1712CBR_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1712CBR_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712CBR_TMP_1	TRIGGER	15	END;
TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1712cbr_ACTION_NAKL_NEW

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1712cbr_ACTION_NAKL

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1712CBR_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1712BS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1712bs_TMP_1

TR_A1712BS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1712BS_TMP_1	TRIGGER	3	   ON PERSIK.a1712bs_TMP

TR_A1712BS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1712BS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1712BS_TMP_1	TRIGGER	6	BEGIN

TR_A1712BS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1712BS_TMP_1	TRIGGER	8	      md5hash (

TR_A1712BS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1712BS_TMP_1	TRIGGER	10	         || '.'

TR_A1712BS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1712BS_TMP_1	TRIGGER	12	         || '.'

TR_A1712BS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1712BS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1712BS_TMP_1	TRIGGER	15	END;
TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1712bs_ACTION_NAKL_NEW

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1712bs_ACTION_NAKL

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1712BS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1711ST_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1711st_TMP_1

TR_A1711ST_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1711ST_TMP_1	TRIGGER	3	   ON PERSIK.A1711st_TMP

TR_A1711ST_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1711ST_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1711ST_TMP_1	TRIGGER	6	BEGIN

TR_A1711ST_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1711ST_TMP_1	TRIGGER	8	      md5hash (

TR_A1711ST_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1711ST_TMP_1	TRIGGER	10	         || '.'

TR_A1711ST_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1711ST_TMP_1	TRIGGER	12	         || '.'

TR_A1711ST_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1711ST_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1711ST_TMP_1	TRIGGER	15	END;
TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1711st_ACTION_NAKL_NEW

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1711st_ACTION_NAKL

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1711ST_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1711SS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1711ss_TMP_1

TR_A1711SS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1711SS_TMP_1	TRIGGER	3	   ON PERSIK.a1711ss_TMP

TR_A1711SS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1711SS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1711SS_TMP_1	TRIGGER	6	BEGIN

TR_A1711SS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1711SS_TMP_1	TRIGGER	8	      md5hash (

TR_A1711SS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1711SS_TMP_1	TRIGGER	10	         || '.'

TR_A1711SS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1711SS_TMP_1	TRIGGER	12	         || '.'

TR_A1711SS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1711SS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1711SS_TMP_1	TRIGGER	15	END;
TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1711ss_ACTION_NAKL_NEW

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1711ss_ACTION_NAKL

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1711SS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1711ES_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1711es_TMP_1

TR_A1711ES_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1711ES_TMP_1	TRIGGER	3	   ON PERSIK.a1711es_TMP

TR_A1711ES_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1711ES_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1711ES_TMP_1	TRIGGER	6	BEGIN

TR_A1711ES_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1711ES_TMP_1	TRIGGER	8	      md5hash (

TR_A1711ES_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1711ES_TMP_1	TRIGGER	10	         || '.'

TR_A1711ES_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1711ES_TMP_1	TRIGGER	12	         || '.'

TR_A1711ES_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1711ES_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1711ES_TMP_1	TRIGGER	15	END;
TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1711es_ACTION_NAKL_NEW

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1711es_ACTION_NAKL

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1711ES_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1711CS6_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1711cs6_TMP_1

TR_A1711CS6_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1711CS6_TMP_1	TRIGGER	3	   ON PERSIK.A1711cs6_TMP

TR_A1711CS6_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1711CS6_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1711CS6_TMP_1	TRIGGER	6	BEGIN

TR_A1711CS6_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1711CS6_TMP_1	TRIGGER	8	END;
TR_A1711CS4_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1711cs4_TMP_1

TR_A1711CS4_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1711CS4_TMP_1	TRIGGER	3	   ON PERSIK.A1711cs4_TMP

TR_A1711CS4_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1711CS4_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1711CS4_TMP_1	TRIGGER	6	BEGIN

TR_A1711CS4_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1711CS4_TMP_1	TRIGGER	8	END;
TR_A1711CB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1711cb_TMP_1

TR_A1711CB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1711CB_TMP_1	TRIGGER	3	   ON PERSIK.a1711cb_TMP

TR_A1711CB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1711CB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1711CB_TMP_1	TRIGGER	6	BEGIN

TR_A1711CB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1711CB_TMP_1	TRIGGER	8	      md5hash (

TR_A1711CB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1711CB_TMP_1	TRIGGER	10	         || '.'

TR_A1711CB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1711CB_TMP_1	TRIGGER	12	         || '.'

TR_A1711CB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1711CB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1711CB_TMP_1	TRIGGER	15	END;
TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1711cb_ACTION_NAKL_NEW

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1711cb_ACTION_NAKL

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1711CB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1710TK_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1710tk_TMP_1

TR_A1710TK_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1710TK_TMP_1	TRIGGER	3	   ON PERSIK.a1710tk_TMP

TR_A1710TK_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1710TK_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1710TK_TMP_1	TRIGGER	6	BEGIN

TR_A1710TK_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1710TK_TMP_1	TRIGGER	8	      md5hash (

TR_A1710TK_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1710TK_TMP_1	TRIGGER	10	         || '.'

TR_A1710TK_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1710TK_TMP_1	TRIGGER	12	         || '.'

TR_A1710TK_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1710TK_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1710TK_TMP_1	TRIGGER	15	END;
TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1710tk_ACTION_NAKL_NEW

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1710tk_ACTION_NAKL

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1710TK_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1710SS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1710ss_TMP_1

TR_A1710SS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1710SS_TMP_1	TRIGGER	3	   ON PERSIK.a1710ss_TMP

TR_A1710SS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1710SS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1710SS_TMP_1	TRIGGER	6	BEGIN

TR_A1710SS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1710SS_TMP_1	TRIGGER	8	      md5hash (

TR_A1710SS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1710SS_TMP_1	TRIGGER	10	         || '.'

TR_A1710SS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1710SS_TMP_1	TRIGGER	12	         || '.'

TR_A1710SS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1710SS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1710SS_TMP_1	TRIGGER	15	END;
TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1710ss_ACTION_NAKL_NEW

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1710ss_ACTION_NAKL

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1710SS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1710SS2_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1710SS2_TMP_1

TR_A1710SS2_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1710SS2_TMP_1	TRIGGER	3	   ON PERSIK.A1710SS2_TMP

TR_A1710SS2_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1710SS2_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1710SS2_TMP_1	TRIGGER	6	BEGIN

TR_A1710SS2_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1710SS2_TMP_1	TRIGGER	8	      md5hash (

TR_A1710SS2_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1710SS2_TMP_1	TRIGGER	10	         || '.'

TR_A1710SS2_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1710SS2_TMP_1	TRIGGER	12	         || '.'

TR_A1710SS2_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1710SS2_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1710SS2_TMP_1	TRIGGER	15	END;
TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1710SS2_ACTION_NAKL_NEW

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1710SS2_ACTION_NAKL

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1710SS2_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1710OO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1710oo_TMP_1

TR_A1710OO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1710OO_TMP_1	TRIGGER	3	   ON PERSIK.a1710oo_TMP

TR_A1710OO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1710OO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1710OO_TMP_1	TRIGGER	6	BEGIN

TR_A1710OO_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1710OO_TMP_1	TRIGGER	8	END;
TR_A1710MO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1710mo_TMP_1

TR_A1710MO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1710MO_TMP_1	TRIGGER	3	   ON PERSIK.a1710mo_TMP

TR_A1710MO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1710MO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1710MO_TMP_1	TRIGGER	6	BEGIN

TR_A1710MO_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1710MO_TMP_1	TRIGGER	8	      md5hash (

TR_A1710MO_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1710MO_TMP_1	TRIGGER	10	         || '.'

TR_A1710MO_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1710MO_TMP_1	TRIGGER	12	         || '.'

TR_A1710MO_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1710MO_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1710MO_TMP_1	TRIGGER	15	END;
TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1710mo_ACTION_NAKL_NEW

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1710mo_ACTION_NAKL

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1710MO_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1710CC_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1710CC_TMP_1

TR_A1710CC_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1710CC_TMP_1	TRIGGER	3	   ON PERSIK.A1710CC_TMP

TR_A1710CC_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1710CC_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1710CC_TMP_1	TRIGGER	6	BEGIN

TR_A1710CC_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1710CC_TMP_1	TRIGGER	8	      md5hash (

TR_A1710CC_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1710CC_TMP_1	TRIGGER	10	         || '.'

TR_A1710CC_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1710CC_TMP_1	TRIGGER	12	         || '.'

TR_A1710CC_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1710CC_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1710CC_TMP_1	TRIGGER	15	END;
TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1710CC_ACTION_NAKL_NEW

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1710CC_ACTION_NAKL

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1710CC_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1709TH_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1709th_TMP_1

TR_A1709TH_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1709TH_TMP_1	TRIGGER	3	   ON PERSIK.a1709th_TMP

TR_A1709TH_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1709TH_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1709TH_TMP_1	TRIGGER	6	BEGIN

TR_A1709TH_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1709TH_TMP_1	TRIGGER	8	      md5hash (

TR_A1709TH_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1709TH_TMP_1	TRIGGER	10	         || '.'

TR_A1709TH_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1709TH_TMP_1	TRIGGER	12	         || '.'

TR_A1709TH_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1709TH_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1709TH_TMP_1	TRIGGER	15	END;
TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1709th_ACTION_NAKL_NEW

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1709th_ACTION_NAKL

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1709TH_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1709OC_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1709oc_TMP_1

TR_A1709OC_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1709OC_TMP_1	TRIGGER	3	   ON PERSIK.a1709oc_TMP

TR_A1709OC_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1709OC_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1709OC_TMP_1	TRIGGER	6	BEGIN

TR_A1709OC_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1709OC_TMP_1	TRIGGER	8	      md5hash (

TR_A1709OC_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1709OC_TMP_1	TRIGGER	10	         || '.'

TR_A1709OC_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1709OC_TMP_1	TRIGGER	12	         || '.'

TR_A1709OC_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1709OC_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1709OC_TMP_1	TRIGGER	15	END;
TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1709oc_ACTION_NAKL_NEW

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1709oc_ACTION_NAKL

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1709OC_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1709CM_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1709cm_TMP_1

TR_A1709CM_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1709CM_TMP_1	TRIGGER	3	   ON PERSIK.a1709cm_TMP

TR_A1709CM_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1709CM_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1709CM_TMP_1	TRIGGER	6	BEGIN

TR_A1709CM_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1709CM_TMP_1	TRIGGER	8	      md5hash (

TR_A1709CM_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1709CM_TMP_1	TRIGGER	10	         || '.'

TR_A1709CM_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1709CM_TMP_1	TRIGGER	12	         || '.'

TR_A1709CM_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1709CM_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1709CM_TMP_1	TRIGGER	15	END;
TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1709cm_ACTION_NAKL_NEW

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1709cm_ACTION_NAKL

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1709CM_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1709CH_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1709ch_TMP_1

TR_A1709CH_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1709CH_TMP_1	TRIGGER	3	   ON PERSIK.a1709ch_TMP

TR_A1709CH_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1709CH_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1709CH_TMP_1	TRIGGER	6	BEGIN

TR_A1709CH_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1709CH_TMP_1	TRIGGER	8	      md5hash (

TR_A1709CH_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1709CH_TMP_1	TRIGGER	10	         || '.'

TR_A1709CH_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1709CH_TMP_1	TRIGGER	12	         || '.'

TR_A1709CH_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1709CH_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1709CH_TMP_1	TRIGGER	15	END;
TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1709ch_ACTION_NAKL_NEW

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1709ch_ACTION_NAKL

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1709CH_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1709BS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1709bs_TMP_1

TR_A1709BS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1709BS_TMP_1	TRIGGER	3	   ON PERSIK.a1709bs_TMP

TR_A1709BS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1709BS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1709BS_TMP_1	TRIGGER	6	BEGIN

TR_A1709BS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1709BS_TMP_1	TRIGGER	8	      md5hash (

TR_A1709BS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1709BS_TMP_1	TRIGGER	10	         || '.'

TR_A1709BS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1709BS_TMP_1	TRIGGER	12	         || '.'

TR_A1709BS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1709BS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1709BS_TMP_1	TRIGGER	15	END;
TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1709bs_ACTION_NAKL_NEW

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1709bs_ACTION_NAKL

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1709BS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1709AO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1709ao_TMP_1

TR_A1709AO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1709AO_TMP_1	TRIGGER	3	   ON PERSIK.a1709ao_TMP

TR_A1709AO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1709AO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1709AO_TMP_1	TRIGGER	6	BEGIN

TR_A1709AO_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1709AO_TMP_1	TRIGGER	8	      md5hash (

TR_A1709AO_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1709AO_TMP_1	TRIGGER	10	         || '.'

TR_A1709AO_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1709AO_TMP_1	TRIGGER	12	         || '.'

TR_A1709AO_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1709AO_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1709AO_TMP_1	TRIGGER	15	END;
TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1709ao_ACTION_NAKL_NEW

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1709ao_ACTION_NAKL

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1709AO_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1708OZ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1708oz_TMP_1

TR_A1708OZ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1708OZ_TMP_1	TRIGGER	3	   ON PERSIK.a1708oz_TMP

TR_A1708OZ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1708OZ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1708OZ_TMP_1	TRIGGER	6	BEGIN

TR_A1708OZ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1708OZ_TMP_1	TRIGGER	8	      md5hash (

TR_A1708OZ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1708OZ_TMP_1	TRIGGER	10	         || '.'

TR_A1708OZ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1708OZ_TMP_1	TRIGGER	12	         || '.'

TR_A1708OZ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1708OZ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1708OZ_TMP_1	TRIGGER	15	END;
TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1708oz_ACTION_NAKL_NEW

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1708oz_ACTION_NAKL

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1708OZ_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1708KR_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1708KR_TMP_1

TR_A1708KR_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1708KR_TMP_1	TRIGGER	3	   ON PERSIK.A1708KR_TMP

TR_A1708KR_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1708KR_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1708KR_TMP_1	TRIGGER	6	BEGIN

TR_A1708KR_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1708KR_TMP_1	TRIGGER	8	      md5hash (

TR_A1708KR_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1708KR_TMP_1	TRIGGER	10	         || '.'

TR_A1708KR_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1708KR_TMP_1	TRIGGER	12	         || '.'

TR_A1708KR_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1708KR_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1708KR_TMP_1	TRIGGER	15	END;
TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1708KR_ACTION_NAKL_NEW

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1708KR_ACTION_NAKL

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1708KR_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1708KB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1708KB_TMP_1

TR_A1708KB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1708KB_TMP_1	TRIGGER	3	   ON PERSIK.A1708KB_TMP

TR_A1708KB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1708KB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1708KB_TMP_1	TRIGGER	6	BEGIN

TR_A1708KB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1708KB_TMP_1	TRIGGER	8	      md5hash (

TR_A1708KB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1708KB_TMP_1	TRIGGER	10	         || '.'

TR_A1708KB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1708KB_TMP_1	TRIGGER	12	         || '.'

TR_A1708KB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1708KB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1708KB_TMP_1	TRIGGER	15	END;
TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1708KB_ACTION_NAKL_NEW

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1708KB_ACTION_NAKL

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1708KB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1708GB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1708GB_TMP_1

TR_A1708GB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1708GB_TMP_1	TRIGGER	3	   ON PERSIK.A1708GB_TMP

TR_A1708GB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1708GB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1708GB_TMP_1	TRIGGER	6	BEGIN

TR_A1708GB_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1708GB_TMP_1	TRIGGER	8	END;
TR_A1708C_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1708c_TMP_1

TR_A1708C_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1708C_TMP_1	TRIGGER	3	   ON PERSIK.a1708c_TMP

TR_A1708C_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1708C_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1708C_TMP_1	TRIGGER	6	BEGIN

TR_A1708C_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1708C_TMP_1	TRIGGER	8	      md5hash (

TR_A1708C_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1708C_TMP_1	TRIGGER	10	         || '.'

TR_A1708C_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1708C_TMP_1	TRIGGER	12	         || '.'

TR_A1708C_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1708C_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1708C_TMP_1	TRIGGER	15	END;
TR_A1708C_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1708c_ACTION_NAKL_NEW

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1708c_ACTION_NAKL

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1708C_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1708CK_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1708Ck_TMP_1

TR_A1708CK_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1708CK_TMP_1	TRIGGER	3	   ON PERSIK.A1708Ck_TMP

TR_A1708CK_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1708CK_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1708CK_TMP_1	TRIGGER	6	BEGIN

TR_A1708CK_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1708CK_TMP_1	TRIGGER	8	      md5hash (

TR_A1708CK_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1708CK_TMP_1	TRIGGER	10	         || '.'

TR_A1708CK_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1708CK_TMP_1	TRIGGER	12	         || '.'

TR_A1708CK_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1708CK_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1708CK_TMP_1	TRIGGER	15	END;
TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1708Ck_ACTION_NAKL_NEW

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1708Ck_ACTION_NAKL

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1708CK_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1707VB_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1707VB_TMP_1

TR_A1707VB_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1707VB_TMP_1	TRIGGER	3	   ON PERSIK.A1707VB_TMP

TR_A1707VB_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1707VB_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1707VB_TMP_1	TRIGGER	6	BEGIN

TR_A1707VB_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1707VB_TMP_1	TRIGGER	8	      md5hash (

TR_A1707VB_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1707VB_TMP_1	TRIGGER	10	         || '.'

TR_A1707VB_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1707VB_TMP_1	TRIGGER	12	         || '.'

TR_A1707VB_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1707VB_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1707VB_TMP_1	TRIGGER	15	END;
TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1707VB_ACTION_NAKL_NEW

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1707VB_ACTION_NAKL

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1707VB_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1707HI_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1707HI_TMP_1

TR_A1707HI_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1707HI_TMP_1	TRIGGER	3	   ON PERSIK.A1707HI_TMP

TR_A1707HI_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1707HI_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1707HI_TMP_1	TRIGGER	6	BEGIN

TR_A1707HI_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1707HI_TMP_1	TRIGGER	8	      md5hash (

TR_A1707HI_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1707HI_TMP_1	TRIGGER	10	         || '.'

TR_A1707HI_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1707HI_TMP_1	TRIGGER	12	         || '.'

TR_A1707HI_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1707HI_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1707HI_TMP_1	TRIGGER	15	END;
TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1707HI_ACTION_NAKL_NEW

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1707HI_ACTION_NAKL

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1707HI_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1707CA_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1707CA_TMP_1

TR_A1707CA_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1707CA_TMP_1	TRIGGER	3	   ON PERSIK.A1707CA_TMP

TR_A1707CA_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1707CA_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1707CA_TMP_1	TRIGGER	6	BEGIN

TR_A1707CA_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1707CA_TMP_1	TRIGGER	8	      md5hash (

TR_A1707CA_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1707CA_TMP_1	TRIGGER	10	         || '.'

TR_A1707CA_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1707CA_TMP_1	TRIGGER	12	         || '.'

TR_A1707CA_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1707CA_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1707CA_TMP_1	TRIGGER	15	END;
TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1707CA_ACTION_NAKL_NEW

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1707CA_ACTION_NAKL

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1707CA_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1706SL_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1706sl_TMP_1

TR_A1706SL_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1706SL_TMP_1	TRIGGER	3	   ON PERSIK.a1706sl_TMP

TR_A1706SL_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1706SL_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1706SL_TMP_1	TRIGGER	6	BEGIN

TR_A1706SL_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1706SL_TMP_1	TRIGGER	8	      md5hash (

TR_A1706SL_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1706SL_TMP_1	TRIGGER	10	         || '.'

TR_A1706SL_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1706SL_TMP_1	TRIGGER	12	         || '.'

TR_A1706SL_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1706SL_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1706SL_TMP_1	TRIGGER	15	END;
TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1706sl_ACTION_NAKL_NEW

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1706sl_ACTION_NAKL

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1706SL_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1706SC_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1706sc_TMP_1

TR_A1706SC_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1706SC_TMP_1	TRIGGER	3	   ON PERSIK.a1706sc_TMP

TR_A1706SC_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1706SC_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1706SC_TMP_1	TRIGGER	6	BEGIN

TR_A1706SC_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1706SC_TMP_1	TRIGGER	8	      md5hash (

TR_A1706SC_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1706SC_TMP_1	TRIGGER	10	         || '.'

TR_A1706SC_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1706SC_TMP_1	TRIGGER	12	         || '.'

TR_A1706SC_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1706SC_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1706SC_TMP_1	TRIGGER	15	END;
TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1706sc_ACTION_NAKL_NEW

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1706sc_ACTION_NAKL

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1706SC_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1706F_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1706F_TMP_1

TR_A1706F_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1706F_TMP_1	TRIGGER	3	   ON PERSIK.A1706F_TMP

TR_A1706F_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1706F_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1706F_TMP_1	TRIGGER	6	BEGIN

TR_A1706F_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1706F_TMP_1	TRIGGER	8	      md5hash (

TR_A1706F_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1706F_TMP_1	TRIGGER	10	         || '.'

TR_A1706F_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1706F_TMP_1	TRIGGER	12	         || '.'

TR_A1706F_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1706F_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1706F_TMP_1	TRIGGER	15	END;
TR_A1706F_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1706F_ACTION_NAKL_NEW

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1706F_ACTION_NAKL

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1706F_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1705UK_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1705UK_TMP_1

TR_A1705UK_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1705UK_TMP_1	TRIGGER	3	   ON PERSIK.A1705UK_TMP

TR_A1705UK_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1705UK_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1705UK_TMP_1	TRIGGER	6	BEGIN

TR_A1705UK_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1705UK_TMP_1	TRIGGER	8	      md5hash (

TR_A1705UK_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1705UK_TMP_1	TRIGGER	10	         || '.'

TR_A1705UK_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1705UK_TMP_1	TRIGGER	12	         || '.'

TR_A1705UK_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1705UK_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1705UK_TMP_1	TRIGGER	15	END;
TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1705UK_ACTION_NAKL_NEW

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1705UK_ACTION_NAKL

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1705UK_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1705KO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1705KO_TMP_1

TR_A1705KO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1705KO_TMP_1	TRIGGER	3	   ON PERSIK.A1705KO_TMP

TR_A1705KO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1705KO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1705KO_TMP_1	TRIGGER	6	BEGIN

TR_A1705KO_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1705KO_TMP_1	TRIGGER	8	      md5hash (

TR_A1705KO_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1705KO_TMP_1	TRIGGER	10	         || '.'

TR_A1705KO_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1705KO_TMP_1	TRIGGER	12	         || '.'

TR_A1705KO_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1705KO_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1705KO_TMP_1	TRIGGER	15	END;
TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1705KO_ACTION_NAKL_NEW

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1705KO_ACTION_NAKL

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1705KO_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1704VS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1704VS_TMP_1

TR_A1704VS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1704VS_TMP_1	TRIGGER	3	   ON PERSIK.A1704VS_TMP

TR_A1704VS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1704VS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1704VS_TMP_1	TRIGGER	6	BEGIN

TR_A1704VS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1704VS_TMP_1	TRIGGER	8	      md5hash (

TR_A1704VS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1704VS_TMP_1	TRIGGER	10	         || '.'

TR_A1704VS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1704VS_TMP_1	TRIGGER	12	         || '.'

TR_A1704VS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1704VS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1704VS_TMP_1	TRIGGER	15	END;
TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1704VS_ACTION_NAKL_NEW

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1704VS_ACTION_NAKL

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1704VS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1704F_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1704F_TMP_1

TR_A1704F_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1704F_TMP_1	TRIGGER	3	   ON PERSIK.A1704F_TMP

TR_A1704F_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1704F_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1704F_TMP_1	TRIGGER	6	BEGIN

TR_A1704F_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1704F_TMP_1	TRIGGER	8	      md5hash (

TR_A1704F_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1704F_TMP_1	TRIGGER	10	         || '.'

TR_A1704F_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1704F_TMP_1	TRIGGER	12	         || '.'

TR_A1704F_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1704F_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1704F_TMP_1	TRIGGER	15	END;
TR_A1704F_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1704F_ACTION_NAKL_NEW

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1704F_ACTION_NAKL

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1704F_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1704CA_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1704CA_TMP_1

TR_A1704CA_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1704CA_TMP_1	TRIGGER	3	   ON PERSIK.A1704CA_TMP

TR_A1704CA_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1704CA_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1704CA_TMP_1	TRIGGER	6	BEGIN

TR_A1704CA_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1704CA_TMP_1	TRIGGER	8	      md5hash (

TR_A1704CA_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1704CA_TMP_1	TRIGGER	10	         || '.'

TR_A1704CA_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1704CA_TMP_1	TRIGGER	12	         || '.'

TR_A1704CA_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1704CA_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1704CA_TMP_1	TRIGGER	15	END;
TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1704CA_ACTION_NAKL_NEW

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1704CA_ACTION_NAKL

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1704CA_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1703VN_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1703VN_TMP_1

TR_A1703VN_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1703VN_TMP_1	TRIGGER	3	   ON PERSIK.A1703VN_TMP

TR_A1703VN_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1703VN_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1703VN_TMP_1	TRIGGER	6	BEGIN

TR_A1703VN_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1703VN_TMP_1	TRIGGER	8	      md5hash (

TR_A1703VN_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1703VN_TMP_1	TRIGGER	10	         || '.'

TR_A1703VN_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1703VN_TMP_1	TRIGGER	12	         || '.'

TR_A1703VN_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1703VN_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1703VN_TMP_1	TRIGGER	15	END;
TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1703VN_ACTION_NAKL_NEW

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1703VN_ACTION_NAKL

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1703VN_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1703F_TMP_1	TRIGGER	1	TRIGGER TR_A1703f_TMP_1

TR_A1703F_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1703F_TMP_1	TRIGGER	3	   ON A1703f_TMP

TR_A1703F_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1703F_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1703F_TMP_1	TRIGGER	6	BEGIN

TR_A1703F_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1703F_TMP_1	TRIGGER	8	      md5hash (

TR_A1703F_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1703F_TMP_1	TRIGGER	10	         || '.'

TR_A1703F_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1703F_TMP_1	TRIGGER	12	         || '.'

TR_A1703F_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1703F_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1703F_TMP_1	TRIGGER	15	END;
TR_A1703F_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1703F_ACTION_NAKL_NEW

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1703F_ACTION_NAKL

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1703F_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1703BS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1703BS_TMP_1

TR_A1703BS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1703BS_TMP_1	TRIGGER	3	   ON PERSIK.A1703BS_TMP

TR_A1703BS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1703BS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1703BS_TMP_1	TRIGGER	6	BEGIN

TR_A1703BS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1703BS_TMP_1	TRIGGER	8	      md5hash (

TR_A1703BS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1703BS_TMP_1	TRIGGER	10	         || '.'

TR_A1703BS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1703BS_TMP_1	TRIGGER	12	         || '.'

TR_A1703BS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1703BS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1703BS_TMP_1	TRIGGER	15	END;
TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1703BS_ACTION_NAKL_NEW

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1703BS_ACTION_NAKL

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1703BS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1703BE_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1703BE_TMP_1

TR_A1703BE_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1703BE_TMP_1	TRIGGER	3	   ON PERSIK.A1703BE_TMP

TR_A1703BE_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1703BE_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1703BE_TMP_1	TRIGGER	6	BEGIN

TR_A1703BE_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1703BE_TMP_1	TRIGGER	8	      md5hash (

TR_A1703BE_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1703BE_TMP_1	TRIGGER	10	         || '.'

TR_A1703BE_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1703BE_TMP_1	TRIGGER	12	         || '.'

TR_A1703BE_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1703BE_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1703BE_TMP_1	TRIGGER	15	END;
TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1703BE_ACTION_NAKL_NEW

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1703BE_ACTION_NAKL

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1703BE_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1702KV_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1702KV_TMP_1

TR_A1702KV_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1702KV_TMP_1	TRIGGER	3	   ON PERSIK.A1702KV_TMP

TR_A1702KV_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1702KV_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1702KV_TMP_1	TRIGGER	6	BEGIN

TR_A1702KV_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1702KV_TMP_1	TRIGGER	8	      md5hash (

TR_A1702KV_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1702KV_TMP_1	TRIGGER	10	         || '.'

TR_A1702KV_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1702KV_TMP_1	TRIGGER	12	         || '.'

TR_A1702KV_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1702KV_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1702KV_TMP_1	TRIGGER	15	END;
TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1702KV_ACTION_NAKL_NEW

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1702KV_ACTION_NAKL

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1702KV_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1702KVV_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1702KVV_TMP_1

TR_A1702KVV_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1702KVV_TMP_1	TRIGGER	3	   ON PERSIK.A1702KVV_TMP

TR_A1702KVV_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1702KVV_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1702KVV_TMP_1	TRIGGER	6	BEGIN

TR_A1702KVV_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1702KVV_TMP_1	TRIGGER	8	      md5hash (

TR_A1702KVV_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1702KVV_TMP_1	TRIGGER	10	         || '.'

TR_A1702KVV_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1702KVV_TMP_1	TRIGGER	12	         || '.'

TR_A1702KVV_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1702KVV_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1702KVV_TMP_1	TRIGGER	15	END;
TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1702KVV_ACTION_NAKL_NEW

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1702KVV_ACTION_NAKL

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1702KVV_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1702KS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1702KS_TMP_1

TR_A1702KS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1702KS_TMP_1	TRIGGER	3	   ON PERSIK.A1702KS_TMP

TR_A1702KS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1702KS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1702KS_TMP_1	TRIGGER	6	BEGIN

TR_A1702KS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1702KS_TMP_1	TRIGGER	8	      md5hash (

TR_A1702KS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1702KS_TMP_1	TRIGGER	10	         || '.'

TR_A1702KS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1702KS_TMP_1	TRIGGER	12	         || '.'

TR_A1702KS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1702KS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1702KS_TMP_1	TRIGGER	15	END;
TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1702KS_ACTION_NAKL_NEW

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1702KS_ACTION_NAKL

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1702KS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1702KP_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1702KP_TMP_1

TR_A1702KP_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1702KP_TMP_1	TRIGGER	3	   ON PERSIK.A1702KP_TMP

TR_A1702KP_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1702KP_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1702KP_TMP_1	TRIGGER	6	BEGIN

TR_A1702KP_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1702KP_TMP_1	TRIGGER	8	      md5hash (

TR_A1702KP_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1702KP_TMP_1	TRIGGER	10	         || '.'

TR_A1702KP_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1702KP_TMP_1	TRIGGER	12	         || '.'

TR_A1702KP_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1702KP_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1702KP_TMP_1	TRIGGER	15	END;
TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1702KP_ACTION_NAKL_NEW

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1702KP_ACTION_NAKL

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1702KP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1702B_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1702b_TMP_1

TR_A1702B_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1702B_TMP_1	TRIGGER	3	   ON PERSIK.a1702b_TMP

TR_A1702B_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1702B_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1702B_TMP_1	TRIGGER	6	BEGIN

TR_A1702B_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1702B_TMP_1	TRIGGER	8	      md5hash (

TR_A1702B_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1702B_TMP_1	TRIGGER	10	         || '.'

TR_A1702B_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1702B_TMP_1	TRIGGER	12	         || '.'

TR_A1702B_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1702B_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1702B_TMP_1	TRIGGER	15	END;
TR_A1702B_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1702b_ACTION_NAKL_NEW

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1702b_ACTION_NAKL

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1702B_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1701SH_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1701sh_TMP_1

TR_A1701SH_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1701SH_TMP_1	TRIGGER	3	   ON PERSIK.a1701sh_TMP

TR_A1701SH_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1701SH_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1701SH_TMP_1	TRIGGER	6	BEGIN

TR_A1701SH_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1701SH_TMP_1	TRIGGER	8	      md5hash (

TR_A1701SH_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1701SH_TMP_1	TRIGGER	10	         || '.'

TR_A1701SH_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1701SH_TMP_1	TRIGGER	12	         || '.'

TR_A1701SH_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1701SH_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1701SH_TMP_1	TRIGGER	15	END;
TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1701sh_ACTION_NAKL_NEW

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1701sh_ACTION_NAKL

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1701SH_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1701KS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1701ks_TMP_1

TR_A1701KS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1701KS_TMP_1	TRIGGER	3	   ON PERSIK.a1701ks_TMP

TR_A1701KS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1701KS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1701KS_TMP_1	TRIGGER	6	BEGIN

TR_A1701KS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1701KS_TMP_1	TRIGGER	8	      md5hash (

TR_A1701KS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1701KS_TMP_1	TRIGGER	10	         || '.'

TR_A1701KS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1701KS_TMP_1	TRIGGER	12	         || '.'

TR_A1701KS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1701KS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1701KS_TMP_1	TRIGGER	15	END;
TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1701ks_ACTION_NAKL_NEW

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1701ks_ACTION_NAKL

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1701KS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1701KP_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1701kp_TMP_1

TR_A1701KP_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1701KP_TMP_1	TRIGGER	3	   ON PERSIK.a1701kp_TMP

TR_A1701KP_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1701KP_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1701KP_TMP_1	TRIGGER	6	BEGIN

TR_A1701KP_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1701KP_TMP_1	TRIGGER	8	      md5hash (

TR_A1701KP_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1701KP_TMP_1	TRIGGER	10	         || '.'

TR_A1701KP_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1701KP_TMP_1	TRIGGER	12	         || '.'

TR_A1701KP_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1701KP_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1701KP_TMP_1	TRIGGER	15	END;
TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1701kp_ACTION_NAKL_NEW

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1701kp_ACTION_NAKL

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1701KP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A16P5NET_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A16P5NET_UPD

TR_A16P5NET_UPD	TRIGGER	2	/* Formatted on 18/04/2016 13:53:43 (QP5 v5.252.13127.32867) */

TR_A16P5NET_UPD	TRIGGER	3	BEFORE INSERT OR UPDATE

TR_A16P5NET_UPD	TRIGGER	4	ON PERSIK.A16P5NET

TR_A16P5NET_UPD	TRIGGER	5	REFERENCING NEW AS New OLD AS Old

TR_A16P5NET_UPD	TRIGGER	6	FOR EACH ROW

TR_A16P5NET_UPD	TRIGGER	7	BEGIN

TR_A16P5NET_UPD	TRIGGER	8	   :new.net_kod := md5hash ( :new.net_name);

TR_A16P5NET_UPD	TRIGGER	9	END;
TR_A16CO_TRANSIT_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A16CO_TRANSIT_TMP_1

TR_A16CO_TRANSIT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A16CO_TRANSIT_TMP_1	TRIGGER	3	   ON PERSIK.A16CO_TRANSIT_TMP

TR_A16CO_TRANSIT_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A16CO_TRANSIT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A16CO_TRANSIT_TMP_1	TRIGGER	6	BEGIN

TR_A16CO_TRANSIT_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A16CO_TRANSIT_TMP_1	TRIGGER	8	   :new.h_url := md5hash (:new.url);

TR_A16CO_TRANSIT_TMP_1	TRIGGER	9	END;
TR_A16COURL_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A16COURL_UPD

TR_A16COURL_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A16COURL_UPD	TRIGGER	3	   ON PERSIK.A16COURL

TR_A16COURL_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A16COURL_UPD	TRIGGER	5	   FOR EACH ROW

TR_A16COURL_UPD	TRIGGER	6	BEGIN

TR_A16COURL_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A16COURL_UPD	TRIGGER	8	END;
TR_A16COTP_UPD3	TRIGGER	1	TRIGGER PERSIK.TR_A16COTP_UPD3

TR_A16COTP_UPD3	TRIGGER	2	   BEFORE UPDATE OF tm_comm, tm

TR_A16COTP_UPD3	TRIGGER	3	   ON PERSIK.A16COTP

TR_A16COTP_UPD3	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A16COTP_UPD3	TRIGGER	5	   FOR EACH ROW

TR_A16COTP_UPD3	TRIGGER	6	DECLARE

TR_A16COTP_UPD3	TRIGGER	7	   v_tp        VARCHAR2 (512);

TR_A16COTP_UPD3	TRIGGER	8	   v_ts_mail   VARCHAR2 (255);

TR_A16COTP_UPD3	TRIGGER	9	BEGIN

TR_A16COTP_UPD3	TRIGGER	10	   IF (LENGTH (:new.tm_comm) > 0 OR :new.tm = 2)

TR_A16COTP_UPD3	TRIGGER	11	   THEN

TR_A16COTP_UPD3	TRIGGER	12	      SELECT DISTINCT t.tp, u.e_mail

TR_A16COTP_UPD3	TRIGGER	13	        INTO v_tp, v_ts_mail

TR_A16COTP_UPD3	TRIGGER	14	        FROM A16CO t, user_list u

TR_A16COTP_UPD3	TRIGGER	15	       WHERE     u.tab_num = t.tab_num

TR_A16COTP_UPD3	TRIGGER	16	             AND u.dpt_id = 1

TR_A16COTP_UPD3	TRIGGER	17	             AND u.is_spd = 1

TR_A16COTP_UPD3	TRIGGER	18	             AND t.visitdate = :new.visitdate

TR_A16COTP_UPD3	TRIGGER	19	             AND t.tp_kod_key = :new.tp_kod;

TR_A16COTP_UPD3	TRIGGER	20	

TR_A16COTP_UPD3	TRIGGER	21	      PR_SENDMAIL (

TR_A16COTP_UPD3	TRIGGER	22	         v_ts_mail,

TR_A16COTP_UPD3	TRIGGER	23	         'Стандарт кофе - комментарий ТМ',

TR_A16COTP_UPD3	TRIGGER	24	            '<b>Дата визита:</b> '

TR_A16COTP_UPD3	TRIGGER	25	         || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A16COTP_UPD3	TRIGGER	26	         || '<br>'

TR_A16COTP_UPD3	TRIGGER	27	         || '<b>ТП:</b> '

TR_A16COTP_UPD3	TRIGGER	28	         || v_tp

TR_A16COTP_UPD3	TRIGGER	29	         || '<br>'

TR_A16COTP_UPD3	TRIGGER	30	         || '<b>ТМ оставил комментарий и/или не подтвердил стандарт:</b> '

TR_A16COTP_UPD3	TRIGGER	31	         || '<br>'

TR_A16COTP_UPD3	TRIGGER	32	         || :new.tm_comm

TR_A16COTP_UPD3	TRIGGER	33	         || '');

TR_A16COTP_UPD3	TRIGGER	34	   END IF;

TR_A16COTP_UPD3	TRIGGER	35	END;
TR_A16COTP_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_A16COTP_UPD2

TR_A16COTP_UPD2	TRIGGER	2	   BEFORE UPDATE OF traid, traid_comm

TR_A16COTP_UPD2	TRIGGER	3	   ON PERSIK.A16COTP

TR_A16COTP_UPD2	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A16COTP_UPD2	TRIGGER	5	   FOR EACH ROW

TR_A16COTP_UPD2	TRIGGER	6	DECLARE

TR_A16COTP_UPD2	TRIGGER	7	   v_tp           VARCHAR2 (512);

TR_A16COTP_UPD2	TRIGGER	8	   v_ts_mail      VARCHAR2 (255);

TR_A16COTP_UPD2	TRIGGER	9	   v_tm_mail      VARCHAR2 (255);

TR_A16COTP_UPD2	TRIGGER	10	   v_traid_text   VARCHAR2 (255);

TR_A16COTP_UPD2	TRIGGER	11	BEGIN

TR_A16COTP_UPD2	TRIGGER	12	   :new.traid_lu := SYSDATE;

TR_A16COTP_UPD2	TRIGGER	13	

TR_A16COTP_UPD2	TRIGGER	14	   SELECT DISTINCT t.tp, u.e_mail, pu.e_mail

TR_A16COTP_UPD2	TRIGGER	15	     INTO v_tp, v_ts_mail, v_tm_mail

TR_A16COTP_UPD2	TRIGGER	16	     FROM A16CO t,

TR_A16COTP_UPD2	TRIGGER	17	          user_list u,

TR_A16COTP_UPD2	TRIGGER	18	          parents p,

TR_A16COTP_UPD2	TRIGGER	19	          user_list pu

TR_A16COTP_UPD2	TRIGGER	20	    WHERE     p.parent = pu.tn

TR_A16COTP_UPD2	TRIGGER	21	          AND p.tn = u.tn

TR_A16COTP_UPD2	TRIGGER	22	          AND u.tab_num = t.tab_num

TR_A16COTP_UPD2	TRIGGER	23	          AND u.dpt_id = 1

TR_A16COTP_UPD2	TRIGGER	24	          AND u.is_spd = 1

TR_A16COTP_UPD2	TRIGGER	25	          AND t.visitdate = :new.visitdate

TR_A16COTP_UPD2	TRIGGER	26	          AND t.tp_kod_key = :new.tp_kod;

TR_A16COTP_UPD2	TRIGGER	27	

TR_A16COTP_UPD2	TRIGGER	28	   SELECT DECODE (

TR_A16COTP_UPD2	TRIGGER	29	             NVL (:new.traid, 0),

TR_A16COTP_UPD2	TRIGGER	30	             1,    'стандарт ('

TR_A16COTP_UPD2	TRIGGER	31	                || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A16COTP_UPD2	TRIGGER	32	                || ', '

TR_A16COTP_UPD2	TRIGGER	33	                || :new.tp_kod

TR_A16COTP_UPD2	TRIGGER	34	                || ') по кофе отклонен ВСТМ',

TR_A16COTP_UPD2	TRIGGER	35	             '')

TR_A16COTP_UPD2	TRIGGER	36	     INTO v_traid_text

TR_A16COTP_UPD2	TRIGGER	37	     FROM DUAL;

TR_A16COTP_UPD2	TRIGGER	38	

TR_A16COTP_UPD2	TRIGGER	39	

TR_A16COTP_UPD2	TRIGGER	40	   PR_SENDMAIL (

TR_A16COTP_UPD2	TRIGGER	41	      v_ts_mail || ',' || v_tm_mail,

TR_A16COTP_UPD2	TRIGGER	42	      'Стандарт кофе - комментарий ВСТМ',

TR_A16COTP_UPD2	TRIGGER	43	         '<b>Дата визита:</b> '

TR_A16COTP_UPD2	TRIGGER	44	      || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A16COTP_UPD2	TRIGGER	45	      || '<br>'

TR_A16COTP_UPD2	TRIGGER	46	      || '<b>ТП:</b> '

TR_A16COTP_UPD2	TRIGGER	47	      || v_tp

TR_A16COTP_UPD2	TRIGGER	48	      || '<br>'

TR_A16COTP_UPD2	TRIGGER	49	      || '<b>ВСТМ оставил комментарий:</b> '

TR_A16COTP_UPD2	TRIGGER	50	      || '<br>'

TR_A16COTP_UPD2	TRIGGER	51	      || :new.traid_comm

TR_A16COTP_UPD2	TRIGGER	52	      || '<br>'

TR_A16COTP_UPD2	TRIGGER	53	      || v_traid_text);

TR_A16COTP_UPD2	TRIGGER	54	END;
TR_A16COTP_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_A16COTP_UPD1

TR_A16COTP_UPD1	TRIGGER	2	   BEFORE UPDATE OF tm

TR_A16COTP_UPD1	TRIGGER	3	   ON PERSIK.A16COTP

TR_A16COTP_UPD1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A16COTP_UPD1	TRIGGER	5	   FOR EACH ROW

TR_A16COTP_UPD1	TRIGGER	6	BEGIN

TR_A16COTP_UPD1	TRIGGER	7	   :new.tm_lu := SYSDATE;

TR_A16COTP_UPD1	TRIGGER	8	END;
TR_A16COTP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A16COTP_UPD

TR_A16COTP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A16COTP_UPD	TRIGGER	3	   ON PERSIK.A16COTP

TR_A16COTP_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A16COTP_UPD	TRIGGER	5	   FOR EACH ROW

TR_A16COTP_UPD	TRIGGER	6	BEGIN

TR_A16COTP_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A16COTP_UPD	TRIGGER	8	END tr_A16COTP_upd;
TR_A1612VS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1612VS_TMP_1

TR_A1612VS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1612VS_TMP_1	TRIGGER	3	   ON PERSIK.a1612vs_TMP

TR_A1612VS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1612VS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1612VS_TMP_1	TRIGGER	6	BEGIN

TR_A1612VS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1612VS_TMP_1	TRIGGER	8	      md5hash (

TR_A1612VS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1612VS_TMP_1	TRIGGER	10	         || '.'

TR_A1612VS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1612VS_TMP_1	TRIGGER	12	         || '.'

TR_A1612VS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1612VS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1612VS_TMP_1	TRIGGER	15	END;
TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1612VS_ACTION_NAKL_NEW

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1612vs_ACTION_NAKL

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1612VS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1612SO_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1612SO_TMP_1

TR_A1612SO_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1612SO_TMP_1	TRIGGER	3	   ON PERSIK.a1612so_TMP

TR_A1612SO_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1612SO_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1612SO_TMP_1	TRIGGER	6	BEGIN

TR_A1612SO_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1612SO_TMP_1	TRIGGER	8	      md5hash (

TR_A1612SO_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1612SO_TMP_1	TRIGGER	10	         || '.'

TR_A1612SO_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1612SO_TMP_1	TRIGGER	12	         || '.'

TR_A1612SO_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1612SO_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1612SO_TMP_1	TRIGGER	15	END;
TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1612SO_ACTION_NAKL_NEW

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1612so_ACTION_NAKL

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1612SO_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1612PZ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1612PZ_TMP_1

TR_A1612PZ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1612PZ_TMP_1	TRIGGER	3	   ON PERSIK.A1612PZ_TMP

TR_A1612PZ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1612PZ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1612PZ_TMP_1	TRIGGER	6	BEGIN

TR_A1612PZ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1612PZ_TMP_1	TRIGGER	8	      md5hash (

TR_A1612PZ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1612PZ_TMP_1	TRIGGER	10	         || '.'

TR_A1612PZ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1612PZ_TMP_1	TRIGGER	12	         || '.'

TR_A1612PZ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1612PZ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1612PZ_TMP_1	TRIGGER	15	END;
TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1612PZ_ACTION_NAKL_NEW

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1612PZ_ACTION_NAKL

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1612PZ_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1612NP_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1612NP_TMP_1

TR_A1612NP_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1612NP_TMP_1	TRIGGER	3	   ON PERSIK.a1612np_TMP

TR_A1612NP_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1612NP_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1612NP_TMP_1	TRIGGER	6	BEGIN

TR_A1612NP_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1612NP_TMP_1	TRIGGER	8	      md5hash (

TR_A1612NP_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1612NP_TMP_1	TRIGGER	10	         || '.'

TR_A1612NP_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1612NP_TMP_1	TRIGGER	12	         || '.'

TR_A1612NP_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1612NP_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1612NP_TMP_1	TRIGGER	15	END;
TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1612NP_ACTION_NAKL_NEW

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1612np_ACTION_NAKL

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1612NP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1610S7_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1610S7_TMP_1

TR_A1610S7_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1610S7_TMP_1	TRIGGER	3	   ON PERSIK.A1610S7_TMP

TR_A1610S7_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1610S7_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1610S7_TMP_1	TRIGGER	6	BEGIN

TR_A1610S7_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1610S7_TMP_1	TRIGGER	8	      md5hash (

TR_A1610S7_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1610S7_TMP_1	TRIGGER	10	         || '.'

TR_A1610S7_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1610S7_TMP_1	TRIGGER	12	         || '.'

TR_A1610S7_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1610S7_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1610S7_TMP_1	TRIGGER	15	END;
TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1610S7_ACTION_NAKL_NEW

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1610S7_ACTION_NAKL

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	11	--:new.bonus_sum1 := 10;

TR_A1610S7_ACTION_NAKL_NEW	TRIGGER	12	END;
TR_A1609B_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1609B_TMP_1

TR_A1609B_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1609B_TMP_1	TRIGGER	3	   ON PERSIK.A1609B_TMP

TR_A1609B_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1609B_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1609B_TMP_1	TRIGGER	6	BEGIN

TR_A1609B_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1609B_TMP_1	TRIGGER	8	      md5hash (

TR_A1609B_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1609B_TMP_1	TRIGGER	10	         || '.'

TR_A1609B_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1609B_TMP_1	TRIGGER	12	         || '.'

TR_A1609B_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1609B_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1609B_TMP_1	TRIGGER	15	END;
TR_A1609B_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1609B_ACTION_NAKL_NEW

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1609B_ACTION_NAKL

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	11	--:new.bonus_sum1 := 10;

TR_A1609B_ACTION_NAKL_NEW	TRIGGER	12	END;
TR_A1608RZ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1608RZ_TMP_1

TR_A1608RZ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1608RZ_TMP_1	TRIGGER	3	   ON PERSIK.A1608RZ_TMP

TR_A1608RZ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1608RZ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1608RZ_TMP_1	TRIGGER	6	BEGIN

TR_A1608RZ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1608RZ_TMP_1	TRIGGER	8	      md5hash (

TR_A1608RZ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1608RZ_TMP_1	TRIGGER	10	         || '.'

TR_A1608RZ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1608RZ_TMP_1	TRIGGER	12	         || '.'

TR_A1608RZ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1608RZ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1608RZ_TMP_1	TRIGGER	15	END;
TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1608RZ_ACTION_NAKL_NEW

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1608RZ_ACTION_NAKL

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	11	

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	12	   --:new.bonus_sum1 := 10;

TR_A1608RZ_ACTION_NAKL_NEW	TRIGGER	13	END;
TR_A1608LJ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1608LJ_TMP_1

TR_A1608LJ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1608LJ_TMP_1	TRIGGER	3	   ON PERSIK.A1608LJ_TMP

TR_A1608LJ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1608LJ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1608LJ_TMP_1	TRIGGER	6	BEGIN

TR_A1608LJ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1608LJ_TMP_1	TRIGGER	8	      md5hash (

TR_A1608LJ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1608LJ_TMP_1	TRIGGER	10	         || '.'

TR_A1608LJ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1608LJ_TMP_1	TRIGGER	12	         || '.'

TR_A1608LJ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1608LJ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1608LJ_TMP_1	TRIGGER	15	END;
TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1608LJ_ACTION_NAKL_NEW

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1608LJ_ACTION_NAKL

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	11	

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	12	   :new.bonus_sum1 := 10;

TR_A1608LJ_ACTION_NAKL_NEW	TRIGGER	13	END;
TR_A1608CS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1608CS_TMP_1

TR_A1608CS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1608CS_TMP_1	TRIGGER	3	   ON PERSIK.A1608CS_TMP

TR_A1608CS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1608CS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1608CS_TMP_1	TRIGGER	6	BEGIN

TR_A1608CS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1608CS_TMP_1	TRIGGER	8	      md5hash (

TR_A1608CS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1608CS_TMP_1	TRIGGER	10	         || '.'

TR_A1608CS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1608CS_TMP_1	TRIGGER	12	         || '.'

TR_A1608CS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1608CS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1608CS_TMP_1	TRIGGER	15	END;
TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1608CS_ACTION_NAKL_NEW

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1608CS_ACTION_NAKL

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1608CS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1607SJ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1607SJ_TMP_1

TR_A1607SJ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1607SJ_TMP_1	TRIGGER	3	   ON PERSIK.a1607sj_TMP

TR_A1607SJ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1607SJ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1607SJ_TMP_1	TRIGGER	6	BEGIN

TR_A1607SJ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1607SJ_TMP_1	TRIGGER	8	      md5hash (

TR_A1607SJ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1607SJ_TMP_1	TRIGGER	10	         || '.'

TR_A1607SJ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1607SJ_TMP_1	TRIGGER	12	         || '.'

TR_A1607SJ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1607SJ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1607SJ_TMP_1	TRIGGER	15	END;
TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1607sj_ACTION_NAKL_NEW

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1607sj_ACTION_NAKL

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1607SJ_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1607LJ_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1607lj_TMP_1

TR_A1607LJ_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1607LJ_TMP_1	TRIGGER	3	   ON PERSIK.a1607lj_TMP

TR_A1607LJ_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1607LJ_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1607LJ_TMP_1	TRIGGER	6	BEGIN

TR_A1607LJ_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1607LJ_TMP_1	TRIGGER	8	      md5hash (

TR_A1607LJ_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1607LJ_TMP_1	TRIGGER	10	         || '.'

TR_A1607LJ_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1607LJ_TMP_1	TRIGGER	12	         || '.'

TR_A1607LJ_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1607LJ_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1607LJ_TMP_1	TRIGGER	15	END;
TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1607LJ_ACTION_NAKL_NEW

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1607lj_ACTION_NAKL

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	11	

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	12	   :new.bonus_sum1 := 10;

TR_A1607LJ_ACTION_NAKL_NEW	TRIGGER	13	END;
TR_A1606LS_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1606LS_TMP_1

TR_A1606LS_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1606LS_TMP_1	TRIGGER	3	   ON PERSIK.A1606LS_TMP

TR_A1606LS_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1606LS_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1606LS_TMP_1	TRIGGER	6	BEGIN

TR_A1606LS_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1606LS_TMP_1	TRIGGER	8	      md5hash (

TR_A1606LS_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1606LS_TMP_1	TRIGGER	10	         || '.'

TR_A1606LS_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1606LS_TMP_1	TRIGGER	12	         || '.'

TR_A1606LS_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1606LS_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1606LS_TMP_1	TRIGGER	15	END;
TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1606LS_ACTION_NAKL_NEW

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1606LS_ACTION_NAKL

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1606LS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1606LG_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1606LG_TMP_1

TR_A1606LG_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1606LG_TMP_1	TRIGGER	3	   ON PERSIK.A1606LG_TMP

TR_A1606LG_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1606LG_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1606LG_TMP_1	TRIGGER	6	BEGIN

TR_A1606LG_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1606LG_TMP_1	TRIGGER	8	      md5hash (

TR_A1606LG_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1606LG_TMP_1	TRIGGER	10	         || '.'

TR_A1606LG_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1606LG_TMP_1	TRIGGER	12	         || '.'

TR_A1606LG_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1606LG_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1606LG_TMP_1	TRIGGER	15	END;
TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1606LG_ACTION_NAKL_NEW

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1606LG_ACTION_NAKL

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1606LG_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1605AP_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_a1605ap_TMP_1

TR_A1605AP_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1605AP_TMP_1	TRIGGER	3	   ON PERSIK.a1605ap_TMP

TR_A1605AP_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1605AP_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1605AP_TMP_1	TRIGGER	6	BEGIN

TR_A1605AP_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1605AP_TMP_1	TRIGGER	8	      md5hash (

TR_A1605AP_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1605AP_TMP_1	TRIGGER	10	         || '.'

TR_A1605AP_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1605AP_TMP_1	TRIGGER	12	         || '.'

TR_A1605AP_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1605AP_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1605AP_TMP_1	TRIGGER	15	END;
TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_a1605ap_ACTION_NAKL_NEW

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.a1605ap_ACTION_NAKL

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1605AP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1604SH_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1604SH_TMP_1

TR_A1604SH_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1604SH_TMP_1	TRIGGER	3	   ON PERSIK.A1604SH_TMP

TR_A1604SH_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1604SH_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1604SH_TMP_1	TRIGGER	6	BEGIN

TR_A1604SH_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1604SH_TMP_1	TRIGGER	8	      md5hash (

TR_A1604SH_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1604SH_TMP_1	TRIGGER	10	         || '.'

TR_A1604SH_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1604SH_TMP_1	TRIGGER	12	         || '.'

TR_A1604SH_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1604SH_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1604SH_TMP_1	TRIGGER	15	END;
TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1604SH_ACTION_NAKL_NEW

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1604SH_ACTION_NAKL

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1604SH_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1602KAR_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A1602KAR_TMP_1

TR_A1602KAR_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1602KAR_TMP_1	TRIGGER	3	   ON PERSIK.A1602KAR_TMP

TR_A1602KAR_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1602KAR_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A1602KAR_TMP_1	TRIGGER	6	BEGIN

TR_A1602KAR_TMP_1	TRIGGER	7	   :new.H_tp_kod_data_nakl :=

TR_A1602KAR_TMP_1	TRIGGER	8	      md5hash (

TR_A1602KAR_TMP_1	TRIGGER	9	            :new.tp_kod

TR_A1602KAR_TMP_1	TRIGGER	10	         || '.'

TR_A1602KAR_TMP_1	TRIGGER	11	         || TO_CHAR (:new.data, 'dd.mm.yyyy')

TR_A1602KAR_TMP_1	TRIGGER	12	         || '.'

TR_A1602KAR_TMP_1	TRIGGER	13	         || :new.nakl);

TR_A1602KAR_TMP_1	TRIGGER	14	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1602KAR_TMP_1	TRIGGER	15	END;
TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1602KAR_ACTION_NAKL_NEW

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1602KAR_ACTION_NAKL

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1602KAR_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1512T_XLS_TPCLIENT_1	TRIGGER	1	TRIGGER PERSIK.TR_A1512T_XLS_TPCLIENT_1

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	3	   ON PERSIK.A1512T_XLS_TPCLIENT

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	5	   FOR EACH ROW

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	6	DECLARE

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	8	BEGIN

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	9	   SELECT MAX (client)

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	10	     INTO :new.client

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	11	     FROM A1512T_XLS_TPCLIENT

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	12	    WHERE h_client = :new.H_client;

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	13	/*:new.h_client := md5hash (:new.client);*/

TR_A1512T_XLS_TPCLIENT_1	TRIGGER	14	END;
TR_A1512T_XLS_SALESPLAN_1	TRIGGER	1	TRIGGER PERSIK.TR_A1512T_XLS_SALESPLAN_1

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	3	   ON PERSIK.A1512T_XLS_SALESPLAN

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	5	   FOR EACH ROW

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	6	BEGIN

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	7	   :new.H_client := md5hash (:new.client);

TR_A1512T_XLS_SALESPLAN_1	TRIGGER	8	END;
TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1512T_ACTION_client_NEW

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	3	   ON PERSIK.A1512T_ACTION_client

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	6	BEGIN

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	7	   :new.id := NVL (:new.id, seq_all.NEXTVAL);

TR_A1512T_ACTION_CLIENT_NEW	TRIGGER	8	END;
TR_A1512T_1	TRIGGER	1	TRIGGER PERSIK.TR_A1512T_1

TR_A1512T_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A1512T_1	TRIGGER	3	   ON PERSIK.A1512T

TR_A1512T_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A1512T_1	TRIGGER	5	   FOR EACH ROW

TR_A1512T_1	TRIGGER	6	BEGIN

TR_A1512T_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A1512T_1	TRIGGER	8	   :new.H_tp_ur := md5hash (:new.tp_ur);

TR_A1512T_1	TRIGGER	9	END;
TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1512NYP_ACTION_NAKL_NEW

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1512NYP_ACTION_NAKL

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1512NYP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1512NYP51_ACTION_NAKL_NEW

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1512NYP51_ACTION_NAKL

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1512NYP51_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1512NYP31_ACTION_NAKL_NEW

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1512NYP31_ACTION_NAKL

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1512NYP31_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1511NYP_ACTION_NAKL_NEW

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1511NYP_ACTION_NAKL

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1511NYP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1510VS_ACTION_NAKL_NEW

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1510VS_ACTION_NAKL

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1510VS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER PERSIK.TR_A1510K5_ACTION_NAKL_NEW

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	3	   ON PERSIK.A1510K5_ACTION_NAKL

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1510K5_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1509vs_ACTION_NAKL_NEW

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	3	   ON a1509vs_ACTION_NAKL

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1509VS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1508kzp_ACTION_NAKL_NEW

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	3	   ON a1508kzp_ACTION_NAKL

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1508KZP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150611L_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150611l_ACTION_NAKL_NEW

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	3	   ON a150611l_ACTION_NAKL

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150611L_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1505vv_ACTION_NAKL_NEW

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	3	   ON a1505vv_ACTION_NAKL

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1505VV_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1505si_ACTION_NAKL_NEW

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	3	   ON a1505si_ACTION_NAKL

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1505SI_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150511tf_ACTION_NAKL_NEW

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	3	   ON a150511tf_ACTION_NAKL

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150511TF_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150511te_ACTION_NAKL_NEW

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	3	   ON a150511te_ACTION_NAKL

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150511TE_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150511L_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150511l_ACTION_NAKL_NEW

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	3	   ON a150511l_ACTION_NAKL

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150511L_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150511G_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150511g_ACTION_NAKL_NEW

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	3	   ON a150511g_ACTION_NAKL

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150511G_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1504pz_ACTION_NAKL_NEW

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	3	   ON a1504pz_ACTION_NAKL

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1504PZ_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1504cy_ACTION_NAKL_NEW

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	3	   ON a1504cy_ACTION_NAKL

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1504CY_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1504ap_ACTION_NAKL_NEW

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	3	   ON a1504ap_ACTION_NAKL

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1504AP_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150411T_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_A150411T_ACTION_NAKL_NEW

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	3	   ON A150411T_ACTION_NAKL

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150411T_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150411M_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_A150411M_ACTION_NAKL_NEW

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	3	   ON A150411M_ACTION_NAKL

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150411M_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150411L_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_A150411L_ACTION_NAKL_NEW

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	3	   ON A150411L_ACTION_NAKL

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150411L_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1503mg_ACTION_NAKL_NEW

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	3	   ON a1503mg_ACTION_NAKL

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1503MG_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1503F_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1503f_ACTION_NAKL_NEW

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	3	   ON a1503f_ACTION_NAKL

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1503F_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150311T_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150311t_ACTION_NAKL_NEW

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	3	   ON a150311t_ACTION_NAKL

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150311T_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1502vk251_ACTION_NAKL_NEW

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	3	   ON a1502vk251_ACTION_NAKL

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1502VK251_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a1502kfk_ACTION_NAKL_NEW

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	3	   ON a1502kfk_ACTION_NAKL

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A1502KFK_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150221ngs_ACTION_NAKL_NEW

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	3	   ON a150221ngs_ACTION_NAKL

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150221NGS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150211kru_ACTION_NAKL_NEW

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	3	   ON a150211kru_ACTION_NAKL

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150211KRU_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150211kri_ACTION_NAKL_NEW

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	3	   ON a150211kri_ACTION_NAKL

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150211KRI_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_A150151fk_ACTION_NAKL_NEW

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	3	   ON A150151fk_ACTION_NAKL

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150151FK_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150121ngs_ACTION_NAKL_NEW

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	3	   ON a150121ngs_ACTION_NAKL

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150121NGS_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	1	TRIGGER TR_a150111ng_ACTION_NAKL_NEW

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	2	   BEFORE INSERT

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	3	   ON a150111ng_ACTION_NAKL

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	5	   FOR EACH ROW

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	6	BEGIN

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	7	   IF :new.id IS NULL

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	8	   THEN

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	10	   END IF;

TR_A150111NG_ACTION_NAKL_NEW	TRIGGER	11	END;
TR_A14TO_TRANSIT_TMP_1	TRIGGER	1	TRIGGER PERSIK.TR_A14TO_TRANSIT_TMP_1

TR_A14TO_TRANSIT_TMP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A14TO_TRANSIT_TMP_1	TRIGGER	3	   ON PERSIK.A14TO_TRANSIT_TMP

TR_A14TO_TRANSIT_TMP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TO_TRANSIT_TMP_1	TRIGGER	5	   FOR EACH ROW

TR_A14TO_TRANSIT_TMP_1	TRIGGER	6	BEGIN

TR_A14TO_TRANSIT_TMP_1	TRIGGER	7	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A14TO_TRANSIT_TMP_1	TRIGGER	8	   :new.h_url := md5hash (:new.url);

TR_A14TO_TRANSIT_TMP_1	TRIGGER	9	END;
TR_A14TOZST_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A14TOZST_UPD

TR_A14TOZST_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A14TOZST_UPD	TRIGGER	3	   ON PERSIK.A14TOZST

TR_A14TOZST_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOZST_UPD	TRIGGER	5	   FOR EACH ROW

TR_A14TOZST_UPD	TRIGGER	6	BEGIN

TR_A14TOZST_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A14TOZST_UPD	TRIGGER	8	END tr_A14TOZST_upd;
TR_A14TOTP_UPD3	TRIGGER	1	TRIGGER PERSIK.TR_A14TOTP_UPD3

TR_A14TOTP_UPD3	TRIGGER	2	   BEFORE UPDATE OF auditor_comm, auditor

TR_A14TOTP_UPD3	TRIGGER	3	   ON PERSIK.A14TOTP

TR_A14TOTP_UPD3	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOTP_UPD3	TRIGGER	5	   FOR EACH ROW

TR_A14TOTP_UPD3	TRIGGER	6	DECLARE

TR_A14TOTP_UPD3	TRIGGER	7	   v_tp_ur     VARCHAR2 (255);

TR_A14TOTP_UPD3	TRIGGER	8	   v_tp_addr   VARCHAR2 (255);

TR_A14TOTP_UPD3	TRIGGER	9	   v_ts_mail   VARCHAR2 (255);

TR_A14TOTP_UPD3	TRIGGER	10	BEGIN

TR_A14TOTP_UPD3	TRIGGER	11	   IF (LENGTH (:new.auditor_comm) > 0 OR :new.auditor = 2)

TR_A14TOTP_UPD3	TRIGGER	12	   THEN

TR_A14TOTP_UPD3	TRIGGER	13	      SELECT DISTINCT t.tp_ur, t.tp_addr, u.e_mail

TR_A14TOTP_UPD3	TRIGGER	14	        INTO v_tp_ur, v_tp_addr, v_ts_mail

TR_A14TOTP_UPD3	TRIGGER	15	        FROM a14to t, user_list u

TR_A14TOTP_UPD3	TRIGGER	16	       WHERE     u.tab_num = t.tab_num

TR_A14TOTP_UPD3	TRIGGER	17	             AND u.dpt_id = 1

TR_A14TOTP_UPD3	TRIGGER	18	             AND u.is_spd = 1

TR_A14TOTP_UPD3	TRIGGER	19	             AND t.visitdate = :new.visitdate

TR_A14TOTP_UPD3	TRIGGER	20	             AND t.tp_kod_key = :new.tp_kod;

TR_A14TOTP_UPD3	TRIGGER	21	

TR_A14TOTP_UPD3	TRIGGER	22	      PR_SENDMAIL (

TR_A14TOTP_UPD3	TRIGGER	23	         v_ts_mail,

TR_A14TOTP_UPD3	TRIGGER	24	         'Стандарт ТО - комментарий ТМ',

TR_A14TOTP_UPD3	TRIGGER	25	            '<b>Дата визита:</b> '

TR_A14TOTP_UPD3	TRIGGER	26	         || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A14TOTP_UPD3	TRIGGER	27	         || '<br>'

TR_A14TOTP_UPD3	TRIGGER	28	         || '<b>ТП:</b> '

TR_A14TOTP_UPD3	TRIGGER	29	         || v_tp_ur

TR_A14TOTP_UPD3	TRIGGER	30	         || '<br>'

TR_A14TOTP_UPD3	TRIGGER	31	         || v_tp_addr

TR_A14TOTP_UPD3	TRIGGER	32	         || '<br>'

TR_A14TOTP_UPD3	TRIGGER	33	         || '<b>ТМ оставил комментарий и/или не подтвердил стандарт:</b> '

TR_A14TOTP_UPD3	TRIGGER	34	         || '<br>'

TR_A14TOTP_UPD3	TRIGGER	35	         || :new.auditor_comm

TR_A14TOTP_UPD3	TRIGGER	36	         || '');

TR_A14TOTP_UPD3	TRIGGER	37	   END IF;

TR_A14TOTP_UPD3	TRIGGER	38	END;
TR_A14TOTP_UPD2	TRIGGER	1	TRIGGER PERSIK.TR_A14TOTP_UPD2

TR_A14TOTP_UPD2	TRIGGER	2	   BEFORE UPDATE OF traid, traid_comm

TR_A14TOTP_UPD2	TRIGGER	3	   ON PERSIK.A14TOTP

TR_A14TOTP_UPD2	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOTP_UPD2	TRIGGER	5	   FOR EACH ROW

TR_A14TOTP_UPD2	TRIGGER	6	DECLARE

TR_A14TOTP_UPD2	TRIGGER	7	   v_tp_ur        VARCHAR2 (255);

TR_A14TOTP_UPD2	TRIGGER	8	   v_tp_addr      VARCHAR2 (255);

TR_A14TOTP_UPD2	TRIGGER	9	   v_ts_mail      VARCHAR2 (255);

TR_A14TOTP_UPD2	TRIGGER	10	   v_tm_mail      VARCHAR2 (255);

TR_A14TOTP_UPD2	TRIGGER	11	   v_traid_text   VARCHAR2 (255);

TR_A14TOTP_UPD2	TRIGGER	12	BEGIN

TR_A14TOTP_UPD2	TRIGGER	13	   :new.traid_lu := SYSDATE;

TR_A14TOTP_UPD2	TRIGGER	14	

TR_A14TOTP_UPD2	TRIGGER	15	   SELECT DISTINCT t.tp_ur,

TR_A14TOTP_UPD2	TRIGGER	16	                   t.tp_addr,

TR_A14TOTP_UPD2	TRIGGER	17	                   u.e_mail,

TR_A14TOTP_UPD2	TRIGGER	18	                   pu.e_mail

TR_A14TOTP_UPD2	TRIGGER	19	     INTO v_tp_ur,

TR_A14TOTP_UPD2	TRIGGER	20	          v_tp_addr,

TR_A14TOTP_UPD2	TRIGGER	21	          v_ts_mail,

TR_A14TOTP_UPD2	TRIGGER	22	          v_tm_mail

TR_A14TOTP_UPD2	TRIGGER	23	     FROM a14to t,

TR_A14TOTP_UPD2	TRIGGER	24	          user_list u,

TR_A14TOTP_UPD2	TRIGGER	25	          parents p,

TR_A14TOTP_UPD2	TRIGGER	26	          user_list pu

TR_A14TOTP_UPD2	TRIGGER	27	    WHERE     p.parent = pu.tn

TR_A14TOTP_UPD2	TRIGGER	28	          AND p.tn = u.tn

TR_A14TOTP_UPD2	TRIGGER	29	          AND u.tab_num = t.tab_num

TR_A14TOTP_UPD2	TRIGGER	30	          AND u.dpt_id = 1

TR_A14TOTP_UPD2	TRIGGER	31	          AND u.is_spd = 1

TR_A14TOTP_UPD2	TRIGGER	32	          AND t.visitdate = :new.visitdate

TR_A14TOTP_UPD2	TRIGGER	33	          AND t.tp_kod_key = :new.tp_kod;

TR_A14TOTP_UPD2	TRIGGER	34	

TR_A14TOTP_UPD2	TRIGGER	35	   SELECT DECODE (

TR_A14TOTP_UPD2	TRIGGER	36	             NVL (:new.traid, 0),

TR_A14TOTP_UPD2	TRIGGER	37	             1,    'стандарт ('

TR_A14TOTP_UPD2	TRIGGER	38	                || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A14TOTP_UPD2	TRIGGER	39	                || ', '

TR_A14TOTP_UPD2	TRIGGER	40	                || :new.tp_kod

TR_A14TOTP_UPD2	TRIGGER	41	                || ') по ТП отклонен ВСТМ',

TR_A14TOTP_UPD2	TRIGGER	42	             '')

TR_A14TOTP_UPD2	TRIGGER	43	     INTO v_traid_text

TR_A14TOTP_UPD2	TRIGGER	44	     FROM DUAL;

TR_A14TOTP_UPD2	TRIGGER	45	

TR_A14TOTP_UPD2	TRIGGER	46	

TR_A14TOTP_UPD2	TRIGGER	47	   PR_SENDMAIL (

TR_A14TOTP_UPD2	TRIGGER	48	      v_ts_mail || ',' || v_tm_mail,

TR_A14TOTP_UPD2	TRIGGER	49	      'Стандарт ТО - комментарий ВСТМ',

TR_A14TOTP_UPD2	TRIGGER	50	         '<b>Дата визита:</b> '

TR_A14TOTP_UPD2	TRIGGER	51	      || TO_CHAR (:new.visitdate, 'dd.mm.yyyy')

TR_A14TOTP_UPD2	TRIGGER	52	      || '<br>'

TR_A14TOTP_UPD2	TRIGGER	53	      || '<b>ТП:</b> '

TR_A14TOTP_UPD2	TRIGGER	54	      || v_tp_ur

TR_A14TOTP_UPD2	TRIGGER	55	      || '<br>'

TR_A14TOTP_UPD2	TRIGGER	56	      || v_tp_addr

TR_A14TOTP_UPD2	TRIGGER	57	      || '<br>'

TR_A14TOTP_UPD2	TRIGGER	58	      || '<b>ВСТМ оставил комментарий:</b> '

TR_A14TOTP_UPD2	TRIGGER	59	      || '<br>'

TR_A14TOTP_UPD2	TRIGGER	60	      || :new.traid_comm

TR_A14TOTP_UPD2	TRIGGER	61	      || '<br>'

TR_A14TOTP_UPD2	TRIGGER	62	      || v_traid_text);

TR_A14TOTP_UPD2	TRIGGER	63	END;
TR_A14TOTP_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_A14TOTP_UPD1

TR_A14TOTP_UPD1	TRIGGER	2	   BEFORE UPDATE OF auditor

TR_A14TOTP_UPD1	TRIGGER	3	   ON PERSIK.A14TOTP

TR_A14TOTP_UPD1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOTP_UPD1	TRIGGER	5	   FOR EACH ROW

TR_A14TOTP_UPD1	TRIGGER	6	BEGIN

TR_A14TOTP_UPD1	TRIGGER	7	   :new.auditor_lu := SYSDATE;

TR_A14TOTP_UPD1	TRIGGER	8	END;
TR_A14TOTP_UPD	TRIGGER	1	TRIGGER PERSIK.TR_A14TOTP_UPD

TR_A14TOTP_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A14TOTP_UPD	TRIGGER	3	   ON PERSIK.A14TOTP

TR_A14TOTP_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOTP_UPD	TRIGGER	5	   FOR EACH ROW

TR_A14TOTP_UPD	TRIGGER	6	BEGIN

TR_A14TOTP_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A14TOTP_UPD	TRIGGER	8	END tr_A14TOTP_upd;
TR_A14TOST_UPD1	TRIGGER	1	TRIGGER PERSIK.TR_A14TOST_UPD1

TR_A14TOST_UPD1	TRIGGER	2	   BEFORE UPDATE OF auditor

TR_A14TOST_UPD1	TRIGGER	3	   ON PERSIK.A14TOST

TR_A14TOST_UPD1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOST_UPD1	TRIGGER	5	   FOR EACH ROW

TR_A14TOST_UPD1	TRIGGER	6	BEGIN

TR_A14TOST_UPD1	TRIGGER	7	   :new.auditor_lu := SYSDATE;

TR_A14TOST_UPD1	TRIGGER	8	END;
TR_A14TOST_UPD	TRIGGER	1	TRIGGER PERSIK.tr_a14tost_upd

TR_A14TOST_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A14TOST_UPD	TRIGGER	3	   ON PERSIK.A14TOST

TR_A14TOST_UPD	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14TOST_UPD	TRIGGER	5	   FOR EACH ROW

TR_A14TOST_UPD	TRIGGER	6	BEGIN

TR_A14TOST_UPD	TRIGGER	7	   :new.lu := SYSDATE;

TR_A14TOST_UPD	TRIGGER	8	END tr_a14tost_upd;
TR_A14TOSP_TMP_1	TRIGGER	1	TRIGGER 
TR_A14TOSP_TMP_1	TRIGGER	2	TR_A14TOSP_TMP_1

TR_A14TOSP_TMP_1	TRIGGER	3	   BEFORE INSERT OR UPDATE

TR_A14TOSP_TMP_1	TRIGGER	4	   ON A14TOSP_TRANSIT_TMP

TR_A14TOSP_TMP_1	TRIGGER	5	   REFERENCING NEW AS New OLD AS Old

TR_A14TOSP_TMP_1	TRIGGER	6	   FOR EACH ROW

TR_A14TOSP_TMP_1	TRIGGER	7	BEGIN

TR_A14TOSP_TMP_1	TRIGGER	8	   :new.H_fio_eta := md5hash (:new.fio_eta);

TR_A14TOSP_TMP_1	TRIGGER	9	END;
TR_A14MEGA_TMP	TRIGGER	1	TRIGGER PERSIK.TR_A14MEGA_TMP

TR_A14MEGA_TMP	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A14MEGA_TMP	TRIGGER	3	   ON PERSIK.A14MEGA_TRANSIT_TMP

TR_A14MEGA_TMP	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14MEGA_TMP	TRIGGER	5	   FOR EACH ROW

TR_A14MEGA_TMP	TRIGGER	6	BEGIN

TR_A14MEGA_TMP	TRIGGER	7	   :new.h_eta := md5hash (:new.eta);

TR_A14MEGA_TMP	TRIGGER	8	   :new.dt := TO_DATE ('01/' || :new.m || '/' || :new.y);

TR_A14MEGA_TMP	TRIGGER	9	

TR_A14MEGA_TMP	TRIGGER	10	   BEGIN

TR_A14MEGA_TMP	TRIGGER	11	      IF :new.country IS NOT NULL

TR_A14MEGA_TMP	TRIGGER	12	      THEN

TR_A14MEGA_TMP	TRIGGER	13	         SELECT dpt_id

TR_A14MEGA_TMP	TRIGGER	14	           INTO :new.dpt_id

TR_A14MEGA_TMP	TRIGGER	15	           FROM departments

TR_A14MEGA_TMP	TRIGGER	16	          WHERE manufak = :new.country;

TR_A14MEGA_TMP	TRIGGER	17	      END IF;

TR_A14MEGA_TMP	TRIGGER	18	   EXCEPTION

TR_A14MEGA_TMP	TRIGGER	19	      WHEN OTHERS

TR_A14MEGA_TMP	TRIGGER	20	      THEN

TR_A14MEGA_TMP	TRIGGER	21	         NULL;

TR_A14MEGA_TMP	TRIGGER	22	   END;

TR_A14MEGA_TMP	TRIGGER	23	END;
TR_A14MEGAP_1	TRIGGER	1	TRIGGER PERSIK.tr_a14megaP_1

TR_A14MEGAP_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TR_A14MEGAP_1	TRIGGER	3	   ON PERSIK.A14MEGAP

TR_A14MEGAP_1	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

TR_A14MEGAP_1	TRIGGER	5	   FOR EACH ROW

TR_A14MEGAP_1	TRIGGER	6	BEGIN

TR_A14MEGAP_1	TRIGGER	7	   :NEW.lu := SYSDATE;

TR_A14MEGAP_1	TRIGGER	8	END;
TRUNC_LOGS	PROCEDURE	1	PROCEDURE        TRUNC_LOGS

TRUNC_LOGS	PROCEDURE	2	IS

TRUNC_LOGS	PROCEDURE	3	BEGIN

TRUNC_LOGS	PROCEDURE	4	   DELETE FROM full_log

TRUNC_LOGS	PROCEDURE	5	         WHERE TRUNC (lu) < TRUNC (SYSDATE) - 30;

TRUNC_LOGS	PROCEDURE	6	

TRUNC_LOGS	PROCEDURE	7	   COMMIT;

TRUNC_LOGS	PROCEDURE	8	

TRUNC_LOGS	PROCEDURE	9	   DELETE FROM full_log_mail

TRUNC_LOGS	PROCEDURE	10	         WHERE TRUNC (lu) < TRUNC (SYSDATE) - 30;

TRUNC_LOGS	PROCEDURE	11	

TRUNC_LOGS	PROCEDURE	12	   COMMIT;

TRUNC_LOGS	PROCEDURE	13	END;
TRUNC_DATA	PROCEDURE	1	PROCEDURE        TRUNC_DATA

TRUNC_DATA	PROCEDURE	2	IS

TRUNC_DATA	PROCEDURE	3	BEGIN

TRUNC_DATA	PROCEDURE	4	   DELETE FROM MERCH_REPORT_OK

TRUNC_DATA	PROCEDURE	5	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	6	

TRUNC_DATA	PROCEDURE	7	   COMMIT;

TRUNC_DATA	PROCEDURE	8	

TRUNC_DATA	PROCEDURE	9	

TRUNC_DATA	PROCEDURE	10	   FOR a IN (SELECT *

TRUNC_DATA	PROCEDURE	11	               FROM routes_head

TRUNC_DATA	PROCEDURE	12	              WHERE data <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1)

TRUNC_DATA	PROCEDURE	13	   LOOP

TRUNC_DATA	PROCEDURE	14	      DELETE FROM routes_head

TRUNC_DATA	PROCEDURE	15	            WHERE id = a.id;

TRUNC_DATA	PROCEDURE	16	

TRUNC_DATA	PROCEDURE	17	      COMMIT;

TRUNC_DATA	PROCEDURE	18	   END LOOP;

TRUNC_DATA	PROCEDURE	19	

TRUNC_DATA	PROCEDURE	20	   DELETE FROM MERCH_REPORT_cal

TRUNC_DATA	PROCEDURE	21	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	22	

TRUNC_DATA	PROCEDURE	23	   COMMIT;

TRUNC_DATA	PROCEDURE	24	

TRUNC_DATA	PROCEDURE	25	   DELETE FROM MERCH_REPORT_CAL_aa_h

TRUNC_DATA	PROCEDURE	26	         WHERE dte <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	27	

TRUNC_DATA	PROCEDURE	28	   COMMIT;

TRUNC_DATA	PROCEDURE	29	

TRUNC_DATA	PROCEDURE	30	   DELETE FROM merch_report_cal_reminders

TRUNC_DATA	PROCEDURE	31	         WHERE head_id NOT IN (SELECT id FROM routes_head);

TRUNC_DATA	PROCEDURE	32	

TRUNC_DATA	PROCEDURE	33	   COMMIT;

TRUNC_DATA	PROCEDURE	34	

TRUNC_DATA	PROCEDURE	35	   DELETE FROM MERCH_REPORT_CAL_SOK

TRUNC_DATA	PROCEDURE	36	         WHERE head_id NOT IN (SELECT id FROM routes_head);

TRUNC_DATA	PROCEDURE	37	

TRUNC_DATA	PROCEDURE	38	   COMMIT;

TRUNC_DATA	PROCEDURE	39	

TRUNC_DATA	PROCEDURE	40	   DELETE FROM MERCH_REPORT

TRUNC_DATA	PROCEDURE	41	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	42	

TRUNC_DATA	PROCEDURE	43	   COMMIT;

TRUNC_DATA	PROCEDURE	44	

TRUNC_DATA	PROCEDURE	45	   DELETE FROM MERCH_REPORT_VV

TRUNC_DATA	PROCEDURE	46	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	47	

TRUNC_DATA	PROCEDURE	48	   COMMIT;

TRUNC_DATA	PROCEDURE	49	

TRUNC_DATA	PROCEDURE	50	   DELETE FROM MERCH_SPEC_REPORT

TRUNC_DATA	PROCEDURE	51	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	52	

TRUNC_DATA	PROCEDURE	53	   COMMIT;

TRUNC_DATA	PROCEDURE	54	

TRUNC_DATA	PROCEDURE	55	   DELETE FROM MERCH_SPEC_REPORT_FILES

TRUNC_DATA	PROCEDURE	56	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	57	

TRUNC_DATA	PROCEDURE	58	   COMMIT;

TRUNC_DATA	PROCEDURE	59	

TRUNC_DATA	PROCEDURE	60	   DELETE FROM MERCH_CHAT

TRUNC_DATA	PROCEDURE	61	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	62	

TRUNC_DATA	PROCEDURE	63	   COMMIT;

TRUNC_DATA	PROCEDURE	64	

TRUNC_DATA	PROCEDURE	65	   DELETE FROM MERCH_CHAT_CLOSED

TRUNC_DATA	PROCEDURE	66	         WHERE dt <= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3) - 1;

TRUNC_DATA	PROCEDURE	67	

TRUNC_DATA	PROCEDURE	68	   COMMIT;

TRUNC_DATA	PROCEDURE	69	

TRUNC_DATA	PROCEDURE	70	   DELETE FROM ms_tabel

TRUNC_DATA	PROCEDURE	71	         WHERE head_id NOT IN (SELECT id FROM routes_head);

TRUNC_DATA	PROCEDURE	72	

TRUNC_DATA	PROCEDURE	73	   COMMIT;

TRUNC_DATA	PROCEDURE	74	

TRUNC_DATA	PROCEDURE	75	   DELETE FROM spr_users_ms

TRUNC_DATA	PROCEDURE	76	         WHERE login NOT IN (SELECT login FROM routes_head);

TRUNC_DATA	PROCEDURE	77	

TRUNC_DATA	PROCEDURE	78	   COMMIT;

TRUNC_DATA	PROCEDURE	79	END;
TPPLAN_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.tpplan_LAST_UPDATE

TPPLAN_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

TPPLAN_LAST_UPDATE	TRIGGER	3	   ON PERSIK.tpplan

TPPLAN_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TPPLAN_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

TPPLAN_LAST_UPDATE	TRIGGER	6	DECLARE

TPPLAN_LAST_UPDATE	TRIGGER	7	BEGIN

TPPLAN_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

TPPLAN_LAST_UPDATE	TRIGGER	9	END;
TEST_ETA_TEST_ETA_UPD	TRIGGER	1	TRIGGER "PERSIK"."TEST_ETA_TEST_ETA_UPD" 

TEST_ETA_TEST_ETA_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TEST_ETA_TEST_ETA_UPD	TRIGGER	3	   ON PERSIK.test_eta    REFERENCING NEW AS NEW OLD AS OLD

TEST_ETA_TEST_ETA_UPD	TRIGGER	4	   FOR EACH ROW

TEST_ETA_TEST_ETA_UPD	TRIGGER	5	BEGIN

TEST_ETA_TEST_ETA_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

TEST_ETA_TEST_ETA_UPD	TRIGGER	7	END;

TEST_ETA_TEST_ETA_UPD	TRIGGER	8	

TEST_ETA_TEST_ETA_UPD	TRIGGER	9	

TEST_ETA_TEST_ETA_UPD	TRIGGER	10	

TEST_ETA_TEST_ETA_NEW	TRIGGER	1	TRIGGER "PERSIK"."TEST_ETA_TEST_ETA_NEW" 

TEST_ETA_TEST_ETA_NEW	TRIGGER	2	   BEFORE INSERT

TEST_ETA_TEST_ETA_NEW	TRIGGER	3	   ON PERSIK.test_eta    REFERENCING NEW AS NEW OLD AS OLD

TEST_ETA_TEST_ETA_NEW	TRIGGER	4	   FOR EACH ROW

TEST_ETA_TEST_ETA_NEW	TRIGGER	5	BEGIN

TEST_ETA_TEST_ETA_NEW	TRIGGER	6	   IF :new.id IS NULL

TEST_ETA_TEST_ETA_NEW	TRIGGER	7	   THEN

TEST_ETA_TEST_ETA_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

TEST_ETA_TEST_ETA_NEW	TRIGGER	9	   END IF;

TEST_ETA_TEST_ETA_NEW	TRIGGER	10	END;

TEST_ETA_TEST_ETA_NEW	TRIGGER	11	

TEST_ETA_TEST_ETA_NEW	TRIGGER	12	

TEST_ETA_TEST_ETA_NEW	TRIGGER	13	

TEST_ETA_RES_UPD	TRIGGER	1	TRIGGER "PERSIK"."TEST_ETA_RES_UPD" 

TEST_ETA_RES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

TEST_ETA_RES_UPD	TRIGGER	3	   ON PERSIK.test_eta_res

TEST_ETA_RES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TEST_ETA_RES_UPD	TRIGGER	5	   FOR EACH ROW

TEST_ETA_RES_UPD	TRIGGER	6	BEGIN

TEST_ETA_RES_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

TEST_ETA_RES_UPD	TRIGGER	8	END;

TEST_ETA_RES_UPD	TRIGGER	9	

TEST_ETA_RES_UPD	TRIGGER	10	

TEST_ETA_RES_UPD	TRIGGER	11	

TEST_ETA_RES_NEW	TRIGGER	1	TRIGGER "PERSIK"."TEST_ETA_RES_NEW" 

TEST_ETA_RES_NEW	TRIGGER	2	   BEFORE INSERT

TEST_ETA_RES_NEW	TRIGGER	3	   ON PERSIK.test_eta_res

TEST_ETA_RES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TEST_ETA_RES_NEW	TRIGGER	5	   FOR EACH ROW

TEST_ETA_RES_NEW	TRIGGER	6	BEGIN

TEST_ETA_RES_NEW	TRIGGER	7	   IF :new.id IS NULL

TEST_ETA_RES_NEW	TRIGGER	8	   THEN

TEST_ETA_RES_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

TEST_ETA_RES_NEW	TRIGGER	10	   END IF;

TEST_ETA_RES_NEW	TRIGGER	11	END;

TEST_ETA_RES_NEW	TRIGGER	12	

TEST_ETA_RES_NEW	TRIGGER	13	

TEST_ETA_RES_NEW	TRIGGER	14	

TEST_ETA_LIST_1	TRIGGER	1	TRIGGER "PERSIK"."TEST_ETA_LIST_1" 

TEST_ETA_LIST_1	TRIGGER	2	   BEFORE INSERT OR UPDATE

TEST_ETA_LIST_1	TRIGGER	3	   ON PERSIK.test_eta_list

TEST_ETA_LIST_1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

TEST_ETA_LIST_1	TRIGGER	5	   FOR EACH ROW

TEST_ETA_LIST_1	TRIGGER	6	BEGIN

TEST_ETA_LIST_1	TRIGGER	7	   :NEW.lu := SYSDATE;

TEST_ETA_LIST_1	TRIGGER	8	END;

TEST_ETA_LIST_1	TRIGGER	9	

TEST_ETA_LIST_1	TRIGGER	10	

TEST_ETA_LIST_1	TRIGGER	11	

SZ_TPL_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."SZ_TPL_LAST_UPDATE" 

SZ_TPL_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

SZ_TPL_LAST_UPDATE	TRIGGER	3	   ON PERSIK.sz_tpl    REFERENCING NEW AS NEW OLD AS OLD

SZ_TPL_LAST_UPDATE	TRIGGER	4	   FOR EACH ROW

SZ_TPL_LAST_UPDATE	TRIGGER	5	BEGIN

SZ_TPL_LAST_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

SZ_TPL_LAST_UPDATE	TRIGGER	7	END sz_tpl_last_update;

SZ_TPL_LAST_UPDATE	TRIGGER	8	

SZ_TPL_LAST_UPDATE	TRIGGER	9	

SZ_TPL_LAST_UPDATE	TRIGGER	10	

SZREPLACCEPT	PROCEDURE	1	PROCEDURE        "SZREPLACCEPT" (f        IN INTEGER,

SZREPLACCEPT	PROCEDURE	2	                                                   t        IN INTEGER/*,

SZREPLACCEPT	PROCEDURE	3	                                                   d_from   IN DATE,

SZREPLACCEPT	PROCEDURE	4	                                                   d_to     IN DATE*/)

SZREPLACCEPT	PROCEDURE	5	IS

SZREPLACCEPT	PROCEDURE	6	BEGIN

SZREPLACCEPT	PROCEDURE	7	   /*

SZREPLACCEPT	PROCEDURE	8	   в служебках которые находятся на согласовании,

SZREPLACCEPT	PROCEDURE	9	   заменить ассептора, где ассептор еще не рассматривал.

SZREPLACCEPT	PROCEDURE	10	   */

SZREPLACCEPT	PROCEDURE	11	   FOR b IN (  SELECT sz_accept.id

SZREPLACCEPT	PROCEDURE	12	                 FROM sz, sz_accept

SZREPLACCEPT	PROCEDURE	13	                WHERE     sz.id = sz_accept.sz_id(+)

SZREPLACCEPT	PROCEDURE	14	                      /*AND TRUNC (sz.created) BETWEEN d_from AND d_to*/

SZREPLACCEPT	PROCEDURE	15	                      AND sz_accept.tn = f

SZREPLACCEPT	PROCEDURE	16	                      AND NVL (

SZREPLACCEPT	PROCEDURE	17	                             (SELECT accepted

SZREPLACCEPT	PROCEDURE	18	                                FROM sz_accept

SZREPLACCEPT	PROCEDURE	19	                               WHERE     sz_id = sz.id

SZREPLACCEPT	PROCEDURE	20	                                     AND accept_order =

SZREPLACCEPT	PROCEDURE	21	                                            DECODE (

SZREPLACCEPT	PROCEDURE	22	                                               NVL (

SZREPLACCEPT	PROCEDURE	23	                                                  (SELECT accept_order

SZREPLACCEPT	PROCEDURE	24	                                                     FROM sz_accept

SZREPLACCEPT	PROCEDURE	25	                                                    WHERE     sz_id = sz.id

SZREPLACCEPT	PROCEDURE	26	                                                          AND accepted = 2),

SZREPLACCEPT	PROCEDURE	27	                                                  0),

SZREPLACCEPT	PROCEDURE	28	                                               0, (SELECT MAX (accept_order)

SZREPLACCEPT	PROCEDURE	29	                                                     FROM sz_accept

SZREPLACCEPT	PROCEDURE	30	                                                    WHERE sz_id = sz.id),

SZREPLACCEPT	PROCEDURE	31	                                               (SELECT accept_order

SZREPLACCEPT	PROCEDURE	32	                                                  FROM sz_accept

SZREPLACCEPT	PROCEDURE	33	                                                 WHERE     sz_id = sz.id

SZREPLACCEPT	PROCEDURE	34	                                                       AND accepted = 2))),

SZREPLACCEPT	PROCEDURE	35	                             0) = 0

SZREPLACCEPT	PROCEDURE	36	             ORDER BY sz.created, sz.id)

SZREPLACCEPT	PROCEDURE	37	   LOOP

SZREPLACCEPT	PROCEDURE	38	      UPDATE sz_accept

SZREPLACCEPT	PROCEDURE	39	         SET tn = t

SZREPLACCEPT	PROCEDURE	40	       WHERE id = b.id;

SZREPLACCEPT	PROCEDURE	41	   END LOOP;

SZREPLACCEPT	PROCEDURE	42	END;
SVMS_OBLAST_LU	TRIGGER	1	TRIGGER svms_oblast_lu

SVMS_OBLAST_LU	TRIGGER	2	BEFORE INSERT OR UPDATE

SVMS_OBLAST_LU	TRIGGER	3	ON svms_oblast 

SVMS_OBLAST_LU	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

SVMS_OBLAST_LU	TRIGGER	5	FOR EACH ROW

SVMS_OBLAST_LU	TRIGGER	6	BEGIN

SVMS_OBLAST_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

SVMS_OBLAST_LU	TRIGGER	8	END ;
SPR_USERS_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."SPR_USERS_UPDATE" 

SPR_USERS_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

SPR_USERS_UPDATE	TRIGGER	3	ON SPR_USERS 

SPR_USERS_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

SPR_USERS_UPDATE	TRIGGER	5	FOR EACH ROW

SPR_USERS_UPDATE	TRIGGER	6	BEGIN

SPR_USERS_UPDATE	TRIGGER	7	   :NEW.update_date := SYSDATE;

SPR_USERS_UPDATE	TRIGGER	8	END spr_users_update; 

SPR_USERS_UPDATE	TRIGGER	9	

SPR_USERS_UPDATE	TRIGGER	10	

SPR_USERS_UPDATE	TRIGGER	11	

SPR_USERS_UPDATE	TRIGGER	12	

SPR_USERS_NEW	TRIGGER	1	TRIGGER SPR_USERS_NEW

SPR_USERS_NEW	TRIGGER	2	   BEFORE INSERT

SPR_USERS_NEW	TRIGGER	3	   ON SPR_USERS

SPR_USERS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SPR_USERS_NEW	TRIGGER	5	   FOR EACH ROW

SPR_USERS_NEW	TRIGGER	6	BEGIN

SPR_USERS_NEW	TRIGGER	7	   SELECT spr_users_id.NEXTVAL INTO :NEW.id FROM DUAL;

SPR_USERS_NEW	TRIGGER	8	END;
SPR_USERS_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.SPR_USERS_MV_Q_ADD

SPR_USERS_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

SPR_USERS_MV_Q_ADD	TRIGGER	3	   ON PERSIK.SPR_USERS

SPR_USERS_MV_Q_ADD	TRIGGER	4	BEGIN

SPR_USERS_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

SPR_USERS_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

SPR_USERS_MV_Q_ADD	TRIGGER	7	END;
SPR_USERS_MS_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.SPR_USERS_MS_MV_Q_ADD

SPR_USERS_MS_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE OR DELETE

SPR_USERS_MS_MV_Q_ADD	TRIGGER	3	   ON PERSIK.spr_users_ms

SPR_USERS_MS_MV_Q_ADD	TRIGGER	4	BEGIN

SPR_USERS_MS_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

SPR_USERS_MS_MV_Q_ADD	TRIGGER	6	END;
SPR_USERS_MS_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.SPR_USERS_MS_LAST_UPDATE

SPR_USERS_MS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

SPR_USERS_MS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.spr_users_ms

SPR_USERS_MS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

SPR_USERS_MS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

SPR_USERS_MS_LAST_UPDATE	TRIGGER	6	DECLARE

SPR_USERS_MS_LAST_UPDATE	TRIGGER	7	   c   INTEGER;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	8	BEGIN

SPR_USERS_MS_LAST_UPDATE	TRIGGER	9	   :NEW.lu := SYSDATE;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	10	   :NEW.inn := NVL (:new.inn, 0);

SPR_USERS_MS_LAST_UPDATE	TRIGGER	11	   :new.fio := :new.fam || ' ' || :new.im || ' ' || :new.otch;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	12	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	13	   IF INSERTING

SPR_USERS_MS_LAST_UPDATE	TRIGGER	14	   THEN

SPR_USERS_MS_LAST_UPDATE	TRIGGER	15	      :NEW.ID := NVL (:new.id, seq_all.NEXTVAL);

SPR_USERS_MS_LAST_UPDATE	TRIGGER	16	      :NEW.login :=

SPR_USERS_MS_LAST_UPDATE	TRIGGER	17	         NVL (:new.login,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	18	              'ms' || SUBSTR ('0000' || TO_CHAR (seq_ms.NEXTVAL), -4, 4));

SPR_USERS_MS_LAST_UPDATE	TRIGGER	19	   END IF;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	20	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	21	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	22	   SELECT COUNT (*)

SPR_USERS_MS_LAST_UPDATE	TRIGGER	23	     INTO c

SPR_USERS_MS_LAST_UPDATE	TRIGGER	24	     FROM spr_users

SPR_USERS_MS_LAST_UPDATE	TRIGGER	25	    WHERE login = :new.login;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	26	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	27	   DBMS_OUTPUT.put_line (c);

SPR_USERS_MS_LAST_UPDATE	TRIGGER	28	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	29	   IF c = 0

SPR_USERS_MS_LAST_UPDATE	TRIGGER	30	   THEN

SPR_USERS_MS_LAST_UPDATE	TRIGGER	31	      INSERT INTO spr_users (fio,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	32	                             login,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	33	                             tn,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	34	                             password,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	35	                             access_ocenka)

SPR_USERS_MS_LAST_UPDATE	TRIGGER	36	           VALUES (:new.fam || ' ' || :new.im || ' ' || :new.otch,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	37	                   :NEW.login,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	38	                   :new.inn,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	39	                   DBMS_RANDOM.STRING ('A', 4),

SPR_USERS_MS_LAST_UPDATE	TRIGGER	40	                   1);

SPR_USERS_MS_LAST_UPDATE	TRIGGER	41	   ELSE

SPR_USERS_MS_LAST_UPDATE	TRIGGER	42	      DBMS_OUTPUT.put_line (:new.login || ' ' || :new.inn);

SPR_USERS_MS_LAST_UPDATE	TRIGGER	43	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	44	      UPDATE spr_users

SPR_USERS_MS_LAST_UPDATE	TRIGGER	45	         SET fio = :new.fam || ' ' || :new.im || ' ' || :new.otch,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	46	             tn = :new.inn

SPR_USERS_MS_LAST_UPDATE	TRIGGER	47	       WHERE login = :new.login;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	48	   END IF;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	49	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	50	   UPDATE routes_head

SPR_USERS_MS_LAST_UPDATE	TRIGGER	51	      SET fio_otv = :new.fam || ' ' || :new.im || ' ' || :new.otch,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	52	          pos_otv = :new.pos_id,

SPR_USERS_MS_LAST_UPDATE	TRIGGER	53	          tn = :new.chief

SPR_USERS_MS_LAST_UPDATE	TRIGGER	54	    WHERE login = :new.login;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	55	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	56	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	57	

SPR_USERS_MS_LAST_UPDATE	TRIGGER	58	   BEGIN

SPR_USERS_MS_LAST_UPDATE	TRIGGER	59	      SELECT name

SPR_USERS_MS_LAST_UPDATE	TRIGGER	60	        INTO :new.dolgn

SPR_USERS_MS_LAST_UPDATE	TRIGGER	61	        FROM routes_pos

SPR_USERS_MS_LAST_UPDATE	TRIGGER	62	       WHERE id = :new.pos_id;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	63	   EXCEPTION

SPR_USERS_MS_LAST_UPDATE	TRIGGER	64	      WHEN OTHERS

SPR_USERS_MS_LAST_UPDATE	TRIGGER	65	      THEN

SPR_USERS_MS_LAST_UPDATE	TRIGGER	66	         NULL;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	67	   END;

SPR_USERS_MS_LAST_UPDATE	TRIGGER	68	END;
SPR_USERS_MS_DELETE	TRIGGER	1	TRIGGER PERSIK.SPR_USERS_MS_delete

SPR_USERS_MS_DELETE	TRIGGER	2	   BEFORE DELETE

SPR_USERS_MS_DELETE	TRIGGER	3	   ON PERSIK.spr_users_ms

SPR_USERS_MS_DELETE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

SPR_USERS_MS_DELETE	TRIGGER	5	   FOR EACH ROW

SPR_USERS_MS_DELETE	TRIGGER	6	BEGIN

SPR_USERS_MS_DELETE	TRIGGER	7	   DELETE FROM spr_users

SPR_USERS_MS_DELETE	TRIGGER	8	         WHERE login = :old.login;

SPR_USERS_MS_DELETE	TRIGGER	9	END;
SPR_USERS_ETA_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.SPR_USERS_ETA_MV_Q_ADD

SPR_USERS_ETA_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

SPR_USERS_ETA_MV_Q_ADD	TRIGGER	3	   ON PERSIK.SPR_USERS_ETA

SPR_USERS_ETA_MV_Q_ADD	TRIGGER	4	BEGIN

SPR_USERS_ETA_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

SPR_USERS_ETA_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

SPR_USERS_ETA_MV_Q_ADD	TRIGGER	7	END;
SPR_USERS_CLOSE_ACCESS	TRIGGER	1	TRIGGER "PERSIK"."SPR_USERS_CLOSE_ACCESS" 

SPR_USERS_CLOSE_ACCESS	TRIGGER	2	BEFORE UPDATE

SPR_USERS_CLOSE_ACCESS	TRIGGER	3	OF ACCESS_OCENKA

SPR_USERS_CLOSE_ACCESS	TRIGGER	4	ON PERSIK.SPR_USERS 

SPR_USERS_CLOSE_ACCESS	TRIGGER	5	REFERENCING NEW AS NEW OLD AS OLD

SPR_USERS_CLOSE_ACCESS	TRIGGER	6	FOR EACH ROW

SPR_USERS_CLOSE_ACCESS	TRIGGER	7	BEGIN

SPR_USERS_CLOSE_ACCESS	TRIGGER	8	   IF :NEW.access_ocenka = 0

SPR_USERS_CLOSE_ACCESS	TRIGGER	9	   THEN

SPR_USERS_CLOSE_ACCESS	TRIGGER	10	      :NEW.PASSWORD := DBMS_RANDOM.STRING('A', 6);

SPR_USERS_CLOSE_ACCESS	TRIGGER	11	   END IF;

SPR_USERS_CLOSE_ACCESS	TRIGGER	12	END spr_users_close_access; 

SPR_USERS_CLOSE_ACCESS	TRIGGER	13	

SPR_USERS_CLOSE_ACCESS	TRIGGER	14	

SPR_USERS_CLOSE_ACCESS	TRIGGER	15	

SPDTREE_NEW	TRIGGER	1	TRIGGER "PERSIK"."SPDTREE_NEW" 

SPDTREE_NEW	TRIGGER	2	   BEFORE INSERT

SPDTREE_NEW	TRIGGER	3	   ON PERSIK.SPDTREE    REFERENCING NEW AS NEW OLD AS OLD

SPDTREE_NEW	TRIGGER	4	   FOR EACH ROW

SPDTREE_NEW	TRIGGER	5	DECLARE

SPDTREE_NEW	TRIGGER	6	BEGIN

SPDTREE_NEW	TRIGGER	7	   :NEW.ID := seq_all.NEXTVAL;

SPDTREE_NEW	TRIGGER	8	

SPDTREE_NEW	TRIGGER	9	  

SPDTREE_NEW	TRIGGER	10	END spdtree_new;

SPDTREE_NEW	TRIGGER	11	

SPDTREE_NEW	TRIGGER	12	

SPDTREE_NEW	TRIGGER	13	

SPDTREE_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.SPDTREE_MV_Q_ADD

SPDTREE_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

SPDTREE_MV_Q_ADD	TRIGGER	3	   ON PERSIK.SPDTREE

SPDTREE_MV_Q_ADD	TRIGGER	4	BEGIN

SPDTREE_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('FULL');

SPDTREE_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('USER_LIST');

SPDTREE_MV_Q_ADD	TRIGGER	7	   mv_queue_add ('A14TO_MV_ST');

SPDTREE_MV_Q_ADD	TRIGGER	8	END;
SPDTREE_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.SPDTREE_LAST_UPDATE

SPDTREE_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

SPDTREE_LAST_UPDATE	TRIGGER	3	   ON PERSIK.SPDTREE

SPDTREE_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

SPDTREE_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

SPDTREE_LAST_UPDATE	TRIGGER	6	DECLARE

SPDTREE_LAST_UPDATE	TRIGGER	7	   c   INTEGER;

SPDTREE_LAST_UPDATE	TRIGGER	8	BEGIN

SPDTREE_LAST_UPDATE	TRIGGER	9	   :NEW.lu := SYSDATE;

SPDTREE_LAST_UPDATE	TRIGGER	10	

SPDTREE_LAST_UPDATE	TRIGGER	11	   IF :new.dpt_id IS NOT NULL AND :new.svideninn IS NOT NULL

SPDTREE_LAST_UPDATE	TRIGGER	12	   THEN

SPDTREE_LAST_UPDATE	TRIGGER	13	      SELECT COUNT (*)

SPDTREE_LAST_UPDATE	TRIGGER	14	        INTO c

SPDTREE_LAST_UPDATE	TRIGGER	15	        FROM spr_users

SPDTREE_LAST_UPDATE	TRIGGER	16	       WHERE tn = :new.svideninn;

SPDTREE_LAST_UPDATE	TRIGGER	17	

SPDTREE_LAST_UPDATE	TRIGGER	18	      IF c = 0

SPDTREE_LAST_UPDATE	TRIGGER	19	      THEN

SPDTREE_LAST_UPDATE	TRIGGER	20	         INSERT INTO spr_users (fio,

SPDTREE_LAST_UPDATE	TRIGGER	21	                                login,

SPDTREE_LAST_UPDATE	TRIGGER	22	                                tn,

SPDTREE_LAST_UPDATE	TRIGGER	23	                                password,

SPDTREE_LAST_UPDATE	TRIGGER	24	                                access_ocenka)

SPDTREE_LAST_UPDATE	TRIGGER	25	              VALUES (:new.fam || ' ' || :new.im || ' ' || :new.otch,

SPDTREE_LAST_UPDATE	TRIGGER	26	                      :new.svideninn,

SPDTREE_LAST_UPDATE	TRIGGER	27	                      :new.svideninn,

SPDTREE_LAST_UPDATE	TRIGGER	28	                      DBMS_RANDOM.STRING ('A', 6),

SPDTREE_LAST_UPDATE	TRIGGER	29	                      1);

SPDTREE_LAST_UPDATE	TRIGGER	30	      ELSE

SPDTREE_LAST_UPDATE	TRIGGER	31	         UPDATE spr_users

SPDTREE_LAST_UPDATE	TRIGGER	32	            SET fio = :new.fam || ' ' || :new.im || ' ' || :new.otch

SPDTREE_LAST_UPDATE	TRIGGER	33	          WHERE tn = :new.svideninn;

SPDTREE_LAST_UPDATE	TRIGGER	34	      END IF;

SPDTREE_LAST_UPDATE	TRIGGER	35	

SPDTREE_LAST_UPDATE	TRIGGER	36	      SELECT COUNT (*)

SPDTREE_LAST_UPDATE	TRIGGER	37	        INTO c

SPDTREE_LAST_UPDATE	TRIGGER	38	        FROM dpt_tn

SPDTREE_LAST_UPDATE	TRIGGER	39	       WHERE tn = :new.svideninn AND dpt_id = :new.dpt_id;

SPDTREE_LAST_UPDATE	TRIGGER	40	

SPDTREE_LAST_UPDATE	TRIGGER	41	      IF c = 0

SPDTREE_LAST_UPDATE	TRIGGER	42	      THEN

SPDTREE_LAST_UPDATE	TRIGGER	43	         INSERT INTO dpt_tn (dpt_id, tn)

SPDTREE_LAST_UPDATE	TRIGGER	44	              VALUES (:new.dpt_id, :new.svideninn);

SPDTREE_LAST_UPDATE	TRIGGER	45	      END IF;

SPDTREE_LAST_UPDATE	TRIGGER	46	   END IF;

SPDTREE_LAST_UPDATE	TRIGGER	47	

SPDTREE_LAST_UPDATE	TRIGGER	48	   BEGIN

SPDTREE_LAST_UPDATE	TRIGGER	49	      SELECT pos_name

SPDTREE_LAST_UPDATE	TRIGGER	50	        INTO :new.dolgn

SPDTREE_LAST_UPDATE	TRIGGER	51	        FROM pos

SPDTREE_LAST_UPDATE	TRIGGER	52	       WHERE pos_id = :new.pos_id;

SPDTREE_LAST_UPDATE	TRIGGER	53	   EXCEPTION

SPDTREE_LAST_UPDATE	TRIGGER	54	      WHEN OTHERS

SPDTREE_LAST_UPDATE	TRIGGER	55	      THEN

SPDTREE_LAST_UPDATE	TRIGGER	56	         NULL;

SPDTREE_LAST_UPDATE	TRIGGER	57	   END;

SPDTREE_LAST_UPDATE	TRIGGER	58	

SPDTREE_LAST_UPDATE	TRIGGER	59	   BEGIN

SPDTREE_LAST_UPDATE	TRIGGER	60	      SELECT pos_name

SPDTREE_LAST_UPDATE	TRIGGER	61	        INTO :new.res_pos_name

SPDTREE_LAST_UPDATE	TRIGGER	62	        FROM pos

SPDTREE_LAST_UPDATE	TRIGGER	63	       WHERE pos_id = :new.res_pos_id;

SPDTREE_LAST_UPDATE	TRIGGER	64	   EXCEPTION

SPDTREE_LAST_UPDATE	TRIGGER	65	      WHEN OTHERS

SPDTREE_LAST_UPDATE	TRIGGER	66	      THEN

SPDTREE_LAST_UPDATE	TRIGGER	67	         NULL;

SPDTREE_LAST_UPDATE	TRIGGER	68	   END;

SPDTREE_LAST_UPDATE	TRIGGER	69	

SPDTREE_LAST_UPDATE	TRIGGER	70	   BEGIN

SPDTREE_LAST_UPDATE	TRIGGER	71	      SELECT name

SPDTREE_LAST_UPDATE	TRIGGER	72	        INTO :new.bankname

SPDTREE_LAST_UPDATE	TRIGGER	73	        FROM banks

SPDTREE_LAST_UPDATE	TRIGGER	74	       WHERE id = :new.rekvbank;

SPDTREE_LAST_UPDATE	TRIGGER	75	   EXCEPTION

SPDTREE_LAST_UPDATE	TRIGGER	76	      WHEN OTHERS

SPDTREE_LAST_UPDATE	TRIGGER	77	      THEN

SPDTREE_LAST_UPDATE	TRIGGER	78	         NULL;

SPDTREE_LAST_UPDATE	TRIGGER	79	   END;

SPDTREE_LAST_UPDATE	TRIGGER	80	END SPDTREE_last_update;
SET_COST_ASSIGN_MONTH	PROCEDURE	1	PROCEDURE        set_cost_assign_month (p_z_id IN INTEGER)

SET_COST_ASSIGN_MONTH	PROCEDURE	2	IS

SET_COST_ASSIGN_MONTH	PROCEDURE	3	   v_cost_assign_month   DATE;

SET_COST_ASSIGN_MONTH	PROCEDURE	4	BEGIN

SET_COST_ASSIGN_MONTH	PROCEDURE	5	   BEGIN

SET_COST_ASSIGN_MONTH	PROCEDURE	6	      SELECT CASE

SET_COST_ASSIGN_MONTH	PROCEDURE	7	                WHEN TRUNC (accepted_date, 'mm') = TRUNC (dt_end, 'mm')

SET_COST_ASSIGN_MONTH	PROCEDURE	8	                THEN

SET_COST_ASSIGN_MONTH	PROCEDURE	9	                   TRUNC (dt_end, 'mm')

SET_COST_ASSIGN_MONTH	PROCEDURE	10	                WHEN     TRUNC (accepted_date, 'mm') - TRUNC (dt_end, 'mm') > 0

SET_COST_ASSIGN_MONTH	PROCEDURE	11	                     AND TO_NUMBER (TO_CHAR (accepted_date, 'dd')) < +z.x

SET_COST_ASSIGN_MONTH	PROCEDURE	12	                THEN

SET_COST_ASSIGN_MONTH	PROCEDURE	13	                   ADD_MONTHS (TRUNC (accepted_date, 'mm'), -1)

SET_COST_ASSIGN_MONTH	PROCEDURE	14	                ELSE

SET_COST_ASSIGN_MONTH	PROCEDURE	15	                   TRUNC (accepted_date, 'mm')

SET_COST_ASSIGN_MONTH	PROCEDURE	16	             END

SET_COST_ASSIGN_MONTH	PROCEDURE	17	        INTO v_cost_assign_month

SET_COST_ASSIGN_MONTH	PROCEDURE	18	        FROM (SELECT z.id,

SET_COST_ASSIGN_MONTH	PROCEDURE	19	                     z.dt_end,

SET_COST_ASSIGN_MONTH	PROCEDURE	20	                     (SELECT rep_lu

SET_COST_ASSIGN_MONTH	PROCEDURE	21	                        FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	22	                       WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	23	                             AND INN_not_ReportMA (tn) = 0

SET_COST_ASSIGN_MONTH	PROCEDURE	24	                             AND accept_order =

SET_COST_ASSIGN_MONTH	PROCEDURE	25	                                    DECODE (

SET_COST_ASSIGN_MONTH	PROCEDURE	26	                                       NVL (

SET_COST_ASSIGN_MONTH	PROCEDURE	27	                                          (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	28	                                             FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	29	                                            WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	30	                                                  AND rep_accepted = 2

SET_COST_ASSIGN_MONTH	PROCEDURE	31	                                                  AND INN_not_ReportMA (tn) = 0),

SET_COST_ASSIGN_MONTH	PROCEDURE	32	                                          0),

SET_COST_ASSIGN_MONTH	PROCEDURE	33	                                       0, (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	34	                                             FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	35	                                            WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	36	                                                  AND rep_accepted IS NOT NULL

SET_COST_ASSIGN_MONTH	PROCEDURE	37	                                                  AND INN_not_ReportMA (tn) = 0),

SET_COST_ASSIGN_MONTH	PROCEDURE	38	                                       (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	39	                                          FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	40	                                         WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	41	                                               AND rep_accepted = 2

SET_COST_ASSIGN_MONTH	PROCEDURE	42	                                               AND INN_not_ReportMA (tn) = 0)))

SET_COST_ASSIGN_MONTH	PROCEDURE	43	                        accepted_date,

SET_COST_ASSIGN_MONTH	PROCEDURE	44	                     day_for_MAreport x

SET_COST_ASSIGN_MONTH	PROCEDURE	45	                FROM bud_ru_zay z, user_list u

SET_COST_ASSIGN_MONTH	PROCEDURE	46	               WHERE     (SELECT NVL (tu, 0)

SET_COST_ASSIGN_MONTH	PROCEDURE	47	                            FROM bud_ru_st_ras

SET_COST_ASSIGN_MONTH	PROCEDURE	48	                           WHERE id = z.kat) = 0

SET_COST_ASSIGN_MONTH	PROCEDURE	49	                     AND z.tn = u.tn

SET_COST_ASSIGN_MONTH	PROCEDURE	50	                     AND u.dpt_id = 1

SET_COST_ASSIGN_MONTH	PROCEDURE	51	                     AND z.report_data IS NOT NULL

SET_COST_ASSIGN_MONTH	PROCEDURE	52	                     AND (SELECT accepted

SET_COST_ASSIGN_MONTH	PROCEDURE	53	                            FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	54	                           WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	55	                                 AND accept_order =

SET_COST_ASSIGN_MONTH	PROCEDURE	56	                                        DECODE (

SET_COST_ASSIGN_MONTH	PROCEDURE	57	                                           NVL (

SET_COST_ASSIGN_MONTH	PROCEDURE	58	                                              (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	59	                                                 FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	60	                                                WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	61	                                                      AND accepted = 2),

SET_COST_ASSIGN_MONTH	PROCEDURE	62	                                              0),

SET_COST_ASSIGN_MONTH	PROCEDURE	63	                                           0, (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	64	                                                 FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	65	                                                WHERE z_id = z.id),

SET_COST_ASSIGN_MONTH	PROCEDURE	66	                                           (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	67	                                              FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	68	                                             WHERE z_id = z.id AND accepted = 2))) =

SET_COST_ASSIGN_MONTH	PROCEDURE	69	                            1

SET_COST_ASSIGN_MONTH	PROCEDURE	70	                     AND (SELECT rep_accepted

SET_COST_ASSIGN_MONTH	PROCEDURE	71	                            FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	72	                           WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	73	                                 AND INN_not_ReportMA (tn) = 0

SET_COST_ASSIGN_MONTH	PROCEDURE	74	                                 AND accept_order =

SET_COST_ASSIGN_MONTH	PROCEDURE	75	                                        DECODE (

SET_COST_ASSIGN_MONTH	PROCEDURE	76	                                           NVL (

SET_COST_ASSIGN_MONTH	PROCEDURE	77	                                              (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	78	                                                 FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	79	                                                WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	80	                                                      AND rep_accepted = 2

SET_COST_ASSIGN_MONTH	PROCEDURE	81	                                                      AND INN_not_ReportMA (tn) =

SET_COST_ASSIGN_MONTH	PROCEDURE	82	                                                             0),

SET_COST_ASSIGN_MONTH	PROCEDURE	83	                                              0),

SET_COST_ASSIGN_MONTH	PROCEDURE	84	                                           0, (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	85	                                                 FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	86	                                                WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	87	                                                      AND rep_accepted

SET_COST_ASSIGN_MONTH	PROCEDURE	88	                                                             IS NOT NULL

SET_COST_ASSIGN_MONTH	PROCEDURE	89	                                                      AND INN_not_ReportMA (tn) =

SET_COST_ASSIGN_MONTH	PROCEDURE	90	                                                             0),

SET_COST_ASSIGN_MONTH	PROCEDURE	91	                                           (SELECT MAX (accept_order)

SET_COST_ASSIGN_MONTH	PROCEDURE	92	                                              FROM bud_ru_zay_accept

SET_COST_ASSIGN_MONTH	PROCEDURE	93	                                             WHERE     z_id = z.id

SET_COST_ASSIGN_MONTH	PROCEDURE	94	                                                   AND rep_accepted = 2

SET_COST_ASSIGN_MONTH	PROCEDURE	95	                                                   AND INN_not_ReportMA (tn) =

SET_COST_ASSIGN_MONTH	PROCEDURE	96	                                                          0))) = 1) z

SET_COST_ASSIGN_MONTH	PROCEDURE	97	       WHERE z.id = p_z_id;

SET_COST_ASSIGN_MONTH	PROCEDURE	98	

SET_COST_ASSIGN_MONTH	PROCEDURE	99	      UPDATE bud_ru_zay

SET_COST_ASSIGN_MONTH	PROCEDURE	100	         SET cost_assign_month = v_cost_assign_month

SET_COST_ASSIGN_MONTH	PROCEDURE	101	       WHERE id = p_z_id;

SET_COST_ASSIGN_MONTH	PROCEDURE	102	

SET_COST_ASSIGN_MONTH	PROCEDURE	103	      COMMIT;

SET_COST_ASSIGN_MONTH	PROCEDURE	104	   EXCEPTION

SET_COST_ASSIGN_MONTH	PROCEDURE	105	      WHEN NO_DATA_FOUND

SET_COST_ASSIGN_MONTH	PROCEDURE	106	      THEN

SET_COST_ASSIGN_MONTH	PROCEDURE	107	         DBMS_OUTPUT.put_line (

SET_COST_ASSIGN_MONTH	PROCEDURE	108	               p_z_id

SET_COST_ASSIGN_MONTH	PROCEDURE	109	            || ' invalid input id. may be report is not finally accepted?');

SET_COST_ASSIGN_MONTH	PROCEDURE	110	   END;

SET_COST_ASSIGN_MONTH	PROCEDURE	111	END;
SETZAYFIELDVAL	PROCEDURE	1	PROCEDURE        setZayFieldVal (p_zid     IN INTEGER,

SETZAYFIELDVAL	PROCEDURE	2	                                                   p_type    IN VARCHAR2,

SETZAYFIELDVAL	PROCEDURE	3	                                                   p_val     IN VARCHAR2,

SETZAYFIELDVAL	PROCEDURE	4	                                                   p_value   IN VARCHAR2)

SETZAYFIELDVAL	PROCEDURE	5	IS

SETZAYFIELDVAL	PROCEDURE	6	   zff_id   INTEGER;

SETZAYFIELDVAL	PROCEDURE	7	   f_type   VARCHAR2 (255);

SETZAYFIELDVAL	PROCEDURE	8	BEGIN

SETZAYFIELDVAL	PROCEDURE	9	   BEGIN

SETZAYFIELDVAL	PROCEDURE	10	      SELECT zff.id, ff.TYPE

SETZAYFIELDVAL	PROCEDURE	11	        INTO zff_id, f_type

SETZAYFIELDVAL	PROCEDURE	12	        FROM bud_ru_zay_ff zff, bud_ru_ff ff

SETZAYFIELDVAL	PROCEDURE	13	       WHERE     zff.z_id = p_zid

SETZAYFIELDVAL	PROCEDURE	14	             AND zff.ff_id = ff.id

SETZAYFIELDVAL	PROCEDURE	15	             AND (   (ff.var1 = p_val AND p_type = 'var1')

SETZAYFIELDVAL	PROCEDURE	16	                  OR (ff.admin_id = p_val AND p_type = 'admin_id')

SETZAYFIELDVAL	PROCEDURE	17	                  OR (ff.var_name = p_val AND p_type = 'var_name')

SETZAYFIELDVAL	PROCEDURE	18	                  OR (ff.rep_var_name = p_val AND p_type = 'rep_var_name'));

SETZAYFIELDVAL	PROCEDURE	19	

SETZAYFIELDVAL	PROCEDURE	20	      IF f_type = 'textarea'

SETZAYFIELDVAL	PROCEDURE	21	      THEN

SETZAYFIELDVAL	PROCEDURE	22	         IF p_type = 'rep_var_name'

SETZAYFIELDVAL	PROCEDURE	23	         THEN

SETZAYFIELDVAL	PROCEDURE	24	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	25	               SET rep_val_textarea = p_value

SETZAYFIELDVAL	PROCEDURE	26	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	27	         ELSE

SETZAYFIELDVAL	PROCEDURE	28	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	29	               SET val_textarea = p_value

SETZAYFIELDVAL	PROCEDURE	30	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	31	         END IF;

SETZAYFIELDVAL	PROCEDURE	32	      END IF;

SETZAYFIELDVAL	PROCEDURE	33	

SETZAYFIELDVAL	PROCEDURE	34	      IF f_type = 'string'

SETZAYFIELDVAL	PROCEDURE	35	      THEN

SETZAYFIELDVAL	PROCEDURE	36	         IF p_type = 'rep_var_name'

SETZAYFIELDVAL	PROCEDURE	37	         THEN

SETZAYFIELDVAL	PROCEDURE	38	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	39	               SET rep_val_string = p_value

SETZAYFIELDVAL	PROCEDURE	40	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	41	         ELSE

SETZAYFIELDVAL	PROCEDURE	42	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	43	               SET val_string = p_value

SETZAYFIELDVAL	PROCEDURE	44	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	45	         END IF;

SETZAYFIELDVAL	PROCEDURE	46	      END IF;

SETZAYFIELDVAL	PROCEDURE	47	

SETZAYFIELDVAL	PROCEDURE	48	      IF f_type = 'list'

SETZAYFIELDVAL	PROCEDURE	49	      THEN

SETZAYFIELDVAL	PROCEDURE	50	         IF p_type = 'rep_var_name'

SETZAYFIELDVAL	PROCEDURE	51	         THEN

SETZAYFIELDVAL	PROCEDURE	52	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	53	               SET rep_val_list = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	54	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	55	         ELSE

SETZAYFIELDVAL	PROCEDURE	56	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	57	               SET val_list = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	58	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	59	         END IF;

SETZAYFIELDVAL	PROCEDURE	60	      END IF;

SETZAYFIELDVAL	PROCEDURE	61	

SETZAYFIELDVAL	PROCEDURE	62	      IF f_type = 'number'

SETZAYFIELDVAL	PROCEDURE	63	      THEN

SETZAYFIELDVAL	PROCEDURE	64	         IF p_type = 'rep_var_name'

SETZAYFIELDVAL	PROCEDURE	65	         THEN

SETZAYFIELDVAL	PROCEDURE	66	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	67	               SET rep_val_number = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	68	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	69	         ELSE

SETZAYFIELDVAL	PROCEDURE	70	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	71	               SET val_number = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	72	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	73	         END IF;

SETZAYFIELDVAL	PROCEDURE	74	      END IF;

SETZAYFIELDVAL	PROCEDURE	75	

SETZAYFIELDVAL	PROCEDURE	76	      IF f_type = 'number_int'

SETZAYFIELDVAL	PROCEDURE	77	      THEN

SETZAYFIELDVAL	PROCEDURE	78	         IF p_type = 'rep_var_name'

SETZAYFIELDVAL	PROCEDURE	79	         THEN

SETZAYFIELDVAL	PROCEDURE	80	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	81	               SET rep_val_number_int = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	82	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	83	         ELSE

SETZAYFIELDVAL	PROCEDURE	84	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	85	               SET val_number_int = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	86	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	87	         END IF;

SETZAYFIELDVAL	PROCEDURE	88	      END IF;

SETZAYFIELDVAL	PROCEDURE	89	

SETZAYFIELDVAL	PROCEDURE	90	      IF f_type = 'formula'

SETZAYFIELDVAL	PROCEDURE	91	      THEN

SETZAYFIELDVAL	PROCEDURE	92	         IF p_type = 'rep_var_name'

SETZAYFIELDVAL	PROCEDURE	93	         THEN

SETZAYFIELDVAL	PROCEDURE	94	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	95	               SET rep_val_formula = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	96	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	97	         ELSE

SETZAYFIELDVAL	PROCEDURE	98	            UPDATE bud_ru_zay_ff

SETZAYFIELDVAL	PROCEDURE	99	               SET val_formula = TO_NUMBER (p_value)

SETZAYFIELDVAL	PROCEDURE	100	             WHERE id = zff_id;

SETZAYFIELDVAL	PROCEDURE	101	         END IF;

SETZAYFIELDVAL	PROCEDURE	102	      END IF;

SETZAYFIELDVAL	PROCEDURE	103	

SETZAYFIELDVAL	PROCEDURE	104	      COMMIT;

SETZAYFIELDVAL	PROCEDURE	105	   EXCEPTION

SETZAYFIELDVAL	PROCEDURE	106	      WHEN OTHERS

SETZAYFIELDVAL	PROCEDURE	107	      THEN

SETZAYFIELDVAL	PROCEDURE	108	         NULL;

SETZAYFIELDVAL	PROCEDURE	109	   END;

SETZAYFIELDVAL	PROCEDURE	110	END;
SETADVANCES	PROCEDURE	1	PROCEDURE setAdvances

SETADVANCES	PROCEDURE	2	AS

SETADVANCES	PROCEDURE	3	BEGIN

SETADVANCES	PROCEDURE	4	   DELETE FROM advance_tn

SETADVANCES	PROCEDURE	5	         WHERE m = ADD_MONTHS (TRUNC (SYSDATE, 'mm'), 1);

SETADVANCES	PROCEDURE	6	

SETADVANCES	PROCEDURE	7	   INSERT INTO advance_tn (tn,

SETADVANCES	PROCEDURE	8	                           m,

SETADVANCES	PROCEDURE	9	                           val,

SETADVANCES	PROCEDURE	10	                           cur_id)

SETADVANCES	PROCEDURE	11	      SELECT u.tn,

SETADVANCES	PROCEDURE	12	             ADD_MONTHS (TRUNC (SYSDATE, 'mm'), 1),

SETADVANCES	PROCEDURE	13	             NVL (p.val, 0),

SETADVANCES	PROCEDURE	14	             u.cur_id

SETADVANCES	PROCEDURE	15	        FROM user_list u, advance_pos p

SETADVANCES	PROCEDURE	16	       WHERE     u.tn IN (SELECT slave FROM full)

SETADVANCES	PROCEDURE	17	             AND u.datauvol IS NULL

SETADVANCES	PROCEDURE	18	             AND u.pos_id = p.pos_id(+)

SETADVANCES	PROCEDURE	19	             AND u.dpt_id = p.dpt_id(+);

SETADVANCES	PROCEDURE	20	

SETADVANCES	PROCEDURE	21	   COMMIT;

SETADVANCES	PROCEDURE	22	END;
SEND_UNFINISHED_TASKS	PROCEDURE	1	PROCEDURE        send_unfinished_tasks

SEND_UNFINISHED_TASKS	PROCEDURE	2	AS

SEND_UNFINISHED_TASKS	PROCEDURE	3	   msg              VARCHAR (32767);

SEND_UNFINISHED_TASKS	PROCEDURE	4	   i                INTEGER;

SEND_UNFINISHED_TASKS	PROCEDURE	5	   dt               VARCHAR2 (255);

SEND_UNFINISHED_TASKS	PROCEDURE	6	   too_many_lines   INTEGER;

SEND_UNFINISHED_TASKS	PROCEDURE	7	BEGIN

SEND_UNFINISHED_TASKS	PROCEDURE	8	   FOR a

SEND_UNFINISHED_TASKS	PROCEDURE	9	      IN (SELECT svms.tn, svms.fio, svms.e_mail

SEND_UNFINISHED_TASKS	PROCEDURE	10	            FROM unfinished_tasks t, svms_oblast o, user_list svms

SEND_UNFINISHED_TASKS	PROCEDURE	11	           WHERE     t.tz_oblast = o.oblast

SEND_UNFINISHED_TASKS	PROCEDURE	12	                 AND o.tn = svms.tn

SEND_UNFINISHED_TASKS	PROCEDURE	13	                 AND svms.datauvol IS NULL

SEND_UNFINISHED_TASKS	PROCEDURE	14	          UNION

SEND_UNFINISHED_TASKS	PROCEDURE	15	          SELECT pu.tn, pu.fio, pu.e_mail

SEND_UNFINISHED_TASKS	PROCEDURE	16	            FROM unfinished_tasks t,

SEND_UNFINISHED_TASKS	PROCEDURE	17	                 svms_oblast o,

SEND_UNFINISHED_TASKS	PROCEDURE	18	                 user_list svms,

SEND_UNFINISHED_TASKS	PROCEDURE	19	                 user_list pu,

SEND_UNFINISHED_TASKS	PROCEDURE	20	                 parents p

SEND_UNFINISHED_TASKS	PROCEDURE	21	           WHERE     t.tz_oblast = o.oblast

SEND_UNFINISHED_TASKS	PROCEDURE	22	                 AND o.tn = p.tn

SEND_UNFINISHED_TASKS	PROCEDURE	23	                 AND p.parent = pu.tn

SEND_UNFINISHED_TASKS	PROCEDURE	24	                 AND svms.datauvol IS NULL

SEND_UNFINISHED_TASKS	PROCEDURE	25	          UNION

SEND_UNFINISHED_TASKS	PROCEDURE	26	          SELECT u.tn, u.fio, u.e_mail

SEND_UNFINISHED_TASKS	PROCEDURE	27	            FROM user_list u

SEND_UNFINISHED_TASKS	PROCEDURE	28	           WHERE is_ma = 1 AND datauvol IS NULL

SEND_UNFINISHED_TASKS	PROCEDURE	29	          ORDER BY fio)

SEND_UNFINISHED_TASKS	PROCEDURE	30	   LOOP

SEND_UNFINISHED_TASKS	PROCEDURE	31	      i := 0;

SEND_UNFINISHED_TASKS	PROCEDURE	32	      msg := '<table border=1 cellspacing=0 cellpadding=0>';

SEND_UNFINISHED_TASKS	PROCEDURE	33	      msg :=

SEND_UNFINISHED_TASKS	PROCEDURE	34	            msg

SEND_UNFINISHED_TASKS	PROCEDURE	35	         || '<tr style="font-weight:bold">'

SEND_UNFINISHED_TASKS	PROCEDURE	36	         || '<td>Дата визита</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	37	         || '<td>Дата постановки задачи</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	38	         || '<td>Заказчик</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	39	         || '<td>ФИО заказчика, поставившего задачу</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	40	         || '<td>Область</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	41	         || '<td>Город</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	42	         || '<td>Сеть</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	43	         || '<td>Адрес ТЗ</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	44	         || '<td>Текст задачи</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	45	         || '<td>Ссылка</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	46	         || '</tr>';

SEND_UNFINISHED_TASKS	PROCEDURE	47	

SEND_UNFINISHED_TASKS	PROCEDURE	48	      FOR b IN (  SELECT DISTINCT t.dt,

SEND_UNFINISHED_TASKS	PROCEDURE	49	                                  TO_CHAR (t.dt, 'dd.mm.yyyy') dt_t,

SEND_UNFINISHED_TASKS	PROCEDURE	50	                                  TO_CHAR (t.lu, 'dd.mm.yyyy hh24:mi') lu_t,

SEND_UNFINISHED_TASKS	PROCEDURE	51	                                  t.ag_id,

SEND_UNFINISHED_TASKS	PROCEDURE	52	                                  t.ag_name,

SEND_UNFINISHED_TASKS	PROCEDURE	53	                                  t.kod_tp,

SEND_UNFINISHED_TASKS	PROCEDURE	54	                                  t.login,

SEND_UNFINISHED_TASKS	PROCEDURE	55	                                  t.text,

SEND_UNFINISHED_TASKS	PROCEDURE	56	                                  t.task_type,

SEND_UNFINISHED_TASKS	PROCEDURE	57	                                  t.tz_oblast,

SEND_UNFINISHED_TASKS	PROCEDURE	58	                                  t.h_tz_oblast,

SEND_UNFINISHED_TASKS	PROCEDURE	59	                                  t.city,

SEND_UNFINISHED_TASKS	PROCEDURE	60	                                  t.h_city,

SEND_UNFINISHED_TASKS	PROCEDURE	61	                                  t.tz_address,

SEND_UNFINISHED_TASKS	PROCEDURE	62	                                  t.kodtp,

SEND_UNFINISHED_TASKS	PROCEDURE	63	                                  t.id_net,

SEND_UNFINISHED_TASKS	PROCEDURE	64	                                  t.net_name,

SEND_UNFINISHED_TASKS	PROCEDURE	65	                                  t.zak_name

SEND_UNFINISHED_TASKS	PROCEDURE	66	                    FROM unfinished_tasks t, svms_oblast o, user_list svms

SEND_UNFINISHED_TASKS	PROCEDURE	67	                   WHERE     t.tz_oblast = o.oblast

SEND_UNFINISHED_TASKS	PROCEDURE	68	                         AND o.tn = svms.tn

SEND_UNFINISHED_TASKS	PROCEDURE	69	                         AND svms.datauvol IS NULL

SEND_UNFINISHED_TASKS	PROCEDURE	70	                         AND (   o.tn = a.tn

SEND_UNFINISHED_TASKS	PROCEDURE	71	                              OR o.tn IN (SELECT tn

SEND_UNFINISHED_TASKS	PROCEDURE	72	                                            FROM parents

SEND_UNFINISHED_TASKS	PROCEDURE	73	                                           WHERE parent = a.tn)

SEND_UNFINISHED_TASKS	PROCEDURE	74	                              OR (SELECT is_ma

SEND_UNFINISHED_TASKS	PROCEDURE	75	                                    FROM user_list

SEND_UNFINISHED_TASKS	PROCEDURE	76	                                   WHERE tn = a.tn) = 1)

SEND_UNFINISHED_TASKS	PROCEDURE	77	                ORDER BY t.dt, t.ag_name, t.tz_address)

SEND_UNFINISHED_TASKS	PROCEDURE	78	      LOOP

SEND_UNFINISHED_TASKS	PROCEDURE	79	         IF NVL (LENGTH (msg), 0) < 10000

SEND_UNFINISHED_TASKS	PROCEDURE	80	         THEN

SEND_UNFINISHED_TASKS	PROCEDURE	81	            i := i + 1;

SEND_UNFINISHED_TASKS	PROCEDURE	82	            msg :=

SEND_UNFINISHED_TASKS	PROCEDURE	83	                  msg

SEND_UNFINISHED_TASKS	PROCEDURE	84	               || '<tr>'

SEND_UNFINISHED_TASKS	PROCEDURE	85	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	86	               || b.dt_t

SEND_UNFINISHED_TASKS	PROCEDURE	87	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	88	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	89	               || b.lu_t

SEND_UNFINISHED_TASKS	PROCEDURE	90	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	91	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	92	               || b.ag_name

SEND_UNFINISHED_TASKS	PROCEDURE	93	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	94	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	95	               || b.zak_name

SEND_UNFINISHED_TASKS	PROCEDURE	96	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	97	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	98	               || b.tz_oblast

SEND_UNFINISHED_TASKS	PROCEDURE	99	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	100	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	101	               || b.city

SEND_UNFINISHED_TASKS	PROCEDURE	102	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	103	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	104	               || b.net_name

SEND_UNFINISHED_TASKS	PROCEDURE	105	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	106	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	107	               || b.tz_address

SEND_UNFINISHED_TASKS	PROCEDURE	108	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	109	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	110	               || b.text

SEND_UNFINISHED_TASKS	PROCEDURE	111	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	112	               || '<td>'

SEND_UNFINISHED_TASKS	PROCEDURE	113	               || '<a href="https://ps.avk.ua/?action=merch_report_4sv_file_chat&select=1&dates_list1='

SEND_UNFINISHED_TASKS	PROCEDURE	114	               || b.dt_t

SEND_UNFINISHED_TASKS	PROCEDURE	115	               || '&dates_list2='

SEND_UNFINISHED_TASKS	PROCEDURE	116	               || b.dt_t

SEND_UNFINISHED_TASKS	PROCEDURE	117	               || '&oblast='

SEND_UNFINISHED_TASKS	PROCEDURE	118	               || b.h_tz_oblast

SEND_UNFINISHED_TASKS	PROCEDURE	119	               || '&city='

SEND_UNFINISHED_TASKS	PROCEDURE	120	               || b.h_city

SEND_UNFINISHED_TASKS	PROCEDURE	121	               || '&nets='

SEND_UNFINISHED_TASKS	PROCEDURE	122	               || b.id_net

SEND_UNFINISHED_TASKS	PROCEDURE	123	               || '&agent='

SEND_UNFINISHED_TASKS	PROCEDURE	124	               || b.ag_id

SEND_UNFINISHED_TASKS	PROCEDURE	125	               || '&flt_chat=3">ссылка</a>'

SEND_UNFINISHED_TASKS	PROCEDURE	126	               || '</td>'

SEND_UNFINISHED_TASKS	PROCEDURE	127	               || '</tr>';

SEND_UNFINISHED_TASKS	PROCEDURE	128	            too_many_lines := 0;

SEND_UNFINISHED_TASKS	PROCEDURE	129	         ELSE

SEND_UNFINISHED_TASKS	PROCEDURE	130	            too_many_lines := 1;

SEND_UNFINISHED_TASKS	PROCEDURE	131	         END IF;

SEND_UNFINISHED_TASKS	PROCEDURE	132	      END LOOP;

SEND_UNFINISHED_TASKS	PROCEDURE	133	

SEND_UNFINISHED_TASKS	PROCEDURE	134	      msg := msg || '</table>';

SEND_UNFINISHED_TASKS	PROCEDURE	135	

SEND_UNFINISHED_TASKS	PROCEDURE	136	      IF too_many_lines = 1

SEND_UNFINISHED_TASKS	PROCEDURE	137	      THEN

SEND_UNFINISHED_TASKS	PROCEDURE	138	         msg :=

SEND_UNFINISHED_TASKS	PROCEDURE	139	               msg

SEND_UNFINISHED_TASKS	PROCEDURE	140	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SEND_UNFINISHED_TASKS	PROCEDURE	141	      END IF;

SEND_UNFINISHED_TASKS	PROCEDURE	142	

SEND_UNFINISHED_TASKS	PROCEDURE	143	      IF i > 0

SEND_UNFINISHED_TASKS	PROCEDURE	144	      THEN

SEND_UNFINISHED_TASKS	PROCEDURE	145	         PR_SENDMAIL (a.e_mail,

SEND_UNFINISHED_TASKS	PROCEDURE	146	                      'Список неотвеченных задач',

SEND_UNFINISHED_TASKS	PROCEDURE	147	                      msg);

SEND_UNFINISHED_TASKS	PROCEDURE	148	      END IF;

SEND_UNFINISHED_TASKS	PROCEDURE	149	   END LOOP;

SEND_UNFINISHED_TASKS	PROCEDURE	150	END;
SEND_SZ4ACCEPT	PROCEDURE	1	PROCEDURE        "SEND_SZ4ACCEPT"

SEND_SZ4ACCEPT	PROCEDURE	2	IS

SEND_SZ4ACCEPT	PROCEDURE	3	   msg           VARCHAR2 (32767);

SEND_SZ4ACCEPT	PROCEDURE	4	   subj          VARCHAR2 (32767);

SEND_SZ4ACCEPT	PROCEDURE	5	   addr          VARCHAR2 (32767);

SEND_SZ4ACCEPT	PROCEDURE	6	   total         INTEGER;

SEND_SZ4ACCEPT	PROCEDURE	7	   too_many_sz   INTEGER;

SEND_SZ4ACCEPT	PROCEDURE	8	BEGIN

SEND_SZ4ACCEPT	PROCEDURE	9	   FOR b

SEND_SZ4ACCEPT	PROCEDURE	10	      IN (  SELECT DISTINCT email, current_acceptor_tn

SEND_SZ4ACCEPT	PROCEDURE	11	              FROM (SELECT current_acceptor_tn,

SEND_SZ4ACCEPT	PROCEDURE	12	                           (SELECT e_mail

SEND_SZ4ACCEPT	PROCEDURE	13	                              FROM user_list

SEND_SZ4ACCEPT	PROCEDURE	14	                             WHERE tn = current_acceptor_tn)

SEND_SZ4ACCEPT	PROCEDURE	15	                              email,

SEND_SZ4ACCEPT	PROCEDURE	16	                           deleted

SEND_SZ4ACCEPT	PROCEDURE	17	                      FROM (SELECT sz.*,

SEND_SZ4ACCEPT	PROCEDURE	18	                                   (SELECT tn

SEND_SZ4ACCEPT	PROCEDURE	19	                                      FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	20	                                     WHERE     sz_id = sz.id

SEND_SZ4ACCEPT	PROCEDURE	21	                                           AND accept_order =

SEND_SZ4ACCEPT	PROCEDURE	22	                                                  (SELECT MIN (accept_order)

SEND_SZ4ACCEPT	PROCEDURE	23	                                                     FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	24	                                                    WHERE     sz_id = sz.id

SEND_SZ4ACCEPT	PROCEDURE	25	                                                          AND accepted = 0))

SEND_SZ4ACCEPT	PROCEDURE	26	                                      current_acceptor_tn,

SEND_SZ4ACCEPT	PROCEDURE	27	                                   DECODE (

SEND_SZ4ACCEPT	PROCEDURE	28	                                      (SELECT COUNT (*)

SEND_SZ4ACCEPT	PROCEDURE	29	                                         FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	30	                                        WHERE sz_id = sz.id AND accepted = 2),

SEND_SZ4ACCEPT	PROCEDURE	31	                                      0, 0,

SEND_SZ4ACCEPT	PROCEDURE	32	                                      1)

SEND_SZ4ACCEPT	PROCEDURE	33	                                      deleted

SEND_SZ4ACCEPT	PROCEDURE	34	                              FROM sz)) z,

SEND_SZ4ACCEPT	PROCEDURE	35	                   user_list u

SEND_SZ4ACCEPT	PROCEDURE	36	             WHERE     current_acceptor_tn IS NOT NULL

SEND_SZ4ACCEPT	PROCEDURE	37	                   AND deleted <> 1

SEND_SZ4ACCEPT	PROCEDURE	38	                   AND email IS NOT NULL

SEND_SZ4ACCEPT	PROCEDURE	39	                   AND current_acceptor_tn = u.tn

SEND_SZ4ACCEPT	PROCEDURE	40	                   AND u.datauvol IS NULL

SEND_SZ4ACCEPT	PROCEDURE	41	          ORDER BY email)

SEND_SZ4ACCEPT	PROCEDURE	42	   LOOP

SEND_SZ4ACCEPT	PROCEDURE	43	      SELECT COUNT (*)

SEND_SZ4ACCEPT	PROCEDURE	44	        INTO total

SEND_SZ4ACCEPT	PROCEDURE	45	        FROM sz, sz_cat sc

SEND_SZ4ACCEPT	PROCEDURE	46	       WHERE     sz.cat = sc.id(+)

SEND_SZ4ACCEPT	PROCEDURE	47	             AND (SELECT tn

SEND_SZ4ACCEPT	PROCEDURE	48	                    FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	49	                   WHERE     sz_id = sz.id

SEND_SZ4ACCEPT	PROCEDURE	50	                         AND accept_order =

SEND_SZ4ACCEPT	PROCEDURE	51	                                (SELECT MIN (accept_order)

SEND_SZ4ACCEPT	PROCEDURE	52	                                   FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	53	                                  WHERE sz_id = sz.id AND accepted = 0)) =

SEND_SZ4ACCEPT	PROCEDURE	54	                    b.current_acceptor_tn

SEND_SZ4ACCEPT	PROCEDURE	55	             AND DECODE ( (SELECT COUNT (*)

SEND_SZ4ACCEPT	PROCEDURE	56	                             FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	57	                            WHERE sz_id = sz.id AND accepted = 2),

SEND_SZ4ACCEPT	PROCEDURE	58	                         0, 0,

SEND_SZ4ACCEPT	PROCEDURE	59	                         1) <> 1;

SEND_SZ4ACCEPT	PROCEDURE	60	

SEND_SZ4ACCEPT	PROCEDURE	61	      IF total > 0

SEND_SZ4ACCEPT	PROCEDURE	62	      THEN

SEND_SZ4ACCEPT	PROCEDURE	63	         msg :=

SEND_SZ4ACCEPT	PROCEDURE	64	               'На данный момент вашего подтверждения ожидают служебные записки <font style="color:red">(всего СЗ '

SEND_SZ4ACCEPT	PROCEDURE	65	            || TO_CHAR (total)

SEND_SZ4ACCEPT	PROCEDURE	66	            || ')</font>:';

SEND_SZ4ACCEPT	PROCEDURE	67	         msg :=

SEND_SZ4ACCEPT	PROCEDURE	68	               msg

SEND_SZ4ACCEPT	PROCEDURE	69	            || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_SZ4ACCEPT	PROCEDURE	70	         msg :=

SEND_SZ4ACCEPT	PROCEDURE	71	               msg

SEND_SZ4ACCEPT	PROCEDURE	72	            || '<tr style="font-weight:bold"><td>№</td><td>Дата</td><td>Инициатор</td><td>Адресат</td><td>Исполнители</td><td>Категория</td><td>Тема</td></tr>';

SEND_SZ4ACCEPT	PROCEDURE	73	

SEND_SZ4ACCEPT	PROCEDURE	74	

SEND_SZ4ACCEPT	PROCEDURE	75	

SEND_SZ4ACCEPT	PROCEDURE	76	         FOR a

SEND_SZ4ACCEPT	PROCEDURE	77	            IN (SELECT sz.id,

SEND_SZ4ACCEPT	PROCEDURE	78	                       TO_CHAR (sz.created, 'dd.mm.yyyy hh24:mi:ss') created,

SEND_SZ4ACCEPT	PROCEDURE	79	                       sz.head,

SEND_SZ4ACCEPT	PROCEDURE	80	                       sz.body,

SEND_SZ4ACCEPT	PROCEDURE	81	                       fn_getname (sz.tn) creator,

SEND_SZ4ACCEPT	PROCEDURE	82	                       sz.tn creator_tn,

SEND_SZ4ACCEPT	PROCEDURE	83	                       sz.recipient recipient_tn,

SEND_SZ4ACCEPT	PROCEDURE	84	                       fn_getname (sz.recipient) recipient,

SEND_SZ4ACCEPT	PROCEDURE	85	                       /*fn_get_name (43138, sz.executor)*/

SEND_SZ4ACCEPT	PROCEDURE	86	                       NULL executor_name,

SEND_SZ4ACCEPT	PROCEDURE	87	                       /*sz.executor*/

SEND_SZ4ACCEPT	PROCEDURE	88	                       NULL executor,

SEND_SZ4ACCEPT	PROCEDURE	89	                       sc.name cat_name

SEND_SZ4ACCEPT	PROCEDURE	90	                  FROM sz, sz_cat sc

SEND_SZ4ACCEPT	PROCEDURE	91	                 WHERE     sz.cat = sc.id(+)

SEND_SZ4ACCEPT	PROCEDURE	92	                       AND (SELECT tn

SEND_SZ4ACCEPT	PROCEDURE	93	                              FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	94	                             WHERE     sz_id = sz.id

SEND_SZ4ACCEPT	PROCEDURE	95	                                   AND accept_order =

SEND_SZ4ACCEPT	PROCEDURE	96	                                          (SELECT MIN (accept_order)

SEND_SZ4ACCEPT	PROCEDURE	97	                                             FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	98	                                            WHERE     sz_id = sz.id

SEND_SZ4ACCEPT	PROCEDURE	99	                                                  AND accepted = 0)) =

SEND_SZ4ACCEPT	PROCEDURE	100	                              b.current_acceptor_tn

SEND_SZ4ACCEPT	PROCEDURE	101	                       AND DECODE ( (SELECT COUNT (*)

SEND_SZ4ACCEPT	PROCEDURE	102	                                       FROM sz_accept

SEND_SZ4ACCEPT	PROCEDURE	103	                                      WHERE sz_id = sz.id AND accepted = 2),

SEND_SZ4ACCEPT	PROCEDURE	104	                                   0, 0,

SEND_SZ4ACCEPT	PROCEDURE	105	                                   1) <> 1)

SEND_SZ4ACCEPT	PROCEDURE	106	         LOOP

SEND_SZ4ACCEPT	PROCEDURE	107	            IF NVL (LENGTH (msg), 0) < 10000

SEND_SZ4ACCEPT	PROCEDURE	108	            THEN

SEND_SZ4ACCEPT	PROCEDURE	109	               msg := msg || '<tr>';

SEND_SZ4ACCEPT	PROCEDURE	110	               msg := msg || '<td>' || a.id || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	111	               msg := msg || '<td>' || a.created || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	112	               msg := msg || '<td>' || a.creator || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	113	               msg := msg || '<td>' || a.recipient || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	114	               msg := msg || '<td>';

SEND_SZ4ACCEPT	PROCEDURE	115	

SEND_SZ4ACCEPT	PROCEDURE	116	               FOR b IN (  SELECT fn_getname (tn) fio

SEND_SZ4ACCEPT	PROCEDURE	117	                             FROM sz_executors z

SEND_SZ4ACCEPT	PROCEDURE	118	                            WHERE sz_id = a.id

SEND_SZ4ACCEPT	PROCEDURE	119	                         ORDER BY execute_order)

SEND_SZ4ACCEPT	PROCEDURE	120	               LOOP

SEND_SZ4ACCEPT	PROCEDURE	121	                  msg := msg || b.fio || '<br>';

SEND_SZ4ACCEPT	PROCEDURE	122	               END LOOP;

SEND_SZ4ACCEPT	PROCEDURE	123	

SEND_SZ4ACCEPT	PROCEDURE	124	               msg := msg || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	125	               msg := msg || '<td>' || a.cat_name || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	126	               msg := msg || '<td>' || a.head || '</td>';

SEND_SZ4ACCEPT	PROCEDURE	127	               msg := msg || '</tr>';

SEND_SZ4ACCEPT	PROCEDURE	128	               too_many_sz := 0;

SEND_SZ4ACCEPT	PROCEDURE	129	            ELSE

SEND_SZ4ACCEPT	PROCEDURE	130	               too_many_sz := 1;

SEND_SZ4ACCEPT	PROCEDURE	131	            END IF;

SEND_SZ4ACCEPT	PROCEDURE	132	         END LOOP;

SEND_SZ4ACCEPT	PROCEDURE	133	

SEND_SZ4ACCEPT	PROCEDURE	134	         msg := msg || '</table>';

SEND_SZ4ACCEPT	PROCEDURE	135	

SEND_SZ4ACCEPT	PROCEDURE	136	         subj :=

SEND_SZ4ACCEPT	PROCEDURE	137	            'Служебные записки на подтверждение';

SEND_SZ4ACCEPT	PROCEDURE	138	

SEND_SZ4ACCEPT	PROCEDURE	139	         IF too_many_sz = 1

SEND_SZ4ACCEPT	PROCEDURE	140	         THEN

SEND_SZ4ACCEPT	PROCEDURE	141	            msg :=

SEND_SZ4ACCEPT	PROCEDURE	142	                  msg

SEND_SZ4ACCEPT	PROCEDURE	143	               || '<p>Отображен не весь список СЗ. Полный список СЗ вы можете увидеть непосредственно на портале</p>';

SEND_SZ4ACCEPT	PROCEDURE	144	         END IF;

SEND_SZ4ACCEPT	PROCEDURE	145	

SEND_SZ4ACCEPT	PROCEDURE	146	         PR_SENDMAIL (b.email, subj, msg);

SEND_SZ4ACCEPT	PROCEDURE	147	      END IF;

SEND_SZ4ACCEPT	PROCEDURE	148	   END LOOP;

SEND_SZ4ACCEPT	PROCEDURE	149	END;
SEND_STAFF_FLAWS	PROCEDURE	1	PROCEDURE        send_staff_flaws

SEND_STAFF_FLAWS	PROCEDURE	2	AS

SEND_STAFF_FLAWS	PROCEDURE	3	   msg              VARCHAR (32767);

SEND_STAFF_FLAWS	PROCEDURE	4	   i                INTEGER;

SEND_STAFF_FLAWS	PROCEDURE	5	   dt               VARCHAR2 (255);

SEND_STAFF_FLAWS	PROCEDURE	6	   too_many_lines   INTEGER;

SEND_STAFF_FLAWS	PROCEDURE	7	BEGIN

SEND_STAFF_FLAWS	PROCEDURE	8	   FOR a IN (  SELECT tn, fio, e_mail

SEND_STAFF_FLAWS	PROCEDURE	9	                 FROM user_list

SEND_STAFF_FLAWS	PROCEDURE	10	                WHERE is_mservice = 1 AND datauvol IS NULL

SEND_STAFF_FLAWS	PROCEDURE	11	             ORDER BY fio)

SEND_STAFF_FLAWS	PROCEDURE	12	   LOOP

SEND_STAFF_FLAWS	PROCEDURE	13	      i := 0;

SEND_STAFF_FLAWS	PROCEDURE	14	      msg := '<table border=1 cellspacing=0 cellpadding=0>';

SEND_STAFF_FLAWS	PROCEDURE	15	      msg :=

SEND_STAFF_FLAWS	PROCEDURE	16	            msg

SEND_STAFF_FLAWS	PROCEDURE	17	         || '<tr style="font-weight:bold">'

SEND_STAFF_FLAWS	PROCEDURE	18	         || '<td>Дата визита</td>'

SEND_STAFF_FLAWS	PROCEDURE	19	         || '<td>Заказчик</td>'

SEND_STAFF_FLAWS	PROCEDURE	20	         || '<td>ФИО МР</td>'

SEND_STAFF_FLAWS	PROCEDURE	21	         || '<td>Область</td>'

SEND_STAFF_FLAWS	PROCEDURE	22	         || '<td>Город</td>'

SEND_STAFF_FLAWS	PROCEDURE	23	         || '<td>Сеть</td>'

SEND_STAFF_FLAWS	PROCEDURE	24	         || '<td>Адрес ТЗ</td>'

SEND_STAFF_FLAWS	PROCEDURE	25	         || '<td>Недоработки</td>'

SEND_STAFF_FLAWS	PROCEDURE	26	         || '<td>Ссылка на отчет по специи</td>'

SEND_STAFF_FLAWS	PROCEDURE	27	         || '</tr>';

SEND_STAFF_FLAWS	PROCEDURE	28	

SEND_STAFF_FLAWS	PROCEDURE	29	      FOR b

SEND_STAFF_FLAWS	PROCEDURE	30	         IN (  SELECT TO_CHAR (mr.DT, 'dd.mm.yyyy') dt,

SEND_STAFF_FLAWS	PROCEDURE	31	                      mr.dt dt1,

SEND_STAFF_FLAWS	PROCEDURE	32	                      ra.name ag_name,

SEND_STAFF_FLAWS	PROCEDURE	33	                      rh.fio_otv,

SEND_STAFF_FLAWS	PROCEDURE	34	                      cpp1.tz_oblast,

SEND_STAFF_FLAWS	PROCEDURE	35	                      cpp1.city,

SEND_STAFF_FLAWS	PROCEDURE	36	                      n.net_name,

SEND_STAFF_FLAWS	PROCEDURE	37	                      cpp1.tz_address,

SEND_STAFF_FLAWS	PROCEDURE	38	                      rh.login,

SEND_STAFF_FLAWS	PROCEDURE	39	                      (SELECT id

SEND_STAFF_FLAWS	PROCEDURE	40	                         FROM merch_spec_head msh

SEND_STAFF_FLAWS	PROCEDURE	41	                        WHERE     msh.kod_tp = cpp1.kodtp

SEND_STAFF_FLAWS	PROCEDURE	42	                              AND msh.ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	43	                              AND msh.id_net = n.id_net

SEND_STAFF_FLAWS	PROCEDURE	44	                              AND msh.sd =

SEND_STAFF_FLAWS	PROCEDURE	45	                                     (SELECT MAX (sd)

SEND_STAFF_FLAWS	PROCEDURE	46	                                        FROM merch_spec_head

SEND_STAFF_FLAWS	PROCEDURE	47	                                       WHERE     id_net = n.id_net

SEND_STAFF_FLAWS	PROCEDURE	48	                                             AND kod_tp = cpp1.kodtp

SEND_STAFF_FLAWS	PROCEDURE	49	                                             AND ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	50	                                             AND sd <= mr.dt))

SEND_STAFF_FLAWS	PROCEDURE	51	                         spec_id,

SEND_STAFF_FLAWS	PROCEDURE	52	                      (SELECT wm_concat (r.name)

SEND_STAFF_FLAWS	PROCEDURE	53	                         FROM MERCH_REPORT_CAL_REMINDERS r,

SEND_STAFF_FLAWS	PROCEDURE	54	                              MERCH_REPORT_CAL_SOK s

SEND_STAFF_FLAWS	PROCEDURE	55	                        WHERE     r.ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	56	                              AND r.head_id = rh.id

SEND_STAFF_FLAWS	PROCEDURE	57	                              AND r.kodtp = rb.kodtp

SEND_STAFF_FLAWS	PROCEDURE	58	                              AND r.data = mr.dt

SEND_STAFF_FLAWS	PROCEDURE	59	                              AND r.ag_id = s.ag_id(+)

SEND_STAFF_FLAWS	PROCEDURE	60	                              AND r.head_id = s.head_id(+)

SEND_STAFF_FLAWS	PROCEDURE	61	                              AND r.kodtp = s.kodtp(+)

SEND_STAFF_FLAWS	PROCEDURE	62	                              AND r.data = s.data(+)

SEND_STAFF_FLAWS	PROCEDURE	63	                              AND r.rep_id = s.rep_id(+)

SEND_STAFF_FLAWS	PROCEDURE	64	                              AND r.rep_id IN (1,

SEND_STAFF_FLAWS	PROCEDURE	65	                                               2,

SEND_STAFF_FLAWS	PROCEDURE	66	                                               3,

SEND_STAFF_FLAWS	PROCEDURE	67	                                               4,

SEND_STAFF_FLAWS	PROCEDURE	68	                                               5)

SEND_STAFF_FLAWS	PROCEDURE	69	                              AND s.lu IS NULL)

SEND_STAFF_FLAWS	PROCEDURE	70	                         staff_flaws

SEND_STAFF_FLAWS	PROCEDURE	71	                 FROM merch_report mr,

SEND_STAFF_FLAWS	PROCEDURE	72	                      routes_body1 rb,

SEND_STAFF_FLAWS	PROCEDURE	73	                      routes_head rh,

SEND_STAFF_FLAWS	PROCEDURE	74	                      routes_head_agents rha,

SEND_STAFF_FLAWS	PROCEDURE	75	                      routes_agents ra,

SEND_STAFF_FLAWS	PROCEDURE	76	                      routes_tp rt,

SEND_STAFF_FLAWS	PROCEDURE	77	                      cpp cpp1,

SEND_STAFF_FLAWS	PROCEDURE	78	                      svms_oblast s,

SEND_STAFF_FLAWS	PROCEDURE	79	                      ms_nets n,

SEND_STAFF_FLAWS	PROCEDURE	80	                      calendar c

SEND_STAFF_FLAWS	PROCEDURE	81	                WHERE     mr.dt = TRUNC (SYSDATE) - 1

SEND_STAFF_FLAWS	PROCEDURE	82	                      AND mr.dt = c.data

SEND_STAFF_FLAWS	PROCEDURE	83	                      AND rb.day_num = c.dm

SEND_STAFF_FLAWS	PROCEDURE	84	                      AND rb.id = mr.rb_id

SEND_STAFF_FLAWS	PROCEDURE	85	                      AND rh.id = rb.head_id

SEND_STAFF_FLAWS	PROCEDURE	86	                      AND rh.id = rha.head_id

SEND_STAFF_FLAWS	PROCEDURE	87	                      AND ra.id = rha.ag_id

SEND_STAFF_FLAWS	PROCEDURE	88	                      AND ra.id = rb.ag_id

SEND_STAFF_FLAWS	PROCEDURE	89	                      AND rh.id = rt.head_id

SEND_STAFF_FLAWS	PROCEDURE	90	                      AND rb.kodtp = rt.kodtp

SEND_STAFF_FLAWS	PROCEDURE	91	                      AND rh.tn = s.tn

SEND_STAFF_FLAWS	PROCEDURE	92	                      AND rb.vv = rha.vv

SEND_STAFF_FLAWS	PROCEDURE	93	                      AND rha.vv = rt.vv

SEND_STAFF_FLAWS	PROCEDURE	94	                      AND cpp1.tz_oblast = s.oblast

SEND_STAFF_FLAWS	PROCEDURE	95	                      AND cpp1.kodtp = rb.kodtp

SEND_STAFF_FLAWS	PROCEDURE	96	                      AND cpp1.kodtp = rt.kodtp

SEND_STAFF_FLAWS	PROCEDURE	97	                      AND n.id_net = cpp1.id_net

SEND_STAFF_FLAWS	PROCEDURE	98	                      AND (   rh.tn IN (SELECT slave

SEND_STAFF_FLAWS	PROCEDURE	99	                                          FROM full

SEND_STAFF_FLAWS	PROCEDURE	100	                                         WHERE master = a.tn)

SEND_STAFF_FLAWS	PROCEDURE	101	                           OR (SELECT is_ma

SEND_STAFF_FLAWS	PROCEDURE	102	                                 FROM user_list

SEND_STAFF_FLAWS	PROCEDURE	103	                                WHERE tn = a.tn) = 1)

SEND_STAFF_FLAWS	PROCEDURE	104	                      AND (  NVL (

SEND_STAFF_FLAWS	PROCEDURE	105	                                (SELECT id

SEND_STAFF_FLAWS	PROCEDURE	106	                                   FROM merch_report_vv

SEND_STAFF_FLAWS	PROCEDURE	107	                                  WHERE     head_id = rh.id

SEND_STAFF_FLAWS	PROCEDURE	108	                                        AND ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	109	                                        AND kod_tp = cpp1.kodtp

SEND_STAFF_FLAWS	PROCEDURE	110	                                        AND dt = mr.dt),

SEND_STAFF_FLAWS	PROCEDURE	111	                                0)

SEND_STAFF_FLAWS	PROCEDURE	112	                           + rb.vv <> 1)

SEND_STAFF_FLAWS	PROCEDURE	113	                      AND (rb.DAY_enabled_MR = 1)

SEND_STAFF_FLAWS	PROCEDURE	114	                      AND (SELECT COUNT (*)

SEND_STAFF_FLAWS	PROCEDURE	115	                             FROM MERCH_REPORT_CAL_REMINDERS r,

SEND_STAFF_FLAWS	PROCEDURE	116	                                  MERCH_REPORT_CAL_SOK s

SEND_STAFF_FLAWS	PROCEDURE	117	                            WHERE     r.ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	118	                                  AND r.head_id = rh.id

SEND_STAFF_FLAWS	PROCEDURE	119	                                  AND r.kodtp = rb.kodtp

SEND_STAFF_FLAWS	PROCEDURE	120	                                  AND r.data = mr.dt

SEND_STAFF_FLAWS	PROCEDURE	121	                                  AND r.ag_id = s.ag_id(+)

SEND_STAFF_FLAWS	PROCEDURE	122	                                  AND r.head_id = s.head_id(+)

SEND_STAFF_FLAWS	PROCEDURE	123	                                  AND r.kodtp = s.kodtp(+)

SEND_STAFF_FLAWS	PROCEDURE	124	                                  AND r.data = s.data(+)

SEND_STAFF_FLAWS	PROCEDURE	125	                                  AND r.rep_id = s.rep_id(+)

SEND_STAFF_FLAWS	PROCEDURE	126	                                  AND r.rep_id IN (1,

SEND_STAFF_FLAWS	PROCEDURE	127	                                                   2,

SEND_STAFF_FLAWS	PROCEDURE	128	                                                   3,

SEND_STAFF_FLAWS	PROCEDURE	129	                                                   4,

SEND_STAFF_FLAWS	PROCEDURE	130	                                                   5)

SEND_STAFF_FLAWS	PROCEDURE	131	                                  AND s.lu IS NULL) > 0

SEND_STAFF_FLAWS	PROCEDURE	132	                      AND (SELECT COUNT (*)

SEND_STAFF_FLAWS	PROCEDURE	133	                             FROM merch_spec_head msh, merch_spec_body msb

SEND_STAFF_FLAWS	PROCEDURE	134	                            WHERE     msh.kod_tp = cpp1.kodtp

SEND_STAFF_FLAWS	PROCEDURE	135	                                  AND msb.head_id = msh.id

SEND_STAFF_FLAWS	PROCEDURE	136	                                  AND msh.ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	137	                                  AND msh.id_net = n.id_net

SEND_STAFF_FLAWS	PROCEDURE	138	                                  AND msh.sd =

SEND_STAFF_FLAWS	PROCEDURE	139	                                         (SELECT MAX (sd)

SEND_STAFF_FLAWS	PROCEDURE	140	                                            FROM merch_spec_head

SEND_STAFF_FLAWS	PROCEDURE	141	                                           WHERE     id_net = n.id_net

SEND_STAFF_FLAWS	PROCEDURE	142	                                                 AND kod_tp = cpp1.kodtp

SEND_STAFF_FLAWS	PROCEDURE	143	                                                 AND ag_id = ra.id

SEND_STAFF_FLAWS	PROCEDURE	144	                                                 AND sd <= mr.dt)) > 0

SEND_STAFF_FLAWS	PROCEDURE	145	             ORDER BY DT1,

SEND_STAFF_FLAWS	PROCEDURE	146	                      ag_name,

SEND_STAFF_FLAWS	PROCEDURE	147	                      fio_otv,

SEND_STAFF_FLAWS	PROCEDURE	148	                      tz_oblast,

SEND_STAFF_FLAWS	PROCEDURE	149	                      city,

SEND_STAFF_FLAWS	PROCEDURE	150	                      net_name,

SEND_STAFF_FLAWS	PROCEDURE	151	                      tz_address)

SEND_STAFF_FLAWS	PROCEDURE	152	      LOOP

SEND_STAFF_FLAWS	PROCEDURE	153	         IF NVL (LENGTH (msg), 0) < 10000

SEND_STAFF_FLAWS	PROCEDURE	154	         THEN

SEND_STAFF_FLAWS	PROCEDURE	155	            i := i + 1;

SEND_STAFF_FLAWS	PROCEDURE	156	            msg :=

SEND_STAFF_FLAWS	PROCEDURE	157	                  msg

SEND_STAFF_FLAWS	PROCEDURE	158	               || '<tr>'

SEND_STAFF_FLAWS	PROCEDURE	159	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	160	               || b.dt

SEND_STAFF_FLAWS	PROCEDURE	161	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	162	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	163	               || b.ag_name

SEND_STAFF_FLAWS	PROCEDURE	164	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	165	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	166	               || b.fio_otv

SEND_STAFF_FLAWS	PROCEDURE	167	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	168	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	169	               || b.tz_oblast

SEND_STAFF_FLAWS	PROCEDURE	170	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	171	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	172	               || b.city

SEND_STAFF_FLAWS	PROCEDURE	173	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	174	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	175	               || b.net_name

SEND_STAFF_FLAWS	PROCEDURE	176	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	177	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	178	               || b.tz_address

SEND_STAFF_FLAWS	PROCEDURE	179	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	180	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	181	               || b.staff_flaws

SEND_STAFF_FLAWS	PROCEDURE	182	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	183	               || '<td>'

SEND_STAFF_FLAWS	PROCEDURE	184	               || '<a href="https://ps.avk.ua/?action=merch_spec_report&dt='

SEND_STAFF_FLAWS	PROCEDURE	185	               || b.dt

SEND_STAFF_FLAWS	PROCEDURE	186	               || '&spec_id='

SEND_STAFF_FLAWS	PROCEDURE	187	               || b.spec_id

SEND_STAFF_FLAWS	PROCEDURE	188	               || '&login='

SEND_STAFF_FLAWS	PROCEDURE	189	               || b.login

SEND_STAFF_FLAWS	PROCEDURE	190	               || '">ссылка</a>'

SEND_STAFF_FLAWS	PROCEDURE	191	               || '</td>'

SEND_STAFF_FLAWS	PROCEDURE	192	               || '</tr>';

SEND_STAFF_FLAWS	PROCEDURE	193	            too_many_lines := 0;

SEND_STAFF_FLAWS	PROCEDURE	194	         ELSE

SEND_STAFF_FLAWS	PROCEDURE	195	            too_many_lines := 1;

SEND_STAFF_FLAWS	PROCEDURE	196	         END IF;

SEND_STAFF_FLAWS	PROCEDURE	197	      END LOOP;

SEND_STAFF_FLAWS	PROCEDURE	198	

SEND_STAFF_FLAWS	PROCEDURE	199	      msg := msg || '</table>';

SEND_STAFF_FLAWS	PROCEDURE	200	

SEND_STAFF_FLAWS	PROCEDURE	201	      IF too_many_lines = 1

SEND_STAFF_FLAWS	PROCEDURE	202	      THEN

SEND_STAFF_FLAWS	PROCEDURE	203	         msg :=

SEND_STAFF_FLAWS	PROCEDURE	204	               msg

SEND_STAFF_FLAWS	PROCEDURE	205	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SEND_STAFF_FLAWS	PROCEDURE	206	      END IF;

SEND_STAFF_FLAWS	PROCEDURE	207	

SEND_STAFF_FLAWS	PROCEDURE	208	      IF i > 0

SEND_STAFF_FLAWS	PROCEDURE	209	      THEN

SEND_STAFF_FLAWS	PROCEDURE	210	         PR_SENDMAIL (

SEND_STAFF_FLAWS	PROCEDURE	211	            a.e_mail,

SEND_STAFF_FLAWS	PROCEDURE	212	               'Недоработки персонала, '

SEND_STAFF_FLAWS	PROCEDURE	213	            || TO_CHAR (TRUNC (SYSDATE) - 1, 'dd.mm.yyyy'),

SEND_STAFF_FLAWS	PROCEDURE	214	            msg);

SEND_STAFF_FLAWS	PROCEDURE	215	      END IF;

SEND_STAFF_FLAWS	PROCEDURE	216	   END LOOP;

SEND_STAFF_FLAWS	PROCEDURE	217	END;
SEND_RZAY2FILS	PROCEDURE	1	PROCEDURE        send_rzay2fils

SEND_RZAY2FILS	PROCEDURE	2	AS

SEND_RZAY2FILS	PROCEDURE	3	   text       CLOB;

SEND_RZAY2FILS	PROCEDURE	4	   subj       VARCHAR2 (255);

SEND_RZAY2FILS	PROCEDURE	5	   v_period   VARCHAR2 (255);

SEND_RZAY2FILS	PROCEDURE	6	   v_dt       DATE;

SEND_RZAY2FILS	PROCEDURE	7	   attach     CLOB;

SEND_RZAY2FILS	PROCEDURE	8	BEGIN

SEND_RZAY2FILS	PROCEDURE	9	   SELECT mt || ' ' || y, data

SEND_RZAY2FILS	PROCEDURE	10	     INTO v_period, v_dt

SEND_RZAY2FILS	PROCEDURE	11	     FROM calendar

SEND_RZAY2FILS	PROCEDURE	12	    WHERE data = TRUNC (SYSDATE, 'mm');

SEND_RZAY2FILS	PROCEDURE	13	

SEND_RZAY2FILS	PROCEDURE	14	   --WHERE data = ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -1);

SEND_RZAY2FILS	PROCEDURE	15	

SEND_RZAY2FILS	PROCEDURE	16	   subj :=

SEND_RZAY2FILS	PROCEDURE	17	         'Возврат по сетевым клиентам за период '

SEND_RZAY2FILS	PROCEDURE	18	      || v_period;

SEND_RZAY2FILS	PROCEDURE	19	

SEND_RZAY2FILS	PROCEDURE	20	   FOR a

SEND_RZAY2FILS	PROCEDURE	21	      IN (SELECT DISTINCT p.id, p.return_mail

SEND_RZAY2FILS	PROCEDURE	22	            FROM rzay r, bud_fil p

SEND_RZAY2FILS	PROCEDURE	23	           WHERE     r.payer = p.id

SEND_RZAY2FILS	PROCEDURE	24	                 AND TRUNC (r.dt, 'mm') = v_dt

SEND_RZAY2FILS	PROCEDURE	25	                 AND acceptstatus = 1)

SEND_RZAY2FILS	PROCEDURE	26	   LOOP

SEND_RZAY2FILS	PROCEDURE	27	      text :=

SEND_RZAY2FILS	PROCEDURE	28	         'Здравствуйте. Ниже представлена информация по "Ключевым клиентам", которые подлежат возврату на склад дистрибутора в текущем месяце';

SEND_RZAY2FILS	PROCEDURE	29	      attach :=

SEND_RZAY2FILS	PROCEDURE	30	         '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_RZAY2FILS	PROCEDURE	31	      attach :=

SEND_RZAY2FILS	PROCEDURE	32	            attach

SEND_RZAY2FILS	PROCEDURE	33	         || '<tr style="font-weight:bold">'

SEND_RZAY2FILS	PROCEDURE	34	         || '<td>Сеть</td><td>Адрес ТЗ</td><td>Сканкопии накладных</td><td>Плановая сумма возврата, тыс.грн..</td>'

SEND_RZAY2FILS	PROCEDURE	35	         || '</tr>';

SEND_RZAY2FILS	PROCEDURE	36	

SEND_RZAY2FILS	PROCEDURE	37	      FOR b

SEND_RZAY2FILS	PROCEDURE	38	         IN (  SELECT n.net_name,

SEND_RZAY2FILS	PROCEDURE	39	                      r.tp_name,

SEND_RZAY2FILS	PROCEDURE	40	                      r.summa,

SEND_RZAY2FILS	PROCEDURE	41	                      r.id

SEND_RZAY2FILS	PROCEDURE	42	                 FROM rzay r, nets n

SEND_RZAY2FILS	PROCEDURE	43	                WHERE     r.payer = a.id

SEND_RZAY2FILS	PROCEDURE	44	                      AND n.id_net = r.id_net

SEND_RZAY2FILS	PROCEDURE	45	                      AND TRUNC (r.dt, 'mm') = v_dt

SEND_RZAY2FILS	PROCEDURE	46	                      AND acceptstatus = 1

SEND_RZAY2FILS	PROCEDURE	47	             ORDER BY n.net_name, r.tp_name)

SEND_RZAY2FILS	PROCEDURE	48	      LOOP

SEND_RZAY2FILS	PROCEDURE	49	         UPDATE rzay

SEND_RZAY2FILS	PROCEDURE	50	            SET sendstatus = 1

SEND_RZAY2FILS	PROCEDURE	51	          WHERE id = b.id;

SEND_RZAY2FILS	PROCEDURE	52	

SEND_RZAY2FILS	PROCEDURE	53	         COMMIT;

SEND_RZAY2FILS	PROCEDURE	54	

SEND_RZAY2FILS	PROCEDURE	55	         attach :=

SEND_RZAY2FILS	PROCEDURE	56	               attach

SEND_RZAY2FILS	PROCEDURE	57	            || '<tr>'

SEND_RZAY2FILS	PROCEDURE	58	            || '<td>'

SEND_RZAY2FILS	PROCEDURE	59	            || b.net_name

SEND_RZAY2FILS	PROCEDURE	60	            || '</td><td>'

SEND_RZAY2FILS	PROCEDURE	61	            || b.tp_name

SEND_RZAY2FILS	PROCEDURE	62	            || '</td><td>';

SEND_RZAY2FILS	PROCEDURE	63	

SEND_RZAY2FILS	PROCEDURE	64	         FOR c IN (SELECT *

SEND_RZAY2FILS	PROCEDURE	65	                     FROM rzayfiles

SEND_RZAY2FILS	PROCEDURE	66	                    WHERE rzay = b.id)

SEND_RZAY2FILS	PROCEDURE	67	         LOOP

SEND_RZAY2FILS	PROCEDURE	68	            attach :=

SEND_RZAY2FILS	PROCEDURE	69	                  attach

SEND_RZAY2FILS	PROCEDURE	70	               || '<a href="https://ps.avk.ua/files/'

SEND_RZAY2FILS	PROCEDURE	71	               || c.fn

SEND_RZAY2FILS	PROCEDURE	72	               || '">'

SEND_RZAY2FILS	PROCEDURE	73	               || c.fn

SEND_RZAY2FILS	PROCEDURE	74	               || '</a><br>';

SEND_RZAY2FILS	PROCEDURE	75	         END LOOP;

SEND_RZAY2FILS	PROCEDURE	76	

SEND_RZAY2FILS	PROCEDURE	77	         attach := attach || '</td><td>' || b.summa || '</td>' || '</tr>';

SEND_RZAY2FILS	PROCEDURE	78	      END LOOP;

SEND_RZAY2FILS	PROCEDURE	79	

SEND_RZAY2FILS	PROCEDURE	80	      attach := attach || '</table>';

SEND_RZAY2FILS	PROCEDURE	81	

SEND_RZAY2FILS	PROCEDURE	82	      pr_sendmail (a.return_mail,

SEND_RZAY2FILS	PROCEDURE	83	                   subj,

SEND_RZAY2FILS	PROCEDURE	84	                   text,

SEND_RZAY2FILS	PROCEDURE	85	                   clob_to_blob (attach),

SEND_RZAY2FILS	PROCEDURE	86	                   'attach.html');

SEND_RZAY2FILS	PROCEDURE	87	

SEND_RZAY2FILS	PROCEDURE	88	      INSERT INTO full_log (text, prg)

SEND_RZAY2FILS	PROCEDURE	89	              VALUES (

SEND_RZAY2FILS	PROCEDURE	90	                           'отправлено письмо с уведомлением о возврате по адресу '

SEND_RZAY2FILS	PROCEDURE	91	                        || a.return_mail

SEND_RZAY2FILS	PROCEDURE	92	                        || ' с темой: '

SEND_RZAY2FILS	PROCEDURE	93	                        || subj,

SEND_RZAY2FILS	PROCEDURE	94	                        'rzay');

SEND_RZAY2FILS	PROCEDURE	95	

SEND_RZAY2FILS	PROCEDURE	96	      COMMIT;

SEND_RZAY2FILS	PROCEDURE	97	   END LOOP;

SEND_RZAY2FILS	PROCEDURE	98	END;
SEND_REESTR	PROCEDURE	1	PROCEDURE        "SEND_REESTR"

SEND_REESTR	PROCEDURE	2	IS

SEND_REESTR	PROCEDURE	3	   msg     VARCHAR2 (32767);

SEND_REESTR	PROCEDURE	4	   subj    VARCHAR2 (32767);

SEND_REESTR	PROCEDURE	5	   addr    VARCHAR2 (32767);

SEND_REESTR	PROCEDURE	6	   total   INTEGER;

SEND_REESTR	PROCEDURE	7	BEGIN

SEND_REESTR	PROCEDURE	8	   FOR b IN (SELECT dpt_id, val_string addr

SEND_REESTR	PROCEDURE	9	               FROM parameters

SEND_REESTR	PROCEDURE	10	              WHERE param_name = 'invoice_accept' AND val_string IS NOT NULL)

SEND_REESTR	PROCEDURE	11	   LOOP

SEND_REESTR	PROCEDURE	12	      SELECT COUNT (*)

SEND_REESTR	PROCEDURE	13	        INTO total

SEND_REESTR	PROCEDURE	14	        FROM invoice i,

SEND_REESTR	PROCEDURE	15	             nets n,

SEND_REESTR	PROCEDURE	16	             bud_fil p,

SEND_REESTR	PROCEDURE	17	             urlic u,

SEND_REESTR	PROCEDURE	18	             user_list ul

SEND_REESTR	PROCEDURE	19	       WHERE     n.id_net = i.id_net

SEND_REESTR	PROCEDURE	20	             AND i.payer = p.id

SEND_REESTR	PROCEDURE	21	             AND u.id(+) = i.urlic

SEND_REESTR	PROCEDURE	22	             AND i.ok_fm = 1

SEND_REESTR	PROCEDURE	23	             AND i.ok_nmkk = 0

SEND_REESTR	PROCEDURE	24	             AND ul.tn = n.tn_mkk

SEND_REESTR	PROCEDURE	25	             AND ul.dpt_id = b.dpt_id;

SEND_REESTR	PROCEDURE	26	

SEND_REESTR	PROCEDURE	27	      msg :=

SEND_REESTR	PROCEDURE	28	            'На данный момент проверены и подтверждены финансовым менеджером следующие счета по клиентам.<br>Данные счета ожидают вашего подтверждения для оплаты <font style="color:red">(всего счетов '

SEND_REESTR	PROCEDURE	29	         || TO_CHAR (total)

SEND_REESTR	PROCEDURE	30	         || ', показаны первые 50)</font>:';

SEND_REESTR	PROCEDURE	31	      msg :=

SEND_REESTR	PROCEDURE	32	            msg

SEND_REESTR	PROCEDURE	33	         || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_REESTR	PROCEDURE	34	      msg :=

SEND_REESTR	PROCEDURE	35	            msg

SEND_REESTR	PROCEDURE	36	         || '<tr style="font-weight:bold">

SEND_REESTR	PROCEDURE	37	<td>Номер<br>счета</td>

SEND_REESTR	PROCEDURE	38	<td>Дата<br>счета</td>

SEND_REESTR	PROCEDURE	39	<td>Сеть</td>

SEND_REESTR	PROCEDURE	40	<td>Юр.<br>лицо</td>

SEND_REESTR	PROCEDURE	41	<td>ФИО<br>РМ КК</td>

SEND_REESTR	PROCEDURE	42	<td>ФИО<br>МКК</td>

SEND_REESTR	PROCEDURE	43	<td>Привязано<br>статей<br>в<br>счет</td>

SEND_REESTR	PROCEDURE	44	<td>Сумма<br>счета<br>(расчетная),<br>тыс.грн.</td>

SEND_REESTR	PROCEDURE	45	<td>Сумма<br>счета<br>(выставленная<br>клиентом),<br>тыс.грн.</td>

SEND_REESTR	PROCEDURE	46	<td>Плательщик</td>

SEND_REESTR	PROCEDURE	47	<td>Счет<br>в реестр<br>добавлен</td>

SEND_REESTR	PROCEDURE	48	</tr>';

SEND_REESTR	PROCEDURE	49	

SEND_REESTR	PROCEDURE	50	

SEND_REESTR	PROCEDURE	51	

SEND_REESTR	PROCEDURE	52	      FOR a

SEND_REESTR	PROCEDURE	53	         IN (  SELECT i.*,

SEND_REESTR	PROCEDURE	54	                      n.net_name,

SEND_REESTR	PROCEDURE	55	                      fn_getname (n.tn_mkk) mkk,

SEND_REESTR	PROCEDURE	56	                      fn_getname (n.tn_rmkk) rmkk,

SEND_REESTR	PROCEDURE	57	                      TO_CHAR (i.DATA, 'dd.mm.yyyy') data_t,

SEND_REESTR	PROCEDURE	58	                      TO_CHAR (i.lu, 'dd.mm.yyyy hh24:mi:ss') lu_t,

SEND_REESTR	PROCEDURE	59	                      (SELECT COUNT (*)

SEND_REESTR	PROCEDURE	60	                         FROM invoice_detail

SEND_REESTR	PROCEDURE	61	                        WHERE invoice = i.ID)

SEND_REESTR	PROCEDURE	62	                         st_count,

SEND_REESTR	PROCEDURE	63	                      (SELECT NVL (SUM (summa), 0)

SEND_REESTR	PROCEDURE	64	                         FROM invoice_detail

SEND_REESTR	PROCEDURE	65	                        WHERE invoice = i.ID)

SEND_REESTR	PROCEDURE	66	                         st_total,

SEND_REESTR	PROCEDURE	67	                      p.name payer_name,

SEND_REESTR	PROCEDURE	68	                      u.name urlic_name

SEND_REESTR	PROCEDURE	69	                 FROM invoice i,

SEND_REESTR	PROCEDURE	70	                      nets n,

SEND_REESTR	PROCEDURE	71	                      bud_fil p,

SEND_REESTR	PROCEDURE	72	                      urlic u,

SEND_REESTR	PROCEDURE	73	                      user_list ul

SEND_REESTR	PROCEDURE	74	                WHERE     n.id_net = i.id_net

SEND_REESTR	PROCEDURE	75	                      AND i.payer = p.id

SEND_REESTR	PROCEDURE	76	                      AND u.id(+) = i.urlic

SEND_REESTR	PROCEDURE	77	                      AND i.ok_fm = 1

SEND_REESTR	PROCEDURE	78	                      AND i.ok_nmkk = 0

SEND_REESTR	PROCEDURE	79	                      AND ul.tn = n.tn_mkk

SEND_REESTR	PROCEDURE	80	                      AND ul.dpt_id = b.dpt_id

SEND_REESTR	PROCEDURE	81	                      AND ROWNUM < 50

SEND_REESTR	PROCEDURE	82	             ORDER BY i.lu DESC)

SEND_REESTR	PROCEDURE	83	      LOOP

SEND_REESTR	PROCEDURE	84	         msg := msg || '<tr>';

SEND_REESTR	PROCEDURE	85	

SEND_REESTR	PROCEDURE	86	         msg := msg || '<td>' || a.num || '</td>';

SEND_REESTR	PROCEDURE	87	         msg := msg || '<td>' || a.data_t || '</td>';

SEND_REESTR	PROCEDURE	88	         msg := msg || '<td>' || a.net_name || '</td>';

SEND_REESTR	PROCEDURE	89	         msg := msg || '<td>' || a.urlic_name || '</td>';

SEND_REESTR	PROCEDURE	90	         msg := msg || '<td>' || a.rmkk || '</td>';

SEND_REESTR	PROCEDURE	91	         msg := msg || '<td>' || a.mkk || '</td>';

SEND_REESTR	PROCEDURE	92	         msg := msg || '<td>' || TO_CHAR (a.st_count) || '</td>';

SEND_REESTR	PROCEDURE	93	         msg := msg || '<td>' || TO_CHAR (a.summa) || '</td>';

SEND_REESTR	PROCEDURE	94	         msg := msg || '<td>' || TO_CHAR (a.st_total) || '</td>';

SEND_REESTR	PROCEDURE	95	         msg := msg || '<td>' || a.payer_name || '</td>';

SEND_REESTR	PROCEDURE	96	         msg := msg || '<td>' || a.lu_t || '</td>';

SEND_REESTR	PROCEDURE	97	

SEND_REESTR	PROCEDURE	98	         msg := msg || '</tr>';

SEND_REESTR	PROCEDURE	99	      END LOOP;

SEND_REESTR	PROCEDURE	100	

SEND_REESTR	PROCEDURE	101	      msg := msg || '</table>';

SEND_REESTR	PROCEDURE	102	      subj :=

SEND_REESTR	PROCEDURE	103	         'Подтверждение счетов клиентов на оплату по состоянию на текущий момент';

SEND_REESTR	PROCEDURE	104	      PR_SENDMAIL (b.addr, subj, msg);

SEND_REESTR	PROCEDURE	105	   END LOOP;

SEND_REESTR	PROCEDURE	106	END;
SEND_PROJECT	PROCEDURE	1	PROCEDURE        "SEND_PROJECT"

SEND_PROJECT	PROCEDURE	2	IS

SEND_PROJECT	PROCEDURE	3	   subj   VARCHAR2 (255);

SEND_PROJECT	PROCEDURE	4	   msg    VARCHAR2 (32767);

SEND_PROJECT	PROCEDURE	5	BEGIN

SEND_PROJECT	PROCEDURE	6	   subj := 'Информирование о текущих задачах';

SEND_PROJECT	PROCEDURE	7	

SEND_PROJECT	PROCEDURE	8	   FOR u

SEND_PROJECT	PROCEDURE	9	      IN (SELECT DISTINCT u.e_mail, u.tn, u.dpt_id

SEND_PROJECT	PROCEDURE	10	            FROM project p, user_list u

SEND_PROJECT	PROCEDURE	11	           WHERE     TRUNC (SYSDATE) <= fn_get_prj_max_dt_fin (p.id)

SEND_PROJECT	PROCEDURE	12	                 AND p.parent = 0

SEND_PROJECT	PROCEDURE	13	                 AND p.dpt_id = u.dpt_id

SEND_PROJECT	PROCEDURE	14	                 AND fn_get_prj_grant (p.id, u.tn) = 1)

SEND_PROJECT	PROCEDURE	15	   LOOP

SEND_PROJECT	PROCEDURE	16	      msg :=

SEND_PROJECT	PROCEDURE	17	         'Задачи, в которых Вы назначены в качестве ответственного:';

SEND_PROJECT	PROCEDURE	18	

SEND_PROJECT	PROCEDURE	19	      FOR a

SEND_PROJECT	PROCEDURE	20	         IN (SELECT DISTINCT name

SEND_PROJECT	PROCEDURE	21	               FROM project

SEND_PROJECT	PROCEDURE	22	              WHERE id IN (SELECT parent

SEND_PROJECT	PROCEDURE	23	                             FROM project

SEND_PROJECT	PROCEDURE	24	                            WHERE id IN (SELECT parent

SEND_PROJECT	PROCEDURE	25	                                           FROM (    SELECT z.parent,

SEND_PROJECT	PROCEDURE	26	                                                            TO_CHAR (

SEND_PROJECT	PROCEDURE	27	                                                               r.completed_dt,

SEND_PROJECT	PROCEDURE	28	                                                               'dd/mm/yyyy hh24:mi:ss')

SEND_PROJECT	PROCEDURE	29	                                                               completed_dt

SEND_PROJECT	PROCEDURE	30	                                                       FROM project z,

SEND_PROJECT	PROCEDURE	31	                                                            (SELECT *

SEND_PROJECT	PROCEDURE	32	                                                               FROM project_report

SEND_PROJECT	PROCEDURE	33	                                                              WHERE tn = u.tn) r

SEND_PROJECT	PROCEDURE	34	                                                      WHERE     z.id =

SEND_PROJECT	PROCEDURE	35	                                                                   r.prj_node_id(+)

SEND_PROJECT	PROCEDURE	36	                                                            AND LEVEL = 2

SEND_PROJECT	PROCEDURE	37	                                                            AND fn_get_prj_node_grant (

SEND_PROJECT	PROCEDURE	38	                                                                   z.id,

SEND_PROJECT	PROCEDURE	39	                                                                   u.tn,

SEND_PROJECT	PROCEDURE	40	                                                                   LEVEL) = 1

SEND_PROJECT	PROCEDURE	41	                                                 START WITH z.PARENT IN (SELECT id

SEND_PROJECT	PROCEDURE	42	                                                                           FROM project

SEND_PROJECT	PROCEDURE	43	                                                                          WHERE     TRUNC (

SEND_PROJECT	PROCEDURE	44	                                                                                       SYSDATE) <=

SEND_PROJECT	PROCEDURE	45	                                                                                       fn_get_prj_max_dt_fin (

SEND_PROJECT	PROCEDURE	46	                                                                                          id)

SEND_PROJECT	PROCEDURE	47	                                                                                AND parent =

SEND_PROJECT	PROCEDURE	48	                                                                                       0

SEND_PROJECT	PROCEDURE	49	                                                                                AND dpt_id =

SEND_PROJECT	PROCEDURE	50	                                                                                       u.dpt_id

SEND_PROJECT	PROCEDURE	51	                                                                                AND fn_get_prj_grant (

SEND_PROJECT	PROCEDURE	52	                                                                                       id,

SEND_PROJECT	PROCEDURE	53	                                                                                       u.tn) =

SEND_PROJECT	PROCEDURE	54	                                                                                       1)

SEND_PROJECT	PROCEDURE	55	                                                 CONNECT BY PRIOR z.ID =

SEND_PROJECT	PROCEDURE	56	                                                               z.PARENT) z1

SEND_PROJECT	PROCEDURE	57	                                          WHERE completed_dt IS NULL)))

SEND_PROJECT	PROCEDURE	58	      LOOP

SEND_PROJECT	PROCEDURE	59	         msg := msg || '<br>' || a.name;

SEND_PROJECT	PROCEDURE	60	      END LOOP;

SEND_PROJECT	PROCEDURE	61	

SEND_PROJECT	PROCEDURE	62	      msg :=

SEND_PROJECT	PROCEDURE	63	            msg

SEND_PROJECT	PROCEDURE	64	         || '<br>Вы должны реализовать задачи и отметить их выполнение на портале в разделе <a href="https://ps.avk.ua/?action=project_my">Мои задачи</a>';

SEND_PROJECT	PROCEDURE	65	

SEND_PROJECT	PROCEDURE	66	      PR_SENDMAIL (u.e_mail, subj, msg);

SEND_PROJECT	PROCEDURE	67	   END LOOP;

SEND_PROJECT	PROCEDURE	68	

SEND_PROJECT	PROCEDURE	69	   FOR u

SEND_PROJECT	PROCEDURE	70	      IN (SELECT DISTINCT u.e_mail, u.tn, u.dpt_id

SEND_PROJECT	PROCEDURE	71	            FROM project p, user_list u

SEND_PROJECT	PROCEDURE	72	           WHERE     TRUNC (SYSDATE) <= fn_get_prj_max_dt_fin (p.id)

SEND_PROJECT	PROCEDURE	73	                 AND p.parent = 0

SEND_PROJECT	PROCEDURE	74	                 AND p.dpt_id = u.dpt_id

SEND_PROJECT	PROCEDURE	75	                 AND fn_get_prj_grant (p.id, u.tn, 1) = 2)

SEND_PROJECT	PROCEDURE	76	   LOOP

SEND_PROJECT	PROCEDURE	77	      msg :=

SEND_PROJECT	PROCEDURE	78	         'Задачи, в которых Вы назначены в качестве контролирующего звена:';

SEND_PROJECT	PROCEDURE	79	

SEND_PROJECT	PROCEDURE	80	      FOR a

SEND_PROJECT	PROCEDURE	81	         IN (SELECT name

SEND_PROJECT	PROCEDURE	82	               FROM (SELECT p.*,

SEND_PROJECT	PROCEDURE	83	                            (SELECT COUNT (*) c

SEND_PROJECT	PROCEDURE	84	                               FROM project p1,

SEND_PROJECT	PROCEDURE	85	                                    project p2,

SEND_PROJECT	PROCEDURE	86	                                    project p3,

SEND_PROJECT	PROCEDURE	87	                                    project_grant pg,

SEND_PROJECT	PROCEDURE	88	                                    user_list u

SEND_PROJECT	PROCEDURE	89	                              WHERE     p1.id = p2.parent

SEND_PROJECT	PROCEDURE	90	                                    AND p2.id = p3.parent

SEND_PROJECT	PROCEDURE	91	                                    AND p2.id = pg.prj_node_id

SEND_PROJECT	PROCEDURE	92	                                    AND (pg.pos = u.pos_id OR pg.tn = u.tn)

SEND_PROJECT	PROCEDURE	93	                                    AND u.dpt_id = p1.dpt_id

SEND_PROJECT	PROCEDURE	94	                                    AND (pg.otv = 1)

SEND_PROJECT	PROCEDURE	95	                                    AND (   u.tn IN (SELECT slave

SEND_PROJECT	PROCEDURE	96	                                                       FROM full

SEND_PROJECT	PROCEDURE	97	                                                      WHERE     master = u.tn

SEND_PROJECT	PROCEDURE	98	                                                            AND full IN (0, 1))

SEND_PROJECT	PROCEDURE	99	                                         OR fn_get_prj_node_grant (p2.id,

SEND_PROJECT	PROCEDURE	100	                                                                   u.tn,

SEND_PROJECT	PROCEDURE	101	                                                                   1,

SEND_PROJECT	PROCEDURE	102	                                                                   1) = 2)

SEND_PROJECT	PROCEDURE	103	                                    AND u.datauvol IS NULL

SEND_PROJECT	PROCEDURE	104	                                    AND p1.id = p.id

SEND_PROJECT	PROCEDURE	105	                                    AND NVL (

SEND_PROJECT	PROCEDURE	106	                                           (SELECT DECODE (completed_dt,

SEND_PROJECT	PROCEDURE	107	                                                           NULL, 0,

SEND_PROJECT	PROCEDURE	108	                                                           1)

SEND_PROJECT	PROCEDURE	109	                                              FROM project_report

SEND_PROJECT	PROCEDURE	110	                                             WHERE     prj_node_id = p3.id

SEND_PROJECT	PROCEDURE	111	                                                   AND tn = u.tn),

SEND_PROJECT	PROCEDURE	112	                                           0) = 0)

SEND_PROJECT	PROCEDURE	113	                               c

SEND_PROJECT	PROCEDURE	114	                       FROM project p

SEND_PROJECT	PROCEDURE	115	                      WHERE     TRUNC (SYSDATE) <= fn_get_prj_max_dt_fin (id)

SEND_PROJECT	PROCEDURE	116	                            AND parent = 0

SEND_PROJECT	PROCEDURE	117	                            AND dpt_id = u.dpt_id

SEND_PROJECT	PROCEDURE	118	                            AND (   (SELECT SUM (

SEND_PROJECT	PROCEDURE	119	                                               fn_get_prj_grant (p.id,

SEND_PROJECT	PROCEDURE	120	                                                                 slave,

SEND_PROJECT	PROCEDURE	121	                                                                 1))

SEND_PROJECT	PROCEDURE	122	                                       FROM full

SEND_PROJECT	PROCEDURE	123	                                      WHERE master = u.tn AND full IN (0, 1)) <>

SEND_PROJECT	PROCEDURE	124	                                       0

SEND_PROJECT	PROCEDURE	125	                                 OR fn_get_prj_grant (p.id, u.tn, 1) = 2))

SEND_PROJECT	PROCEDURE	126	              WHERE c <> 0)

SEND_PROJECT	PROCEDURE	127	      LOOP

SEND_PROJECT	PROCEDURE	128	         msg := msg || '<br>' || a.name;

SEND_PROJECT	PROCEDURE	129	      END LOOP;

SEND_PROJECT	PROCEDURE	130	

SEND_PROJECT	PROCEDURE	131	      msg :=

SEND_PROJECT	PROCEDURE	132	            msg

SEND_PROJECT	PROCEDURE	133	         || '<br>Задачи, ход которых Вы должны контролировать ход задач на портале в разделе <a href="https://ps.avk.ua/?action=project_report">Сводный отчет по задачам</a>';

SEND_PROJECT	PROCEDURE	134	

SEND_PROJECT	PROCEDURE	135	      PR_SENDMAIL (u.e_mail, subj, msg);

SEND_PROJECT	PROCEDURE	136	   END LOOP;

SEND_PROJECT	PROCEDURE	137	

SEND_PROJECT	PROCEDURE	138	   FOR u IN (SELECT DISTINCT u.e_mail, u.tn, u.dpt_id

SEND_PROJECT	PROCEDURE	139	               FROM project p, user_list u

SEND_PROJECT	PROCEDURE	140	              WHERE     TRUNC (SYSDATE) <= fn_get_prj_max_dt_fin (p.id)

SEND_PROJECT	PROCEDURE	141	                    AND p.parent = 0

SEND_PROJECT	PROCEDURE	142	                    AND p.dpt_id = u.dpt_id

SEND_PROJECT	PROCEDURE	143	                    AND (SELECT SUM (fn_get_prj_grant (p.id, slave))

SEND_PROJECT	PROCEDURE	144	                           FROM full

SEND_PROJECT	PROCEDURE	145	                          WHERE master = u.tn AND full = 1) <> 0)

SEND_PROJECT	PROCEDURE	146	   LOOP

SEND_PROJECT	PROCEDURE	147	      msg :=

SEND_PROJECT	PROCEDURE	148	         'Задачи, в которых Ваши прямые подчиненные назначены в качестве ответственных:';

SEND_PROJECT	PROCEDURE	149	

SEND_PROJECT	PROCEDURE	150	      FOR a

SEND_PROJECT	PROCEDURE	151	         IN (SELECT name

SEND_PROJECT	PROCEDURE	152	               FROM (SELECT p.*,

SEND_PROJECT	PROCEDURE	153	                            (SELECT COUNT (*) c

SEND_PROJECT	PROCEDURE	154	                               FROM project p1,

SEND_PROJECT	PROCEDURE	155	                                    project p2,

SEND_PROJECT	PROCEDURE	156	                                    project p3,

SEND_PROJECT	PROCEDURE	157	                                    project_grant pg,

SEND_PROJECT	PROCEDURE	158	                                    user_list u,

SEND_PROJECT	PROCEDURE	159	                                    project_report pr

SEND_PROJECT	PROCEDURE	160	                              WHERE     p1.id = p2.parent

SEND_PROJECT	PROCEDURE	161	                                    AND p2.id = p3.parent

SEND_PROJECT	PROCEDURE	162	                                    AND p2.id = pg.prj_node_id

SEND_PROJECT	PROCEDURE	163	                                    AND (pg.pos = u.pos_id OR pg.tn = u.tn)

SEND_PROJECT	PROCEDURE	164	                                    AND u.dpt_id = p1.dpt_id

SEND_PROJECT	PROCEDURE	165	                                    AND (pg.otv = 1)

SEND_PROJECT	PROCEDURE	166	                                    AND (u.tn IN (SELECT slave

SEND_PROJECT	PROCEDURE	167	                                                    FROM full

SEND_PROJECT	PROCEDURE	168	                                                   WHERE     master = u.tn

SEND_PROJECT	PROCEDURE	169	                                                         AND full IN (0, 1)))

SEND_PROJECT	PROCEDURE	170	                                    AND u.datauvol IS NULL

SEND_PROJECT	PROCEDURE	171	                                    AND p1.id = p.id

SEND_PROJECT	PROCEDURE	172	                                    AND p3.id = pr.prj_node_id(+)

SEND_PROJECT	PROCEDURE	173	                                    AND pr.completed_dt IS NULL)

SEND_PROJECT	PROCEDURE	174	                               c

SEND_PROJECT	PROCEDURE	175	                       FROM project p

SEND_PROJECT	PROCEDURE	176	                      WHERE     TRUNC (SYSDATE) <= fn_get_prj_max_dt_fin (id)

SEND_PROJECT	PROCEDURE	177	                            AND parent = 0

SEND_PROJECT	PROCEDURE	178	                            AND dpt_id = u.dpt_id

SEND_PROJECT	PROCEDURE	179	                            AND ( (SELECT SUM (

SEND_PROJECT	PROCEDURE	180	                                             fn_get_prj_grant (p.id, slave, 1))

SEND_PROJECT	PROCEDURE	181	                                     FROM full

SEND_PROJECT	PROCEDURE	182	                                    WHERE master = u.tn AND full IN (0, 1)) <>

SEND_PROJECT	PROCEDURE	183	                                    0))

SEND_PROJECT	PROCEDURE	184	              WHERE c <> 0)

SEND_PROJECT	PROCEDURE	185	      LOOP

SEND_PROJECT	PROCEDURE	186	         msg := msg || '<br>' || a.name;

SEND_PROJECT	PROCEDURE	187	      END LOOP;

SEND_PROJECT	PROCEDURE	188	

SEND_PROJECT	PROCEDURE	189	      msg :=

SEND_PROJECT	PROCEDURE	190	            msg

SEND_PROJECT	PROCEDURE	191	         || '<br>Вы должны проверить и подтвердить выполнение задач на портале в разделе <a href="https://ps.avk.ua/?action=project_slaves">Задачи подчиненных</a>';

SEND_PROJECT	PROCEDURE	192	

SEND_PROJECT	PROCEDURE	193	      PR_SENDMAIL (u.e_mail, subj, msg);

SEND_PROJECT	PROCEDURE	194	   END LOOP;

SEND_PROJECT	PROCEDURE	195	END;
SEND_OPLATA_DOLG	PROCEDURE	1	PROCEDURE        "SEND_OPLATA_DOLG"

SEND_OPLATA_DOLG	PROCEDURE	2	IS

SEND_OPLATA_DOLG	PROCEDURE	3	   msg     VARCHAR2 (32767);

SEND_OPLATA_DOLG	PROCEDURE	4	   subj    VARCHAR2 (32767);

SEND_OPLATA_DOLG	PROCEDURE	5	   addr    VARCHAR2 (32767);

SEND_OPLATA_DOLG	PROCEDURE	6	   total   INTEGER;

SEND_OPLATA_DOLG	PROCEDURE	7	BEGIN

SEND_OPLATA_DOLG	PROCEDURE	8	   FOR b

SEND_OPLATA_DOLG	PROCEDURE	9	      IN (SELECT DISTINCT n1.tn_mkk tn, u1.e_mail addr

SEND_OPLATA_DOLG	PROCEDURE	10	            FROM invoice i1, nets n1, user_list u1

SEND_OPLATA_DOLG	PROCEDURE	11	           WHERE     n1.id_net = i1.id_net

SEND_OPLATA_DOLG	PROCEDURE	12	                 AND (NVL (i1.dolg_act, 0) + NVL (i1.dolg_nal, 0)) <> 2

SEND_OPLATA_DOLG	PROCEDURE	13	                 AND i1.ok_fm = 1

SEND_OPLATA_DOLG	PROCEDURE	14	                 AND i1.ok_nmkk = 1

SEND_OPLATA_DOLG	PROCEDURE	15	                 AND u1.tn = n1.tn_mkk

SEND_OPLATA_DOLG	PROCEDURE	16	                 AND u1.datauvol IS NULL

SEND_OPLATA_DOLG	PROCEDURE	17	          UNION

SEND_OPLATA_DOLG	PROCEDURE	18	          SELECT DISTINCT n1.tn_rmkk tn, u1.e_mail addr

SEND_OPLATA_DOLG	PROCEDURE	19	            FROM invoice i1, nets n1, user_list u1

SEND_OPLATA_DOLG	PROCEDURE	20	           WHERE     n1.id_net = i1.id_net

SEND_OPLATA_DOLG	PROCEDURE	21	                 AND (NVL (i1.dolg_act, 0) + NVL (i1.dolg_nal, 0)) <> 2

SEND_OPLATA_DOLG	PROCEDURE	22	                 AND i1.ok_fm = 1

SEND_OPLATA_DOLG	PROCEDURE	23	                 AND i1.ok_nmkk = 1

SEND_OPLATA_DOLG	PROCEDURE	24	                 AND u1.tn = n1.tn_rmkk

SEND_OPLATA_DOLG	PROCEDURE	25	                 AND u1.datauvol IS NULL)

SEND_OPLATA_DOLG	PROCEDURE	26	   LOOP

SEND_OPLATA_DOLG	PROCEDURE	27	      msg := '<font style="color:red">показаны первые 50</font>:';

SEND_OPLATA_DOLG	PROCEDURE	28	      msg :=

SEND_OPLATA_DOLG	PROCEDURE	29	            msg

SEND_OPLATA_DOLG	PROCEDURE	30	         || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_OPLATA_DOLG	PROCEDURE	31	      msg :=

SEND_OPLATA_DOLG	PROCEDURE	32	            msg

SEND_OPLATA_DOLG	PROCEDURE	33	         || '<tr style="font-weight:bold">

SEND_OPLATA_DOLG	PROCEDURE	34	<td>№ п/п</td>

SEND_OPLATA_DOLG	PROCEDURE	35	<td>Номер<br>счета</td>

SEND_OPLATA_DOLG	PROCEDURE	36	<td>Дата<br>счета</td>

SEND_OPLATA_DOLG	PROCEDURE	37	<td>Сеть</td>

SEND_OPLATA_DOLG	PROCEDURE	38	<td>Юр.<br>лицо</td>

SEND_OPLATA_DOLG	PROCEDURE	39	<td>ФИО<br>РМ КК</td>

SEND_OPLATA_DOLG	PROCEDURE	40	<td>ФИО<br>МКК</td>

SEND_OPLATA_DOLG	PROCEDURE	41	<td>Привязано<br>статей<br>в<br>счет</td>

SEND_OPLATA_DOLG	PROCEDURE	42	<td>Сумма<br>счета<br>(расчетная),<br>тыс.грн.</td>

SEND_OPLATA_DOLG	PROCEDURE	43	<td>Сумма<br>счета<br>(выставленная<br>клиентом),<br>тыс.грн.</td>

SEND_OPLATA_DOLG	PROCEDURE	44	<td>Плательщик</td>

SEND_OPLATA_DOLG	PROCEDURE	45	<td>Задолженность по актам</td>

SEND_OPLATA_DOLG	PROCEDURE	46	<td>Задолженность по налоговым</td>

SEND_OPLATA_DOLG	PROCEDURE	47	<td>Счет<br>в реестр<br>добавлен</td>

SEND_OPLATA_DOLG	PROCEDURE	48	</tr>';

SEND_OPLATA_DOLG	PROCEDURE	49	

SEND_OPLATA_DOLG	PROCEDURE	50	      total := 0;

SEND_OPLATA_DOLG	PROCEDURE	51	

SEND_OPLATA_DOLG	PROCEDURE	52	      FOR a

SEND_OPLATA_DOLG	PROCEDURE	53	         IN (  SELECT i.*,

SEND_OPLATA_DOLG	PROCEDURE	54	                      n.net_name,

SEND_OPLATA_DOLG	PROCEDURE	55	                      fn_getname (n.tn_mkk) mkk,

SEND_OPLATA_DOLG	PROCEDURE	56	                      fn_getname (n.tn_rmkk) rmkk,

SEND_OPLATA_DOLG	PROCEDURE	57	                      TO_CHAR (i.DATA, 'dd.mm.yyyy') data_t,

SEND_OPLATA_DOLG	PROCEDURE	58	                      TO_CHAR (i.lu, 'dd.mm.yyyy hh24:mi:ss') lu_t,

SEND_OPLATA_DOLG	PROCEDURE	59	                      TO_CHAR (i.nmkk_lu, 'dd.mm.yyyy') nmkk_lu_t,

SEND_OPLATA_DOLG	PROCEDURE	60	                      TO_CHAR (i.oplata_date, 'dd.mm.yyyy') oplata_date_t,

SEND_OPLATA_DOLG	PROCEDURE	61	                      u3.e_mail mkk_mail,

SEND_OPLATA_DOLG	PROCEDURE	62	                      u2.e_mail rmkk_mail,

SEND_OPLATA_DOLG	PROCEDURE	63	                      (SELECT COUNT (*)

SEND_OPLATA_DOLG	PROCEDURE	64	                         FROM invoice_detail

SEND_OPLATA_DOLG	PROCEDURE	65	                        WHERE invoice = i.ID)

SEND_OPLATA_DOLG	PROCEDURE	66	                         st_count,

SEND_OPLATA_DOLG	PROCEDURE	67	                      (SELECT NVL (SUM (summa), 0)

SEND_OPLATA_DOLG	PROCEDURE	68	                         FROM invoice_detail

SEND_OPLATA_DOLG	PROCEDURE	69	                        WHERE invoice = i.ID)

SEND_OPLATA_DOLG	PROCEDURE	70	                         st_total,

SEND_OPLATA_DOLG	PROCEDURE	71	                      p.name payer_name,

SEND_OPLATA_DOLG	PROCEDURE	72	                      u.name urlic_name

SEND_OPLATA_DOLG	PROCEDURE	73	                 FROM invoice i,

SEND_OPLATA_DOLG	PROCEDURE	74	                      nets n,

SEND_OPLATA_DOLG	PROCEDURE	75	                      bud_fil p,

SEND_OPLATA_DOLG	PROCEDURE	76	                      urlic u,

SEND_OPLATA_DOLG	PROCEDURE	77	                      user_list u3,

SEND_OPLATA_DOLG	PROCEDURE	78	                      user_list u2

SEND_OPLATA_DOLG	PROCEDURE	79	                WHERE     n.id_net = i.id_net

SEND_OPLATA_DOLG	PROCEDURE	80	                      AND u3.tn = n.tn_mkk

SEND_OPLATA_DOLG	PROCEDURE	81	                      AND u2.tn = n.tn_rmkk

SEND_OPLATA_DOLG	PROCEDURE	82	                      AND i.payer = p.id

SEND_OPLATA_DOLG	PROCEDURE	83	                      AND u.id(+) = i.urlic

SEND_OPLATA_DOLG	PROCEDURE	84	                      AND (NVL (i.dolg_act, 0) + NVL (i.dolg_nal, 0)) <> 2

SEND_OPLATA_DOLG	PROCEDURE	85	                      AND i.ok_fm = 1

SEND_OPLATA_DOLG	PROCEDURE	86	                      AND i.ok_nmkk = 1

SEND_OPLATA_DOLG	PROCEDURE	87	                      AND b.tn IN (n.tn_mkk, n.tn_rmkk)

SEND_OPLATA_DOLG	PROCEDURE	88	                      AND ROWNUM <= 50

SEND_OPLATA_DOLG	PROCEDURE	89	             ORDER BY i.lu DESC)

SEND_OPLATA_DOLG	PROCEDURE	90	      LOOP

SEND_OPLATA_DOLG	PROCEDURE	91	         total := total + 1;

SEND_OPLATA_DOLG	PROCEDURE	92	         msg := msg || '<tr>';

SEND_OPLATA_DOLG	PROCEDURE	93	

SEND_OPLATA_DOLG	PROCEDURE	94	         msg := msg || '<td>' || TO_CHAR (total) || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	95	         msg := msg || '<td>' || a.num || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	96	         msg := msg || '<td>' || a.data_t || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	97	         msg := msg || '<td>' || a.net_name || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	98	         msg := msg || '<td>' || a.urlic_name || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	99	         msg := msg || '<td>' || a.rmkk || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	100	         msg := msg || '<td>' || a.mkk || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	101	         msg := msg || '<td>' || TO_CHAR (a.st_count) || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	102	         msg := msg || '<td>' || TO_CHAR (a.summa) || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	103	         msg := msg || '<td>' || TO_CHAR (a.st_total) || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	104	         msg := msg || '<td>' || a.payer_name || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	105	         msg := msg || '<td>' || TO_CHAR (a.dolg_act) || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	106	         msg := msg || '<td>' || TO_CHAR (a.dolg_nal) || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	107	         msg := msg || '<td>' || a.lu_t || '</td>';

SEND_OPLATA_DOLG	PROCEDURE	108	

SEND_OPLATA_DOLG	PROCEDURE	109	         msg := msg || '</tr>';

SEND_OPLATA_DOLG	PROCEDURE	110	      END LOOP;

SEND_OPLATA_DOLG	PROCEDURE	111	

SEND_OPLATA_DOLG	PROCEDURE	112	      msg := msg || '</table>';

SEND_OPLATA_DOLG	PROCEDURE	113	      subj :=

SEND_OPLATA_DOLG	PROCEDURE	114	         'Задолженность по документам по состоянию на текущий момент';

SEND_OPLATA_DOLG	PROCEDURE	115	      PR_SENDMAIL (b.addr, subj, msg);

SEND_OPLATA_DOLG	PROCEDURE	116	   END LOOP;

SEND_OPLATA_DOLG	PROCEDURE	117	END;
SEND_OL4ACCEPT	PROCEDURE	1	PROCEDURE        SEND_OL4ACCEPT

SEND_OL4ACCEPT	PROCEDURE	2	IS

SEND_OL4ACCEPT	PROCEDURE	3	   msg              VARCHAR2 (32767);

SEND_OL4ACCEPT	PROCEDURE	4	   subj             VARCHAR2 (32767);

SEND_OL4ACCEPT	PROCEDURE	5	   addr             VARCHAR2 (32767);

SEND_OL4ACCEPT	PROCEDURE	6	   too_many_lines   INTEGER;

SEND_OL4ACCEPT	PROCEDURE	7	   lines            INTEGER;

SEND_OL4ACCEPT	PROCEDURE	8	BEGIN

SEND_OL4ACCEPT	PROCEDURE	9	   FOR b

SEND_OL4ACCEPT	PROCEDURE	10	      IN (  SELECT dpt_id, COUNT (*) c

SEND_OL4ACCEPT	PROCEDURE	11	              FROM (SELECT x2.*

SEND_OL4ACCEPT	PROCEDURE	12	                      FROM (SELECT x1.*,

SEND_OL4ACCEPT	PROCEDURE	13	                                   NVL (

SEND_OL4ACCEPT	PROCEDURE	14	                                      (SELECT MAX (accepted_dt)

SEND_OL4ACCEPT	PROCEDURE	15	                                         FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	16	                                        WHERE     free_staff_id = x1.fid

SEND_OL4ACCEPT	PROCEDURE	17	                                              AND gruppa =

SEND_OL4ACCEPT	PROCEDURE	18	                                                     (SELECT MAX (gruppa)

SEND_OL4ACCEPT	PROCEDURE	19	                                                        FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	20	                                                       WHERE     free_staff_id =

SEND_OL4ACCEPT	PROCEDURE	21	                                                                    x1.fid

SEND_OL4ACCEPT	PROCEDURE	22	                                                             AND gruppa < gr_prev)),

SEND_OL4ACCEPT	PROCEDURE	23	                                      x1.ol_start)

SEND_OL4ACCEPT	PROCEDURE	24	                                      accepted_gr_prev

SEND_OL4ACCEPT	PROCEDURE	25	                              FROM (SELECT x.*,

SEND_OL4ACCEPT	PROCEDURE	26	                                           TRUNC (SYSDATE) - TRUNC (x.ol_start)

SEND_OL4ACCEPT	PROCEDURE	27	                                              srok,

SEND_OL4ACCEPT	PROCEDURE	28	                                           (SELECT MAX (gruppa)

SEND_OL4ACCEPT	PROCEDURE	29	                                              FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	30	                                             WHERE     free_staff_id = x.fid

SEND_OL4ACCEPT	PROCEDURE	31	                                                   AND gruppa < x.gr_current)

SEND_OL4ACCEPT	PROCEDURE	32	                                              gr_prev

SEND_OL4ACCEPT	PROCEDURE	33	                                      FROM (SELECT f.id fid,

SEND_OL4ACCEPT	PROCEDURE	34	                                                   u.tn,

SEND_OL4ACCEPT	PROCEDURE	35	                                                   u.fio,

SEND_OL4ACCEPT	PROCEDURE	36	                                                   u.pos_name,

SEND_OL4ACCEPT	PROCEDURE	37	                                                   u.dpt_id,

SEND_OL4ACCEPT	PROCEDURE	38	                                                   f.datauvol,

SEND_OL4ACCEPT	PROCEDURE	39	                                                   f.accept_data ol_start,

SEND_OL4ACCEPT	PROCEDURE	40	                                                   (SELECT   COUNT (*)

SEND_OL4ACCEPT	PROCEDURE	41	                                                           - SUM (

SEND_OL4ACCEPT	PROCEDURE	42	                                                                NVL (accepted, 0))

SEND_OL4ACCEPT	PROCEDURE	43	                                                      FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	44	                                                     WHERE free_staff_id = f.id)

SEND_OL4ACCEPT	PROCEDURE	45	                                                      not_accepted_cnt,

SEND_OL4ACCEPT	PROCEDURE	46	                                                   (  SELECT MIN (gruppa) gruppa

SEND_OL4ACCEPT	PROCEDURE	47	                                                        FROM (  SELECT free_staff_id,

SEND_OL4ACCEPT	PROCEDURE	48	                                                                       gruppa

SEND_OL4ACCEPT	PROCEDURE	49	                                                                  FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	50	                                                              GROUP BY free_staff_id,

SEND_OL4ACCEPT	PROCEDURE	51	                                                                       gruppa

SEND_OL4ACCEPT	PROCEDURE	52	                                                                HAVING   COUNT (*)

SEND_OL4ACCEPT	PROCEDURE	53	                                                                       - SUM (

SEND_OL4ACCEPT	PROCEDURE	54	                                                                            NVL (

SEND_OL4ACCEPT	PROCEDURE	55	                                                                               accepted,

SEND_OL4ACCEPT	PROCEDURE	56	                                                                               0)) >

SEND_OL4ACCEPT	PROCEDURE	57	                                                                          0)

SEND_OL4ACCEPT	PROCEDURE	58	                                                       WHERE free_staff_id = f.id

SEND_OL4ACCEPT	PROCEDURE	59	                                                    GROUP BY free_staff_id)

SEND_OL4ACCEPT	PROCEDURE	60	                                                      gr_current

SEND_OL4ACCEPT	PROCEDURE	61	                                              FROM free_staff f, user_list u

SEND_OL4ACCEPT	PROCEDURE	62	                                             WHERE     (SELECT COUNT (*)

SEND_OL4ACCEPT	PROCEDURE	63	                                                          FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	64	                                                         WHERE free_staff_id =

SEND_OL4ACCEPT	PROCEDURE	65	                                                                  f.id) > 0

SEND_OL4ACCEPT	PROCEDURE	66	                                                   AND u.tn = f.tn) x

SEND_OL4ACCEPT	PROCEDURE	67	                                     WHERE x.not_accepted_cnt <> 0) x1) x2

SEND_OL4ACCEPT	PROCEDURE	68	                     WHERE     srok > 14

SEND_OL4ACCEPT	PROCEDURE	69	                           AND TRUNC (SYSDATE) - TRUNC (x2.accepted_gr_prev) >= 3)

SEND_OL4ACCEPT	PROCEDURE	70	          GROUP BY dpt_id)

SEND_OL4ACCEPT	PROCEDURE	71	   LOOP

SEND_OL4ACCEPT	PROCEDURE	72	      msg :=

SEND_OL4ACCEPT	PROCEDURE	73	            'На данный момент выявлены следующие нарушения распоряжения по согласованию ОЛ <font style="color:red">(всего ОЛ '

SEND_OL4ACCEPT	PROCEDURE	74	         || TO_CHAR (b.c)

SEND_OL4ACCEPT	PROCEDURE	75	         || ')</font>:';

SEND_OL4ACCEPT	PROCEDURE	76	      msg :=

SEND_OL4ACCEPT	PROCEDURE	77	            msg

SEND_OL4ACCEPT	PROCEDURE	78	         || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_OL4ACCEPT	PROCEDURE	79	      msg :=

SEND_OL4ACCEPT	PROCEDURE	80	            msg

SEND_OL4ACCEPT	PROCEDURE	81	         || '<tr style="font-weight:bold">

SEND_OL4ACCEPT	PROCEDURE	82	    <td>ФИО уволенного</td>

SEND_OL4ACCEPT	PROCEDURE	83	    <td>Должность уволенного</td>

SEND_OL4ACCEPT	PROCEDURE	84	    <td>Дата увольнения</td>

SEND_OL4ACCEPT	PROCEDURE	85	    <td>Дата формирования ОЛ</td>

SEND_OL4ACCEPT	PROCEDURE	86	    <td>Срок рассмотрения ОЛ, дни</td>

SEND_OL4ACCEPT	PROCEDURE	87	    <td style="font-weight: bold; background-color: red;">На ком рассмотрение ОЛ</td>

SEND_OL4ACCEPT	PROCEDURE	88	    <td>ФИО ПР сотрудника, на ком рассмотрение ОЛ</td>

SEND_OL4ACCEPT	PROCEDURE	89	         </tr>';

SEND_OL4ACCEPT	PROCEDURE	90	      lines := 0;

SEND_OL4ACCEPT	PROCEDURE	91	

SEND_OL4ACCEPT	PROCEDURE	92	      FOR a

SEND_OL4ACCEPT	PROCEDURE	93	         IN (  SELECT (SELECT fio

SEND_OL4ACCEPT	PROCEDURE	94	                         FROM user_list

SEND_OL4ACCEPT	PROCEDURE	95	                        WHERE tn = (SELECT parent

SEND_OL4ACCEPT	PROCEDURE	96	                                      FROM parents

SEND_OL4ACCEPT	PROCEDURE	97	                                     WHERE tn = x3.tn))

SEND_OL4ACCEPT	PROCEDURE	98	                         chief,

SEND_OL4ACCEPT	PROCEDURE	99	                      x3.*,

SEND_OL4ACCEPT	PROCEDURE	100	                      (SELECT wm_concat (u1.fio)

SEND_OL4ACCEPT	PROCEDURE	101	                         FROM ol_staff o1, user_list u1

SEND_OL4ACCEPT	PROCEDURE	102	                        WHERE     NVL (o1.accepted, 0) <> 1

SEND_OL4ACCEPT	PROCEDURE	103	                              AND o1.free_staff_id = x3.fid

SEND_OL4ACCEPT	PROCEDURE	104	                              AND o1.gruppa = x3.gr_current

SEND_OL4ACCEPT	PROCEDURE	105	                              AND o1.tn = u1.tn)

SEND_OL4ACCEPT	PROCEDURE	106	                         bad_guys,

SEND_OL4ACCEPT	PROCEDURE	107	                      (SELECT wm_concat (u1.fio)

SEND_OL4ACCEPT	PROCEDURE	108	                         FROM ol_staff o1, parents p1, user_list u1

SEND_OL4ACCEPT	PROCEDURE	109	                        WHERE     NVL (o1.accepted, 0) <> 1

SEND_OL4ACCEPT	PROCEDURE	110	                              AND o1.free_staff_id = x3.fid

SEND_OL4ACCEPT	PROCEDURE	111	                              AND o1.gruppa = x3.gr_current

SEND_OL4ACCEPT	PROCEDURE	112	                              AND o1.tn = p1.tn

SEND_OL4ACCEPT	PROCEDURE	113	                              AND p1.parent = u1.tn)

SEND_OL4ACCEPT	PROCEDURE	114	                         bad_guys_chiefs

SEND_OL4ACCEPT	PROCEDURE	115	                 FROM (SELECT x2.*,

SEND_OL4ACCEPT	PROCEDURE	116	                              TRUNC (SYSDATE) - TRUNC (x2.accepted_gr_prev)

SEND_OL4ACCEPT	PROCEDURE	117	                                 srok_gr

SEND_OL4ACCEPT	PROCEDURE	118	                         FROM (SELECT x1.*,

SEND_OL4ACCEPT	PROCEDURE	119	                                      NVL (

SEND_OL4ACCEPT	PROCEDURE	120	                                         (SELECT MAX (accepted_dt)

SEND_OL4ACCEPT	PROCEDURE	121	                                            FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	122	                                           WHERE     free_staff_id = x1.fid

SEND_OL4ACCEPT	PROCEDURE	123	                                                 AND gruppa =

SEND_OL4ACCEPT	PROCEDURE	124	                                                        (SELECT MAX (gruppa)

SEND_OL4ACCEPT	PROCEDURE	125	                                                           FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	126	                                                          WHERE     free_staff_id =

SEND_OL4ACCEPT	PROCEDURE	127	                                                                       x1.fid

SEND_OL4ACCEPT	PROCEDURE	128	                                                                AND gruppa <

SEND_OL4ACCEPT	PROCEDURE	129	                                                                       gr_prev)),

SEND_OL4ACCEPT	PROCEDURE	130	                                         x1.ol_start)

SEND_OL4ACCEPT	PROCEDURE	131	                                         accepted_gr_prev

SEND_OL4ACCEPT	PROCEDURE	132	                                 FROM (SELECT x.*,

SEND_OL4ACCEPT	PROCEDURE	133	                                                TRUNC (SYSDATE)

SEND_OL4ACCEPT	PROCEDURE	134	                                              - TRUNC (x.ol_start)

SEND_OL4ACCEPT	PROCEDURE	135	                                                 srok,

SEND_OL4ACCEPT	PROCEDURE	136	                                              (SELECT MAX (gruppa)

SEND_OL4ACCEPT	PROCEDURE	137	                                                 FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	138	                                                WHERE     free_staff_id = x.fid

SEND_OL4ACCEPT	PROCEDURE	139	                                                      AND gruppa < x.gr_current)

SEND_OL4ACCEPT	PROCEDURE	140	                                                 gr_prev

SEND_OL4ACCEPT	PROCEDURE	141	                                         FROM (SELECT f.id fid,

SEND_OL4ACCEPT	PROCEDURE	142	                                                      u.tn,

SEND_OL4ACCEPT	PROCEDURE	143	                                                      u.fio,

SEND_OL4ACCEPT	PROCEDURE	144	                                                      u.pos_name,

SEND_OL4ACCEPT	PROCEDURE	145	                                                      u.dpt_id,

SEND_OL4ACCEPT	PROCEDURE	146	                                                      f.datauvol,

SEND_OL4ACCEPT	PROCEDURE	147	                                                      f.accept_data ol_start,

SEND_OL4ACCEPT	PROCEDURE	148	                                                      (SELECT   COUNT (*)

SEND_OL4ACCEPT	PROCEDURE	149	                                                              - SUM (

SEND_OL4ACCEPT	PROCEDURE	150	                                                                   NVL (accepted,

SEND_OL4ACCEPT	PROCEDURE	151	                                                                        0))

SEND_OL4ACCEPT	PROCEDURE	152	                                                         FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	153	                                                        WHERE free_staff_id =

SEND_OL4ACCEPT	PROCEDURE	154	                                                                 f.id)

SEND_OL4ACCEPT	PROCEDURE	155	                                                         not_accepted_cnt,

SEND_OL4ACCEPT	PROCEDURE	156	                                                      (  SELECT MIN (gruppa) gruppa

SEND_OL4ACCEPT	PROCEDURE	157	                                                           FROM (  SELECT free_staff_id,

SEND_OL4ACCEPT	PROCEDURE	158	                                                                          gruppa

SEND_OL4ACCEPT	PROCEDURE	159	                                                                     FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	160	                                                                 GROUP BY free_staff_id,

SEND_OL4ACCEPT	PROCEDURE	161	                                                                          gruppa

SEND_OL4ACCEPT	PROCEDURE	162	                                                                   HAVING   COUNT (

SEND_OL4ACCEPT	PROCEDURE	163	                                                                               *)

SEND_OL4ACCEPT	PROCEDURE	164	                                                                          - SUM (

SEND_OL4ACCEPT	PROCEDURE	165	                                                                               NVL (

SEND_OL4ACCEPT	PROCEDURE	166	                                                                                  accepted,

SEND_OL4ACCEPT	PROCEDURE	167	                                                                                  0)) >

SEND_OL4ACCEPT	PROCEDURE	168	                                                                             0)

SEND_OL4ACCEPT	PROCEDURE	169	                                                          WHERE free_staff_id =

SEND_OL4ACCEPT	PROCEDURE	170	                                                                   f.id

SEND_OL4ACCEPT	PROCEDURE	171	                                                       GROUP BY free_staff_id)

SEND_OL4ACCEPT	PROCEDURE	172	                                                         gr_current

SEND_OL4ACCEPT	PROCEDURE	173	                                                 FROM free_staff f, user_list u

SEND_OL4ACCEPT	PROCEDURE	174	                                                WHERE     (SELECT COUNT (*)

SEND_OL4ACCEPT	PROCEDURE	175	                                                             FROM ol_staff

SEND_OL4ACCEPT	PROCEDURE	176	                                                            WHERE free_staff_id =

SEND_OL4ACCEPT	PROCEDURE	177	                                                                     f.id) > 0

SEND_OL4ACCEPT	PROCEDURE	178	                                                      AND u.tn = f.tn) x

SEND_OL4ACCEPT	PROCEDURE	179	                                        WHERE x.not_accepted_cnt <> 0) x1) x2) x3

SEND_OL4ACCEPT	PROCEDURE	180	                WHERE srok > 14 AND srok_gr >= 3 AND dpt_id = b.dpt_id

SEND_OL4ACCEPT	PROCEDURE	181	             ORDER BY ol_start, srok)

SEND_OL4ACCEPT	PROCEDURE	182	      LOOP

SEND_OL4ACCEPT	PROCEDURE	183	         lines := lines + 1;

SEND_OL4ACCEPT	PROCEDURE	184	

SEND_OL4ACCEPT	PROCEDURE	185	         IF NVL (LENGTH (msg), 0) < 10000

SEND_OL4ACCEPT	PROCEDURE	186	         THEN

SEND_OL4ACCEPT	PROCEDURE	187	            msg := msg || '<tr>';

SEND_OL4ACCEPT	PROCEDURE	188	            msg := msg || '<td>' || a.fio || '</td>';

SEND_OL4ACCEPT	PROCEDURE	189	            msg := msg || '<td>' || a.pos_name || '</td>';

SEND_OL4ACCEPT	PROCEDURE	190	            msg := msg || '<td>' || a.datauvol || '</td>';

SEND_OL4ACCEPT	PROCEDURE	191	            msg := msg || '<td>' || a.ol_start || '</td>';

SEND_OL4ACCEPT	PROCEDURE	192	            msg := msg || '<td>' || a.srok || '</td>';

SEND_OL4ACCEPT	PROCEDURE	193	            msg :=

SEND_OL4ACCEPT	PROCEDURE	194	                  msg

SEND_OL4ACCEPT	PROCEDURE	195	               || '<td style="font-weight: bold; background-color: red;">'

SEND_OL4ACCEPT	PROCEDURE	196	               || a.bad_guys

SEND_OL4ACCEPT	PROCEDURE	197	               || '</td>';

SEND_OL4ACCEPT	PROCEDURE	198	            msg := msg || '<td>' || a.bad_guys_chiefs || '</td>';

SEND_OL4ACCEPT	PROCEDURE	199	            msg := msg || '</tr>';

SEND_OL4ACCEPT	PROCEDURE	200	            too_many_lines := 0;

SEND_OL4ACCEPT	PROCEDURE	201	         ELSE

SEND_OL4ACCEPT	PROCEDURE	202	            too_many_lines := 1;

SEND_OL4ACCEPT	PROCEDURE	203	         END IF;

SEND_OL4ACCEPT	PROCEDURE	204	      END LOOP;

SEND_OL4ACCEPT	PROCEDURE	205	

SEND_OL4ACCEPT	PROCEDURE	206	      msg := msg || '</table>';

SEND_OL4ACCEPT	PROCEDURE	207	

SEND_OL4ACCEPT	PROCEDURE	208	      subj :=

SEND_OL4ACCEPT	PROCEDURE	209	         'Нарушения распоряжения по согласованию ОЛ';

SEND_OL4ACCEPT	PROCEDURE	210	

SEND_OL4ACCEPT	PROCEDURE	211	      IF too_many_lines = 1

SEND_OL4ACCEPT	PROCEDURE	212	      THEN

SEND_OL4ACCEPT	PROCEDURE	213	         msg :=

SEND_OL4ACCEPT	PROCEDURE	214	               msg

SEND_OL4ACCEPT	PROCEDURE	215	            || '<p>Отображен не весь список ОЛ. Полный список ОЛ вы можете увидеть непосредственно на портале</p>';

SEND_OL4ACCEPT	PROCEDURE	216	      END IF;

SEND_OL4ACCEPT	PROCEDURE	217	

SEND_OL4ACCEPT	PROCEDURE	218	      IF lines > 0

SEND_OL4ACCEPT	PROCEDURE	219	      THEN

SEND_OL4ACCEPT	PROCEDURE	220	         SELECT wm_concat (e_mail)

SEND_OL4ACCEPT	PROCEDURE	221	           INTO addr

SEND_OL4ACCEPT	PROCEDURE	222	           FROM user_list

SEND_OL4ACCEPT	PROCEDURE	223	          WHERE is_coach = 1 AND datauvol IS NULL AND dpt_id = b.dpt_id;

SEND_OL4ACCEPT	PROCEDURE	224	

SEND_OL4ACCEPT	PROCEDURE	225	         PR_SENDMAIL (addr, subj, msg);

SEND_OL4ACCEPT	PROCEDURE	226	      END IF;

SEND_OL4ACCEPT	PROCEDURE	227	   END LOOP;

SEND_OL4ACCEPT	PROCEDURE	228	END;
SEND_MZ_REPORT	PROCEDURE	1	PROCEDURE        "SEND_MZ_REPORT"

SEND_MZ_REPORT	PROCEDURE	2	IS

SEND_MZ_REPORT	PROCEDURE	3	   msg             VARCHAR2 (32767);

SEND_MZ_REPORT	PROCEDURE	4	   subj            VARCHAR2 (32767);

SEND_MZ_REPORT	PROCEDURE	5	   addr            VARCHAR2 (32767);

SEND_MZ_REPORT	PROCEDURE	6	   total           INTEGER;

SEND_MZ_REPORT	PROCEDURE	7	   activeMZcount   INTEGER;

SEND_MZ_REPORT	PROCEDURE	8	BEGIN

SEND_MZ_REPORT	PROCEDURE	9	   SELECT COUNT (*)

SEND_MZ_REPORT	PROCEDURE	10	     INTO activeMZcount

SEND_MZ_REPORT	PROCEDURE	11	     FROM mz_spr_mz mz

SEND_MZ_REPORT	PROCEDURE	12	    WHERE mz.dataz IS NULL;

SEND_MZ_REPORT	PROCEDURE	13	

SEND_MZ_REPORT	PROCEDURE	14	   IF activeMZcount = 0

SEND_MZ_REPORT	PROCEDURE	15	   THEN

SEND_MZ_REPORT	PROCEDURE	16	      RETURN;

SEND_MZ_REPORT	PROCEDURE	17	   END IF;

SEND_MZ_REPORT	PROCEDURE	18	

SEND_MZ_REPORT	PROCEDURE	19	   msg :=

SEND_MZ_REPORT	PROCEDURE	20	      '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_MZ_REPORT	PROCEDURE	21	   msg :=

SEND_MZ_REPORT	PROCEDURE	22	         msg

SEND_MZ_REPORT	PROCEDURE	23	      || '

SEND_MZ_REPORT	PROCEDURE	24	<tr style="font-weight:bold">

SEND_MZ_REPORT	PROCEDURE	25	<td rowspan=2>Музей</td>

SEND_MZ_REPORT	PROCEDURE	26	<td colspan=2>Расходы</td>

SEND_MZ_REPORT	PROCEDURE	27	<td colspan=2>Приходы</td>

SEND_MZ_REPORT	PROCEDURE	28	<td colspan=2>Посещаемость</td>

SEND_MZ_REPORT	PROCEDURE	29	<td colspan=2>Перевод на спецсчет</td>

SEND_MZ_REPORT	PROCEDURE	30	<td colspan=2>Инвестиции</td>

SEND_MZ_REPORT	PROCEDURE	31	</tr>

SEND_MZ_REPORT	PROCEDURE	32	<tr>

SEND_MZ_REPORT	PROCEDURE	33	<td>'

SEND_MZ_REPORT	PROCEDURE	34	      || TO_CHAR (TRUNC (SYSDATE) - 1, 'dd/mm/yyyy')

SEND_MZ_REPORT	PROCEDURE	35	      || '</td>

SEND_MZ_REPORT	PROCEDURE	36	<td>с начала месяца</td>

SEND_MZ_REPORT	PROCEDURE	37	<td>'

SEND_MZ_REPORT	PROCEDURE	38	      || TO_CHAR (TRUNC (SYSDATE) - 1, 'dd/mm/yyyy')

SEND_MZ_REPORT	PROCEDURE	39	      || '</td>

SEND_MZ_REPORT	PROCEDURE	40	<td>с начала месяца</td>

SEND_MZ_REPORT	PROCEDURE	41	<td>'

SEND_MZ_REPORT	PROCEDURE	42	      || TO_CHAR (TRUNC (SYSDATE) - 1, 'dd/mm/yyyy')

SEND_MZ_REPORT	PROCEDURE	43	      || '</td>

SEND_MZ_REPORT	PROCEDURE	44	<td>с начала месяца</td>

SEND_MZ_REPORT	PROCEDURE	45	<td>'

SEND_MZ_REPORT	PROCEDURE	46	      || TO_CHAR (TRUNC (SYSDATE) - 1, 'dd/mm/yyyy')

SEND_MZ_REPORT	PROCEDURE	47	      || '</td>

SEND_MZ_REPORT	PROCEDURE	48	<td>с начала месяца</td>

SEND_MZ_REPORT	PROCEDURE	49	<td>'

SEND_MZ_REPORT	PROCEDURE	50	      || TO_CHAR (TRUNC (SYSDATE) - 1, 'dd/mm/yyyy')

SEND_MZ_REPORT	PROCEDURE	51	      || '</td>

SEND_MZ_REPORT	PROCEDURE	52	<td>с начала месяца</td>

SEND_MZ_REPORT	PROCEDURE	53	</tr>

SEND_MZ_REPORT	PROCEDURE	54	';

SEND_MZ_REPORT	PROCEDURE	55	

SEND_MZ_REPORT	PROCEDURE	56	   FOR a

SEND_MZ_REPORT	PROCEDURE	57	      IN (  SELECT mz.name,

SEND_MZ_REPORT	PROCEDURE	58	                   NVL (

SEND_MZ_REPORT	PROCEDURE	59	                      (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	60	                         FROM mz_rep_d_spr_inv

SEND_MZ_REPORT	PROCEDURE	61	                        WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	62	                                     TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	63	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	64	                      0)

SEND_MZ_REPORT	PROCEDURE	65	                      inv_m,

SEND_MZ_REPORT	PROCEDURE	66	                   NVL (

SEND_MZ_REPORT	PROCEDURE	67	                      (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	68	                         FROM mz_rep_d_spr_pri

SEND_MZ_REPORT	PROCEDURE	69	                        WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	70	                                     TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	71	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	72	                      0)

SEND_MZ_REPORT	PROCEDURE	73	                      pri_m,

SEND_MZ_REPORT	PROCEDURE	74	                   NVL (

SEND_MZ_REPORT	PROCEDURE	75	                      (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	76	                         FROM mz_rep_d_spr_ras

SEND_MZ_REPORT	PROCEDURE	77	                        WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	78	                                     TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	79	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	80	                      0)

SEND_MZ_REPORT	PROCEDURE	81	                      ras_m,

SEND_MZ_REPORT	PROCEDURE	82	                   NVL (

SEND_MZ_REPORT	PROCEDURE	83	                      (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	84	                         FROM mz_rep_d_spr_rss

SEND_MZ_REPORT	PROCEDURE	85	                        WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	86	                                     TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	87	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	88	                      0)

SEND_MZ_REPORT	PROCEDURE	89	                      rss_m,

SEND_MZ_REPORT	PROCEDURE	90	                   NVL (

SEND_MZ_REPORT	PROCEDURE	91	                      (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	92	                         FROM mz_rep_d_spr_vis

SEND_MZ_REPORT	PROCEDURE	93	                        WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	94	                                     TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	95	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	96	                      0)

SEND_MZ_REPORT	PROCEDURE	97	                      vis_m,

SEND_MZ_REPORT	PROCEDURE	98	                   NVL (

SEND_MZ_REPORT	PROCEDURE	99	                      (SELECT SUM (pds_sum)

SEND_MZ_REPORT	PROCEDURE	100	                         FROM mz_rep_m_pds

SEND_MZ_REPORT	PROCEDURE	101	                        WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	102	                                     TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	103	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	104	                      0)

SEND_MZ_REPORT	PROCEDURE	105	                      pds_m,

SEND_MZ_REPORT	PROCEDURE	106	                   NVL ( (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	107	                            FROM mz_rep_d_spr_inv

SEND_MZ_REPORT	PROCEDURE	108	                           WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	109	                        0)

SEND_MZ_REPORT	PROCEDURE	110	                      inv_d,

SEND_MZ_REPORT	PROCEDURE	111	                   NVL ( (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	112	                            FROM mz_rep_d_spr_pri

SEND_MZ_REPORT	PROCEDURE	113	                           WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	114	                        0)

SEND_MZ_REPORT	PROCEDURE	115	                      pri_d,

SEND_MZ_REPORT	PROCEDURE	116	                   NVL ( (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	117	                            FROM mz_rep_d_spr_ras

SEND_MZ_REPORT	PROCEDURE	118	                           WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	119	                        0)

SEND_MZ_REPORT	PROCEDURE	120	                      ras_d,

SEND_MZ_REPORT	PROCEDURE	121	                   NVL ( (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	122	                            FROM mz_rep_d_spr_rss

SEND_MZ_REPORT	PROCEDURE	123	                           WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	124	                        0)

SEND_MZ_REPORT	PROCEDURE	125	                      rss_d,

SEND_MZ_REPORT	PROCEDURE	126	                   NVL ( (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	127	                            FROM mz_rep_d_spr_vis

SEND_MZ_REPORT	PROCEDURE	128	                           WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	129	                        0)

SEND_MZ_REPORT	PROCEDURE	130	                      vis_d,

SEND_MZ_REPORT	PROCEDURE	131	                   NVL (

SEND_MZ_REPORT	PROCEDURE	132	                      (SELECT SUM (pds_sum)

SEND_MZ_REPORT	PROCEDURE	133	                         FROM mz_rep_m_pds

SEND_MZ_REPORT	PROCEDURE	134	                        WHERE     dt = TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	135	                              AND pds_dt = TRUNC (SYSDATE) - 1

SEND_MZ_REPORT	PROCEDURE	136	                              AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	137	                      0)

SEND_MZ_REPORT	PROCEDURE	138	                      pds_d

SEND_MZ_REPORT	PROCEDURE	139	              FROM mz_spr_mz mz

SEND_MZ_REPORT	PROCEDURE	140	             WHERE mz.dataz IS NULL

SEND_MZ_REPORT	PROCEDURE	141	          ORDER BY mz.name)

SEND_MZ_REPORT	PROCEDURE	142	   LOOP

SEND_MZ_REPORT	PROCEDURE	143	      msg := msg || '<tr style="text-align:right">';

SEND_MZ_REPORT	PROCEDURE	144	      msg := msg || '<td style="text-align:left">' || a.name || '</td>';

SEND_MZ_REPORT	PROCEDURE	145	      msg := msg || '<td>' || TO_CHAR (a.ras_d + a.rss_d) || '</td>';

SEND_MZ_REPORT	PROCEDURE	146	      msg := msg || '<td>' || TO_CHAR (a.ras_m + a.rss_m) || '</td>';

SEND_MZ_REPORT	PROCEDURE	147	      msg := msg || '<td>' || a.pri_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	148	      msg := msg || '<td>' || a.pri_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	149	      msg := msg || '<td>' || a.vis_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	150	      msg := msg || '<td>' || a.vis_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	151	      msg := msg || '<td>' || a.pds_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	152	      msg := msg || '<td>' || a.pds_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	153	      msg := msg || '<td>' || a.inv_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	154	      msg := msg || '<td>' || a.inv_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	155	      msg := msg || '</tr>';

SEND_MZ_REPORT	PROCEDURE	156	   END LOOP;

SEND_MZ_REPORT	PROCEDURE	157	

SEND_MZ_REPORT	PROCEDURE	158	

SEND_MZ_REPORT	PROCEDURE	159	   FOR a

SEND_MZ_REPORT	PROCEDURE	160	      IN (SELECT SUM (pri_m) pri_m,

SEND_MZ_REPORT	PROCEDURE	161	                 SUM (inv_m) inv_m,

SEND_MZ_REPORT	PROCEDURE	162	                 SUM (ras_m) ras_m,

SEND_MZ_REPORT	PROCEDURE	163	                 SUM (rss_m) rss_m,

SEND_MZ_REPORT	PROCEDURE	164	                 SUM (vis_m) vis_m,

SEND_MZ_REPORT	PROCEDURE	165	                 SUM (pds_m) pds_m,

SEND_MZ_REPORT	PROCEDURE	166	                 SUM (inv_d) inv_d,

SEND_MZ_REPORT	PROCEDURE	167	                 SUM (pri_d) pri_d,

SEND_MZ_REPORT	PROCEDURE	168	                 SUM (ras_d) ras_d,

SEND_MZ_REPORT	PROCEDURE	169	                 SUM (rss_d) rss_d,

SEND_MZ_REPORT	PROCEDURE	170	                 SUM (vis_d) vis_d,

SEND_MZ_REPORT	PROCEDURE	171	                 SUM (pds_d) pds_d

SEND_MZ_REPORT	PROCEDURE	172	            FROM (  SELECT mz.name,

SEND_MZ_REPORT	PROCEDURE	173	                           NVL (

SEND_MZ_REPORT	PROCEDURE	174	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	175	                                 FROM mz_rep_d_spr_inv

SEND_MZ_REPORT	PROCEDURE	176	                                WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	177	                                             TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	178	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	179	                              0)

SEND_MZ_REPORT	PROCEDURE	180	                              inv_m,

SEND_MZ_REPORT	PROCEDURE	181	                           NVL (

SEND_MZ_REPORT	PROCEDURE	182	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	183	                                 FROM mz_rep_d_spr_pri

SEND_MZ_REPORT	PROCEDURE	184	                                WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	185	                                             TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	186	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	187	                              0)

SEND_MZ_REPORT	PROCEDURE	188	                              pri_m,

SEND_MZ_REPORT	PROCEDURE	189	                           NVL (

SEND_MZ_REPORT	PROCEDURE	190	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	191	                                 FROM mz_rep_d_spr_ras

SEND_MZ_REPORT	PROCEDURE	192	                                WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	193	                                             TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	194	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	195	                              0)

SEND_MZ_REPORT	PROCEDURE	196	                              ras_m,

SEND_MZ_REPORT	PROCEDURE	197	                           NVL (

SEND_MZ_REPORT	PROCEDURE	198	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	199	                                 FROM mz_rep_d_spr_rss

SEND_MZ_REPORT	PROCEDURE	200	                                WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	201	                                             TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	202	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	203	                              0)

SEND_MZ_REPORT	PROCEDURE	204	                              rss_m,

SEND_MZ_REPORT	PROCEDURE	205	                           NVL (

SEND_MZ_REPORT	PROCEDURE	206	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	207	                                 FROM mz_rep_d_spr_vis

SEND_MZ_REPORT	PROCEDURE	208	                                WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	209	                                             TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	210	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	211	                              0)

SEND_MZ_REPORT	PROCEDURE	212	                              vis_m,

SEND_MZ_REPORT	PROCEDURE	213	                           NVL (

SEND_MZ_REPORT	PROCEDURE	214	                              (SELECT SUM (pds_sum)

SEND_MZ_REPORT	PROCEDURE	215	                                 FROM mz_rep_m_pds

SEND_MZ_REPORT	PROCEDURE	216	                                WHERE     TRUNC (dt, 'mm') =

SEND_MZ_REPORT	PROCEDURE	217	                                             TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	218	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	219	                              0)

SEND_MZ_REPORT	PROCEDURE	220	                              pds_m,

SEND_MZ_REPORT	PROCEDURE	221	                           NVL (

SEND_MZ_REPORT	PROCEDURE	222	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	223	                                 FROM mz_rep_d_spr_inv

SEND_MZ_REPORT	PROCEDURE	224	                                WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	225	                              0)

SEND_MZ_REPORT	PROCEDURE	226	                              inv_d,

SEND_MZ_REPORT	PROCEDURE	227	                           NVL (

SEND_MZ_REPORT	PROCEDURE	228	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	229	                                 FROM mz_rep_d_spr_pri

SEND_MZ_REPORT	PROCEDURE	230	                                WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	231	                              0)

SEND_MZ_REPORT	PROCEDURE	232	                              pri_d,

SEND_MZ_REPORT	PROCEDURE	233	                           NVL (

SEND_MZ_REPORT	PROCEDURE	234	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	235	                                 FROM mz_rep_d_spr_ras

SEND_MZ_REPORT	PROCEDURE	236	                                WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	237	                              0)

SEND_MZ_REPORT	PROCEDURE	238	                              ras_d,

SEND_MZ_REPORT	PROCEDURE	239	                           NVL (

SEND_MZ_REPORT	PROCEDURE	240	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	241	                                 FROM mz_rep_d_spr_rss

SEND_MZ_REPORT	PROCEDURE	242	                                WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	243	                              0)

SEND_MZ_REPORT	PROCEDURE	244	                              rss_d,

SEND_MZ_REPORT	PROCEDURE	245	                           NVL (

SEND_MZ_REPORT	PROCEDURE	246	                              (SELECT SUM (val)

SEND_MZ_REPORT	PROCEDURE	247	                                 FROM mz_rep_d_spr_vis

SEND_MZ_REPORT	PROCEDURE	248	                                WHERE dt = TRUNC (SYSDATE) - 1 AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	249	                              0)

SEND_MZ_REPORT	PROCEDURE	250	                              vis_d,

SEND_MZ_REPORT	PROCEDURE	251	                           NVL (

SEND_MZ_REPORT	PROCEDURE	252	                              (SELECT SUM (pds_sum)

SEND_MZ_REPORT	PROCEDURE	253	                                 FROM mz_rep_m_pds

SEND_MZ_REPORT	PROCEDURE	254	                                WHERE     dt = TRUNC (TRUNC (SYSDATE) - 1, 'mm')

SEND_MZ_REPORT	PROCEDURE	255	                                      AND pds_dt = TRUNC (SYSDATE) - 1

SEND_MZ_REPORT	PROCEDURE	256	                                      AND mz_id = mz.id),

SEND_MZ_REPORT	PROCEDURE	257	                              0)

SEND_MZ_REPORT	PROCEDURE	258	                              pds_d

SEND_MZ_REPORT	PROCEDURE	259	                      FROM mz_spr_mz mz

SEND_MZ_REPORT	PROCEDURE	260	                     WHERE mz.dataz IS NULL

SEND_MZ_REPORT	PROCEDURE	261	                  ORDER BY mz.name))

SEND_MZ_REPORT	PROCEDURE	262	   LOOP

SEND_MZ_REPORT	PROCEDURE	263	      msg := msg || '<tr style="text-align:right;font-weight:bold">';

SEND_MZ_REPORT	PROCEDURE	264	      msg := msg || '<td style="text-align:left">Итого</td>';

SEND_MZ_REPORT	PROCEDURE	265	      msg := msg || '<td>' || TO_CHAR (a.ras_d + a.rss_d) || '</td>';

SEND_MZ_REPORT	PROCEDURE	266	      msg := msg || '<td>' || TO_CHAR (a.ras_m + a.rss_m) || '</td>';

SEND_MZ_REPORT	PROCEDURE	267	      msg := msg || '<td>' || a.pri_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	268	      msg := msg || '<td>' || a.pri_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	269	      msg := msg || '<td>' || a.vis_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	270	      msg := msg || '<td>' || a.vis_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	271	      msg := msg || '<td>' || a.pds_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	272	      msg := msg || '<td>' || a.pds_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	273	      msg := msg || '<td>' || a.inv_d || '</td>';

SEND_MZ_REPORT	PROCEDURE	274	      msg := msg || '<td>' || a.inv_m || '</td>';

SEND_MZ_REPORT	PROCEDURE	275	      msg := msg || '</tr>';

SEND_MZ_REPORT	PROCEDURE	276	   END LOOP;

SEND_MZ_REPORT	PROCEDURE	277	

SEND_MZ_REPORT	PROCEDURE	278	

SEND_MZ_REPORT	PROCEDURE	279	

SEND_MZ_REPORT	PROCEDURE	280	   msg := msg || '</table>';

SEND_MZ_REPORT	PROCEDURE	281	   subj := 'Итоги экскурсий за ' || TRUNC (TRUNC (SYSDATE) - 1);

SEND_MZ_REPORT	PROCEDURE	282	

SEND_MZ_REPORT	PROCEDURE	283	   FOR b IN (SELECT *

SEND_MZ_REPORT	PROCEDURE	284	               FROM user_list

SEND_MZ_REPORT	PROCEDURE	285	              WHERE is_mz_admin = 1 AND datauvol IS NULL)

SEND_MZ_REPORT	PROCEDURE	286	   LOOP

SEND_MZ_REPORT	PROCEDURE	287	      PR_SENDMAIL (b.e_mail, subj, msg);

SEND_MZ_REPORT	PROCEDURE	288	   END LOOP;

SEND_MZ_REPORT	PROCEDURE	289	END;
SEND_MS_AGENTS_STAT	PROCEDURE	1	PROCEDURE        send_ms_agents_stat

SEND_MS_AGENTS_STAT	PROCEDURE	2	AS

SEND_MS_AGENTS_STAT	PROCEDURE	3	   msg           VARCHAR (32767);

SEND_MS_AGENTS_STAT	PROCEDURE	4	   v_yesterday   VARCHAR2 (255);

SEND_MS_AGENTS_STAT	PROCEDURE	5	BEGIN

SEND_MS_AGENTS_STAT	PROCEDURE	6	   v_yesterday := TO_CHAR (SYSDATE - 1, 'dd.mm.yyyy');

SEND_MS_AGENTS_STAT	PROCEDURE	7	

SEND_MS_AGENTS_STAT	PROCEDURE	8	   FOR a IN (SELECT z.email,

SEND_MS_AGENTS_STAT	PROCEDURE	9	                    z.ag_id,

SEND_MS_AGENTS_STAT	PROCEDURE	10	                    z.login,

SEND_MS_AGENTS_STAT	PROCEDURE	11	                    a.name

SEND_MS_AGENTS_STAT	PROCEDURE	12	               FROM routes_agents_pwd z, routes_agents a

SEND_MS_AGENTS_STAT	PROCEDURE	13	              WHERE z.stat = 1 AND z.email IS NOT NULL AND z.ag_id = a.id)

SEND_MS_AGENTS_STAT	PROCEDURE	14	   LOOP

SEND_MS_AGENTS_STAT	PROCEDURE	15	      FOR b

SEND_MS_AGENTS_STAT	PROCEDURE	16	         IN (SELECT net_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	17	                    oblast_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	18	                    sku,

SEND_MS_AGENTS_STAT	PROCEDURE	19	                    sku_all,

SEND_MS_AGENTS_STAT	PROCEDURE	20	                    files_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	21	                    visits,

SEND_MS_AGENTS_STAT	PROCEDURE	22	                    tp_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	23	                    tp_with_oos_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	24	                    oos_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	25	                    DECODE (sku_all, 0, 0, ROUND (oos_cnt / sku_all * 100, 2))

SEND_MS_AGENTS_STAT	PROCEDURE	26	                       perc_oos

SEND_MS_AGENTS_STAT	PROCEDURE	27	               FROM (SELECT COUNT (DISTINCT r.n_net_name) net_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	28	                            COUNT (DISTINCT r.cpp1_tz_oblast) oblast_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	29	                            COUNT (DISTINCT msb.name) sku,

SEND_MS_AGENTS_STAT	PROCEDURE	30	                            COUNT (DISTINCT msb.id) sku_all,

SEND_MS_AGENTS_STAT	PROCEDURE	31	                            COUNT (DISTINCT fn) files_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	32	                            COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	33	                               DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	34	                                           WHEN (NVL (mr.mr_fakt, 0) > 0)

SEND_MS_AGENTS_STAT	PROCEDURE	35	                                           THEN

SEND_MS_AGENTS_STAT	PROCEDURE	36	                                              r.rb_kodtp || '-' || r.rb_data

SEND_MS_AGENTS_STAT	PROCEDURE	37	                                        END)

SEND_MS_AGENTS_STAT	PROCEDURE	38	                               visits,

SEND_MS_AGENTS_STAT	PROCEDURE	39	                            COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	40	                               DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	41	                                           WHEN (NVL (mr.mr_fakt, 0) > 0)

SEND_MS_AGENTS_STAT	PROCEDURE	42	                                           THEN

SEND_MS_AGENTS_STAT	PROCEDURE	43	                                              r.rb_kodtp

SEND_MS_AGENTS_STAT	PROCEDURE	44	                                        END)

SEND_MS_AGENTS_STAT	PROCEDURE	45	                               tp_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	46	                            COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	47	                               DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	48	                                           WHEN     (NVL (mr.mr_fakt, 0) > 0)

SEND_MS_AGENTS_STAT	PROCEDURE	49	                                                AND msr.r_oos = 1

SEND_MS_AGENTS_STAT	PROCEDURE	50	                                           THEN

SEND_MS_AGENTS_STAT	PROCEDURE	51	                                              r.rb_kodtp

SEND_MS_AGENTS_STAT	PROCEDURE	52	                                        END)

SEND_MS_AGENTS_STAT	PROCEDURE	53	                               tp_with_oos_cnt,

SEND_MS_AGENTS_STAT	PROCEDURE	54	                            COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	55	                               DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	56	                                           WHEN     (NVL (mr.mr_fakt, 0) > 0)

SEND_MS_AGENTS_STAT	PROCEDURE	57	                                                AND msr.r_oos = 1

SEND_MS_AGENTS_STAT	PROCEDURE	58	                                           THEN

SEND_MS_AGENTS_STAT	PROCEDURE	59	                                              r.rb_kodtp || '-' || msr.r_id

SEND_MS_AGENTS_STAT	PROCEDURE	60	                                        END)

SEND_MS_AGENTS_STAT	PROCEDURE	61	                               oos_cnt

SEND_MS_AGENTS_STAT	PROCEDURE	62	                       FROM ms_rep_hbr msr,

SEND_MS_AGENTS_STAT	PROCEDURE	63	                            ms_rep_hbr_dt msh,

SEND_MS_AGENTS_STAT	PROCEDURE	64	                            merch_spec_body msb,

SEND_MS_AGENTS_STAT	PROCEDURE	65	                            merch_report mr,

SEND_MS_AGENTS_STAT	PROCEDURE	66	                            ms_rep_routes1 r,

SEND_MS_AGENTS_STAT	PROCEDURE	67	                            merch_spec_report_files f

SEND_MS_AGENTS_STAT	PROCEDURE	68	                      WHERE     msh.kod_tp = r.rb_kodtp

SEND_MS_AGENTS_STAT	PROCEDURE	69	                            AND msh.ag_id = r.rb_ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	70	                            AND msh.id_net = r.n_id_net

SEND_MS_AGENTS_STAT	PROCEDURE	71	                            AND msb.head_id = msh.id

SEND_MS_AGENTS_STAT	PROCEDURE	72	                            AND msr.r_spec_id = msb.id

SEND_MS_AGENTS_STAT	PROCEDURE	73	                            AND r.rb_id = mr.rb_id

SEND_MS_AGENTS_STAT	PROCEDURE	74	                            AND r.rb_ag_id = a.ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	75	                            AND msr.r_dt = r.rb_data

SEND_MS_AGENTS_STAT	PROCEDURE	76	                            AND r.rb_data = TRUNC (SYSDATE) - 1

SEND_MS_AGENTS_STAT	PROCEDURE	77	                            AND msh.data = r.rb_data

SEND_MS_AGENTS_STAT	PROCEDURE	78	                            AND f.dt(+) = r.rb_data

SEND_MS_AGENTS_STAT	PROCEDURE	79	                            AND f.ag_id(+) = r.rb_ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	80	                            AND f.kod_tp(+) = r.rb_kodtp

SEND_MS_AGENTS_STAT	PROCEDURE	81	                            AND r.cpp1_tz_oblast IN (SELECT DISTINCT r.oblast

SEND_MS_AGENTS_STAT	PROCEDURE	82	                                                       FROM routes_logins_oblast r,

SEND_MS_AGENTS_STAT	PROCEDURE	83	                                                            routes_agents_pwd p

SEND_MS_AGENTS_STAT	PROCEDURE	84	                                                      WHERE     r.login =

SEND_MS_AGENTS_STAT	PROCEDURE	85	                                                                   p.login

SEND_MS_AGENTS_STAT	PROCEDURE	86	                                                            AND p.login =

SEND_MS_AGENTS_STAT	PROCEDURE	87	                                                                   a.login

SEND_MS_AGENTS_STAT	PROCEDURE	88	                                                            AND p.ag_id =

SEND_MS_AGENTS_STAT	PROCEDURE	89	                                                                   a.ag_id)

SEND_MS_AGENTS_STAT	PROCEDURE	90	                            AND r.n_id_net IN (SELECT DISTINCT r.id_net

SEND_MS_AGENTS_STAT	PROCEDURE	91	                                                 FROM routes_logins_nets r,

SEND_MS_AGENTS_STAT	PROCEDURE	92	                                                      routes_agents_pwd p

SEND_MS_AGENTS_STAT	PROCEDURE	93	                                                WHERE     r.login = p.login

SEND_MS_AGENTS_STAT	PROCEDURE	94	                                                      AND p.login = a.login

SEND_MS_AGENTS_STAT	PROCEDURE	95	                                                      AND p.ag_id = a.ag_id)))

SEND_MS_AGENTS_STAT	PROCEDURE	96	      LOOP

SEND_MS_AGENTS_STAT	PROCEDURE	97	         msg :=

SEND_MS_AGENTS_STAT	PROCEDURE	98	               'Совершено визитов: <a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	99	            || 'action=ms_agenda&period=1&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	100	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	101	            || '">'

SEND_MS_AGENTS_STAT	PROCEDURE	102	            || b.visits

SEND_MS_AGENTS_STAT	PROCEDURE	103	            || '</a><br>'

SEND_MS_AGENTS_STAT	PROCEDURE	104	            || 'По сетям: <a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	105	            || 'action=ms_agenda&period=1&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	106	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	107	            || '">'

SEND_MS_AGENTS_STAT	PROCEDURE	108	            || b.net_cnt

SEND_MS_AGENTS_STAT	PROCEDURE	109	            || '</a><br>'

SEND_MS_AGENTS_STAT	PROCEDURE	110	            || 'По областям: <a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	111	            || 'action=ms_agenda&period=1&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	112	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	113	            || '">'

SEND_MS_AGENTS_STAT	PROCEDURE	114	            || b.oblast_cnt

SEND_MS_AGENTS_STAT	PROCEDURE	115	            || '</a><br>'

SEND_MS_AGENTS_STAT	PROCEDURE	116	            || 'Сделано фото: '

SEND_MS_AGENTS_STAT	PROCEDURE	117	            || b.files_cnt

SEND_MS_AGENTS_STAT	PROCEDURE	118	            || ' (<a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	119	            || 'action=merch_photo_report&dates_list1='

SEND_MS_AGENTS_STAT	PROCEDURE	120	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	121	            || '&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	122	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	123	            || '">Фотоотчет</a> / <a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	124	            || 'action=merch_report_vf&dates_list1='

SEND_MS_AGENTS_STAT	PROCEDURE	125	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	126	            || '&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	127	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	128	            || '">Просмотреть статистику</a>)<br>'

SEND_MS_AGENTS_STAT	PROCEDURE	129	            || 'Отмечено '

SEND_MS_AGENTS_STAT	PROCEDURE	130	            || b.oos_cnt

SEND_MS_AGENTS_STAT	PROCEDURE	131	            || ' OOS ('

SEND_MS_AGENTS_STAT	PROCEDURE	132	            || b.perc_oos

SEND_MS_AGENTS_STAT	PROCEDURE	133	            || ') по количеству '

SEND_MS_AGENTS_STAT	PROCEDURE	134	            || b.tp_with_oos_cnt

SEND_MS_AGENTS_STAT	PROCEDURE	135	            || ' ТЗ'

SEND_MS_AGENTS_STAT	PROCEDURE	136	            || ' (<a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	137	            || 'action=merch_report_by_spec&dates_list1='

SEND_MS_AGENTS_STAT	PROCEDURE	138	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	139	            || '&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	140	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	141	            || '">Отчет по спецификации</a> / <a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	142	            || 'action=merch_report_so&dates_list1='

SEND_MS_AGENTS_STAT	PROCEDURE	143	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	144	            || '&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	145	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	146	            || '">Просмотреть статистику</a>)<br>';

SEND_MS_AGENTS_STAT	PROCEDURE	147	      END LOOP;

SEND_MS_AGENTS_STAT	PROCEDURE	148	

SEND_MS_AGENTS_STAT	PROCEDURE	149	      FOR b

SEND_MS_AGENTS_STAT	PROCEDURE	150	         IN (SELECT COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	151	                       DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	152	                                   WHEN     TRUNC (mc.lu) = TRUNC (SYSDATE) - 1

SEND_MS_AGENTS_STAT	PROCEDURE	153	                                        AND mcu.is_spd = 1

SEND_MS_AGENTS_STAT	PROCEDURE	154	                                   THEN

SEND_MS_AGENTS_STAT	PROCEDURE	155	                                         mc.dt

SEND_MS_AGENTS_STAT	PROCEDURE	156	                                      || ' '

SEND_MS_AGENTS_STAT	PROCEDURE	157	                                      || mc.ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	158	                                      || ' '

SEND_MS_AGENTS_STAT	PROCEDURE	159	                                      || mc.kod_tp

SEND_MS_AGENTS_STAT	PROCEDURE	160	                                END)

SEND_MS_AGENTS_STAT	PROCEDURE	161	                       tp_tasks,

SEND_MS_AGENTS_STAT	PROCEDURE	162	                    COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	163	                       DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	164	                                   WHEN     TRUNC (fc.lu) = TRUNC (SYSDATE) - 1

SEND_MS_AGENTS_STAT	PROCEDURE	165	                                        AND fcu.is_spd = 1

SEND_MS_AGENTS_STAT	PROCEDURE	166	                                   THEN

SEND_MS_AGENTS_STAT	PROCEDURE	167	                                      fc.msr_file_id

SEND_MS_AGENTS_STAT	PROCEDURE	168	                                END)

SEND_MS_AGENTS_STAT	PROCEDURE	169	                       file_tasks,

SEND_MS_AGENTS_STAT	PROCEDURE	170	                      COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	171	                         DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	172	                                     WHEN     TRUNC (mc.lu) =

SEND_MS_AGENTS_STAT	PROCEDURE	173	                                                 TRUNC (SYSDATE) - 1

SEND_MS_AGENTS_STAT	PROCEDURE	174	                                          AND mcu.is_spd = 1

SEND_MS_AGENTS_STAT	PROCEDURE	175	                                     THEN

SEND_MS_AGENTS_STAT	PROCEDURE	176	                                           mc.dt

SEND_MS_AGENTS_STAT	PROCEDURE	177	                                        || ' '

SEND_MS_AGENTS_STAT	PROCEDURE	178	                                        || mc.ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	179	                                        || ' '

SEND_MS_AGENTS_STAT	PROCEDURE	180	                                        || mc.kod_tp

SEND_MS_AGENTS_STAT	PROCEDURE	181	                                  END)

SEND_MS_AGENTS_STAT	PROCEDURE	182	                    + COUNT (

SEND_MS_AGENTS_STAT	PROCEDURE	183	                         DISTINCT CASE

SEND_MS_AGENTS_STAT	PROCEDURE	184	                                     WHEN     TRUNC (fc.lu) =

SEND_MS_AGENTS_STAT	PROCEDURE	185	                                                 TRUNC (SYSDATE) - 1

SEND_MS_AGENTS_STAT	PROCEDURE	186	                                          AND fcu.is_spd = 1

SEND_MS_AGENTS_STAT	PROCEDURE	187	                                     THEN

SEND_MS_AGENTS_STAT	PROCEDURE	188	                                        fc.msr_file_id

SEND_MS_AGENTS_STAT	PROCEDURE	189	                                  END)

SEND_MS_AGENTS_STAT	PROCEDURE	190	                       total_answers

SEND_MS_AGENTS_STAT	PROCEDURE	191	               FROM ms_rep_routes1 r,

SEND_MS_AGENTS_STAT	PROCEDURE	192	                    merch_chat mc,

SEND_MS_AGENTS_STAT	PROCEDURE	193	                    user_list mcu,

SEND_MS_AGENTS_STAT	PROCEDURE	194	                    merch_spec_report_files f,

SEND_MS_AGENTS_STAT	PROCEDURE	195	                    MERCH_SPEC_REPORT_FILES_CHAT fc,

SEND_MS_AGENTS_STAT	PROCEDURE	196	                    user_list fcu

SEND_MS_AGENTS_STAT	PROCEDURE	197	              WHERE     r.rb_ag_id = a.ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	198	                    AND mc.login = mcu.login(+)

SEND_MS_AGENTS_STAT	PROCEDURE	199	                    AND fc.login = fcu.login(+)

SEND_MS_AGENTS_STAT	PROCEDURE	200	                    AND mc.dt(+) = r.rb_data

SEND_MS_AGENTS_STAT	PROCEDURE	201	                    AND mc.ag_id(+) = r.rb_ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	202	                    AND mc.kod_tp(+) = r.rb_kodtp

SEND_MS_AGENTS_STAT	PROCEDURE	203	                    AND f.dt(+) = r.rb_data

SEND_MS_AGENTS_STAT	PROCEDURE	204	                    AND f.ag_id(+) = r.rb_ag_id

SEND_MS_AGENTS_STAT	PROCEDURE	205	                    AND f.kod_tp(+) = r.rb_kodtp

SEND_MS_AGENTS_STAT	PROCEDURE	206	                    AND f.id = fc.msr_file_id(+)

SEND_MS_AGENTS_STAT	PROCEDURE	207	                    AND r.cpp1_tz_oblast IN (SELECT DISTINCT r.oblast

SEND_MS_AGENTS_STAT	PROCEDURE	208	                                               FROM routes_logins_oblast r,

SEND_MS_AGENTS_STAT	PROCEDURE	209	                                                    routes_agents_pwd p

SEND_MS_AGENTS_STAT	PROCEDURE	210	                                              WHERE     r.login = p.login

SEND_MS_AGENTS_STAT	PROCEDURE	211	                                                    AND p.login = a.login

SEND_MS_AGENTS_STAT	PROCEDURE	212	                                                    AND p.ag_id = a.ag_id)

SEND_MS_AGENTS_STAT	PROCEDURE	213	                    AND r.n_id_net IN (SELECT DISTINCT r.id_net

SEND_MS_AGENTS_STAT	PROCEDURE	214	                                         FROM routes_logins_nets r,

SEND_MS_AGENTS_STAT	PROCEDURE	215	                                              routes_agents_pwd p

SEND_MS_AGENTS_STAT	PROCEDURE	216	                                        WHERE     r.login = p.login

SEND_MS_AGENTS_STAT	PROCEDURE	217	                                              AND p.login = a.login

SEND_MS_AGENTS_STAT	PROCEDURE	218	                                              AND p.ag_id = a.ag_id))

SEND_MS_AGENTS_STAT	PROCEDURE	219	      LOOP

SEND_MS_AGENTS_STAT	PROCEDURE	220	         msg :=

SEND_MS_AGENTS_STAT	PROCEDURE	221	               msg

SEND_MS_AGENTS_STAT	PROCEDURE	222	            || 'Отвечено на <a href="http://merchservice.com.ua/login.php?'

SEND_MS_AGENTS_STAT	PROCEDURE	223	            || 'action=merch_report_file_chat&dates_list1='

SEND_MS_AGENTS_STAT	PROCEDURE	224	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	225	            || '&dates_list2='

SEND_MS_AGENTS_STAT	PROCEDURE	226	            || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	227	            || '&d_type=lu&flt_chat=3">'

SEND_MS_AGENTS_STAT	PROCEDURE	228	            || b.total_answers

SEND_MS_AGENTS_STAT	PROCEDURE	229	            || '</a> задач(-у)';

SEND_MS_AGENTS_STAT	PROCEDURE	230	      END LOOP;

SEND_MS_AGENTS_STAT	PROCEDURE	231	

SEND_MS_AGENTS_STAT	PROCEDURE	232	      PR_SENDMAIL (

SEND_MS_AGENTS_STAT	PROCEDURE	233	         a.email,

SEND_MS_AGENTS_STAT	PROCEDURE	234	            'Статистика работы команды М-Сервис за '

SEND_MS_AGENTS_STAT	PROCEDURE	235	         || v_yesterday

SEND_MS_AGENTS_STAT	PROCEDURE	236	         || ' по заказчику: '

SEND_MS_AGENTS_STAT	PROCEDURE	237	         || a.name,

SEND_MS_AGENTS_STAT	PROCEDURE	238	         msg);

SEND_MS_AGENTS_STAT	PROCEDURE	239	   END LOOP;

SEND_MS_AGENTS_STAT	PROCEDURE	240	END;
SEND_IT_TASK	PROCEDURE	1	PROCEDURE        send_it_task (p_id    IN INTEGER,

SEND_IT_TASK	PROCEDURE	2	                                                 p_trg   IN VARCHAR2)

SEND_IT_TASK	PROCEDURE	3	IS

SEND_IT_TASK	PROCEDURE	4	   subj         VARCHAR2 (255);

SEND_IT_TASK	PROCEDURE	5	   msg          CLOB;

SEND_IT_TASK	PROCEDURE	6	   files_list   VARCHAR (4000);

SEND_IT_TASK	PROCEDURE	7	   sender       VARCHAR2 (255);

SEND_IT_TASK	PROCEDURE	8	   text_prev    CLOB;

SEND_IT_TASK	PROCEDURE	9	   changes      CLOB;

SEND_IT_TASK	PROCEDURE	10	   v_text       CLOB;

SEND_IT_TASK	PROCEDURE	11	BEGIN

SEND_IT_TASK	PROCEDURE	12	   FOR t IN (SELECT t.*, lu - 1 / 86400 prev_lu

SEND_IT_TASK	PROCEDURE	13	               FROM tasks t

SEND_IT_TASK	PROCEDURE	14	              WHERE id = p_id)

SEND_IT_TASK	PROCEDURE	15	   LOOP

SEND_IT_TASK	PROCEDURE	16	      IF p_trg = 'ins'

SEND_IT_TASK	PROCEDURE	17	      THEN

SEND_IT_TASK	PROCEDURE	18	         subj := 'Inserted';

SEND_IT_TASK	PROCEDURE	19	      END IF;

SEND_IT_TASK	PROCEDURE	20	

SEND_IT_TASK	PROCEDURE	21	      IF p_trg = 'upd'

SEND_IT_TASK	PROCEDURE	22	      THEN

SEND_IT_TASK	PROCEDURE	23	         subj := 'Updated';

SEND_IT_TASK	PROCEDURE	24	      END IF;

SEND_IT_TASK	PROCEDURE	25	

SEND_IT_TASK	PROCEDURE	26	      IF p_trg = 'del'

SEND_IT_TASK	PROCEDURE	27	      THEN

SEND_IT_TASK	PROCEDURE	28	         subj := 'Deleted';

SEND_IT_TASK	PROCEDURE	29	      END IF;

SEND_IT_TASK	PROCEDURE	30	

SEND_IT_TASK	PROCEDURE	31	      IF p_trg <> 'ins'

SEND_IT_TASK	PROCEDURE	32	      THEN

SEND_IT_TASK	PROCEDURE	33	         SELECT text

SEND_IT_TASK	PROCEDURE	34	           INTO text_prev

SEND_IT_TASK	PROCEDURE	35	           FROM tasks AS OF TIMESTAMP t.prev_lu

SEND_IT_TASK	PROCEDURE	36	          WHERE id = t.id;

SEND_IT_TASK	PROCEDURE	37	

SEND_IT_TASK	PROCEDURE	38	         changes := compare_strings (text_prev, t.text);

SEND_IT_TASK	PROCEDURE	39	         v_text := text_prev;

SEND_IT_TASK	PROCEDURE	40	      ELSE

SEND_IT_TASK	PROCEDURE	41	         v_text := t.text;

SEND_IT_TASK	PROCEDURE	42	      END IF;

SEND_IT_TASK	PROCEDURE	43	

SEND_IT_TASK	PROCEDURE	44	      subj := subj || ' Task: ' || t.name;

SEND_IT_TASK	PROCEDURE	45	

SEND_IT_TASK	PROCEDURE	46	      FOR a IN (  SELECT *

SEND_IT_TASK	PROCEDURE	47	                    FROM tasks_files

SEND_IT_TASK	PROCEDURE	48	                   WHERE task_id = t.id

SEND_IT_TASK	PROCEDURE	49	                ORDER BY id)

SEND_IT_TASK	PROCEDURE	50	      LOOP

SEND_IT_TASK	PROCEDURE	51	         files_list :=

SEND_IT_TASK	PROCEDURE	52	               files_list

SEND_IT_TASK	PROCEDURE	53	            || '<tr><td colspan=5><a target=_blank href="https://ps.avk.ua/files/'

SEND_IT_TASK	PROCEDURE	54	            || a.fn

SEND_IT_TASK	PROCEDURE	55	            || '">'

SEND_IT_TASK	PROCEDURE	56	            || a.fn

SEND_IT_TASK	PROCEDURE	57	            || '</a></td></tr>';

SEND_IT_TASK	PROCEDURE	58	      END LOOP;

SEND_IT_TASK	PROCEDURE	59	

SEND_IT_TASK	PROCEDURE	60	      msg :=

SEND_IT_TASK	PROCEDURE	61	            '<table style="border-spacing:5px; border-collapse: separate;">

SEND_IT_TASK	PROCEDURE	62	             <tr style="background-color:lightgrey;text-align:center">

SEND_IT_TASK	PROCEDURE	63	             <td>% completed - '

SEND_IT_TASK	PROCEDURE	64	         || t.perc

SEND_IT_TASK	PROCEDURE	65	         || '</td>

SEND_IT_TASK	PROCEDURE	66	             <td>Start date - '

SEND_IT_TASK	PROCEDURE	67	         || TO_CHAR (t.dt_start, 'dd.mm.yyyy')

SEND_IT_TASK	PROCEDURE	68	         || '</td>

SEND_IT_TASK	PROCEDURE	69	             <td>End date - '

SEND_IT_TASK	PROCEDURE	70	         || TO_CHAR (t.dt_end, 'dd.mm.yyyy')

SEND_IT_TASK	PROCEDURE	71	         || '</td>

SEND_IT_TASK	PROCEDURE	72	             <td>Created - '

SEND_IT_TASK	PROCEDURE	73	         || TO_CHAR (t.created, 'dd.mm.yyyy hh24:mi:ss')

SEND_IT_TASK	PROCEDURE	74	         || '</td>

SEND_IT_TASK	PROCEDURE	75	             <td>Updated - '

SEND_IT_TASK	PROCEDURE	76	         || TO_CHAR (t.lu, 'dd.mm.yyyy hh24:mi:ss')

SEND_IT_TASK	PROCEDURE	77	         || '</td>

SEND_IT_TASK	PROCEDURE	78	             </tr>

SEND_IT_TASK	PROCEDURE	79	             <tr>

SEND_IT_TASK	PROCEDURE	80	             <td colspan=5>'

SEND_IT_TASK	PROCEDURE	81	         || v_text

SEND_IT_TASK	PROCEDURE	82	         || '</td>

SEND_IT_TASK	PROCEDURE	83	             </tr>

SEND_IT_TASK	PROCEDURE	84	             <tr style="background-color:lightgrey;text-align:center">

SEND_IT_TASK	PROCEDURE	85	             <td colspan=5>Files</td>

SEND_IT_TASK	PROCEDURE	86	             </tr>'

SEND_IT_TASK	PROCEDURE	87	         || files_list

SEND_IT_TASK	PROCEDURE	88	         || '<tr>

SEND_IT_TASK	PROCEDURE	89	             <tr style="background-color:lightgrey;text-align:center">

SEND_IT_TASK	PROCEDURE	90	             <td colspan=5>Changes</td>

SEND_IT_TASK	PROCEDURE	91	             </tr>

SEND_IT_TASK	PROCEDURE	92	             <td colspan=5>'

SEND_IT_TASK	PROCEDURE	93	         || changes

SEND_IT_TASK	PROCEDURE	94	         || '</td>

SEND_IT_TASK	PROCEDURE	95	             </tr>

SEND_IT_TASK	PROCEDURE	96	             </table>';

SEND_IT_TASK	PROCEDURE	97	

SEND_IT_TASK	PROCEDURE	98	

SEND_IT_TASK	PROCEDURE	99	      SELECT e_mail

SEND_IT_TASK	PROCEDURE	100	        INTO sender

SEND_IT_TASK	PROCEDURE	101	        FROM user_list

SEND_IT_TASK	PROCEDURE	102	       WHERE tn = t.lu_tn;

SEND_IT_TASK	PROCEDURE	103	

SEND_IT_TASK	PROCEDURE	104	      FOR a IN (SELECT e_mail

SEND_IT_TASK	PROCEDURE	105	                  FROM user_list

SEND_IT_TASK	PROCEDURE	106	                 WHERE is_admin = 1 AND tn <> t.lu_tn AND datauvol IS NULL)

SEND_IT_TASK	PROCEDURE	107	      LOOP

SEND_IT_TASK	PROCEDURE	108	         pr_sendmail (a.e_mail,

SEND_IT_TASK	PROCEDURE	109	                      subj,

SEND_IT_TASK	PROCEDURE	110	                      msg,

SEND_IT_TASK	PROCEDURE	111	                      NULL,

SEND_IT_TASK	PROCEDURE	112	                      NULL,

SEND_IT_TASK	PROCEDURE	113	                      NULL,

SEND_IT_TASK	PROCEDURE	114	                      sender);

SEND_IT_TASK	PROCEDURE	115	      END LOOP;

SEND_IT_TASK	PROCEDURE	116	   END LOOP;

SEND_IT_TASK	PROCEDURE	117	END;
SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	1	PROCEDURE        "SEND_BUD_RU_ZAY_R4A_TODAY"

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	2	IS

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	3	   msg                   VARCHAR2 (32767);

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	4	   subj                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	5	   addr                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	6	   total                 INTEGER;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	7	   too_many_BUD_RU_ZAY   INTEGER;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	8	   doc_type              VARCHAR2 (255);

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	9	   doc_type1             VARCHAR2 (255);

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	10	BEGIN

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	11	   FOR v_tu IN 0 .. 1

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	12	   LOOP

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	13	      IF v_tu = 1

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	14	      THEN

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	15	         doc_type := 'результаты переговоров';

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	16	         doc_type1 := 'результатов переговоров';

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	17	      ELSE

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	18	         doc_type := 'отчет по активности';

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	19	         doc_type1 := 'отчета по активности';

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	20	      END IF;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	21	

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	22	      FOR b

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	23	         IN (SELECT z.id,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	24	                    z.created_dt,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	25	                    TO_CHAR (created_dt, 'dd.mm.yyyy') created,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	26	                    creator,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	27	                    u.fio,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	28	                    u.e_mail

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	29	               FROM (SELECT z.id,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	30	                            z.tn creator,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	31	                            z.report_data,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	32	                            z.created created_dt,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	33	                            z.report_done,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	34	                            (SELECT accepted

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	35	                               FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	36	                              WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	37	                                    AND accept_order =

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	38	                                           DECODE (

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	39	                                              NVL (

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	40	                                                 (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	41	                                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	42	                                                   WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	43	                                                         AND accepted = 2),

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	44	                                                 0),

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	45	                                              0, (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	46	                                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	47	                                                   WHERE z_id = z.id),

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	48	                                              (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	49	                                                 FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	50	                                                WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	51	                                                      AND accepted = 2)))

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	52	                               z_current_accepted_id,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	53	                            (SELECT rep_accepted

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	54	                               FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	55	                              WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	56	                                    AND INN_not_ReportMA (tn) = 0

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	57	                                    AND accept_order =

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	58	                                           DECODE (

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	59	                                              NVL (

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	60	                                                 (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	61	                                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	62	                                                   WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	63	                                                         AND rep_accepted = 2

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	64	                                                         AND INN_not_ReportMA (

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	65	                                                                tn) = 0),

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	66	                                                 0),

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	67	                                              0, (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	68	                                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	69	                                                   WHERE z_id = z.id),

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	70	                                              (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	71	                                                 FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	72	                                                WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	73	                                                      AND rep_accepted = 2

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	74	                                                      AND INN_not_ReportMA (tn) =

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	75	                                                             0)))

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	76	                               current_accepted_id,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	77	                            (SELECT tn

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	78	                               FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	79	                              WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	80	                                    AND accept_order =

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	81	                                           (SELECT MIN (accept_order)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	82	                                              FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	83	                                             WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	84	                                                   AND rep_accepted = 0

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	85	                                                   AND INN_not_ReportMA (tn) =

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	86	                                                          0))

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	87	                               current_acceptor_tn

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	88	                       FROM bud_ru_zay z

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	89	                      WHERE     valid_no = 0

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	90	                            AND kat IN (SELECT id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	91	                                          FROM bud_ru_st_ras

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	92	                                         WHERE tu = v_tu)) z,

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	93	                    user_list u

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	94	              WHERE     1 = z.z_current_accepted_id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	95	                    AND z.report_data = TRUNC (SYSDATE)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	96	                    AND 0 = NVL (z.current_accepted_id, 0)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	97	                    AND NVL (z.report_done, 0) = 0

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	98	                    AND u.tn = z.creator

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	99	                    AND u.e_mail IS NOT NULL

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	100	                    AND u.datauvol IS NULL)

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	101	      LOOP

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	102	         subj :=

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	103	               'Напоминание о необходимости заполнить '

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	104	            || doc_type;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	105	

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	106	         msg :=

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	107	               'Здравствуйте '

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	108	            || b.fio

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	109	            || '.<br>'

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	110	            || 'сегодня последний день заполнения '

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	111	            || doc_type1

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	112	            || ' № '

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	113	            || b.id

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	114	            || ' от '

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	115	            || b.created;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	116	

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	117	         PR_SENDMAIL (b.e_mail, subj, msg);

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	118	      END LOOP;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	119	   END LOOP;

SEND_BUD_RU_ZAY_R4A_TODAY	PROCEDURE	120	END;
SEND_BUD_RU_ZAY_R4A	PROCEDURE	1	PROCEDURE        "SEND_BUD_RU_ZAY_R4A"

SEND_BUD_RU_ZAY_R4A	PROCEDURE	2	IS

SEND_BUD_RU_ZAY_R4A	PROCEDURE	3	   msg                   VARCHAR2 (32767);

SEND_BUD_RU_ZAY_R4A	PROCEDURE	4	   subj                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY_R4A	PROCEDURE	5	   addr                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY_R4A	PROCEDURE	6	   total                 INTEGER;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	7	   too_many_BUD_RU_ZAY   INTEGER;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	8	   doc_type              VARCHAR2 (255);

SEND_BUD_RU_ZAY_R4A	PROCEDURE	9	BEGIN

SEND_BUD_RU_ZAY_R4A	PROCEDURE	10	   FOR v_tu IN 0 .. 1

SEND_BUD_RU_ZAY_R4A	PROCEDURE	11	   LOOP

SEND_BUD_RU_ZAY_R4A	PROCEDURE	12	      IF v_tu = 1

SEND_BUD_RU_ZAY_R4A	PROCEDURE	13	      THEN

SEND_BUD_RU_ZAY_R4A	PROCEDURE	14	         doc_type := 'результаты переговоров';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	15	      ELSE

SEND_BUD_RU_ZAY_R4A	PROCEDURE	16	         doc_type := 'отчеты по активности';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	17	      END IF;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	18	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	19	      FOR b

SEND_BUD_RU_ZAY_R4A	PROCEDURE	20	         IN (  SELECT COUNT (*) c,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	21	                      TO_CHAR (MIN (created_dt), 'dd.mm.yyyy') min_dt,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	22	                      TO_CHAR (MAX (created_dt), 'dd.mm.yyyy') max_dt,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	23	                      current_acceptor_tn,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	24	                      u.fio,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	25	                      u.e_mail

SEND_BUD_RU_ZAY_R4A	PROCEDURE	26	                 FROM (SELECT DISTINCT

SEND_BUD_RU_ZAY_R4A	PROCEDURE	27	                              z.id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	28	                              NVL (current_accepted_id, 0) current_status,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	29	                              z.created_dt,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	30	                              current_acceptor_tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	31	                         FROM (SELECT z.id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	32	                                      z.report_data,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	33	                                      z.created created_dt,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	34	                                      z.report_done,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	35	                                      (SELECT accepted

SEND_BUD_RU_ZAY_R4A	PROCEDURE	36	                                         FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	37	                                        WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	38	                                              AND accept_order =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	39	                                                     DECODE (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	40	                                                        NVL (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	41	                                                           (SELECT MAX (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	42	                                                                      accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	43	                                                              FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	44	                                                             WHERE     z_id =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	45	                                                                          z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	46	                                                                   AND accepted =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	47	                                                                          2),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	48	                                                           0),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	49	                                                        0, (SELECT MAX (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	50	                                                                      accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	51	                                                              FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	52	                                                             WHERE z_id = z.id),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	53	                                                        (SELECT MAX (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	54	                                                                   accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	55	                                                           FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	56	                                                          WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	57	                                                                AND accepted = 2)))

SEND_BUD_RU_ZAY_R4A	PROCEDURE	58	                                         z_current_accepted_id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	59	                                      (SELECT rep_accepted

SEND_BUD_RU_ZAY_R4A	PROCEDURE	60	                                         FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	61	                                        WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	62	                                              AND INN_not_ReportMA (tn) = 0

SEND_BUD_RU_ZAY_R4A	PROCEDURE	63	                                              AND accept_order =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	64	                                                     DECODE (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	65	                                                        NVL (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	66	                                                           (SELECT MAX (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	67	                                                                      accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	68	                                                              FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	69	                                                             WHERE     z_id =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	70	                                                                          z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	71	                                                                   AND rep_accepted =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	72	                                                                          2

SEND_BUD_RU_ZAY_R4A	PROCEDURE	73	                                                                   AND INN_not_ReportMA (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	74	                                                                          tn) = 0),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	75	                                                           0),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	76	                                                        0, (SELECT MAX (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	77	                                                                      accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	78	                                                              FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	79	                                                             WHERE z_id = z.id),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	80	                                                        (SELECT MAX (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	81	                                                                   accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	82	                                                           FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	83	                                                          WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	84	                                                                AND rep_accepted =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	85	                                                                       2

SEND_BUD_RU_ZAY_R4A	PROCEDURE	86	                                                                AND INN_not_ReportMA (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	87	                                                                       tn) = 0)))

SEND_BUD_RU_ZAY_R4A	PROCEDURE	88	                                         current_accepted_id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	89	                                      (SELECT tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	90	                                         FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	91	                                        WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	92	                                              AND accept_order =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	93	                                                     (SELECT MIN (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	94	                                                        FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	95	                                                       WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	96	                                                             AND rep_accepted = 0

SEND_BUD_RU_ZAY_R4A	PROCEDURE	97	                                                             AND INN_not_ReportMA (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	98	                                                                    tn) = 0))

SEND_BUD_RU_ZAY_R4A	PROCEDURE	99	                                         current_acceptor_tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	100	                                 FROM bud_ru_zay z

SEND_BUD_RU_ZAY_R4A	PROCEDURE	101	                                WHERE     valid_no = 0

SEND_BUD_RU_ZAY_R4A	PROCEDURE	102	                                      AND kat IN (SELECT id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	103	                                                    FROM bud_ru_st_ras

SEND_BUD_RU_ZAY_R4A	PROCEDURE	104	                                                   WHERE tu = v_tu)) z

SEND_BUD_RU_ZAY_R4A	PROCEDURE	105	                        WHERE     1 = z_current_accepted_id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	106	                              AND report_data IS NOT NULL

SEND_BUD_RU_ZAY_R4A	PROCEDURE	107	                              AND 0 = NVL (current_accepted_id, 0)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	108	                              AND report_done = 1) z,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	109	                      user_list u

SEND_BUD_RU_ZAY_R4A	PROCEDURE	110	                WHERE     u.tn = z.current_acceptor_tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	111	                      AND u.e_mail IS NOT NULL

SEND_BUD_RU_ZAY_R4A	PROCEDURE	112	                      AND u.datauvol IS NULL

SEND_BUD_RU_ZAY_R4A	PROCEDURE	113	             GROUP BY z.current_acceptor_tn, u.fio, u.e_mail

SEND_BUD_RU_ZAY_R4A	PROCEDURE	114	             ORDER BY fio)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	115	      LOOP

SEND_BUD_RU_ZAY_R4A	PROCEDURE	116	         msg :=

SEND_BUD_RU_ZAY_R4A	PROCEDURE	117	               'На данный момент вашего подтверждения ожидают '

SEND_BUD_RU_ZAY_R4A	PROCEDURE	118	            || doc_type

SEND_BUD_RU_ZAY_R4A	PROCEDURE	119	            || ' <font style="color:red">(всего отчетов на подтверждение '

SEND_BUD_RU_ZAY_R4A	PROCEDURE	120	            || TO_CHAR (b.c)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	121	            || ')</font>:';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	122	         msg :=

SEND_BUD_RU_ZAY_R4A	PROCEDURE	123	               msg

SEND_BUD_RU_ZAY_R4A	PROCEDURE	124	            || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	125	         msg :=

SEND_BUD_RU_ZAY_R4A	PROCEDURE	126	               msg

SEND_BUD_RU_ZAY_R4A	PROCEDURE	127	            || '<tr style="font-weight:bold"><td>№</td><td>Дата</td><td>Инициатор</td><td>Адресат</td><td>Статья</td><td>Категория</td></tr>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	128	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	129	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	130	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	131	         FOR a

SEND_BUD_RU_ZAY_R4A	PROCEDURE	132	            IN (SELECT DISTINCT z.id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	133	                                NVL (current_accepted_id, 0) current_status,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	134	                                z.created_dt,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	135	                                current_acceptor_tn,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	136	                                creator,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	137	                                recipient,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	138	                                st_name,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	139	                                kat_name,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	140	                                created

SEND_BUD_RU_ZAY_R4A	PROCEDURE	141	                  FROM (SELECT z.id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	142	                               z.report_data,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	143	                               z.report_done,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	144	                               TO_CHAR (z.created, 'dd.mm.yyyy hh24:mi:ss')

SEND_BUD_RU_ZAY_R4A	PROCEDURE	145	                                  created,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	146	                               z.created created_dt,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	147	                               fn_getname (z.tn) creator,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	148	                               fn_getname (z.recipient) recipient,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	149	                               st.name st_name,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	150	                               kat.name kat_name,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	151	                               (SELECT accepted

SEND_BUD_RU_ZAY_R4A	PROCEDURE	152	                                  FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	153	                                 WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	154	                                       AND accept_order =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	155	                                              DECODE (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	156	                                                 NVL (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	157	                                                    (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	158	                                                       FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	159	                                                      WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	160	                                                            AND accepted = 2),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	161	                                                    0),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	162	                                                 0, (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	163	                                                       FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	164	                                                      WHERE z_id = z.id),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	165	                                                 (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	166	                                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	167	                                                   WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	168	                                                         AND accepted = 2)))

SEND_BUD_RU_ZAY_R4A	PROCEDURE	169	                                  z_current_accepted_id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	170	                               (SELECT rep_accepted

SEND_BUD_RU_ZAY_R4A	PROCEDURE	171	                                  FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	172	                                 WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	173	                                       AND INN_not_ReportMA (tn) = 0

SEND_BUD_RU_ZAY_R4A	PROCEDURE	174	                                       AND accept_order =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	175	                                              DECODE (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	176	                                                 NVL (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	177	                                                    (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	178	                                                       FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	179	                                                      WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	180	                                                            AND rep_accepted =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	181	                                                                   2

SEND_BUD_RU_ZAY_R4A	PROCEDURE	182	                                                            AND INN_not_ReportMA (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	183	                                                                   tn) = 0),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	184	                                                    0),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	185	                                                 0, (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	186	                                                       FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	187	                                                      WHERE z_id = z.id),

SEND_BUD_RU_ZAY_R4A	PROCEDURE	188	                                                 (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	189	                                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	190	                                                   WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	191	                                                         AND rep_accepted = 2

SEND_BUD_RU_ZAY_R4A	PROCEDURE	192	                                                         AND INN_not_ReportMA (

SEND_BUD_RU_ZAY_R4A	PROCEDURE	193	                                                                tn) = 0)))

SEND_BUD_RU_ZAY_R4A	PROCEDURE	194	                                  current_accepted_id,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	195	                               (SELECT tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	196	                                  FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	197	                                 WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	198	                                       AND accept_order =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	199	                                              (SELECT MIN (accept_order)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	200	                                                 FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY_R4A	PROCEDURE	201	                                                WHERE     z_id = z.id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	202	                                                      AND rep_accepted = 0

SEND_BUD_RU_ZAY_R4A	PROCEDURE	203	                                                      AND INN_not_ReportMA (tn) =

SEND_BUD_RU_ZAY_R4A	PROCEDURE	204	                                                             0))

SEND_BUD_RU_ZAY_R4A	PROCEDURE	205	                                  current_acceptor_tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	206	                          FROM bud_ru_zay z,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	207	                               BUD_RU_st_ras st,

SEND_BUD_RU_ZAY_R4A	PROCEDURE	208	                               BUD_RU_st_ras kat

SEND_BUD_RU_ZAY_R4A	PROCEDURE	209	                         WHERE     z.st = st.id(+)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	210	                               AND z.kat = kat.id(+)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	211	                               AND valid_no = 0

SEND_BUD_RU_ZAY_R4A	PROCEDURE	212	                               AND kat IN (SELECT id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	213	                                             FROM bud_ru_st_ras

SEND_BUD_RU_ZAY_R4A	PROCEDURE	214	                                            WHERE tu = v_tu)) z

SEND_BUD_RU_ZAY_R4A	PROCEDURE	215	                 WHERE     1 = z_current_accepted_id

SEND_BUD_RU_ZAY_R4A	PROCEDURE	216	                       AND report_data IS NOT NULL

SEND_BUD_RU_ZAY_R4A	PROCEDURE	217	                       AND 0 = NVL (current_accepted_id, 0)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	218	                       AND current_acceptor_tn = b.current_acceptor_tn

SEND_BUD_RU_ZAY_R4A	PROCEDURE	219	                       AND report_done = 1)

SEND_BUD_RU_ZAY_R4A	PROCEDURE	220	         LOOP

SEND_BUD_RU_ZAY_R4A	PROCEDURE	221	            IF NVL (LENGTH (msg), 0) < 10000

SEND_BUD_RU_ZAY_R4A	PROCEDURE	222	            THEN

SEND_BUD_RU_ZAY_R4A	PROCEDURE	223	               msg := msg || '<tr>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	224	               msg := msg || '<td>' || a.id || '</td>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	225	               msg := msg || '<td>' || a.created || '</td>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	226	               msg := msg || '<td>' || a.creator || '</td>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	227	               msg := msg || '<td>' || a.recipient || '</td>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	228	               msg := msg || '<td>' || a.st_name || '</td>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	229	               msg := msg || '<td>' || a.kat_name || '</td>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	230	               msg := msg || '</tr>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	231	               too_many_BUD_RU_ZAY := 0;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	232	            ELSE

SEND_BUD_RU_ZAY_R4A	PROCEDURE	233	               too_many_BUD_RU_ZAY := 1;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	234	            END IF;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	235	         END LOOP;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	236	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	237	         msg := msg || '</table>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	238	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	239	         subj := doc_type || ' на подтверждение';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	240	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	241	         IF too_many_BUD_RU_ZAY = 1

SEND_BUD_RU_ZAY_R4A	PROCEDURE	242	         THEN

SEND_BUD_RU_ZAY_R4A	PROCEDURE	243	            msg :=

SEND_BUD_RU_ZAY_R4A	PROCEDURE	244	                  msg

SEND_BUD_RU_ZAY_R4A	PROCEDURE	245	               || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SEND_BUD_RU_ZAY_R4A	PROCEDURE	246	         END IF;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	247	

SEND_BUD_RU_ZAY_R4A	PROCEDURE	248	         PR_SENDMAIL (b.e_mail, subj, msg);

SEND_BUD_RU_ZAY_R4A	PROCEDURE	249	      END LOOP;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	250	   END LOOP;

SEND_BUD_RU_ZAY_R4A	PROCEDURE	251	END;
SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	1	PROCEDURE        "SEND_BUD_RU_ZAY4REPORT_DATA"

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	2	IS

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	3	   msg                   VARCHAR2 (32767);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	4	   subj                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	5	   addr                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	6	   total                 INTEGER;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	7	   too_many_BUD_RU_ZAY   INTEGER;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	8	   doc_type              VARCHAR2 (255);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	9	   doc_type1             VARCHAR2 (255);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	10	BEGIN

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	11	   FOR v_tu IN 0 .. 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	12	   LOOP

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	13	      IF v_tu = 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	14	      THEN

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	15	         doc_type := 'цели на переговоры';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	16	         doc_type1 :=

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	17	            'внесения результатов переговоров';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	18	      ELSE

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	19	         doc_type :=

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	20	            'заявки на проведение активности';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	21	         doc_type1 := 'отчета';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	22	      END IF;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	23	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	24	      FOR b

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	25	         IN (  SELECT u.dpt_id, COUNT (*) c

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	26	                 FROM (SELECT BUD_RU_ZAY.*,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	27	                              NVL (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	28	                                 (SELECT accepted

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	29	                                    FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	30	                                   WHERE     z_id = bud_ru_zay.id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	31	                                         AND accept_order =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	32	                                                DECODE (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	33	                                                   NVL (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	34	                                                      (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	35	                                                         FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	36	                                                        WHERE     z_id =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	37	                                                                     bud_ru_zay.id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	38	                                                              AND accepted = 2),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	39	                                                      0),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	40	                                                   0, (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	41	                                                         FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	42	                                                        WHERE z_id =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	43	                                                                 bud_ru_zay.id),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	44	                                                   (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	45	                                                      FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	46	                                                     WHERE     z_id =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	47	                                                                  bud_ru_zay.id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	48	                                                           AND accepted = 2))),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	49	                                 0)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	50	                                 current_accepted_id,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	51	                              DECODE (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	52	                                 (SELECT COUNT (*)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	53	                                    FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	54	                                   WHERE z_id = BUD_RU_ZAY.id AND accepted = 2),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	55	                                 0, 0,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	56	                                 1)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	57	                                 deleted

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	58	                         FROM BUD_RU_ZAY

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	59	                        WHERE     valid_no = 0

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	60	                              AND kat IN (SELECT id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	61	                                            FROM bud_ru_st_ras

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	62	                                           WHERE tu = v_tu)) z,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	63	                      BUD_RU_st_ras st,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	64	                      BUD_RU_st_ras kat,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	65	                      user_list u

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	66	                WHERE     z.st = st.id(+)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	67	                      AND z.kat = kat.id(+)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	68	                      AND z.tn = u.tn

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	69	                      AND current_accepted_id = 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	70	                      AND deleted <> 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	71	                      AND report_data IS NULL

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	72	                      AND u.datauvol IS NULL

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	73	             GROUP BY u.dpt_id)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	74	      LOOP

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	75	         msg :=

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	76	               'На данный момент выставления срока '

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	77	            || doc_type1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	78	            || ' ожидают '

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	79	            || doc_type

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	80	            || ' <font style="color:red">(всего '

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	81	            || TO_CHAR (b.c)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	82	            || ')</font>:';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	83	         msg :=

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	84	               msg

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	85	            || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	86	         msg :=

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	87	               msg

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	88	            || '<tr style="font-weight:bold"><td>№</td><td>Дата</td><td>Инициатор</td><td>Адресат</td><td>Статья</td><td>Категория</td></tr>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	89	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	90	         FOR a

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	91	            IN (  SELECT z.current_accepted_id,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	92	                         z.deleted,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	93	                         z.report_data,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	94	                         z.id,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	95	                         TO_CHAR (z.created, 'dd.mm.yyyy hh24:mi:ss') created,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	96	                         fn_getname (z.tn) creator,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	97	                         z.tn creator_tn,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	98	                         z.recipient recipient_tn,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	99	                         fn_getname (z.recipient) recipient,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	100	                         NULL executor_name,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	101	                         NULL executor,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	102	                         st.name st_name,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	103	                         kat.name kat_name,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	104	                         u.dpt_id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	105	                    FROM (SELECT BUD_RU_ZAY.*,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	106	                                 NVL (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	107	                                    (SELECT accepted

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	108	                                       FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	109	                                      WHERE     z_id = bud_ru_zay.id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	110	                                            AND accept_order =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	111	                                                   DECODE (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	112	                                                      NVL (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	113	                                                         (SELECT MAX (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	114	                                                                    accept_order)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	115	                                                            FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	116	                                                           WHERE     z_id =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	117	                                                                        bud_ru_zay.id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	118	                                                                 AND accepted = 2),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	119	                                                         0),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	120	                                                      0, (SELECT MAX (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	121	                                                                    accept_order)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	122	                                                            FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	123	                                                           WHERE z_id =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	124	                                                                    bud_ru_zay.id),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	125	                                                      (SELECT MAX (accept_order)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	126	                                                         FROM bud_ru_zay_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	127	                                                        WHERE     z_id =

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	128	                                                                     bud_ru_zay.id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	129	                                                              AND accepted = 2))),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	130	                                    0)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	131	                                    current_accepted_id,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	132	                                 DECODE (

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	133	                                    (SELECT COUNT (*)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	134	                                       FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	135	                                      WHERE z_id = BUD_RU_ZAY.id AND accepted = 2),

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	136	                                    0, 0,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	137	                                    1)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	138	                                    deleted

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	139	                            FROM BUD_RU_ZAY

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	140	                           WHERE     valid_no = 0

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	141	                                 AND kat IN (SELECT id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	142	                                               FROM bud_ru_st_ras

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	143	                                              WHERE tu = v_tu)) z,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	144	                         BUD_RU_st_ras st,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	145	                         BUD_RU_st_ras kat,

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	146	                         user_list u

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	147	                   WHERE     z.st = st.id(+)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	148	                         AND z.kat = kat.id(+)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	149	                         AND z.tn = u.tn

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	150	                         AND u.dpt_id = b.dpt_id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	151	                         AND current_accepted_id = 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	152	                         AND deleted <> 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	153	                         AND report_data IS NULL

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	154	                         AND u.datauvol IS NULL

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	155	                ORDER BY z.created)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	156	         LOOP

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	157	            IF NVL (LENGTH (msg), 0) < 10000

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	158	            THEN

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	159	               msg := msg || '<tr>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	160	               msg := msg || '<td>' || a.id || '</td>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	161	               msg := msg || '<td>' || a.created || '</td>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	162	               msg := msg || '<td>' || a.creator || '</td>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	163	               msg := msg || '<td>' || a.recipient || '</td>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	164	               msg := msg || '<td>' || a.st_name || '</td>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	165	               msg := msg || '<td>' || a.kat_name || '</td>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	166	               msg := msg || '</tr>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	167	               too_many_BUD_RU_ZAY := 0;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	168	            ELSE

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	169	               too_many_BUD_RU_ZAY := 1;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	170	            END IF;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	171	         END LOOP;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	172	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	173	         msg := msg || '</table>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	174	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	175	         subj := doc_type || '. выставление срока ' || doc_type1;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	176	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	177	         IF too_many_BUD_RU_ZAY = 1

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	178	         THEN

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	179	            msg :=

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	180	                  msg

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	181	               || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	182	         END IF;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	183	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	184	         SELECT wm_concat (email)

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	185	           INTO addr

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	186	           FROM spdtree z

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	187	          WHERE     datauvol IS NULL

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	188	                AND dpt_id = b.dpt_id

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	189	                AND (is_traid_kk = 1 OR is_traid = 1);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	190	

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	191	         PR_SENDMAIL (addr, subj, msg);

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	192	      END LOOP;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	193	   END LOOP;

SEND_BUD_RU_ZAY4REPORT_DATA	PROCEDURE	194	END;
SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	1	PROCEDURE        "SEND_BUD_RU_ZAY4ACCEPT"

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	2	IS

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	3	   msg                   VARCHAR2 (32767);

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	4	   subj                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	5	   addr                  VARCHAR2 (32767);

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	6	   total                 INTEGER;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	7	   too_many_BUD_RU_ZAY   INTEGER;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	8	   doc_type              VARCHAR2 (255);

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	9	BEGIN

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	10	   FOR v_tu IN 0 .. 1

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	11	   LOOP

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	12	      IF v_tu = 1

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	13	      THEN

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	14	         doc_type := 'цели на переговоры';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	15	      ELSE

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	16	         doc_type :=

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	17	            'заявки на проведение активности';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	18	      END IF;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	19	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	20	      FOR b

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	21	         IN (  SELECT DISTINCT email, current_acceptor_tn

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	22	                 FROM (SELECT z.current_acceptor_tn, u.e_mail email, z.deleted

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	23	                         FROM (SELECT BUD_RU_ZAY.*,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	24	                                      (SELECT tn

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	25	                                         FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	26	                                        WHERE     z_id = BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	27	                                              AND accept_order =

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	28	                                                     (SELECT MIN (accept_order)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	29	                                                        FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	30	                                                       WHERE     z_id =

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	31	                                                                    BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	32	                                                             AND accepted = 0))

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	33	                                         current_acceptor_tn,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	34	                                      DECODE (

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	35	                                         (SELECT COUNT (*)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	36	                                            FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	37	                                           WHERE     z_id = BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	38	                                                 AND accepted = 2),

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	39	                                         0, 0,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	40	                                         1)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	41	                                         deleted

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	42	                                 FROM BUD_RU_ZAY

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	43	                                WHERE     valid_no = 0

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	44	                                      AND kat IN (SELECT id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	45	                                                    FROM bud_ru_st_ras

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	46	                                                   WHERE tu = v_tu)) z,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	47	                              user_list u

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	48	                        WHERE u.tn = z.current_acceptor_tn AND u.datauvol IS NULL)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	49	                WHERE     current_acceptor_tn IS NOT NULL

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	50	                      AND deleted <> 1

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	51	                      AND email IS NOT NULL

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	52	             ORDER BY email)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	53	      LOOP

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	54	         SELECT COUNT (*)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	55	           INTO total

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	56	           FROM BUD_RU_ZAY

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	57	          WHERE     (SELECT tn

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	58	                       FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	59	                      WHERE     z_id = BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	60	                            AND accept_order =

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	61	                                   (SELECT MIN (accept_order)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	62	                                      FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	63	                                     WHERE     z_id = BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	64	                                           AND accepted = 0)) =

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	65	                       b.current_acceptor_tn

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	66	                AND DECODE ( (SELECT COUNT (*)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	67	                                FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	68	                               WHERE Z_id = BUD_RU_ZAY.id AND accepted = 2),

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	69	                            0, 0,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	70	                            1) <> 1

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	71	                AND valid_no = 0

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	72	                AND kat IN (SELECT id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	73	                              FROM bud_ru_st_ras

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	74	                             WHERE tu = v_tu);

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	75	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	76	         msg :=

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	77	               'На данный момент вашего подтверждения ожидают '

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	78	            || doc_type

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	79	            || ' <font style="color:red">(всего '

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	80	            || TO_CHAR (total)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	81	            || ')</font>:';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	82	         msg :=

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	83	               msg

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	84	            || '<table style="font-size:8pt" border="1" cellpadding="2" cellspacing="0">';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	85	         msg :=

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	86	               msg

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	87	            || '<tr style="font-weight:bold"><td>№</td><td>Дата</td><td>Инициатор</td><td>Адресат</td><td>Статья</td><td>Категория</td></tr>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	88	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	89	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	90	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	91	         FOR a

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	92	            IN (SELECT BUD_RU_ZAY.id,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	93	                       TO_CHAR (BUD_RU_ZAY.created, 'dd.mm.yyyy hh24:mi:ss')

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	94	                          created,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	95	                       fn_getname (BUD_RU_ZAY.tn) creator,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	96	                       BUD_RU_ZAY.tn creator_tn,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	97	                       BUD_RU_ZAY.recipient recipient_tn,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	98	                       fn_getname (BUD_RU_ZAY.recipient) recipient,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	99	                       NULL executor_name,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	100	                       NULL executor,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	101	                       st.name st_name,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	102	                       kat.name kat_name

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	103	                  FROM BUD_RU_ZAY, BUD_RU_st_ras st, BUD_RU_st_ras kat

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	104	                 WHERE     BUD_RU_ZAY.st = st.id(+)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	105	                       AND BUD_RU_ZAY.kat = kat.id(+)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	106	                       AND (SELECT tn

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	107	                              FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	108	                             WHERE     z_id = BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	109	                                   AND accept_order =

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	110	                                          (SELECT MIN (accept_order)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	111	                                             FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	112	                                            WHERE     z_id = BUD_RU_ZAY.id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	113	                                                  AND accepted = 0)) =

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	114	                              b.current_acceptor_tn

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	115	                       AND DECODE (

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	116	                              (SELECT COUNT (*)

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	117	                                 FROM BUD_RU_ZAY_accept

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	118	                                WHERE z_id = BUD_RU_ZAY.id AND accepted = 2),

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	119	                              0, 0,

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	120	                              1) <> 1

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	121	                       AND valid_no = 0

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	122	                       AND kat IN (SELECT id

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	123	                                     FROM bud_ru_st_ras

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	124	                                    WHERE tu = v_tu))

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	125	         LOOP

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	126	            IF NVL (LENGTH (msg), 0) < 10000

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	127	            THEN

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	128	               msg := msg || '<tr>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	129	               msg := msg || '<td>' || a.id || '</td>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	130	               msg := msg || '<td>' || a.created || '</td>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	131	               msg := msg || '<td>' || a.creator || '</td>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	132	               msg := msg || '<td>' || a.recipient || '</td>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	133	               msg := msg || '<td>' || a.st_name || '</td>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	134	               msg := msg || '<td>' || a.kat_name || '</td>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	135	               msg := msg || '</tr>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	136	               too_many_BUD_RU_ZAY := 0;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	137	            ELSE

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	138	               too_many_BUD_RU_ZAY := 1;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	139	            END IF;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	140	         END LOOP;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	141	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	142	         msg := msg || '</table>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	143	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	144	         subj := doc_type || ' на подтверждение';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	145	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	146	         IF too_many_BUD_RU_ZAY = 1

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	147	         THEN

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	148	            msg :=

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	149	                  msg

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	150	               || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	151	         END IF;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	152	

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	153	         PR_SENDMAIL (b.email, subj, msg);

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	154	      END LOOP;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	155	   END LOOP;

SEND_BUD_RU_ZAY4ACCEPT	PROCEDURE	156	END;
SENDZAT2SUNOTZAP	PROCEDURE	1	PROCEDURE        "SENDZAT2SUNOTZAP" 

SENDZAT2SUNOTZAP	PROCEDURE	2	AS

SENDZAT2SUNOTZAP	PROCEDURE	3	   msg              VARCHAR (32767);

SENDZAT2SUNOTZAP	PROCEDURE	4	   i                INTEGER;

SENDZAT2SUNOTZAP	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDZAT2SUNOTZAP	PROCEDURE	6	   too_many_lines   INTEGER;

SENDZAT2SUNOTZAP	PROCEDURE	7	BEGIN

SENDZAT2SUNOTZAP	PROCEDURE	8	    SELECT mt || ' ' || y

SENDZAT2SUNOTZAP	PROCEDURE	9	     INTO dt

SENDZAT2SUNOTZAP	PROCEDURE	10	     FROM calendar

SENDZAT2SUNOTZAP	PROCEDURE	11	    WHERE data = ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -1);

SENDZAT2SUNOTZAP	PROCEDURE	12	

SENDZAT2SUNOTZAP	PROCEDURE	13	

SENDZAT2SUNOTZAP	PROCEDURE	14	   /*

SENDZAT2SUNOTZAP	PROCEDURE	15	   - 1-ое письмо: формировать 4-го числа месяца за предыдущий.

SENDZAT2SUNOTZAP	PROCEDURE	16	   Тема: "Список сотрудников, не заполнивших отчет о затратах".

SENDZAT2SUNOTZAP	PROCEDURE	17	   В письме в таблице выводить всех сотрудников,

SENDZAT2SUNOTZAP	PROCEDURE	18	   у которых (статус "ТОП" == false) И (дата увольнения == NULL) И (отчет не заполнен).

SENDZAT2SUNOTZAP	PROCEDURE	19	   Информция в виде:

SENDZAT2SUNOTZAP	PROCEDURE	20	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDZAT2SUNOTZAP	PROCEDURE	21	   Письмо высылать с группировкой информации по странам - на суперпользователей,

SENDZAT2SUNOTZAP	PROCEDURE	22	   у которых есть права доступа (выставлен чекбокс) в работе с веткой портала соответствующей страны.

SENDZAT2SUNOTZAP	PROCEDURE	23	   Т.е. в одном письме инфо по "открытым" для суперпользователя странам.

SENDZAT2SUNOTZAP	PROCEDURE	24	   */

SENDZAT2SUNOTZAP	PROCEDURE	25	   FOR a IN (SELECT *

SENDZAT2SUNOTZAP	PROCEDURE	26	               FROM user_list

SENDZAT2SUNOTZAP	PROCEDURE	27	              WHERE is_super = 1 AND datauvol IS NULL AND e_mail IS NOT NULL)

SENDZAT2SUNOTZAP	PROCEDURE	28	   LOOP

SENDZAT2SUNOTZAP	PROCEDURE	29	      i := 0;

SENDZAT2SUNOTZAP	PROCEDURE	30	      msg :=

SENDZAT2SUNOTZAP	PROCEDURE	31	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDZAT2SUNOTZAP	PROCEDURE	32	

SENDZAT2SUNOTZAP	PROCEDURE	33	      FOR b

SENDZAT2SUNOTZAP	PROCEDURE	34	         IN (  SELECT fio,

SENDZAT2SUNOTZAP	PROCEDURE	35	                      tn,

SENDZAT2SUNOTZAP	PROCEDURE	36	                      dpt_name,

SENDZAT2SUNOTZAP	PROCEDURE	37	                      region_name,

SENDZAT2SUNOTZAP	PROCEDURE	38	                      department_name,

SENDZAT2SUNOTZAP	PROCEDURE	39	                      parent_tn,

SENDZAT2SUNOTZAP	PROCEDURE	40	                      parent_fio

SENDZAT2SUNOTZAP	PROCEDURE	41	                 FROM (SELECT s.*,

SENDZAT2SUNOTZAP	PROCEDURE	42	                              pu.tn parent_tn,

SENDZAT2SUNOTZAP	PROCEDURE	43	                              pu.fio parent_fio,

SENDZAT2SUNOTZAP	PROCEDURE	44	                              NVL (

SENDZAT2SUNOTZAP	PROCEDURE	45	                                 (SELECT   NVL (TICKETS, 0)

SENDZAT2SUNOTZAP	PROCEDURE	46	                                         + NVL (PRESENT_COST, 0)

SENDZAT2SUNOTZAP	PROCEDURE	47	                                         + NVL (STATIONERY, 0)

SENDZAT2SUNOTZAP	PROCEDURE	48	                                         + NVL (MEDIA_ADVERT, 0)

SENDZAT2SUNOTZAP	PROCEDURE	49	                                         + NVL (MAIL, 0)

SENDZAT2SUNOTZAP	PROCEDURE	50	                                         + NVL (CONFERENCE, 0)

SENDZAT2SUNOTZAP	PROCEDURE	51	                                         + NVL (TRAINING_FOOD, 0)

SENDZAT2SUNOTZAP	PROCEDURE	52	                                         + NVL (ESV, 0)

SENDZAT2SUNOTZAP	PROCEDURE	53	                                         + NVL (SINGLE_TAX, 0)

SENDZAT2SUNOTZAP	PROCEDURE	54	                                         + NVL (ODOMETR_START, 0)

SENDZAT2SUNOTZAP	PROCEDURE	55	                                         + NVL (ODOMETR_END, 0)

SENDZAT2SUNOTZAP	PROCEDURE	56	                                         + NVL (ACCOUNT_PAYMENTS, 0)

SENDZAT2SUNOTZAP	PROCEDURE	57	                                         + NVL (MOBILE, 0)

SENDZAT2SUNOTZAP	PROCEDURE	58	                                    FROM zat_monthly m, calendar c

SENDZAT2SUNOTZAP	PROCEDURE	59	                                   WHERE     m.tn = s.tn

SENDZAT2SUNOTZAP	PROCEDURE	60	                                         AND c.DATA =

SENDZAT2SUNOTZAP	PROCEDURE	61	                                                ADD_MONTHS (

SENDZAT2SUNOTZAP	PROCEDURE	62	                                                   TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTZAP	PROCEDURE	63	                                                   -1)

SENDZAT2SUNOTZAP	PROCEDURE	64	                                         AND c.my = m.m

SENDZAT2SUNOTZAP	PROCEDURE	65	                                         AND c.y = m.y),

SENDZAT2SUNOTZAP	PROCEDURE	66	                                 0)

SENDZAT2SUNOTZAP	PROCEDURE	67	                                 zat_monthly_exist,

SENDZAT2SUNOTZAP	PROCEDURE	68	                              (SELECT COUNT (*)

SENDZAT2SUNOTZAP	PROCEDURE	69	                                 FROM zat_daily_car

SENDZAT2SUNOTZAP	PROCEDURE	70	                                WHERE     tn = s.tn

SENDZAT2SUNOTZAP	PROCEDURE	71	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2SUNOTZAP	PROCEDURE	72	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTZAP	PROCEDURE	73	                                                         -1))

SENDZAT2SUNOTZAP	PROCEDURE	74	                                 zat_daily_car_count,

SENDZAT2SUNOTZAP	PROCEDURE	75	                              (SELECT COUNT (*)

SENDZAT2SUNOTZAP	PROCEDURE	76	                                 FROM zat_daily_trip

SENDZAT2SUNOTZAP	PROCEDURE	77	                                WHERE     tn = s.tn

SENDZAT2SUNOTZAP	PROCEDURE	78	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2SUNOTZAP	PROCEDURE	79	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTZAP	PROCEDURE	80	                                                         -1))

SENDZAT2SUNOTZAP	PROCEDURE	81	                                 zat_daily_trip_count

SENDZAT2SUNOTZAP	PROCEDURE	82	                         FROM user_list s, parents p, user_list pu

SENDZAT2SUNOTZAP	PROCEDURE	83	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDZAT2SUNOTZAP	PROCEDURE	84	                                                 FROM dpt_tn

SENDZAT2SUNOTZAP	PROCEDURE	85	                                                WHERE tn = a.tn)

SENDZAT2SUNOTZAP	PROCEDURE	86	                              AND NVL (s.is_top, 0) <> 1

SENDZAT2SUNOTZAP	PROCEDURE	87	                              AND s.datauvol IS NULL

SENDZAT2SUNOTZAP	PROCEDURE	88	                              AND s.is_spd = 1

SENDZAT2SUNOTZAP	PROCEDURE	89	                              AND s.tn = p.tn(+)

SENDZAT2SUNOTZAP	PROCEDURE	90	                              AND p.parent = pu.tn(+)) z

SENDZAT2SUNOTZAP	PROCEDURE	91	                WHERE   zat_daily_car_count

SENDZAT2SUNOTZAP	PROCEDURE	92	                      + zat_daily_trip_count

SENDZAT2SUNOTZAP	PROCEDURE	93	                      + zat_monthly_exist = 0

SENDZAT2SUNOTZAP	PROCEDURE	94	             ORDER BY dpt_name, fio)

SENDZAT2SUNOTZAP	PROCEDURE	95	      LOOP

SENDZAT2SUNOTZAP	PROCEDURE	96	         IF NVL (LENGTH (msg), 0) < 10000

SENDZAT2SUNOTZAP	PROCEDURE	97	         THEN

SENDZAT2SUNOTZAP	PROCEDURE	98	            i := i + 1;

SENDZAT2SUNOTZAP	PROCEDURE	99	            msg :=

SENDZAT2SUNOTZAP	PROCEDURE	100	                  msg

SENDZAT2SUNOTZAP	PROCEDURE	101	               || '<tr><td>'

SENDZAT2SUNOTZAP	PROCEDURE	102	               || b.fio

SENDZAT2SUNOTZAP	PROCEDURE	103	               || '</td>'

SENDZAT2SUNOTZAP	PROCEDURE	104	               || '<td>'

SENDZAT2SUNOTZAP	PROCEDURE	105	               || b.dpt_name

SENDZAT2SUNOTZAP	PROCEDURE	106	               || '</td>'

SENDZAT2SUNOTZAP	PROCEDURE	107	               || '<td>'

SENDZAT2SUNOTZAP	PROCEDURE	108	               || b.region_name

SENDZAT2SUNOTZAP	PROCEDURE	109	               || '</td>'

SENDZAT2SUNOTZAP	PROCEDURE	110	               || '<td>'

SENDZAT2SUNOTZAP	PROCEDURE	111	               || b.department_name

SENDZAT2SUNOTZAP	PROCEDURE	112	               || '</td>'

SENDZAT2SUNOTZAP	PROCEDURE	113	               || '<td>'

SENDZAT2SUNOTZAP	PROCEDURE	114	               || b.parent_fio

SENDZAT2SUNOTZAP	PROCEDURE	115	               || '</td></tr>';

SENDZAT2SUNOTZAP	PROCEDURE	116	            too_many_lines := 0;

SENDZAT2SUNOTZAP	PROCEDURE	117	         ELSE

SENDZAT2SUNOTZAP	PROCEDURE	118	            too_many_lines := 1;

SENDZAT2SUNOTZAP	PROCEDURE	119	         END IF;

SENDZAT2SUNOTZAP	PROCEDURE	120	      END LOOP;

SENDZAT2SUNOTZAP	PROCEDURE	121	

SENDZAT2SUNOTZAP	PROCEDURE	122	      msg := msg || '</table>';

SENDZAT2SUNOTZAP	PROCEDURE	123	

SENDZAT2SUNOTZAP	PROCEDURE	124	      IF too_many_lines = 1

SENDZAT2SUNOTZAP	PROCEDURE	125	      THEN

SENDZAT2SUNOTZAP	PROCEDURE	126	         msg :=

SENDZAT2SUNOTZAP	PROCEDURE	127	               msg

SENDZAT2SUNOTZAP	PROCEDURE	128	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDZAT2SUNOTZAP	PROCEDURE	129	      END IF;

SENDZAT2SUNOTZAP	PROCEDURE	130	

SENDZAT2SUNOTZAP	PROCEDURE	131	      IF i > 0

SENDZAT2SUNOTZAP	PROCEDURE	132	      THEN

SENDZAT2SUNOTZAP	PROCEDURE	133	         /*PR_SENDMAIL (

SENDZAT2SUNOTZAP	PROCEDURE	134	            'dmytro.kalashnikov@kiev.avk.ua',

SENDZAT2SUNOTZAP	PROCEDURE	135	               'Список сотрудников, не заполнивших отчет о затратах'

SENDZAT2SUNOTZAP	PROCEDURE	136	            || ', тестовое письмо для: '

SENDZAT2SUNOTZAP	PROCEDURE	137	            || a.fio

SENDZAT2SUNOTZAP	PROCEDURE	138	            || ' '

SENDZAT2SUNOTZAP	PROCEDURE	139	            || a.e_mail,

SENDZAT2SUNOTZAP	PROCEDURE	140	            msg);*/

SENDZAT2SUNOTZAP	PROCEDURE	141	         PR_SENDMAIL (

SENDZAT2SUNOTZAP	PROCEDURE	142	            a.e_mail,

SENDZAT2SUNOTZAP	PROCEDURE	143	               'Список сотрудников, не заполнивших отчет о затратах за '

SENDZAT2SUNOTZAP	PROCEDURE	144	            || dt,

SENDZAT2SUNOTZAP	PROCEDURE	145	            msg);

SENDZAT2SUNOTZAP	PROCEDURE	146	      END IF;

SENDZAT2SUNOTZAP	PROCEDURE	147	   END LOOP;

SENDZAT2SUNOTZAP	PROCEDURE	148	END;
SENDZAT2SUNOTACCEPTED	PROCEDURE	1	PROCEDURE        "SENDZAT2SUNOTACCEPTED" 

SENDZAT2SUNOTACCEPTED	PROCEDURE	2	AS

SENDZAT2SUNOTACCEPTED	PROCEDURE	3	   msg              VARCHAR (32767);

SENDZAT2SUNOTACCEPTED	PROCEDURE	4	   i                INTEGER;

SENDZAT2SUNOTACCEPTED	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDZAT2SUNOTACCEPTED	PROCEDURE	6	   too_many_lines   INTEGER;

SENDZAT2SUNOTACCEPTED	PROCEDURE	7	BEGIN

SENDZAT2SUNOTACCEPTED	PROCEDURE	8	    SELECT mt || ' ' || y

SENDZAT2SUNOTACCEPTED	PROCEDURE	9	     INTO dt

SENDZAT2SUNOTACCEPTED	PROCEDURE	10	     FROM calendar

SENDZAT2SUNOTACCEPTED	PROCEDURE	11	    WHERE data = ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -1);

SENDZAT2SUNOTACCEPTED	PROCEDURE	12	

SENDZAT2SUNOTACCEPTED	PROCEDURE	13	

SENDZAT2SUNOTACCEPTED	PROCEDURE	14	   /*

SENDZAT2SUNOTACCEPTED	PROCEDURE	15	   - 2-е письмо: формировать 6-го числа месяца за предыдущий.

SENDZAT2SUNOTACCEPTED	PROCEDURE	16	   Тема: "Список сотрудников, у которых отчет не принят руководителем".

SENDZAT2SUNOTACCEPTED	PROCEDURE	17	   В письме в таблице выводить всех сотрудников,

SENDZAT2SUNOTACCEPTED	PROCEDURE	18	   у которых статус ("ТОП" == false) И (дата увольнения == NULL) И (отчет заполнен) И (отчет не  принят руководителем) .

SENDZAT2SUNOTACCEPTED	PROCEDURE	19	   Информция в виде:

SENDZAT2SUNOTACCEPTED	PROCEDURE	20	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDZAT2SUNOTACCEPTED	PROCEDURE	21	   Письмо высылать с группировкой информации по странам - на суперпользователей,

SENDZAT2SUNOTACCEPTED	PROCEDURE	22	   у которых есть права доступа (выставлен чекбокс) в работе с веткой портала соответствующей страны.

SENDZAT2SUNOTACCEPTED	PROCEDURE	23	   Т.е. в одном письме инфо по "открытым" для суперпользователя странам.

SENDZAT2SUNOTACCEPTED	PROCEDURE	24	   */

SENDZAT2SUNOTACCEPTED	PROCEDURE	25	   FOR a IN (SELECT *

SENDZAT2SUNOTACCEPTED	PROCEDURE	26	               FROM user_list

SENDZAT2SUNOTACCEPTED	PROCEDURE	27	              WHERE is_super = 1 AND datauvol IS NULL AND e_mail IS NOT NULL)

SENDZAT2SUNOTACCEPTED	PROCEDURE	28	   LOOP

SENDZAT2SUNOTACCEPTED	PROCEDURE	29	      i := 0;

SENDZAT2SUNOTACCEPTED	PROCEDURE	30	      msg :=

SENDZAT2SUNOTACCEPTED	PROCEDURE	31	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDZAT2SUNOTACCEPTED	PROCEDURE	32	

SENDZAT2SUNOTACCEPTED	PROCEDURE	33	      FOR b

SENDZAT2SUNOTACCEPTED	PROCEDURE	34	         IN (  SELECT fio,

SENDZAT2SUNOTACCEPTED	PROCEDURE	35	                      tn,

SENDZAT2SUNOTACCEPTED	PROCEDURE	36	                      dpt_name,

SENDZAT2SUNOTACCEPTED	PROCEDURE	37	                      region_name,

SENDZAT2SUNOTACCEPTED	PROCEDURE	38	                      department_name,

SENDZAT2SUNOTACCEPTED	PROCEDURE	39	                      parent_tn,

SENDZAT2SUNOTACCEPTED	PROCEDURE	40	                      parent_fio

SENDZAT2SUNOTACCEPTED	PROCEDURE	41	                 FROM (SELECT s.*,

SENDZAT2SUNOTACCEPTED	PROCEDURE	42	                              pu.tn parent_tn,

SENDZAT2SUNOTACCEPTED	PROCEDURE	43	                              pu.fio parent_fio,

SENDZAT2SUNOTACCEPTED	PROCEDURE	44	                              NVL (

SENDZAT2SUNOTACCEPTED	PROCEDURE	45	                                 (SELECT is_accepted

SENDZAT2SUNOTACCEPTED	PROCEDURE	46	                                    FROM zat_monthly m, calendar c

SENDZAT2SUNOTACCEPTED	PROCEDURE	47	                                   WHERE     m.tn = s.tn

SENDZAT2SUNOTACCEPTED	PROCEDURE	48	                                         AND c.DATA =

SENDZAT2SUNOTACCEPTED	PROCEDURE	49	                                                ADD_MONTHS (

SENDZAT2SUNOTACCEPTED	PROCEDURE	50	                                                   TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTACCEPTED	PROCEDURE	51	                                                   -1)

SENDZAT2SUNOTACCEPTED	PROCEDURE	52	                                         AND c.my = m.m

SENDZAT2SUNOTACCEPTED	PROCEDURE	53	                                         AND c.y = m.y),

SENDZAT2SUNOTACCEPTED	PROCEDURE	54	                                 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	55	                                 zat_monthly_is_accepted,

SENDZAT2SUNOTACCEPTED	PROCEDURE	56	                              NVL (

SENDZAT2SUNOTACCEPTED	PROCEDURE	57	                                 (SELECT   NVL (TICKETS, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	58	                                         + NVL (PRESENT_COST, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	59	                                         + NVL (STATIONERY, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	60	                                         + NVL (MEDIA_ADVERT, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	61	                                         + NVL (MAIL, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	62	                                         + NVL (CONFERENCE, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	63	                                         + NVL (TRAINING_FOOD, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	64	                                         + NVL (ESV, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	65	                                         + NVL (SINGLE_TAX, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	66	                                         + NVL (ODOMETR_START, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	67	                                         + NVL (ODOMETR_END, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	68	                                         + NVL (ACCOUNT_PAYMENTS, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	69	                                         + NVL (MOBILE, 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	70	                                    FROM zat_monthly m, calendar c

SENDZAT2SUNOTACCEPTED	PROCEDURE	71	                                   WHERE     m.tn = s.tn

SENDZAT2SUNOTACCEPTED	PROCEDURE	72	                                         AND c.DATA =

SENDZAT2SUNOTACCEPTED	PROCEDURE	73	                                                ADD_MONTHS (

SENDZAT2SUNOTACCEPTED	PROCEDURE	74	                                                   TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTACCEPTED	PROCEDURE	75	                                                   -1)

SENDZAT2SUNOTACCEPTED	PROCEDURE	76	                                         AND c.my = m.m

SENDZAT2SUNOTACCEPTED	PROCEDURE	77	                                         AND c.y = m.y),

SENDZAT2SUNOTACCEPTED	PROCEDURE	78	                                 0)

SENDZAT2SUNOTACCEPTED	PROCEDURE	79	                                 zat_monthly_exist,

SENDZAT2SUNOTACCEPTED	PROCEDURE	80	                              (SELECT COUNT (*)

SENDZAT2SUNOTACCEPTED	PROCEDURE	81	                                 FROM zat_daily_car

SENDZAT2SUNOTACCEPTED	PROCEDURE	82	                                WHERE     tn = s.tn

SENDZAT2SUNOTACCEPTED	PROCEDURE	83	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2SUNOTACCEPTED	PROCEDURE	84	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTACCEPTED	PROCEDURE	85	                                                         -1))

SENDZAT2SUNOTACCEPTED	PROCEDURE	86	                                 zat_daily_car_count,

SENDZAT2SUNOTACCEPTED	PROCEDURE	87	                              (SELECT COUNT (*)

SENDZAT2SUNOTACCEPTED	PROCEDURE	88	                                 FROM zat_daily_trip

SENDZAT2SUNOTACCEPTED	PROCEDURE	89	                                WHERE     tn = s.tn

SENDZAT2SUNOTACCEPTED	PROCEDURE	90	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2SUNOTACCEPTED	PROCEDURE	91	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2SUNOTACCEPTED	PROCEDURE	92	                                                         -1))

SENDZAT2SUNOTACCEPTED	PROCEDURE	93	                                 zat_daily_trip_count

SENDZAT2SUNOTACCEPTED	PROCEDURE	94	                         FROM user_list s, parents p, user_list pu

SENDZAT2SUNOTACCEPTED	PROCEDURE	95	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDZAT2SUNOTACCEPTED	PROCEDURE	96	                                                 FROM dpt_tn

SENDZAT2SUNOTACCEPTED	PROCEDURE	97	                                                WHERE tn = a.tn)

SENDZAT2SUNOTACCEPTED	PROCEDURE	98	                              AND NVL (s.is_top, 0) <> 1

SENDZAT2SUNOTACCEPTED	PROCEDURE	99	                              AND s.datauvol IS NULL

SENDZAT2SUNOTACCEPTED	PROCEDURE	100	                              AND s.is_spd = 1

SENDZAT2SUNOTACCEPTED	PROCEDURE	101	                              AND s.tn = p.tn(+)

SENDZAT2SUNOTACCEPTED	PROCEDURE	102	                              AND p.parent = pu.tn(+)) z

SENDZAT2SUNOTACCEPTED	PROCEDURE	103	                WHERE /*zat_daily_car_count

SENDZAT2SUNOTACCEPTED	PROCEDURE	104	                    + zat_daily_trip_count

SENDZAT2SUNOTACCEPTED	PROCEDURE	105	                    + zat_monthly_exist <> 0

SENDZAT2SUNOTACCEPTED	PROCEDURE	106	                AND */

SENDZAT2SUNOTACCEPTED	PROCEDURE	107	                     zat_monthly_is_accepted = 0

SENDZAT2SUNOTACCEPTED	PROCEDURE	108	             ORDER BY dpt_name, fio)

SENDZAT2SUNOTACCEPTED	PROCEDURE	109	      LOOP

SENDZAT2SUNOTACCEPTED	PROCEDURE	110	         IF NVL (LENGTH (msg), 0) < 10000

SENDZAT2SUNOTACCEPTED	PROCEDURE	111	         THEN

SENDZAT2SUNOTACCEPTED	PROCEDURE	112	            i := i + 1;

SENDZAT2SUNOTACCEPTED	PROCEDURE	113	            msg :=

SENDZAT2SUNOTACCEPTED	PROCEDURE	114	                  msg

SENDZAT2SUNOTACCEPTED	PROCEDURE	115	               || '<tr><td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	116	               || b.fio

SENDZAT2SUNOTACCEPTED	PROCEDURE	117	               || '</td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	118	               || '<td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	119	               || b.dpt_name

SENDZAT2SUNOTACCEPTED	PROCEDURE	120	               || '</td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	121	               || '<td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	122	               || b.region_name

SENDZAT2SUNOTACCEPTED	PROCEDURE	123	               || '</td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	124	               || '<td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	125	               || b.department_name

SENDZAT2SUNOTACCEPTED	PROCEDURE	126	               || '</td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	127	               || '<td>'

SENDZAT2SUNOTACCEPTED	PROCEDURE	128	               || b.parent_fio

SENDZAT2SUNOTACCEPTED	PROCEDURE	129	               || '</td></tr>';

SENDZAT2SUNOTACCEPTED	PROCEDURE	130	            too_many_lines := 0;

SENDZAT2SUNOTACCEPTED	PROCEDURE	131	         ELSE

SENDZAT2SUNOTACCEPTED	PROCEDURE	132	            too_many_lines := 1;

SENDZAT2SUNOTACCEPTED	PROCEDURE	133	         END IF;

SENDZAT2SUNOTACCEPTED	PROCEDURE	134	      END LOOP;

SENDZAT2SUNOTACCEPTED	PROCEDURE	135	

SENDZAT2SUNOTACCEPTED	PROCEDURE	136	      msg := msg || '</table>';

SENDZAT2SUNOTACCEPTED	PROCEDURE	137	

SENDZAT2SUNOTACCEPTED	PROCEDURE	138	      IF too_many_lines = 1

SENDZAT2SUNOTACCEPTED	PROCEDURE	139	      THEN

SENDZAT2SUNOTACCEPTED	PROCEDURE	140	         msg :=

SENDZAT2SUNOTACCEPTED	PROCEDURE	141	               msg

SENDZAT2SUNOTACCEPTED	PROCEDURE	142	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDZAT2SUNOTACCEPTED	PROCEDURE	143	      END IF;

SENDZAT2SUNOTACCEPTED	PROCEDURE	144	

SENDZAT2SUNOTACCEPTED	PROCEDURE	145	      IF i > 0

SENDZAT2SUNOTACCEPTED	PROCEDURE	146	      THEN

SENDZAT2SUNOTACCEPTED	PROCEDURE	147	         /*PR_SENDMAIL (

SENDZAT2SUNOTACCEPTED	PROCEDURE	148	            'dmytro.kalashnikov@kiev.avk.ua',

SENDZAT2SUNOTACCEPTED	PROCEDURE	149	               'Список сотрудников, у которых отчет не принят руководителем'

SENDZAT2SUNOTACCEPTED	PROCEDURE	150	            || ', тестовое письмо для: '

SENDZAT2SUNOTACCEPTED	PROCEDURE	151	            || a.fio

SENDZAT2SUNOTACCEPTED	PROCEDURE	152	            || ' '

SENDZAT2SUNOTACCEPTED	PROCEDURE	153	            || a.e_mail,

SENDZAT2SUNOTACCEPTED	PROCEDURE	154	            msg);*/

SENDZAT2SUNOTACCEPTED	PROCEDURE	155	         PR_SENDMAIL (

SENDZAT2SUNOTACCEPTED	PROCEDURE	156	            a.e_mail,

SENDZAT2SUNOTACCEPTED	PROCEDURE	157	               'Список сотрудников, у которых отчет о затратах за '

SENDZAT2SUNOTACCEPTED	PROCEDURE	158	            || dt

SENDZAT2SUNOTACCEPTED	PROCEDURE	159	            || ' не принят руководителем',

SENDZAT2SUNOTACCEPTED	PROCEDURE	160	            msg);

SENDZAT2SUNOTACCEPTED	PROCEDURE	161	      END IF;

SENDZAT2SUNOTACCEPTED	PROCEDURE	162	   END LOOP;

SENDZAT2SUNOTACCEPTED	PROCEDURE	163	END;
SENDZAT2PANOTZAP	PROCEDURE	1	PROCEDURE        "SENDZAT2PANOTZAP" 

SENDZAT2PANOTZAP	PROCEDURE	2	AS

SENDZAT2PANOTZAP	PROCEDURE	3	   msg              VARCHAR (32767);

SENDZAT2PANOTZAP	PROCEDURE	4	   i                INTEGER;

SENDZAT2PANOTZAP	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDZAT2PANOTZAP	PROCEDURE	6	   too_many_lines   INTEGER;

SENDZAT2PANOTZAP	PROCEDURE	7	BEGIN

SENDZAT2PANOTZAP	PROCEDURE	8	    SELECT mt || ' ' || y

SENDZAT2PANOTZAP	PROCEDURE	9	     INTO dt

SENDZAT2PANOTZAP	PROCEDURE	10	     FROM calendar

SENDZAT2PANOTZAP	PROCEDURE	11	    WHERE data = ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -1);

SENDZAT2PANOTZAP	PROCEDURE	12	

SENDZAT2PANOTZAP	PROCEDURE	13	

SENDZAT2PANOTZAP	PROCEDURE	14	   /*

SENDZAT2PANOTZAP	PROCEDURE	15	   - 1-ое письмо: формировать 4-го числа месяца за предыдущий.

SENDZAT2PANOTZAP	PROCEDURE	16	   Тема: "Список сотрудников, не заполнивших отчет о затратах".

SENDZAT2PANOTZAP	PROCEDURE	17	   В письме в таблице выводить всех сотрудников,

SENDZAT2PANOTZAP	PROCEDURE	18	   у которых (статус "ТОП" == false) И (дата увольнения == NULL) И (отчет не заполнен).

SENDZAT2PANOTZAP	PROCEDURE	19	   Информция в виде:

SENDZAT2PANOTZAP	PROCEDURE	20	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDZAT2PANOTZAP	PROCEDURE	21	   Письмо высылать на руководителей,

SENDZAT2PANOTZAP	PROCEDURE	22	   в котором будет отчет о "должниках" по заполнению и приему отчетов.

SENDZAT2PANOTZAP	PROCEDURE	23	   Принцип: сотрудник получает письмо по всем своим подчиненным "до основания структуры".

SENDZAT2PANOTZAP	PROCEDURE	24	   */

SENDZAT2PANOTZAP	PROCEDURE	25	   FOR a

SENDZAT2PANOTZAP	PROCEDURE	26	      IN (  SELECT u.dpt_name,

SENDZAT2PANOTZAP	PROCEDURE	27	                   u.fio,

SENDZAT2PANOTZAP	PROCEDURE	28	                   u.tn,

SENDZAT2PANOTZAP	PROCEDURE	29	                   u.e_mail

SENDZAT2PANOTZAP	PROCEDURE	30	              FROM user_list u,

SENDZAT2PANOTZAP	PROCEDURE	31	                   (SELECT DISTINCT parent FROM parents) p,

SENDZAT2PANOTZAP	PROCEDURE	32	                   (SELECT DISTINCT f.master

SENDZAT2PANOTZAP	PROCEDURE	33	                      FROM full f, user_list u

SENDZAT2PANOTZAP	PROCEDURE	34	                     WHERE     f.slave = u.tn

SENDZAT2PANOTZAP	PROCEDURE	35	                           AND u.datauvol IS NULL

SENDZAT2PANOTZAP	PROCEDURE	36	                           AND NVL (u.is_top, 0) <> 1) m

SENDZAT2PANOTZAP	PROCEDURE	37	             WHERE     u.tn = p.parent

SENDZAT2PANOTZAP	PROCEDURE	38	                   AND u.datauvol IS NULL

SENDZAT2PANOTZAP	PROCEDURE	39	                   AND u.e_mail IS NOT NULL

SENDZAT2PANOTZAP	PROCEDURE	40	                   AND u.tn = m.master

SENDZAT2PANOTZAP	PROCEDURE	41	          ORDER BY u.dpt_name, u.fio)

SENDZAT2PANOTZAP	PROCEDURE	42	   LOOP

SENDZAT2PANOTZAP	PROCEDURE	43	      i := 0;

SENDZAT2PANOTZAP	PROCEDURE	44	      msg :=

SENDZAT2PANOTZAP	PROCEDURE	45	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDZAT2PANOTZAP	PROCEDURE	46	

SENDZAT2PANOTZAP	PROCEDURE	47	      FOR b

SENDZAT2PANOTZAP	PROCEDURE	48	         IN (  SELECT fio,

SENDZAT2PANOTZAP	PROCEDURE	49	                      tn,

SENDZAT2PANOTZAP	PROCEDURE	50	                      dpt_name,

SENDZAT2PANOTZAP	PROCEDURE	51	                      region_name,

SENDZAT2PANOTZAP	PROCEDURE	52	                      department_name,

SENDZAT2PANOTZAP	PROCEDURE	53	                      parent_tn,

SENDZAT2PANOTZAP	PROCEDURE	54	                      parent_fio

SENDZAT2PANOTZAP	PROCEDURE	55	                 FROM (SELECT s.*,

SENDZAT2PANOTZAP	PROCEDURE	56	                              pu.tn parent_tn,

SENDZAT2PANOTZAP	PROCEDURE	57	                              pu.fio parent_fio,

SENDZAT2PANOTZAP	PROCEDURE	58	                              NVL (

SENDZAT2PANOTZAP	PROCEDURE	59	                                 (SELECT   NVL (TICKETS, 0)

SENDZAT2PANOTZAP	PROCEDURE	60	                                         + NVL (PRESENT_COST, 0)

SENDZAT2PANOTZAP	PROCEDURE	61	                                         + NVL (STATIONERY, 0)

SENDZAT2PANOTZAP	PROCEDURE	62	                                         + NVL (MEDIA_ADVERT, 0)

SENDZAT2PANOTZAP	PROCEDURE	63	                                         + NVL (MAIL, 0)

SENDZAT2PANOTZAP	PROCEDURE	64	                                         + NVL (CONFERENCE, 0)

SENDZAT2PANOTZAP	PROCEDURE	65	                                         + NVL (TRAINING_FOOD, 0)

SENDZAT2PANOTZAP	PROCEDURE	66	                                         + NVL (ESV, 0)

SENDZAT2PANOTZAP	PROCEDURE	67	                                         + NVL (SINGLE_TAX, 0)

SENDZAT2PANOTZAP	PROCEDURE	68	                                         + NVL (ODOMETR_START, 0)

SENDZAT2PANOTZAP	PROCEDURE	69	                                         + NVL (ODOMETR_END, 0)

SENDZAT2PANOTZAP	PROCEDURE	70	                                         + NVL (ACCOUNT_PAYMENTS, 0)

SENDZAT2PANOTZAP	PROCEDURE	71	                                         + NVL (MOBILE, 0)

SENDZAT2PANOTZAP	PROCEDURE	72	                                    FROM zat_monthly m, calendar c

SENDZAT2PANOTZAP	PROCEDURE	73	                                   WHERE     m.tn = s.tn

SENDZAT2PANOTZAP	PROCEDURE	74	                                         AND c.DATA =

SENDZAT2PANOTZAP	PROCEDURE	75	                                                ADD_MONTHS (

SENDZAT2PANOTZAP	PROCEDURE	76	                                                   TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTZAP	PROCEDURE	77	                                                   -1)

SENDZAT2PANOTZAP	PROCEDURE	78	                                         AND c.my = m.m

SENDZAT2PANOTZAP	PROCEDURE	79	                                         AND c.y = m.y),

SENDZAT2PANOTZAP	PROCEDURE	80	                                 0)

SENDZAT2PANOTZAP	PROCEDURE	81	                                 zat_monthly_exist,

SENDZAT2PANOTZAP	PROCEDURE	82	                              (SELECT COUNT (*)

SENDZAT2PANOTZAP	PROCEDURE	83	                                 FROM zat_daily_car

SENDZAT2PANOTZAP	PROCEDURE	84	                                WHERE     tn = s.tn

SENDZAT2PANOTZAP	PROCEDURE	85	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2PANOTZAP	PROCEDURE	86	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTZAP	PROCEDURE	87	                                                         -1))

SENDZAT2PANOTZAP	PROCEDURE	88	                                 zat_daily_car_count,

SENDZAT2PANOTZAP	PROCEDURE	89	                              (SELECT COUNT (*)

SENDZAT2PANOTZAP	PROCEDURE	90	                                 FROM zat_daily_trip

SENDZAT2PANOTZAP	PROCEDURE	91	                                WHERE     tn = s.tn

SENDZAT2PANOTZAP	PROCEDURE	92	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2PANOTZAP	PROCEDURE	93	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTZAP	PROCEDURE	94	                                                         -1))

SENDZAT2PANOTZAP	PROCEDURE	95	                                 zat_daily_trip_count

SENDZAT2PANOTZAP	PROCEDURE	96	                         FROM user_list s, parents p, user_list pu

SENDZAT2PANOTZAP	PROCEDURE	97	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDZAT2PANOTZAP	PROCEDURE	98	                                                 FROM dpt_tn

SENDZAT2PANOTZAP	PROCEDURE	99	                                                WHERE tn = a.tn)

SENDZAT2PANOTZAP	PROCEDURE	100	                              AND s.tn IN (SELECT slave

SENDZAT2PANOTZAP	PROCEDURE	101	                                             FROM full

SENDZAT2PANOTZAP	PROCEDURE	102	                                            WHERE master = a.tn)

SENDZAT2PANOTZAP	PROCEDURE	103	                              AND NVL (s.is_top, 0) <> 1

SENDZAT2PANOTZAP	PROCEDURE	104	                              AND s.datauvol IS NULL

SENDZAT2PANOTZAP	PROCEDURE	105	                              AND s.is_spd = 1

SENDZAT2PANOTZAP	PROCEDURE	106	                              AND s.tn = p.tn(+)

SENDZAT2PANOTZAP	PROCEDURE	107	                              AND p.parent = pu.tn(+)) z

SENDZAT2PANOTZAP	PROCEDURE	108	                WHERE   zat_daily_car_count

SENDZAT2PANOTZAP	PROCEDURE	109	                      + zat_daily_trip_count

SENDZAT2PANOTZAP	PROCEDURE	110	                      + zat_monthly_exist = 0

SENDZAT2PANOTZAP	PROCEDURE	111	             ORDER BY dpt_name, fio)

SENDZAT2PANOTZAP	PROCEDURE	112	      LOOP

SENDZAT2PANOTZAP	PROCEDURE	113	         IF NVL (LENGTH (msg), 0) < 10000

SENDZAT2PANOTZAP	PROCEDURE	114	         THEN

SENDZAT2PANOTZAP	PROCEDURE	115	            i := i + 1;

SENDZAT2PANOTZAP	PROCEDURE	116	            msg :=

SENDZAT2PANOTZAP	PROCEDURE	117	                  msg

SENDZAT2PANOTZAP	PROCEDURE	118	               || '<tr><td>'

SENDZAT2PANOTZAP	PROCEDURE	119	               || b.fio

SENDZAT2PANOTZAP	PROCEDURE	120	               || '</td>'

SENDZAT2PANOTZAP	PROCEDURE	121	               || '<td>'

SENDZAT2PANOTZAP	PROCEDURE	122	               || b.dpt_name

SENDZAT2PANOTZAP	PROCEDURE	123	               || '</td>'

SENDZAT2PANOTZAP	PROCEDURE	124	               || '<td>'

SENDZAT2PANOTZAP	PROCEDURE	125	               || b.region_name

SENDZAT2PANOTZAP	PROCEDURE	126	               || '</td>'

SENDZAT2PANOTZAP	PROCEDURE	127	               || '<td>'

SENDZAT2PANOTZAP	PROCEDURE	128	               || b.department_name

SENDZAT2PANOTZAP	PROCEDURE	129	               || '</td>'

SENDZAT2PANOTZAP	PROCEDURE	130	               || '<td>'

SENDZAT2PANOTZAP	PROCEDURE	131	               || b.parent_fio

SENDZAT2PANOTZAP	PROCEDURE	132	               || '</td></tr>';

SENDZAT2PANOTZAP	PROCEDURE	133	            too_many_lines := 0;

SENDZAT2PANOTZAP	PROCEDURE	134	         ELSE

SENDZAT2PANOTZAP	PROCEDURE	135	            too_many_lines := 1;

SENDZAT2PANOTZAP	PROCEDURE	136	         END IF;

SENDZAT2PANOTZAP	PROCEDURE	137	      END LOOP;

SENDZAT2PANOTZAP	PROCEDURE	138	

SENDZAT2PANOTZAP	PROCEDURE	139	      msg := msg || '</table>';

SENDZAT2PANOTZAP	PROCEDURE	140	

SENDZAT2PANOTZAP	PROCEDURE	141	      IF too_many_lines = 1

SENDZAT2PANOTZAP	PROCEDURE	142	      THEN

SENDZAT2PANOTZAP	PROCEDURE	143	         msg :=

SENDZAT2PANOTZAP	PROCEDURE	144	               msg

SENDZAT2PANOTZAP	PROCEDURE	145	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDZAT2PANOTZAP	PROCEDURE	146	      END IF;

SENDZAT2PANOTZAP	PROCEDURE	147	

SENDZAT2PANOTZAP	PROCEDURE	148	      IF i > 0

SENDZAT2PANOTZAP	PROCEDURE	149	      THEN

SENDZAT2PANOTZAP	PROCEDURE	150	         /*PR_SENDMAIL (

SENDZAT2PANOTZAP	PROCEDURE	151	            'dmytro.kalashnikov@kiev.avk.ua',

SENDZAT2PANOTZAP	PROCEDURE	152	               'Список сотрудников, не заполнивших отчет о затратах'

SENDZAT2PANOTZAP	PROCEDURE	153	            || ', тестовое письмо для: '

SENDZAT2PANOTZAP	PROCEDURE	154	            || a.fio

SENDZAT2PANOTZAP	PROCEDURE	155	            || ' '

SENDZAT2PANOTZAP	PROCEDURE	156	            || a.e_mail,

SENDZAT2PANOTZAP	PROCEDURE	157	            msg);*/

SENDZAT2PANOTZAP	PROCEDURE	158	         PR_SENDMAIL (

SENDZAT2PANOTZAP	PROCEDURE	159	            a.e_mail,

SENDZAT2PANOTZAP	PROCEDURE	160	               'Список сотрудников, не заполнивших отчет о затратах за '

SENDZAT2PANOTZAP	PROCEDURE	161	            || dt,

SENDZAT2PANOTZAP	PROCEDURE	162	            msg);

SENDZAT2PANOTZAP	PROCEDURE	163	      END IF;

SENDZAT2PANOTZAP	PROCEDURE	164	   END LOOP;

SENDZAT2PANOTZAP	PROCEDURE	165	END;
SENDZAT2PANOTACCEPTED	PROCEDURE	1	PROCEDURE        "SENDZAT2PANOTACCEPTED" 

SENDZAT2PANOTACCEPTED	PROCEDURE	2	AS

SENDZAT2PANOTACCEPTED	PROCEDURE	3	   msg              VARCHAR (32767);

SENDZAT2PANOTACCEPTED	PROCEDURE	4	   i                INTEGER;

SENDZAT2PANOTACCEPTED	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDZAT2PANOTACCEPTED	PROCEDURE	6	   too_many_lines   INTEGER;

SENDZAT2PANOTACCEPTED	PROCEDURE	7	BEGIN

SENDZAT2PANOTACCEPTED	PROCEDURE	8	   SELECT mt || ' ' || y

SENDZAT2PANOTACCEPTED	PROCEDURE	9	     INTO dt

SENDZAT2PANOTACCEPTED	PROCEDURE	10	     FROM calendar

SENDZAT2PANOTACCEPTED	PROCEDURE	11	    WHERE data = ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -1);

SENDZAT2PANOTACCEPTED	PROCEDURE	12	

SENDZAT2PANOTACCEPTED	PROCEDURE	13	

SENDZAT2PANOTACCEPTED	PROCEDURE	14	   /*

SENDZAT2PANOTACCEPTED	PROCEDURE	15	   - 2-е письмо: формировать 6-го числа месяца за предыдущий.

SENDZAT2PANOTACCEPTED	PROCEDURE	16	   Тема: "Список сотрудников, у которых отчет не принят руководителем".

SENDZAT2PANOTACCEPTED	PROCEDURE	17	   В письме в таблице выводить всех сотрудников,

SENDZAT2PANOTACCEPTED	PROCEDURE	18	   у которых статус ("ТОП" == false) И (дата увольнения == NULL) И (отчет заполнен) И (отчет не  принят руководителем) .

SENDZAT2PANOTACCEPTED	PROCEDURE	19	   Информция в виде:

SENDZAT2PANOTACCEPTED	PROCEDURE	20	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDZAT2PANOTACCEPTED	PROCEDURE	21	   Письмо высылать на руководителей,

SENDZAT2PANOTACCEPTED	PROCEDURE	22	   в котором будет отчет о "должниках" по заполнению и приему отчетов.

SENDZAT2PANOTACCEPTED	PROCEDURE	23	   Принцип: сотрудник получает письмо по всем своим подчиненным "до основания структуры".

SENDZAT2PANOTACCEPTED	PROCEDURE	24	   */

SENDZAT2PANOTACCEPTED	PROCEDURE	25	   FOR a

SENDZAT2PANOTACCEPTED	PROCEDURE	26	      IN (  SELECT u.dpt_name,

SENDZAT2PANOTACCEPTED	PROCEDURE	27	                   u.fio,

SENDZAT2PANOTACCEPTED	PROCEDURE	28	                   u.tn,

SENDZAT2PANOTACCEPTED	PROCEDURE	29	                   u.e_mail

SENDZAT2PANOTACCEPTED	PROCEDURE	30	              FROM user_list u,

SENDZAT2PANOTACCEPTED	PROCEDURE	31	                   (SELECT DISTINCT parent FROM parents) p,

SENDZAT2PANOTACCEPTED	PROCEDURE	32	                   (SELECT DISTINCT f.master

SENDZAT2PANOTACCEPTED	PROCEDURE	33	                      FROM full f, user_list u

SENDZAT2PANOTACCEPTED	PROCEDURE	34	                     WHERE     f.slave = u.tn

SENDZAT2PANOTACCEPTED	PROCEDURE	35	                           AND u.datauvol IS NULL

SENDZAT2PANOTACCEPTED	PROCEDURE	36	                           AND NVL (u.is_top, 0) <> 1) m

SENDZAT2PANOTACCEPTED	PROCEDURE	37	             WHERE     u.tn = p.parent

SENDZAT2PANOTACCEPTED	PROCEDURE	38	                   AND u.datauvol IS NULL

SENDZAT2PANOTACCEPTED	PROCEDURE	39	                   AND u.e_mail IS NOT NULL

SENDZAT2PANOTACCEPTED	PROCEDURE	40	                   AND u.tn = m.master

SENDZAT2PANOTACCEPTED	PROCEDURE	41	          ORDER BY u.dpt_name, u.fio)

SENDZAT2PANOTACCEPTED	PROCEDURE	42	   LOOP

SENDZAT2PANOTACCEPTED	PROCEDURE	43	      i := 0;

SENDZAT2PANOTACCEPTED	PROCEDURE	44	      msg :=

SENDZAT2PANOTACCEPTED	PROCEDURE	45	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDZAT2PANOTACCEPTED	PROCEDURE	46	

SENDZAT2PANOTACCEPTED	PROCEDURE	47	      FOR b

SENDZAT2PANOTACCEPTED	PROCEDURE	48	         IN (  SELECT fio,

SENDZAT2PANOTACCEPTED	PROCEDURE	49	                      tn,

SENDZAT2PANOTACCEPTED	PROCEDURE	50	                      dpt_name,

SENDZAT2PANOTACCEPTED	PROCEDURE	51	                      region_name,

SENDZAT2PANOTACCEPTED	PROCEDURE	52	                      department_name,

SENDZAT2PANOTACCEPTED	PROCEDURE	53	                      parent_tn,

SENDZAT2PANOTACCEPTED	PROCEDURE	54	                      parent_fio

SENDZAT2PANOTACCEPTED	PROCEDURE	55	                 FROM (SELECT s.*,

SENDZAT2PANOTACCEPTED	PROCEDURE	56	                              pu.tn parent_tn,

SENDZAT2PANOTACCEPTED	PROCEDURE	57	                              pu.fio parent_fio,

SENDZAT2PANOTACCEPTED	PROCEDURE	58	                              NVL (

SENDZAT2PANOTACCEPTED	PROCEDURE	59	                                 (SELECT is_accepted

SENDZAT2PANOTACCEPTED	PROCEDURE	60	                                    FROM zat_monthly m, calendar c

SENDZAT2PANOTACCEPTED	PROCEDURE	61	                                   WHERE     m.tn = s.tn

SENDZAT2PANOTACCEPTED	PROCEDURE	62	                                         AND c.DATA =

SENDZAT2PANOTACCEPTED	PROCEDURE	63	                                                ADD_MONTHS (

SENDZAT2PANOTACCEPTED	PROCEDURE	64	                                                   TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTACCEPTED	PROCEDURE	65	                                                   -1)

SENDZAT2PANOTACCEPTED	PROCEDURE	66	                                         AND c.my = m.m

SENDZAT2PANOTACCEPTED	PROCEDURE	67	                                         AND c.y = m.y),

SENDZAT2PANOTACCEPTED	PROCEDURE	68	                                 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	69	                                 zat_monthly_is_accepted,

SENDZAT2PANOTACCEPTED	PROCEDURE	70	                              NVL (

SENDZAT2PANOTACCEPTED	PROCEDURE	71	                                 (SELECT   NVL (TICKETS, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	72	                                         + NVL (PRESENT_COST, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	73	                                         + NVL (STATIONERY, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	74	                                         + NVL (MEDIA_ADVERT, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	75	                                         + NVL (MAIL, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	76	                                         + NVL (CONFERENCE, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	77	                                         + NVL (TRAINING_FOOD, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	78	                                         + NVL (ESV, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	79	                                         + NVL (SINGLE_TAX, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	80	                                         + NVL (ODOMETR_START, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	81	                                         + NVL (ODOMETR_END, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	82	                                         + NVL (ACCOUNT_PAYMENTS, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	83	                                         + NVL (MOBILE, 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	84	                                    FROM zat_monthly m, calendar c

SENDZAT2PANOTACCEPTED	PROCEDURE	85	                                   WHERE     m.tn = s.tn

SENDZAT2PANOTACCEPTED	PROCEDURE	86	                                         AND c.DATA =

SENDZAT2PANOTACCEPTED	PROCEDURE	87	                                                ADD_MONTHS (

SENDZAT2PANOTACCEPTED	PROCEDURE	88	                                                   TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTACCEPTED	PROCEDURE	89	                                                   -1)

SENDZAT2PANOTACCEPTED	PROCEDURE	90	                                         AND c.my = m.m

SENDZAT2PANOTACCEPTED	PROCEDURE	91	                                         AND c.y = m.y),

SENDZAT2PANOTACCEPTED	PROCEDURE	92	                                 0)

SENDZAT2PANOTACCEPTED	PROCEDURE	93	                                 zat_monthly_exist,

SENDZAT2PANOTACCEPTED	PROCEDURE	94	                              (SELECT COUNT (*)

SENDZAT2PANOTACCEPTED	PROCEDURE	95	                                 FROM zat_daily_car

SENDZAT2PANOTACCEPTED	PROCEDURE	96	                                WHERE     tn = s.tn

SENDZAT2PANOTACCEPTED	PROCEDURE	97	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2PANOTACCEPTED	PROCEDURE	98	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTACCEPTED	PROCEDURE	99	                                                         -1))

SENDZAT2PANOTACCEPTED	PROCEDURE	100	                                 zat_daily_car_count,

SENDZAT2PANOTACCEPTED	PROCEDURE	101	                              (SELECT COUNT (*)

SENDZAT2PANOTACCEPTED	PROCEDURE	102	                                 FROM zat_daily_trip

SENDZAT2PANOTACCEPTED	PROCEDURE	103	                                WHERE     tn = s.tn

SENDZAT2PANOTACCEPTED	PROCEDURE	104	                                      AND TRUNC (DATA, 'mm') =

SENDZAT2PANOTACCEPTED	PROCEDURE	105	                                             ADD_MONTHS (TRUNC (SYSDATE, 'mm'),

SENDZAT2PANOTACCEPTED	PROCEDURE	106	                                                         -1))

SENDZAT2PANOTACCEPTED	PROCEDURE	107	                                 zat_daily_trip_count

SENDZAT2PANOTACCEPTED	PROCEDURE	108	                         FROM user_list s, parents p, user_list pu

SENDZAT2PANOTACCEPTED	PROCEDURE	109	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDZAT2PANOTACCEPTED	PROCEDURE	110	                                                 FROM dpt_tn

SENDZAT2PANOTACCEPTED	PROCEDURE	111	                                                WHERE tn = a.tn)

SENDZAT2PANOTACCEPTED	PROCEDURE	112	                              AND s.tn IN (SELECT slave

SENDZAT2PANOTACCEPTED	PROCEDURE	113	                                             FROM full

SENDZAT2PANOTACCEPTED	PROCEDURE	114	                                            WHERE master = a.tn)

SENDZAT2PANOTACCEPTED	PROCEDURE	115	                              AND NVL (s.is_top, 0) <> 1

SENDZAT2PANOTACCEPTED	PROCEDURE	116	                              AND s.datauvol IS NULL

SENDZAT2PANOTACCEPTED	PROCEDURE	117	                              AND s.is_spd = 1

SENDZAT2PANOTACCEPTED	PROCEDURE	118	                              AND s.tn = p.tn(+)

SENDZAT2PANOTACCEPTED	PROCEDURE	119	                              AND p.parent = pu.tn(+)) z

SENDZAT2PANOTACCEPTED	PROCEDURE	120	                WHERE /*zat_daily_car_count

SENDZAT2PANOTACCEPTED	PROCEDURE	121	                    + zat_daily_trip_count

SENDZAT2PANOTACCEPTED	PROCEDURE	122	                    + zat_monthly_exist <> 0

SENDZAT2PANOTACCEPTED	PROCEDURE	123	                AND */

SENDZAT2PANOTACCEPTED	PROCEDURE	124	                     zat_monthly_is_accepted = 0

SENDZAT2PANOTACCEPTED	PROCEDURE	125	             ORDER BY dpt_name, fio)

SENDZAT2PANOTACCEPTED	PROCEDURE	126	      LOOP

SENDZAT2PANOTACCEPTED	PROCEDURE	127	         IF NVL (LENGTH (msg), 0) < 10000

SENDZAT2PANOTACCEPTED	PROCEDURE	128	         THEN

SENDZAT2PANOTACCEPTED	PROCEDURE	129	            i := i + 1;

SENDZAT2PANOTACCEPTED	PROCEDURE	130	            msg :=

SENDZAT2PANOTACCEPTED	PROCEDURE	131	                  msg

SENDZAT2PANOTACCEPTED	PROCEDURE	132	               || '<tr><td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	133	               || b.fio

SENDZAT2PANOTACCEPTED	PROCEDURE	134	               || '</td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	135	               || '<td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	136	               || b.dpt_name

SENDZAT2PANOTACCEPTED	PROCEDURE	137	               || '</td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	138	               || '<td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	139	               || b.region_name

SENDZAT2PANOTACCEPTED	PROCEDURE	140	               || '</td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	141	               || '<td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	142	               || b.department_name

SENDZAT2PANOTACCEPTED	PROCEDURE	143	               || '</td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	144	               || '<td>'

SENDZAT2PANOTACCEPTED	PROCEDURE	145	               || b.parent_fio

SENDZAT2PANOTACCEPTED	PROCEDURE	146	               || '</td></tr>';

SENDZAT2PANOTACCEPTED	PROCEDURE	147	            too_many_lines := 0;

SENDZAT2PANOTACCEPTED	PROCEDURE	148	         ELSE

SENDZAT2PANOTACCEPTED	PROCEDURE	149	            too_many_lines := 1;

SENDZAT2PANOTACCEPTED	PROCEDURE	150	         END IF;

SENDZAT2PANOTACCEPTED	PROCEDURE	151	      END LOOP;

SENDZAT2PANOTACCEPTED	PROCEDURE	152	

SENDZAT2PANOTACCEPTED	PROCEDURE	153	      msg := msg || '</table>';

SENDZAT2PANOTACCEPTED	PROCEDURE	154	

SENDZAT2PANOTACCEPTED	PROCEDURE	155	      IF too_many_lines = 1

SENDZAT2PANOTACCEPTED	PROCEDURE	156	      THEN

SENDZAT2PANOTACCEPTED	PROCEDURE	157	         msg :=

SENDZAT2PANOTACCEPTED	PROCEDURE	158	               msg

SENDZAT2PANOTACCEPTED	PROCEDURE	159	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDZAT2PANOTACCEPTED	PROCEDURE	160	      END IF;

SENDZAT2PANOTACCEPTED	PROCEDURE	161	

SENDZAT2PANOTACCEPTED	PROCEDURE	162	      IF i > 0

SENDZAT2PANOTACCEPTED	PROCEDURE	163	      THEN

SENDZAT2PANOTACCEPTED	PROCEDURE	164	         /*PR_SENDMAIL (

SENDZAT2PANOTACCEPTED	PROCEDURE	165	            'dmytro.kalashnikov@kiev.avk.ua',

SENDZAT2PANOTACCEPTED	PROCEDURE	166	               'Список сотрудников, у которых отчет не принят руководителем'

SENDZAT2PANOTACCEPTED	PROCEDURE	167	            || ', тестовое письмо для: '

SENDZAT2PANOTACCEPTED	PROCEDURE	168	            || a.fio

SENDZAT2PANOTACCEPTED	PROCEDURE	169	            || ' '

SENDZAT2PANOTACCEPTED	PROCEDURE	170	            || a.e_mail,

SENDZAT2PANOTACCEPTED	PROCEDURE	171	            msg);*/

SENDZAT2PANOTACCEPTED	PROCEDURE	172	         PR_SENDMAIL (

SENDZAT2PANOTACCEPTED	PROCEDURE	173	            a.e_mail,

SENDZAT2PANOTACCEPTED	PROCEDURE	174	               'Список сотрудников, у которых отчет о затратах за '

SENDZAT2PANOTACCEPTED	PROCEDURE	175	            || dt

SENDZAT2PANOTACCEPTED	PROCEDURE	176	            || ' не принят руководителем',

SENDZAT2PANOTACCEPTED	PROCEDURE	177	            msg);

SENDZAT2PANOTACCEPTED	PROCEDURE	178	      END IF;

SENDZAT2PANOTACCEPTED	PROCEDURE	179	   END LOOP;

SENDZAT2PANOTACCEPTED	PROCEDURE	180	END;
SENDACT2SUNOTZAP	PROCEDURE	1	PROCEDURE        "SENDACT2SUNOTZAP" 

SENDACT2SUNOTZAP	PROCEDURE	2	AS

SENDACT2SUNOTZAP	PROCEDURE	3	   msg              VARCHAR (32767);

SENDACT2SUNOTZAP	PROCEDURE	4	   i                INTEGER;

SENDACT2SUNOTZAP	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDACT2SUNOTZAP	PROCEDURE	6	   too_many_lines   INTEGER;

SENDACT2SUNOTZAP	PROCEDURE	7	BEGIN

SENDACT2SUNOTZAP	PROCEDURE	8	   SELECT mt || ' ' || y

SENDACT2SUNOTZAP	PROCEDURE	9	     INTO dt

SENDACT2SUNOTZAP	PROCEDURE	10	     FROM calendar

SENDACT2SUNOTZAP	PROCEDURE	11	    WHERE data = TRUNC (SYSDATE, 'mm');

SENDACT2SUNOTZAP	PROCEDURE	12	

SENDACT2SUNOTZAP	PROCEDURE	13	   /*

SENDACT2SUNOTZAP	PROCEDURE	14	   - 1-ое письмо: формировать 3-го числа месяца на следующий.

SENDACT2SUNOTZAP	PROCEDURE	15	   Тема: "Список сотрудников, не заполнивших план активности".

SENDACT2SUNOTZAP	PROCEDURE	16	   В письме в таблице выводить всех сотрудников,

SENDACT2SUNOTZAP	PROCEDURE	17	   у которых (статус "ТОП" == false) И (дата увольнения == NULL) И (план активности не заполнен).

SENDACT2SUNOTZAP	PROCEDURE	18	   Информция в виде:

SENDACT2SUNOTZAP	PROCEDURE	19	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDACT2SUNOTZAP	PROCEDURE	20	   Письмо высылать с группировкой информации по странам - на суперпользователей,

SENDACT2SUNOTZAP	PROCEDURE	21	   у которых есть права доступа (выставлен чекбокс) в работе с веткой портала соответствующей страны.

SENDACT2SUNOTZAP	PROCEDURE	22	   Т.е. в одном письме инфо по "открытым" для суперпользователя странам.

SENDACT2SUNOTZAP	PROCEDURE	23	   */

SENDACT2SUNOTZAP	PROCEDURE	24	   FOR a IN (SELECT *

SENDACT2SUNOTZAP	PROCEDURE	25	               FROM user_list

SENDACT2SUNOTZAP	PROCEDURE	26	              WHERE is_super = 1 AND datauvol IS NULL AND e_mail IS NOT NULL)

SENDACT2SUNOTZAP	PROCEDURE	27	   LOOP

SENDACT2SUNOTZAP	PROCEDURE	28	      i := 0;

SENDACT2SUNOTZAP	PROCEDURE	29	      msg :=

SENDACT2SUNOTZAP	PROCEDURE	30	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDACT2SUNOTZAP	PROCEDURE	31	

SENDACT2SUNOTZAP	PROCEDURE	32	      FOR b

SENDACT2SUNOTZAP	PROCEDURE	33	         IN (  SELECT fio,

SENDACT2SUNOTZAP	PROCEDURE	34	                      tn,

SENDACT2SUNOTZAP	PROCEDURE	35	                      dpt_name,

SENDACT2SUNOTZAP	PROCEDURE	36	                      region_name,

SENDACT2SUNOTZAP	PROCEDURE	37	                      department_name,

SENDACT2SUNOTZAP	PROCEDURE	38	                      parent_tn,

SENDACT2SUNOTZAP	PROCEDURE	39	                      parent_fio,

SENDACT2SUNOTZAP	PROCEDURE	40	                      weekly_plans_count,

SENDACT2SUNOTZAP	PROCEDURE	41	                      daily_plans_count,

SENDACT2SUNOTZAP	PROCEDURE	42	                      monthly_plan_ok

SENDACT2SUNOTZAP	PROCEDURE	43	                 FROM (SELECT s.*,

SENDACT2SUNOTZAP	PROCEDURE	44	                              pu.tn parent_tn,

SENDACT2SUNOTZAP	PROCEDURE	45	                              pu.fio parent_fio,

SENDACT2SUNOTZAP	PROCEDURE	46	                              NVL (

SENDACT2SUNOTZAP	PROCEDURE	47	                                 (SELECT plan_ok

SENDACT2SUNOTZAP	PROCEDURE	48	                                    FROM p_activ_plan_monthly m, calendar c

SENDACT2SUNOTZAP	PROCEDURE	49	                                   WHERE     m.tn = s.tn

SENDACT2SUNOTZAP	PROCEDURE	50	                                         AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2SUNOTZAP	PROCEDURE	51	                                         AND c.my = m.m

SENDACT2SUNOTZAP	PROCEDURE	52	                                         AND c.y = m.y),

SENDACT2SUNOTZAP	PROCEDURE	53	                                 0)

SENDACT2SUNOTZAP	PROCEDURE	54	                                 monthly_plan_ok,

SENDACT2SUNOTZAP	PROCEDURE	55	                              (SELECT COUNT (*)

SENDACT2SUNOTZAP	PROCEDURE	56	                                 FROM p_activ_plan_daily d

SENDACT2SUNOTZAP	PROCEDURE	57	                                WHERE     d.tn = s.tn

SENDACT2SUNOTZAP	PROCEDURE	58	                                      AND TRUNC (d.DATA, 'mm') =

SENDACT2SUNOTZAP	PROCEDURE	59	                                             TRUNC (SYSDATE, 'mm'))

SENDACT2SUNOTZAP	PROCEDURE	60	                                 daily_plans_count,

SENDACT2SUNOTZAP	PROCEDURE	61	                              (SELECT COUNT (*)

SENDACT2SUNOTZAP	PROCEDURE	62	                                 FROM p_activ_plan_weekly w, calendar c

SENDACT2SUNOTZAP	PROCEDURE	63	                                WHERE     w.tn = s.tn

SENDACT2SUNOTZAP	PROCEDURE	64	                                      AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2SUNOTZAP	PROCEDURE	65	                                      AND c.my = w.m

SENDACT2SUNOTZAP	PROCEDURE	66	                                      AND c.y = w.y)

SENDACT2SUNOTZAP	PROCEDURE	67	                                 weekly_plans_count

SENDACT2SUNOTZAP	PROCEDURE	68	                         FROM user_list s, parents p, user_list pu

SENDACT2SUNOTZAP	PROCEDURE	69	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDACT2SUNOTZAP	PROCEDURE	70	                                                 FROM dpt_tn

SENDACT2SUNOTZAP	PROCEDURE	71	                                                WHERE tn = a.tn)

SENDACT2SUNOTZAP	PROCEDURE	72	                              AND NVL (s.is_top, 0) <> 1

SENDACT2SUNOTZAP	PROCEDURE	73	                              AND s.datauvol IS NULL

SENDACT2SUNOTZAP	PROCEDURE	74	                              AND s.is_spd = 1

SENDACT2SUNOTZAP	PROCEDURE	75	                              AND s.tn = p.tn(+)

SENDACT2SUNOTZAP	PROCEDURE	76	                              AND p.parent = pu.tn(+)) z

SENDACT2SUNOTZAP	PROCEDURE	77	                WHERE weekly_plans_count + daily_plans_count = 0 /*AND monthly_plan_ok = 0*/

SENDACT2SUNOTZAP	PROCEDURE	78	             ORDER BY dpt_name, fio)

SENDACT2SUNOTZAP	PROCEDURE	79	      LOOP

SENDACT2SUNOTZAP	PROCEDURE	80	         IF NVL (LENGTH (msg), 0) < 10000

SENDACT2SUNOTZAP	PROCEDURE	81	         THEN

SENDACT2SUNOTZAP	PROCEDURE	82	            i := i + 1;

SENDACT2SUNOTZAP	PROCEDURE	83	            msg :=

SENDACT2SUNOTZAP	PROCEDURE	84	                  msg

SENDACT2SUNOTZAP	PROCEDURE	85	               || '<tr><td>'

SENDACT2SUNOTZAP	PROCEDURE	86	               || b.fio

SENDACT2SUNOTZAP	PROCEDURE	87	               || '</td>'

SENDACT2SUNOTZAP	PROCEDURE	88	               || '<td>'

SENDACT2SUNOTZAP	PROCEDURE	89	               || b.dpt_name

SENDACT2SUNOTZAP	PROCEDURE	90	               || '</td>'

SENDACT2SUNOTZAP	PROCEDURE	91	               || '<td>'

SENDACT2SUNOTZAP	PROCEDURE	92	               || b.region_name

SENDACT2SUNOTZAP	PROCEDURE	93	               || '</td>'

SENDACT2SUNOTZAP	PROCEDURE	94	               || '<td>'

SENDACT2SUNOTZAP	PROCEDURE	95	               || b.department_name

SENDACT2SUNOTZAP	PROCEDURE	96	               || '</td>'

SENDACT2SUNOTZAP	PROCEDURE	97	               || '<td>'

SENDACT2SUNOTZAP	PROCEDURE	98	               || b.parent_fio

SENDACT2SUNOTZAP	PROCEDURE	99	               || '</td></tr>';

SENDACT2SUNOTZAP	PROCEDURE	100	            too_many_lines := 0;

SENDACT2SUNOTZAP	PROCEDURE	101	         ELSE

SENDACT2SUNOTZAP	PROCEDURE	102	            too_many_lines := 1;

SENDACT2SUNOTZAP	PROCEDURE	103	         END IF;

SENDACT2SUNOTZAP	PROCEDURE	104	      END LOOP;

SENDACT2SUNOTZAP	PROCEDURE	105	

SENDACT2SUNOTZAP	PROCEDURE	106	      msg := msg || '</table>';

SENDACT2SUNOTZAP	PROCEDURE	107	

SENDACT2SUNOTZAP	PROCEDURE	108	      IF too_many_lines = 1

SENDACT2SUNOTZAP	PROCEDURE	109	      THEN

SENDACT2SUNOTZAP	PROCEDURE	110	         msg :=

SENDACT2SUNOTZAP	PROCEDURE	111	               msg

SENDACT2SUNOTZAP	PROCEDURE	112	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDACT2SUNOTZAP	PROCEDURE	113	      END IF;

SENDACT2SUNOTZAP	PROCEDURE	114	

SENDACT2SUNOTZAP	PROCEDURE	115	      IF i > 0

SENDACT2SUNOTZAP	PROCEDURE	116	      THEN

SENDACT2SUNOTZAP	PROCEDURE	117	         /*PR_SENDMAIL (

SENDACT2SUNOTZAP	PROCEDURE	118	            'dmytro.kalashnikov@kiev.avk.ua',

SENDACT2SUNOTZAP	PROCEDURE	119	               'Список сотрудников, не заполнивших план активности'

SENDACT2SUNOTZAP	PROCEDURE	120	            || ', тестовое письмо для: '

SENDACT2SUNOTZAP	PROCEDURE	121	            || a.fio

SENDACT2SUNOTZAP	PROCEDURE	122	            || ' '

SENDACT2SUNOTZAP	PROCEDURE	123	            || a.e_mail,

SENDACT2SUNOTZAP	PROCEDURE	124	            msg);*/

SENDACT2SUNOTZAP	PROCEDURE	125	         PR_SENDMAIL (

SENDACT2SUNOTZAP	PROCEDURE	126	            a.e_mail,

SENDACT2SUNOTZAP	PROCEDURE	127	               'Список сотрудников, не заполнивших план активности на '

SENDACT2SUNOTZAP	PROCEDURE	128	            || dt,

SENDACT2SUNOTZAP	PROCEDURE	129	            msg);

SENDACT2SUNOTZAP	PROCEDURE	130	      END IF;

SENDACT2SUNOTZAP	PROCEDURE	131	   END LOOP;

SENDACT2SUNOTZAP	PROCEDURE	132	END;
SENDACT2SUNOTACCEPTED	PROCEDURE	1	PROCEDURE        "SENDACT2SUNOTACCEPTED" 

SENDACT2SUNOTACCEPTED	PROCEDURE	2	AS

SENDACT2SUNOTACCEPTED	PROCEDURE	3	   msg              VARCHAR (32767);

SENDACT2SUNOTACCEPTED	PROCEDURE	4	   i                INTEGER;

SENDACT2SUNOTACCEPTED	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDACT2SUNOTACCEPTED	PROCEDURE	6	   too_many_lines   INTEGER;

SENDACT2SUNOTACCEPTED	PROCEDURE	7	BEGIN

SENDACT2SUNOTACCEPTED	PROCEDURE	8	  SELECT mt || ' ' || y

SENDACT2SUNOTACCEPTED	PROCEDURE	9	     INTO dt

SENDACT2SUNOTACCEPTED	PROCEDURE	10	     FROM calendar

SENDACT2SUNOTACCEPTED	PROCEDURE	11	    WHERE data = TRUNC (SYSDATE, 'mm');

SENDACT2SUNOTACCEPTED	PROCEDURE	12	

SENDACT2SUNOTACCEPTED	PROCEDURE	13	   /*

SENDACT2SUNOTACCEPTED	PROCEDURE	14	   - 2-е письмо: формировать 3-го числа месяца на следующий.

SENDACT2SUNOTACCEPTED	PROCEDURE	15	   Тема: "Список сотрудников, у которых план активности не принят руководителем".

SENDACT2SUNOTACCEPTED	PROCEDURE	16	   В письме в таблице выводить всех сотрудников,

SENDACT2SUNOTACCEPTED	PROCEDURE	17	   у которых статус ("ТОП" == false) И (дата увольнения == NULL) И (план активности наполнен) И (план активности не  принят руководителем) .

SENDACT2SUNOTACCEPTED	PROCEDURE	18	   Информция в виде:

SENDACT2SUNOTACCEPTED	PROCEDURE	19	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDACT2SUNOTACCEPTED	PROCEDURE	20	   Письмо высылать с группировкой информации по странам - на суперпользователей,

SENDACT2SUNOTACCEPTED	PROCEDURE	21	   у которых есть права доступа (выставлен чекбокс) в работе с веткой портала соответствующей страны.

SENDACT2SUNOTACCEPTED	PROCEDURE	22	   Т.е. в одном письме инфо по "открытым" для суперпользователя странам.

SENDACT2SUNOTACCEPTED	PROCEDURE	23	   */

SENDACT2SUNOTACCEPTED	PROCEDURE	24	   FOR a IN (SELECT *

SENDACT2SUNOTACCEPTED	PROCEDURE	25	               FROM user_list

SENDACT2SUNOTACCEPTED	PROCEDURE	26	              WHERE is_super = 1 AND datauvol IS NULL AND e_mail IS NOT NULL)

SENDACT2SUNOTACCEPTED	PROCEDURE	27	   LOOP

SENDACT2SUNOTACCEPTED	PROCEDURE	28	      i := 0;

SENDACT2SUNOTACCEPTED	PROCEDURE	29	      msg :=

SENDACT2SUNOTACCEPTED	PROCEDURE	30	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDACT2SUNOTACCEPTED	PROCEDURE	31	

SENDACT2SUNOTACCEPTED	PROCEDURE	32	      FOR b

SENDACT2SUNOTACCEPTED	PROCEDURE	33	         IN (  SELECT fio,

SENDACT2SUNOTACCEPTED	PROCEDURE	34	                      tn,

SENDACT2SUNOTACCEPTED	PROCEDURE	35	                      dpt_name,

SENDACT2SUNOTACCEPTED	PROCEDURE	36	                      region_name,

SENDACT2SUNOTACCEPTED	PROCEDURE	37	                      department_name,

SENDACT2SUNOTACCEPTED	PROCEDURE	38	                      parent_tn,

SENDACT2SUNOTACCEPTED	PROCEDURE	39	                      parent_fio,

SENDACT2SUNOTACCEPTED	PROCEDURE	40	                      weekly_plans_count,

SENDACT2SUNOTACCEPTED	PROCEDURE	41	                      daily_plans_count,

SENDACT2SUNOTACCEPTED	PROCEDURE	42	                      monthly_plan_ok

SENDACT2SUNOTACCEPTED	PROCEDURE	43	                 FROM (SELECT s.*,

SENDACT2SUNOTACCEPTED	PROCEDURE	44	                              pu.tn parent_tn,

SENDACT2SUNOTACCEPTED	PROCEDURE	45	                              pu.fio parent_fio,

SENDACT2SUNOTACCEPTED	PROCEDURE	46	                              NVL (

SENDACT2SUNOTACCEPTED	PROCEDURE	47	                                 (SELECT plan_ok

SENDACT2SUNOTACCEPTED	PROCEDURE	48	                                    FROM p_activ_plan_monthly m, calendar c

SENDACT2SUNOTACCEPTED	PROCEDURE	49	                                   WHERE     m.tn = s.tn

SENDACT2SUNOTACCEPTED	PROCEDURE	50	                                         AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2SUNOTACCEPTED	PROCEDURE	51	                                         AND c.my = m.m

SENDACT2SUNOTACCEPTED	PROCEDURE	52	                                         AND c.y = m.y),

SENDACT2SUNOTACCEPTED	PROCEDURE	53	                                 0)

SENDACT2SUNOTACCEPTED	PROCEDURE	54	                                 monthly_plan_ok,

SENDACT2SUNOTACCEPTED	PROCEDURE	55	                              (SELECT COUNT (*)

SENDACT2SUNOTACCEPTED	PROCEDURE	56	                                 FROM p_activ_plan_daily d

SENDACT2SUNOTACCEPTED	PROCEDURE	57	                                WHERE     d.tn = s.tn

SENDACT2SUNOTACCEPTED	PROCEDURE	58	                                      AND TRUNC (d.DATA, 'mm') =

SENDACT2SUNOTACCEPTED	PROCEDURE	59	                                             TRUNC (SYSDATE, 'mm'))

SENDACT2SUNOTACCEPTED	PROCEDURE	60	                                 daily_plans_count,

SENDACT2SUNOTACCEPTED	PROCEDURE	61	                              (SELECT COUNT (*)

SENDACT2SUNOTACCEPTED	PROCEDURE	62	                                 FROM p_activ_plan_weekly w, calendar c

SENDACT2SUNOTACCEPTED	PROCEDURE	63	                                WHERE     w.tn = s.tn

SENDACT2SUNOTACCEPTED	PROCEDURE	64	                                      AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2SUNOTACCEPTED	PROCEDURE	65	                                      AND c.my = w.m

SENDACT2SUNOTACCEPTED	PROCEDURE	66	                                      AND c.y = w.y)

SENDACT2SUNOTACCEPTED	PROCEDURE	67	                                 weekly_plans_count

SENDACT2SUNOTACCEPTED	PROCEDURE	68	                         FROM user_list s, parents p, user_list pu

SENDACT2SUNOTACCEPTED	PROCEDURE	69	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDACT2SUNOTACCEPTED	PROCEDURE	70	                                                 FROM dpt_tn

SENDACT2SUNOTACCEPTED	PROCEDURE	71	                                                WHERE tn = a.tn)

SENDACT2SUNOTACCEPTED	PROCEDURE	72	                              AND NVL (s.is_top, 0) <> 1

SENDACT2SUNOTACCEPTED	PROCEDURE	73	                              AND s.datauvol IS NULL

SENDACT2SUNOTACCEPTED	PROCEDURE	74	                              AND s.is_spd = 1

SENDACT2SUNOTACCEPTED	PROCEDURE	75	                              AND s.tn = p.tn(+)

SENDACT2SUNOTACCEPTED	PROCEDURE	76	                              AND p.parent = pu.tn(+)) z

SENDACT2SUNOTACCEPTED	PROCEDURE	77	                WHERE     weekly_plans_count + daily_plans_count <> 0

SENDACT2SUNOTACCEPTED	PROCEDURE	78	                      AND monthly_plan_ok = 0

SENDACT2SUNOTACCEPTED	PROCEDURE	79	             ORDER BY dpt_name, fio)

SENDACT2SUNOTACCEPTED	PROCEDURE	80	      LOOP

SENDACT2SUNOTACCEPTED	PROCEDURE	81	         IF NVL (LENGTH (msg), 0) < 10000

SENDACT2SUNOTACCEPTED	PROCEDURE	82	         THEN

SENDACT2SUNOTACCEPTED	PROCEDURE	83	            i := i + 1;

SENDACT2SUNOTACCEPTED	PROCEDURE	84	            msg :=

SENDACT2SUNOTACCEPTED	PROCEDURE	85	                  msg

SENDACT2SUNOTACCEPTED	PROCEDURE	86	               || '<tr><td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	87	               || b.fio

SENDACT2SUNOTACCEPTED	PROCEDURE	88	               || '</td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	89	               || '<td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	90	               || b.dpt_name

SENDACT2SUNOTACCEPTED	PROCEDURE	91	               || '</td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	92	               || '<td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	93	               || b.region_name

SENDACT2SUNOTACCEPTED	PROCEDURE	94	               || '</td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	95	               || '<td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	96	               || b.department_name

SENDACT2SUNOTACCEPTED	PROCEDURE	97	               || '</td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	98	               || '<td>'

SENDACT2SUNOTACCEPTED	PROCEDURE	99	               || b.parent_fio

SENDACT2SUNOTACCEPTED	PROCEDURE	100	               || '</td></tr>';

SENDACT2SUNOTACCEPTED	PROCEDURE	101	            too_many_lines := 0;

SENDACT2SUNOTACCEPTED	PROCEDURE	102	         ELSE

SENDACT2SUNOTACCEPTED	PROCEDURE	103	            too_many_lines := 1;

SENDACT2SUNOTACCEPTED	PROCEDURE	104	         END IF;

SENDACT2SUNOTACCEPTED	PROCEDURE	105	      END LOOP;

SENDACT2SUNOTACCEPTED	PROCEDURE	106	

SENDACT2SUNOTACCEPTED	PROCEDURE	107	      msg := msg || '</table>';

SENDACT2SUNOTACCEPTED	PROCEDURE	108	

SENDACT2SUNOTACCEPTED	PROCEDURE	109	      IF too_many_lines = 1

SENDACT2SUNOTACCEPTED	PROCEDURE	110	      THEN

SENDACT2SUNOTACCEPTED	PROCEDURE	111	         msg :=

SENDACT2SUNOTACCEPTED	PROCEDURE	112	               msg

SENDACT2SUNOTACCEPTED	PROCEDURE	113	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDACT2SUNOTACCEPTED	PROCEDURE	114	      END IF;

SENDACT2SUNOTACCEPTED	PROCEDURE	115	

SENDACT2SUNOTACCEPTED	PROCEDURE	116	      IF i > 0

SENDACT2SUNOTACCEPTED	PROCEDURE	117	      THEN

SENDACT2SUNOTACCEPTED	PROCEDURE	118	         /*PR_SENDMAIL (

SENDACT2SUNOTACCEPTED	PROCEDURE	119	            'dmytro.kalashnikov@kiev.avk.ua',

SENDACT2SUNOTACCEPTED	PROCEDURE	120	               'Список сотрудников, у которых план активности не принят руководителем'

SENDACT2SUNOTACCEPTED	PROCEDURE	121	            || ', тестовое письмо для: '

SENDACT2SUNOTACCEPTED	PROCEDURE	122	            || a.fio

SENDACT2SUNOTACCEPTED	PROCEDURE	123	            || ' '

SENDACT2SUNOTACCEPTED	PROCEDURE	124	            || a.e_mail,

SENDACT2SUNOTACCEPTED	PROCEDURE	125	            msg);*/

SENDACT2SUNOTACCEPTED	PROCEDURE	126	         PR_SENDMAIL (

SENDACT2SUNOTACCEPTED	PROCEDURE	127	            a.e_mail,

SENDACT2SUNOTACCEPTED	PROCEDURE	128	               'Список сотрудников, у которых план активности на '

SENDACT2SUNOTACCEPTED	PROCEDURE	129	            || dt

SENDACT2SUNOTACCEPTED	PROCEDURE	130	            || ' не принят руководителем',

SENDACT2SUNOTACCEPTED	PROCEDURE	131	            msg);

SENDACT2SUNOTACCEPTED	PROCEDURE	132	      END IF;

SENDACT2SUNOTACCEPTED	PROCEDURE	133	   END LOOP;

SENDACT2SUNOTACCEPTED	PROCEDURE	134	END;
SENDACT2PANOTZAP	PROCEDURE	1	PROCEDURE        "SENDACT2PANOTZAP" 

SENDACT2PANOTZAP	PROCEDURE	2	AS

SENDACT2PANOTZAP	PROCEDURE	3	   msg              VARCHAR (32767);

SENDACT2PANOTZAP	PROCEDURE	4	   i                INTEGER;

SENDACT2PANOTZAP	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDACT2PANOTZAP	PROCEDURE	6	   too_many_lines   INTEGER;

SENDACT2PANOTZAP	PROCEDURE	7	BEGIN

SENDACT2PANOTZAP	PROCEDURE	8	   SELECT mt || ' ' || y

SENDACT2PANOTZAP	PROCEDURE	9	     INTO dt

SENDACT2PANOTZAP	PROCEDURE	10	     FROM calendar

SENDACT2PANOTZAP	PROCEDURE	11	    WHERE data = TRUNC (SYSDATE, 'mm');

SENDACT2PANOTZAP	PROCEDURE	12	

SENDACT2PANOTZAP	PROCEDURE	13	   /*

SENDACT2PANOTZAP	PROCEDURE	14	   - 1-ое письмо: формировать 3-го числа месяца на следующий.

SENDACT2PANOTZAP	PROCEDURE	15	   Тема: "Список сотрудников, не заполнивших план активности".

SENDACT2PANOTZAP	PROCEDURE	16	   В письме в таблице выводить всех сотрудников,

SENDACT2PANOTZAP	PROCEDURE	17	   у которых (статус "ТОП" == false) И (дата увольнения == NULL) И (план активности не заполнен).

SENDACT2PANOTZAP	PROCEDURE	18	   Информция в виде:

SENDACT2PANOTZAP	PROCEDURE	19	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDACT2PANOTZAP	PROCEDURE	20	   Письмо высылать на руководителей,

SENDACT2PANOTZAP	PROCEDURE	21	   в котором будет план активности о "должниках" по заполнению и приему план активностиов.

SENDACT2PANOTZAP	PROCEDURE	22	   Принцип: сотрудник получает письмо по всем своим подчиненным "до основания структуры".

SENDACT2PANOTZAP	PROCEDURE	23	   */

SENDACT2PANOTZAP	PROCEDURE	24	   FOR a

SENDACT2PANOTZAP	PROCEDURE	25	      IN (  SELECT u.dpt_name,

SENDACT2PANOTZAP	PROCEDURE	26	                   u.fio,

SENDACT2PANOTZAP	PROCEDURE	27	                   u.tn,

SENDACT2PANOTZAP	PROCEDURE	28	                   u.e_mail

SENDACT2PANOTZAP	PROCEDURE	29	              FROM user_list u,

SENDACT2PANOTZAP	PROCEDURE	30	                   (SELECT DISTINCT parent FROM parents) p,

SENDACT2PANOTZAP	PROCEDURE	31	                   (SELECT DISTINCT f.master

SENDACT2PANOTZAP	PROCEDURE	32	                      FROM full f, user_list u

SENDACT2PANOTZAP	PROCEDURE	33	                     WHERE     f.slave = u.tn

SENDACT2PANOTZAP	PROCEDURE	34	                           AND u.datauvol IS NULL

SENDACT2PANOTZAP	PROCEDURE	35	                           AND NVL (u.is_top, 0) <> 1) m

SENDACT2PANOTZAP	PROCEDURE	36	             WHERE     u.tn = p.parent

SENDACT2PANOTZAP	PROCEDURE	37	                   AND u.datauvol IS NULL

SENDACT2PANOTZAP	PROCEDURE	38	                   AND u.e_mail IS NOT NULL

SENDACT2PANOTZAP	PROCEDURE	39	                   AND u.tn = m.master

SENDACT2PANOTZAP	PROCEDURE	40	          ORDER BY u.dpt_name, u.fio)

SENDACT2PANOTZAP	PROCEDURE	41	   LOOP

SENDACT2PANOTZAP	PROCEDURE	42	      i := 0;

SENDACT2PANOTZAP	PROCEDURE	43	      msg :=

SENDACT2PANOTZAP	PROCEDURE	44	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDACT2PANOTZAP	PROCEDURE	45	

SENDACT2PANOTZAP	PROCEDURE	46	      FOR b

SENDACT2PANOTZAP	PROCEDURE	47	         IN (  SELECT fio,

SENDACT2PANOTZAP	PROCEDURE	48	                      tn,

SENDACT2PANOTZAP	PROCEDURE	49	                      dpt_name,

SENDACT2PANOTZAP	PROCEDURE	50	                      region_name,

SENDACT2PANOTZAP	PROCEDURE	51	                      department_name,

SENDACT2PANOTZAP	PROCEDURE	52	                      parent_tn,

SENDACT2PANOTZAP	PROCEDURE	53	                      parent_fio,

SENDACT2PANOTZAP	PROCEDURE	54	                      weekly_plans_count,

SENDACT2PANOTZAP	PROCEDURE	55	                      daily_plans_count,

SENDACT2PANOTZAP	PROCEDURE	56	                      monthly_plan_ok

SENDACT2PANOTZAP	PROCEDURE	57	                 FROM (SELECT s.*,

SENDACT2PANOTZAP	PROCEDURE	58	                              pu.tn parent_tn,

SENDACT2PANOTZAP	PROCEDURE	59	                              pu.fio parent_fio,

SENDACT2PANOTZAP	PROCEDURE	60	                              NVL (

SENDACT2PANOTZAP	PROCEDURE	61	                                 (SELECT plan_ok

SENDACT2PANOTZAP	PROCEDURE	62	                                    FROM p_activ_plan_monthly m, calendar c

SENDACT2PANOTZAP	PROCEDURE	63	                                   WHERE     m.tn = s.tn

SENDACT2PANOTZAP	PROCEDURE	64	                                         AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2PANOTZAP	PROCEDURE	65	                                         AND c.my = m.m

SENDACT2PANOTZAP	PROCEDURE	66	                                         AND c.y = m.y),

SENDACT2PANOTZAP	PROCEDURE	67	                                 0)

SENDACT2PANOTZAP	PROCEDURE	68	                                 monthly_plan_ok,

SENDACT2PANOTZAP	PROCEDURE	69	                              (SELECT COUNT (*)

SENDACT2PANOTZAP	PROCEDURE	70	                                 FROM p_activ_plan_daily d

SENDACT2PANOTZAP	PROCEDURE	71	                                WHERE     d.tn = s.tn

SENDACT2PANOTZAP	PROCEDURE	72	                                      AND TRUNC (d.DATA, 'mm') =

SENDACT2PANOTZAP	PROCEDURE	73	                                             TRUNC (SYSDATE, 'mm'))

SENDACT2PANOTZAP	PROCEDURE	74	                                 daily_plans_count,

SENDACT2PANOTZAP	PROCEDURE	75	                              (SELECT COUNT (*)

SENDACT2PANOTZAP	PROCEDURE	76	                                 FROM p_activ_plan_weekly w, calendar c

SENDACT2PANOTZAP	PROCEDURE	77	                                WHERE     w.tn = s.tn

SENDACT2PANOTZAP	PROCEDURE	78	                                      AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2PANOTZAP	PROCEDURE	79	                                      AND c.my = w.m

SENDACT2PANOTZAP	PROCEDURE	80	                                      AND c.y = w.y)

SENDACT2PANOTZAP	PROCEDURE	81	                                 weekly_plans_count

SENDACT2PANOTZAP	PROCEDURE	82	                         FROM user_list s, parents p, user_list pu

SENDACT2PANOTZAP	PROCEDURE	83	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDACT2PANOTZAP	PROCEDURE	84	                                                 FROM dpt_tn

SENDACT2PANOTZAP	PROCEDURE	85	                                                WHERE tn = a.tn)

SENDACT2PANOTZAP	PROCEDURE	86	                              AND s.tn IN (SELECT slave

SENDACT2PANOTZAP	PROCEDURE	87	                                             FROM full

SENDACT2PANOTZAP	PROCEDURE	88	                                            WHERE master = a.tn)

SENDACT2PANOTZAP	PROCEDURE	89	                              AND NVL (s.is_top, 0) <> 1

SENDACT2PANOTZAP	PROCEDURE	90	                              AND s.datauvol IS NULL

SENDACT2PANOTZAP	PROCEDURE	91	                              AND s.is_spd = 1

SENDACT2PANOTZAP	PROCEDURE	92	                              AND s.tn = p.tn(+)

SENDACT2PANOTZAP	PROCEDURE	93	                              AND p.parent = pu.tn(+)) z

SENDACT2PANOTZAP	PROCEDURE	94	                WHERE weekly_plans_count + daily_plans_count = 0 /*AND monthly_plan_ok = 0*/

SENDACT2PANOTZAP	PROCEDURE	95	             ORDER BY dpt_name, fio)

SENDACT2PANOTZAP	PROCEDURE	96	      LOOP

SENDACT2PANOTZAP	PROCEDURE	97	         IF NVL (LENGTH (msg), 0) < 10000

SENDACT2PANOTZAP	PROCEDURE	98	         THEN

SENDACT2PANOTZAP	PROCEDURE	99	            i := i + 1;

SENDACT2PANOTZAP	PROCEDURE	100	            msg :=

SENDACT2PANOTZAP	PROCEDURE	101	                  msg

SENDACT2PANOTZAP	PROCEDURE	102	               || '<tr><td>'

SENDACT2PANOTZAP	PROCEDURE	103	               || b.fio

SENDACT2PANOTZAP	PROCEDURE	104	               || '</td>'

SENDACT2PANOTZAP	PROCEDURE	105	               || '<td>'

SENDACT2PANOTZAP	PROCEDURE	106	               || b.dpt_name

SENDACT2PANOTZAP	PROCEDURE	107	               || '</td>'

SENDACT2PANOTZAP	PROCEDURE	108	               || '<td>'

SENDACT2PANOTZAP	PROCEDURE	109	               || b.region_name

SENDACT2PANOTZAP	PROCEDURE	110	               || '</td>'

SENDACT2PANOTZAP	PROCEDURE	111	               || '<td>'

SENDACT2PANOTZAP	PROCEDURE	112	               || b.department_name

SENDACT2PANOTZAP	PROCEDURE	113	               || '</td>'

SENDACT2PANOTZAP	PROCEDURE	114	               || '<td>'

SENDACT2PANOTZAP	PROCEDURE	115	               || b.parent_fio

SENDACT2PANOTZAP	PROCEDURE	116	               || '</td></tr>';

SENDACT2PANOTZAP	PROCEDURE	117	            too_many_lines := 0;

SENDACT2PANOTZAP	PROCEDURE	118	         ELSE

SENDACT2PANOTZAP	PROCEDURE	119	            too_many_lines := 1;

SENDACT2PANOTZAP	PROCEDURE	120	         END IF;

SENDACT2PANOTZAP	PROCEDURE	121	      END LOOP;

SENDACT2PANOTZAP	PROCEDURE	122	

SENDACT2PANOTZAP	PROCEDURE	123	      msg := msg || '</table>';

SENDACT2PANOTZAP	PROCEDURE	124	

SENDACT2PANOTZAP	PROCEDURE	125	      IF too_many_lines = 1

SENDACT2PANOTZAP	PROCEDURE	126	      THEN

SENDACT2PANOTZAP	PROCEDURE	127	         msg :=

SENDACT2PANOTZAP	PROCEDURE	128	               msg

SENDACT2PANOTZAP	PROCEDURE	129	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDACT2PANOTZAP	PROCEDURE	130	      END IF;

SENDACT2PANOTZAP	PROCEDURE	131	

SENDACT2PANOTZAP	PROCEDURE	132	      IF i > 0

SENDACT2PANOTZAP	PROCEDURE	133	      THEN

SENDACT2PANOTZAP	PROCEDURE	134	         /*PR_SENDMAIL (

SENDACT2PANOTZAP	PROCEDURE	135	            'dmytro.kalashnikov@kiev.avk.ua',

SENDACT2PANOTZAP	PROCEDURE	136	               'Список сотрудников, не заполнивших план активности'

SENDACT2PANOTZAP	PROCEDURE	137	            || ', тестовое письмо для: '

SENDACT2PANOTZAP	PROCEDURE	138	            || a.fio

SENDACT2PANOTZAP	PROCEDURE	139	            || ' '

SENDACT2PANOTZAP	PROCEDURE	140	            || a.e_mail,

SENDACT2PANOTZAP	PROCEDURE	141	            msg);*/

SENDACT2PANOTZAP	PROCEDURE	142	         PR_SENDMAIL (

SENDACT2PANOTZAP	PROCEDURE	143	            a.e_mail,

SENDACT2PANOTZAP	PROCEDURE	144	               'Список сотрудников, не заполнивших план активности на '

SENDACT2PANOTZAP	PROCEDURE	145	            || dt,

SENDACT2PANOTZAP	PROCEDURE	146	            msg);

SENDACT2PANOTZAP	PROCEDURE	147	      END IF;

SENDACT2PANOTZAP	PROCEDURE	148	   END LOOP;

SENDACT2PANOTZAP	PROCEDURE	149	END;
SENDACT2PANOTACCEPTED	PROCEDURE	1	PROCEDURE        "SENDACT2PANOTACCEPTED" 

SENDACT2PANOTACCEPTED	PROCEDURE	2	AS

SENDACT2PANOTACCEPTED	PROCEDURE	3	   msg              VARCHAR (32767);

SENDACT2PANOTACCEPTED	PROCEDURE	4	   i                INTEGER;

SENDACT2PANOTACCEPTED	PROCEDURE	5	   dt               VARCHAR2 (255);

SENDACT2PANOTACCEPTED	PROCEDURE	6	   too_many_lines   INTEGER;

SENDACT2PANOTACCEPTED	PROCEDURE	7	BEGIN

SENDACT2PANOTACCEPTED	PROCEDURE	8	   SELECT mt || ' ' || y

SENDACT2PANOTACCEPTED	PROCEDURE	9	     INTO dt

SENDACT2PANOTACCEPTED	PROCEDURE	10	     FROM calendar

SENDACT2PANOTACCEPTED	PROCEDURE	11	    WHERE data = TRUNC (SYSDATE, 'mm');

SENDACT2PANOTACCEPTED	PROCEDURE	12	

SENDACT2PANOTACCEPTED	PROCEDURE	13	

SENDACT2PANOTACCEPTED	PROCEDURE	14	

SENDACT2PANOTACCEPTED	PROCEDURE	15	   /*

SENDACT2PANOTACCEPTED	PROCEDURE	16	   - 2-е письмо: формировать 3-го числа месяца на следующий.

SENDACT2PANOTACCEPTED	PROCEDURE	17	   Тема: "Список сотрудников, у которых план активности не принят руководителем".

SENDACT2PANOTACCEPTED	PROCEDURE	18	   В письме в таблице выводить всех сотрудников,

SENDACT2PANOTACCEPTED	PROCEDURE	19	   у которых статус ("ТОП" == false) И (дата увольнения == NULL) И (план активности наполнен) И (план активности не  принят руководителем) .

SENDACT2PANOTACCEPTED	PROCEDURE	20	   Информция в виде:

SENDACT2PANOTACCEPTED	PROCEDURE	21	   [ФИО сотрудника]  [ФИО прямого руководителя]  [Страна] [Регион] [Подразделение]

SENDACT2PANOTACCEPTED	PROCEDURE	22	   Письмо высылать на руководителей,

SENDACT2PANOTACCEPTED	PROCEDURE	23	   в котором будет план активности о "должниках" по заполнению и приему план активностиов.

SENDACT2PANOTACCEPTED	PROCEDURE	24	   Принцип: сотрудник получает письмо по всем своим подчиненным "до основания структуры".

SENDACT2PANOTACCEPTED	PROCEDURE	25	   */

SENDACT2PANOTACCEPTED	PROCEDURE	26	   FOR a

SENDACT2PANOTACCEPTED	PROCEDURE	27	      IN (  SELECT u.dpt_name,

SENDACT2PANOTACCEPTED	PROCEDURE	28	                   u.fio,

SENDACT2PANOTACCEPTED	PROCEDURE	29	                   u.tn,

SENDACT2PANOTACCEPTED	PROCEDURE	30	                   u.e_mail

SENDACT2PANOTACCEPTED	PROCEDURE	31	              FROM user_list u,

SENDACT2PANOTACCEPTED	PROCEDURE	32	                   (SELECT DISTINCT parent FROM parents) p,

SENDACT2PANOTACCEPTED	PROCEDURE	33	                   (SELECT DISTINCT f.master

SENDACT2PANOTACCEPTED	PROCEDURE	34	                      FROM full f, user_list u

SENDACT2PANOTACCEPTED	PROCEDURE	35	                     WHERE     f.slave = u.tn

SENDACT2PANOTACCEPTED	PROCEDURE	36	                           AND u.datauvol IS NULL

SENDACT2PANOTACCEPTED	PROCEDURE	37	                           AND NVL (u.is_top, 0) <> 1) m

SENDACT2PANOTACCEPTED	PROCEDURE	38	             WHERE     u.tn = p.parent

SENDACT2PANOTACCEPTED	PROCEDURE	39	                   AND u.datauvol IS NULL

SENDACT2PANOTACCEPTED	PROCEDURE	40	                   AND u.e_mail IS NOT NULL

SENDACT2PANOTACCEPTED	PROCEDURE	41	                   AND u.tn = m.master

SENDACT2PANOTACCEPTED	PROCEDURE	42	          ORDER BY u.dpt_name, u.fio)

SENDACT2PANOTACCEPTED	PROCEDURE	43	   LOOP

SENDACT2PANOTACCEPTED	PROCEDURE	44	      i := 0;

SENDACT2PANOTACCEPTED	PROCEDURE	45	      msg :=

SENDACT2PANOTACCEPTED	PROCEDURE	46	         '<table border=1 cellspacing=0 cellpadding=0><tr style="font-weight:bold"><td>Ф.И.О.</td><td>Страна</td><td>Регион</td><td>Подразделение</td><td>Руководитель</td></tr>';

SENDACT2PANOTACCEPTED	PROCEDURE	47	

SENDACT2PANOTACCEPTED	PROCEDURE	48	      FOR b

SENDACT2PANOTACCEPTED	PROCEDURE	49	         IN (  SELECT fio,

SENDACT2PANOTACCEPTED	PROCEDURE	50	                      tn,

SENDACT2PANOTACCEPTED	PROCEDURE	51	                      dpt_name,

SENDACT2PANOTACCEPTED	PROCEDURE	52	                      region_name,

SENDACT2PANOTACCEPTED	PROCEDURE	53	                      department_name,

SENDACT2PANOTACCEPTED	PROCEDURE	54	                      parent_tn,

SENDACT2PANOTACCEPTED	PROCEDURE	55	                      parent_fio,

SENDACT2PANOTACCEPTED	PROCEDURE	56	                      weekly_plans_count,

SENDACT2PANOTACCEPTED	PROCEDURE	57	                      daily_plans_count,

SENDACT2PANOTACCEPTED	PROCEDURE	58	                      monthly_plan_ok

SENDACT2PANOTACCEPTED	PROCEDURE	59	                 FROM (SELECT s.*,

SENDACT2PANOTACCEPTED	PROCEDURE	60	                              pu.tn parent_tn,

SENDACT2PANOTACCEPTED	PROCEDURE	61	                              pu.fio parent_fio,

SENDACT2PANOTACCEPTED	PROCEDURE	62	                              NVL (

SENDACT2PANOTACCEPTED	PROCEDURE	63	                                 (SELECT plan_ok

SENDACT2PANOTACCEPTED	PROCEDURE	64	                                    FROM p_activ_plan_monthly m, calendar c

SENDACT2PANOTACCEPTED	PROCEDURE	65	                                   WHERE     m.tn = s.tn

SENDACT2PANOTACCEPTED	PROCEDURE	66	                                         AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2PANOTACCEPTED	PROCEDURE	67	                                         AND c.my = m.m

SENDACT2PANOTACCEPTED	PROCEDURE	68	                                         AND c.y = m.y),

SENDACT2PANOTACCEPTED	PROCEDURE	69	                                 0)

SENDACT2PANOTACCEPTED	PROCEDURE	70	                                 monthly_plan_ok,

SENDACT2PANOTACCEPTED	PROCEDURE	71	                              (SELECT COUNT (*)

SENDACT2PANOTACCEPTED	PROCEDURE	72	                                 FROM p_activ_plan_daily d

SENDACT2PANOTACCEPTED	PROCEDURE	73	                                WHERE     d.tn = s.tn

SENDACT2PANOTACCEPTED	PROCEDURE	74	                                      AND TRUNC (d.DATA, 'mm') =

SENDACT2PANOTACCEPTED	PROCEDURE	75	                                             TRUNC (SYSDATE, 'mm'))

SENDACT2PANOTACCEPTED	PROCEDURE	76	                                 daily_plans_count,

SENDACT2PANOTACCEPTED	PROCEDURE	77	                              (SELECT COUNT (*)

SENDACT2PANOTACCEPTED	PROCEDURE	78	                                 FROM p_activ_plan_weekly w, calendar c

SENDACT2PANOTACCEPTED	PROCEDURE	79	                                WHERE     w.tn = s.tn

SENDACT2PANOTACCEPTED	PROCEDURE	80	                                      AND c.DATA = TRUNC (SYSDATE, 'mm')

SENDACT2PANOTACCEPTED	PROCEDURE	81	                                      AND c.my = w.m

SENDACT2PANOTACCEPTED	PROCEDURE	82	                                      AND c.y = w.y)

SENDACT2PANOTACCEPTED	PROCEDURE	83	                                 weekly_plans_count

SENDACT2PANOTACCEPTED	PROCEDURE	84	                         FROM user_list s, parents p, user_list pu

SENDACT2PANOTACCEPTED	PROCEDURE	85	                        WHERE     s.dpt_id IN (SELECT dpt_id

SENDACT2PANOTACCEPTED	PROCEDURE	86	                                                 FROM dpt_tn

SENDACT2PANOTACCEPTED	PROCEDURE	87	                                                WHERE tn = a.tn)

SENDACT2PANOTACCEPTED	PROCEDURE	88	                              AND s.tn IN (SELECT slave

SENDACT2PANOTACCEPTED	PROCEDURE	89	                                             FROM full

SENDACT2PANOTACCEPTED	PROCEDURE	90	                                            WHERE master = a.tn)

SENDACT2PANOTACCEPTED	PROCEDURE	91	                              AND NVL (s.is_top, 0) <> 1

SENDACT2PANOTACCEPTED	PROCEDURE	92	                              AND s.datauvol IS NULL

SENDACT2PANOTACCEPTED	PROCEDURE	93	                              AND s.is_spd = 1

SENDACT2PANOTACCEPTED	PROCEDURE	94	                              AND s.tn = p.tn(+)

SENDACT2PANOTACCEPTED	PROCEDURE	95	                              AND p.parent = pu.tn(+)) z

SENDACT2PANOTACCEPTED	PROCEDURE	96	                WHERE     weekly_plans_count + daily_plans_count <> 0

SENDACT2PANOTACCEPTED	PROCEDURE	97	                      AND monthly_plan_ok = 0

SENDACT2PANOTACCEPTED	PROCEDURE	98	             ORDER BY dpt_name, fio)

SENDACT2PANOTACCEPTED	PROCEDURE	99	      LOOP

SENDACT2PANOTACCEPTED	PROCEDURE	100	         IF NVL (LENGTH (msg), 0) < 10000

SENDACT2PANOTACCEPTED	PROCEDURE	101	         THEN

SENDACT2PANOTACCEPTED	PROCEDURE	102	            i := i + 1;

SENDACT2PANOTACCEPTED	PROCEDURE	103	            msg :=

SENDACT2PANOTACCEPTED	PROCEDURE	104	                  msg

SENDACT2PANOTACCEPTED	PROCEDURE	105	               || '<tr><td>'

SENDACT2PANOTACCEPTED	PROCEDURE	106	               || b.fio

SENDACT2PANOTACCEPTED	PROCEDURE	107	               || '</td>'

SENDACT2PANOTACCEPTED	PROCEDURE	108	               || '<td>'

SENDACT2PANOTACCEPTED	PROCEDURE	109	               || b.dpt_name

SENDACT2PANOTACCEPTED	PROCEDURE	110	               || '</td>'

SENDACT2PANOTACCEPTED	PROCEDURE	111	               || '<td>'

SENDACT2PANOTACCEPTED	PROCEDURE	112	               || b.region_name

SENDACT2PANOTACCEPTED	PROCEDURE	113	               || '</td>'

SENDACT2PANOTACCEPTED	PROCEDURE	114	               || '<td>'

SENDACT2PANOTACCEPTED	PROCEDURE	115	               || b.department_name

SENDACT2PANOTACCEPTED	PROCEDURE	116	               || '</td>'

SENDACT2PANOTACCEPTED	PROCEDURE	117	               || '<td>'

SENDACT2PANOTACCEPTED	PROCEDURE	118	               || b.parent_fio

SENDACT2PANOTACCEPTED	PROCEDURE	119	               || '</td></tr>';

SENDACT2PANOTACCEPTED	PROCEDURE	120	            too_many_lines := 0;

SENDACT2PANOTACCEPTED	PROCEDURE	121	         ELSE

SENDACT2PANOTACCEPTED	PROCEDURE	122	            too_many_lines := 1;

SENDACT2PANOTACCEPTED	PROCEDURE	123	         END IF;

SENDACT2PANOTACCEPTED	PROCEDURE	124	      END LOOP;

SENDACT2PANOTACCEPTED	PROCEDURE	125	

SENDACT2PANOTACCEPTED	PROCEDURE	126	      msg := msg || '</table>';

SENDACT2PANOTACCEPTED	PROCEDURE	127	

SENDACT2PANOTACCEPTED	PROCEDURE	128	      IF too_many_lines = 1

SENDACT2PANOTACCEPTED	PROCEDURE	129	      THEN

SENDACT2PANOTACCEPTED	PROCEDURE	130	         msg :=

SENDACT2PANOTACCEPTED	PROCEDURE	131	               msg

SENDACT2PANOTACCEPTED	PROCEDURE	132	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

SENDACT2PANOTACCEPTED	PROCEDURE	133	      END IF;

SENDACT2PANOTACCEPTED	PROCEDURE	134	

SENDACT2PANOTACCEPTED	PROCEDURE	135	      IF i > 0

SENDACT2PANOTACCEPTED	PROCEDURE	136	      THEN

SENDACT2PANOTACCEPTED	PROCEDURE	137	         PR_SENDMAIL (

SENDACT2PANOTACCEPTED	PROCEDURE	138	            a.e_mail,

SENDACT2PANOTACCEPTED	PROCEDURE	139	               'Список сотрудников, у которых план активности на '

SENDACT2PANOTACCEPTED	PROCEDURE	140	            || dt

SENDACT2PANOTACCEPTED	PROCEDURE	141	            || ' не принят руководителем',

SENDACT2PANOTACCEPTED	PROCEDURE	142	            msg);

SENDACT2PANOTACCEPTED	PROCEDURE	143	      END IF;

SENDACT2PANOTACCEPTED	PROCEDURE	144	   END LOOP;

SENDACT2PANOTACCEPTED	PROCEDURE	145	END;
SDU_NEW	TRIGGER	1	TRIGGER "PERSIK"."SDU_NEW" 

SDU_NEW	TRIGGER	2	   BEFORE INSERT

SDU_NEW	TRIGGER	3	   ON persik.sdu

SDU_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SDU_NEW	TRIGGER	5	   FOR EACH ROW

SDU_NEW	TRIGGER	6	DECLARE

SDU_NEW	TRIGGER	7	BEGIN

SDU_NEW	TRIGGER	8	   INSERT INTO sdu_terms_year

SDU_NEW	TRIGGER	9	               (id_net, YEAR, term_id, pay_format, txt, summa, ver)

SDU_NEW	TRIGGER	10	      SELECT id_net,

SDU_NEW	TRIGGER	11	             YEAR,

SDU_NEW	TRIGGER	12	             term_id,

SDU_NEW	TRIGGER	13	             pay_format,

SDU_NEW	TRIGGER	14	             txt,

SDU_NEW	TRIGGER	15	             summa,

SDU_NEW	TRIGGER	16	             :NEW.ver

SDU_NEW	TRIGGER	17	        FROM sdu_terms_year

SDU_NEW	TRIGGER	18	       WHERE YEAR = :NEW.YEAR

SDU_NEW	TRIGGER	19	         AND id_net = :NEW.id_net

SDU_NEW	TRIGGER	20	         AND ver = :NEW.ver - 1;

SDU_NEW	TRIGGER	21	END sdu_new; 

SDU_NEW	TRIGGER	22	

SDU_NEW	TRIGGER	23	

SDU_NEW	TRIGGER	24	

SDU_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."SDU_LAST_UPDATE" 

SDU_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

SDU_LAST_UPDATE	TRIGGER	3	   ON persik.sdu

SDU_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SDU_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

SDU_LAST_UPDATE	TRIGGER	6	DECLARE

SDU_LAST_UPDATE	TRIGGER	7	BEGIN

SDU_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

SDU_LAST_UPDATE	TRIGGER	9	END sdu_last_update; 

SDU_LAST_UPDATE	TRIGGER	10	

SDU_LAST_UPDATE	TRIGGER	11	

SDU_LAST_UPDATE	TRIGGER	12	

SC_TP_NEW	TRIGGER	1	TRIGGER "PERSIK"."SC_TP_NEW" 

SC_TP_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_TP_NEW	TRIGGER	3	   ON sc_tp

SC_TP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_TP_NEW	TRIGGER	5	   FOR EACH ROW

SC_TP_NEW	TRIGGER	6	BEGIN

SC_TP_NEW	TRIGGER	7	   IF :NEW.id IS NULL

SC_TP_NEW	TRIGGER	8	   THEN

SC_TP_NEW	TRIGGER	9	      :NEW.id := seq_all.NEXTVAL;

SC_TP_NEW	TRIGGER	10	   END IF;

SC_TP_NEW	TRIGGER	11	END;

SC_TP_NEW	TRIGGER	12	

SC_TP_LU	TRIGGER	1	TRIGGER "PERSIK"."SC_TP_LU" 

SC_TP_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_TP_LU	TRIGGER	3	   ON sc_tp

SC_TP_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_TP_LU	TRIGGER	5	   FOR EACH ROW

SC_TP_LU	TRIGGER	6	BEGIN

SC_TP_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

SC_TP_LU	TRIGGER	8	END;

SC_TP_LU	TRIGGER	9	

SC_TP_JUSTIFICATION_LU	TRIGGER	1	TRIGGER PERSIK.SC_TP_justification_LU

SC_TP_JUSTIFICATION_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE OF justification

SC_TP_JUSTIFICATION_LU	TRIGGER	3	   ON PERSIK.SC_TP

SC_TP_JUSTIFICATION_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_TP_JUSTIFICATION_LU	TRIGGER	5	   FOR EACH ROW

SC_TP_JUSTIFICATION_LU	TRIGGER	6	BEGIN

SC_TP_JUSTIFICATION_LU	TRIGGER	7	   :NEW.justification_lu := SYSDATE;

SC_TP_JUSTIFICATION_LU	TRIGGER	8	END;
SC_TP_FIXED_LU	TRIGGER	1	TRIGGER PERSIK.SC_TP_FIXED_LU

SC_TP_FIXED_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE OF fixed

SC_TP_FIXED_LU	TRIGGER	3	   ON PERSIK.SC_TP

SC_TP_FIXED_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_TP_FIXED_LU	TRIGGER	5	   FOR EACH ROW

SC_TP_FIXED_LU	TRIGGER	6	BEGIN

SC_TP_FIXED_LU	TRIGGER	7	   :NEW.fixed_lu := SYSDATE;

SC_TP_FIXED_LU	TRIGGER	8	END;
SC_SVODN_TN	TRIGGER	1	TRIGGER PERSIK.SC_SVODN_tn

SC_SVODN_TN	TRIGGER	2	   BEFORE INSERT OR UPDATE OF lu_tn

SC_SVODN_TN	TRIGGER	3	   ON PERSIK.SC_SVODN

SC_SVODN_TN	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_SVODN_TN	TRIGGER	5	   FOR EACH ROW

SC_SVODN_TN	TRIGGER	6	BEGIN

SC_SVODN_TN	TRIGGER	7	   :NEW.lu := SYSDATE;

SC_SVODN_TN	TRIGGER	8	

SC_SVODN_TN	TRIGGER	9	   IF :NEW.lu_tn IS NOT NULL

SC_SVODN_TN	TRIGGER	10	   THEN

SC_SVODN_TN	TRIGGER	11	      SELECT fio

SC_SVODN_TN	TRIGGER	12	        INTO :NEW.lu_fio

SC_SVODN_TN	TRIGGER	13	        FROM user_list

SC_SVODN_TN	TRIGGER	14	       WHERE tn = :new.lu_tn;

SC_SVODN_TN	TRIGGER	15	   END IF;

SC_SVODN_TN	TRIGGER	16	END;
SC_SVODN_NEW	TRIGGER	1	TRIGGER PERSIK.SC_SVODN_NEW

SC_SVODN_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_SVODN_NEW	TRIGGER	3	   ON PERSIK.SC_SVODN

SC_SVODN_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_SVODN_NEW	TRIGGER	5	   FOR EACH ROW

SC_SVODN_NEW	TRIGGER	6	BEGIN

SC_SVODN_NEW	TRIGGER	7	   :NEW.id := NVL (:NEW.id, seq_all.NEXTVAL);

SC_SVODN_NEW	TRIGGER	8	END;
SC_SVODN_LU	TRIGGER	1	TRIGGER PERSIK.SC_SVODN_LU

SC_SVODN_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_SVODN_LU	TRIGGER	3	   ON PERSIK.SC_SVODN

SC_SVODN_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_SVODN_LU	TRIGGER	5	   FOR EACH ROW

SC_SVODN_LU	TRIGGER	6	BEGIN

SC_SVODN_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

SC_SVODN_LU	TRIGGER	8	END;
SC_SVODF_NEW	TRIGGER	1	TRIGGER sc_svodf_NEW

SC_SVODF_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_SVODF_NEW	TRIGGER	3	   ON sc_svodf

SC_SVODF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_SVODF_NEW	TRIGGER	5	   FOR EACH ROW

SC_SVODF_NEW	TRIGGER	6	BEGIN

SC_SVODF_NEW	TRIGGER	7	   IF :NEW.id IS NULL

SC_SVODF_NEW	TRIGGER	8	   THEN

SC_SVODF_NEW	TRIGGER	9	      :NEW.id := seq_all.NEXTVAL;

SC_SVODF_NEW	TRIGGER	10	   END IF;

SC_SVODF_NEW	TRIGGER	11	END;
SC_SVODF_LU	TRIGGER	1	TRIGGER sc_svodf_LU

SC_SVODF_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_SVODF_LU	TRIGGER	3	   ON sc_svodf

SC_SVODF_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_SVODF_LU	TRIGGER	5	   FOR EACH ROW

SC_SVODF_LU	TRIGGER	6	BEGIN

SC_SVODF_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

SC_SVODF_LU	TRIGGER	8	END;
SC_FILES_NEW	TRIGGER	1	TRIGGER "PERSIK"."SC_FILES_NEW" 

SC_FILES_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_FILES_NEW	TRIGGER	3	   ON SC_FILES

SC_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_FILES_NEW	TRIGGER	5	   FOR EACH ROW

SC_FILES_NEW	TRIGGER	6	BEGIN

SC_FILES_NEW	TRIGGER	7	   IF :NEW.id IS NULL

SC_FILES_NEW	TRIGGER	8	   THEN

SC_FILES_NEW	TRIGGER	9	      :NEW.id := seq_all.NEXTVAL;

SC_FILES_NEW	TRIGGER	10	   END IF;

SC_FILES_NEW	TRIGGER	11	END;

SC_FILES_NEW	TRIGGER	12	

SC_FILES_LU	TRIGGER	1	TRIGGER "PERSIK"."SC_FILES_LU" 

SC_FILES_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_FILES_LU	TRIGGER	3	   ON SC_FILES

SC_FILES_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_FILES_LU	TRIGGER	5	   FOR EACH ROW

SC_FILES_LU	TRIGGER	6	BEGIN

SC_FILES_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

SC_FILES_LU	TRIGGER	8	END;

SC_FILES_LU	TRIGGER	9	

SC_BONUS_OK_DB	TRIGGER	1	TRIGGER "PERSIK"."SC_BONUS_OK_DB" 

SC_BONUS_OK_DB	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_db_tn

SC_BONUS_OK_DB	TRIGGER	3	   ON PERSIK.SC_SVOD

SC_BONUS_OK_DB	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_BONUS_OK_DB	TRIGGER	5	   FOR EACH ROW

SC_BONUS_OK_DB	TRIGGER	6	BEGIN

SC_BONUS_OK_DB	TRIGGER	7	   IF :NEW.ok_db_tn IS NULL

SC_BONUS_OK_DB	TRIGGER	8	   THEN

SC_BONUS_OK_DB	TRIGGER	9	      :NEW.ok_db_lu := NULL;

SC_BONUS_OK_DB	TRIGGER	10	      :NEW.ok_db_fio := NULL;

SC_BONUS_OK_DB	TRIGGER	11	   ELSE

SC_BONUS_OK_DB	TRIGGER	12	      :NEW.ok_db_lu := SYSDATE;

SC_BONUS_OK_DB	TRIGGER	13	

SC_BONUS_OK_DB	TRIGGER	14	      SELECT fio

SC_BONUS_OK_DB	TRIGGER	15	        INTO :NEW.ok_db_fio

SC_BONUS_OK_DB	TRIGGER	16	        FROM user_list

SC_BONUS_OK_DB	TRIGGER	17	       WHERE tn = :new.ok_db_tn;

SC_BONUS_OK_DB	TRIGGER	18	   END IF;

SC_BONUS_OK_DB	TRIGGER	19	END;

SC_BONUS_OK_DB	TRIGGER	20	

SC_BONUS_NEW	TRIGGER	1	TRIGGER "PERSIK"."SC_BONUS_NEW" 

SC_BONUS_NEW	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_BONUS_NEW	TRIGGER	3	   ON SC_SVOD

SC_BONUS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_BONUS_NEW	TRIGGER	5	   FOR EACH ROW

SC_BONUS_NEW	TRIGGER	6	BEGIN

SC_BONUS_NEW	TRIGGER	7	   IF :NEW.id IS NULL

SC_BONUS_NEW	TRIGGER	8	   THEN

SC_BONUS_NEW	TRIGGER	9	      :NEW.id := seq_all.NEXTVAL;

SC_BONUS_NEW	TRIGGER	10	   END IF;

SC_BONUS_NEW	TRIGGER	11	END;

SC_BONUS_NEW	TRIGGER	12	

SC_BONUS_LU	TRIGGER	1	TRIGGER "PERSIK"."SC_BONUS_LU" 

SC_BONUS_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

SC_BONUS_LU	TRIGGER	3	   ON SC_SVOD

SC_BONUS_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

SC_BONUS_LU	TRIGGER	5	   FOR EACH ROW

SC_BONUS_LU	TRIGGER	6	BEGIN

SC_BONUS_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

SC_BONUS_LU	TRIGGER	8	END;

SC_BONUS_LU	TRIGGER	9	

SCORE_raise	TRIGGER	1	TRIGGER "PERSIK"."SCORE_raise" 

SCORE_raise	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

SCORE_raise	TRIGGER	3	   ON PERSIK.OCENKA_SCORE

SCORE_raise	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

SCORE_raise	TRIGGER	5	   FOR EACH ROW

SCORE_raise	TRIGGER	6	BEGIN

SCORE_raise	TRIGGER	7	   pr_ocenka_event_enabled (:old.event);

SCORE_raise	TRIGGER	8	END;

SCORE_raise	TRIGGER	9	

SCORE_raise	TRIGGER	10	

SCORE_raise	TRIGGER	11	

SCORE_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."SCORE_LAST_UPDATE" 

SCORE_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

SCORE_LAST_UPDATE	TRIGGER	3	   ON PERSIK.OCENKA_SCORE

SCORE_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

SCORE_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

SCORE_LAST_UPDATE	TRIGGER	6	BEGIN

SCORE_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

SCORE_LAST_UPDATE	TRIGGER	8	END SCORE_last_update;

SCORE_LAST_UPDATE	TRIGGER	9	

SCORE_LAST_UPDATE	TRIGGER	10	

SCORE_LAST_UPDATE	TRIGGER	11	

R_RESULT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_RESULT_LAST_UPDATE" 

R_RESULT_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

R_RESULT_LAST_UPDATE	TRIGGER	3	ON R_RESULT REFERENCING NEW AS New OLD AS Old

R_RESULT_LAST_UPDATE	TRIGGER	4	FOR EACH ROW

R_RESULT_LAST_UPDATE	TRIGGER	5	DECLARE

R_RESULT_LAST_UPDATE	TRIGGER	6	BEGIN

R_RESULT_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

R_RESULT_LAST_UPDATE	TRIGGER	8	END R_RESULT_last_update; 

R_RESULT_LAST_UPDATE	TRIGGER	9	

R_RESULT_LAST_UPDATE	TRIGGER	10	

R_RESULT_LAST_UPDATE	TRIGGER	11	

R_RESULT_LAST_UPDATE	TRIGGER	12	

R_PURPOSE_NEW	TRIGGER	1	TRIGGER "PERSIK"."R_PURPOSE_NEW" 

R_PURPOSE_NEW	TRIGGER	2	BEFORE INSERT

R_PURPOSE_NEW	TRIGGER	3	ON R_PURPOSE 

R_PURPOSE_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

R_PURPOSE_NEW	TRIGGER	5	FOR EACH ROW

R_PURPOSE_NEW	TRIGGER	6	DECLARE

R_PURPOSE_NEW	TRIGGER	7	BEGIN

R_PURPOSE_NEW	TRIGGER	8	   select nvl(max(purpose_id),0)+1 newid into :NEW.purpose_id from r_purpose;

R_PURPOSE_NEW	TRIGGER	9	END r_purpose_new; 

R_PURPOSE_NEW	TRIGGER	10	

R_PURPOSE_NEW	TRIGGER	11	

R_PURPOSE_NEW	TRIGGER	12	

R_PURPOSE_NEW	TRIGGER	13	

R_PURPOSE_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_PURPOSE_LAST_UPDATE" 

R_PURPOSE_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

R_PURPOSE_LAST_UPDATE	TRIGGER	3	ON R_PURPOSE REFERENCING NEW AS New OLD AS Old

R_PURPOSE_LAST_UPDATE	TRIGGER	4	FOR EACH ROW

R_PURPOSE_LAST_UPDATE	TRIGGER	5	DECLARE

R_PURPOSE_LAST_UPDATE	TRIGGER	6	BEGIN

R_PURPOSE_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

R_PURPOSE_LAST_UPDATE	TRIGGER	8	END R_PURPOSE_last_update; 

R_PURPOSE_LAST_UPDATE	TRIGGER	9	

R_PURPOSE_LAST_UPDATE	TRIGGER	10	

R_PURPOSE_LAST_UPDATE	TRIGGER	11	

R_PURPOSE_LAST_UPDATE	TRIGGER	12	

R_PURPOSE_DEL	TRIGGER	1	TRIGGER "PERSIK"."R_PURPOSE_DEL" 

R_PURPOSE_DEL	TRIGGER	2	BEFORE DELETE

R_PURPOSE_DEL	TRIGGER	3	ON R_PURPOSE 

R_PURPOSE_DEL	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

R_PURPOSE_DEL	TRIGGER	5	FOR EACH ROW

R_PURPOSE_DEL	TRIGGER	6	DECLARE

R_PURPOSE_DEL	TRIGGER	7	BEGIN

R_PURPOSE_DEL	TRIGGER	8	   delete from r_dev_movement where purpose_id=:old.purpose_id;

R_PURPOSE_DEL	TRIGGER	9	END r_purpose_del; 

R_PURPOSE_DEL	TRIGGER	10	

R_PURPOSE_DEL	TRIGGER	11	

R_PURPOSE_DEL	TRIGGER	12	

R_PURPOSE_DEL	TRIGGER	13	

R_PROBATION_NEW	TRIGGER	1	TRIGGER "PERSIK"."R_PROBATION_NEW" 

R_PROBATION_NEW	TRIGGER	2	BEFORE INSERT

R_PROBATION_NEW	TRIGGER	3	ON R_PROBATION 

R_PROBATION_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

R_PROBATION_NEW	TRIGGER	5	FOR EACH ROW

R_PROBATION_NEW	TRIGGER	6	DECLARE

R_PROBATION_NEW	TRIGGER	7	BEGIN

R_PROBATION_NEW	TRIGGER	8	   select nvl(max(probation_id),0)+1 newid into :NEW.probation_id from r_probation;

R_PROBATION_NEW	TRIGGER	9	END r_probation_new; 

R_PROBATION_NEW	TRIGGER	10	

R_PROBATION_NEW	TRIGGER	11	

R_PROBATION_NEW	TRIGGER	12	

R_PROBATION_NEW	TRIGGER	13	

R_PROBATION_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_PROBATION_LAST_UPDATE" 

R_PROBATION_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

R_PROBATION_LAST_UPDATE	TRIGGER	3	ON R_PROBATION REFERENCING NEW AS New OLD AS Old

R_PROBATION_LAST_UPDATE	TRIGGER	4	FOR EACH ROW

R_PROBATION_LAST_UPDATE	TRIGGER	5	DECLARE

R_PROBATION_LAST_UPDATE	TRIGGER	6	BEGIN

R_PROBATION_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

R_PROBATION_LAST_UPDATE	TRIGGER	8	END R_PROBATION_last_update; 

R_PROBATION_LAST_UPDATE	TRIGGER	9	

R_PROBATION_LAST_UPDATE	TRIGGER	10	

R_PROBATION_LAST_UPDATE	TRIGGER	11	

R_PROBATION_LAST_UPDATE	TRIGGER	12	

R_PLAN_UPD	TRIGGER	1	TRIGGER "PERSIK"."R_PLAN_UPD" 

R_PLAN_UPD	TRIGGER	2	   BEFORE UPDATE OF status

R_PLAN_UPD	TRIGGER	3	   ON r_plan

R_PLAN_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

R_PLAN_UPD	TRIGGER	5	   FOR EACH ROW

R_PLAN_UPD	TRIGGER	6	BEGIN

R_PLAN_UPD	TRIGGER	7	   IF NVL (:OLD.status, -1) <> :NEW.status

R_PLAN_UPD	TRIGGER	8	   THEN

R_PLAN_UPD	TRIGGER	9	      :NEW.status_date := SYSDATE;

R_PLAN_UPD	TRIGGER	10	   END IF;

R_PLAN_UPD	TRIGGER	11	END r_plan_upd; 

R_PLAN_UPD	TRIGGER	12	

R_PLAN_UPD	TRIGGER	13	

R_PLAN_UPD	TRIGGER	14	

R_PLAN_UPD	TRIGGER	15	

R_PLAN_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_PLAN_LAST_UPDATE" 

R_PLAN_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

R_PLAN_LAST_UPDATE	TRIGGER	3	ON PERSIK.R_PLAN 

R_PLAN_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

R_PLAN_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

R_PLAN_LAST_UPDATE	TRIGGER	6	/* Formatted on 2012/01/26 22:26 (Formatter Plus v4.8.8) */

R_PLAN_LAST_UPDATE	TRIGGER	7	DECLARE

R_PLAN_LAST_UPDATE	TRIGGER	8	BEGIN

R_PLAN_LAST_UPDATE	TRIGGER	9	   :NEW.lu := SYSDATE;

R_PLAN_LAST_UPDATE	TRIGGER	10	

R_PLAN_LAST_UPDATE	TRIGGER	11	   IF :NEW.mobile_region <> 2

R_PLAN_LAST_UPDATE	TRIGGER	12	   THEN

R_PLAN_LAST_UPDATE	TRIGGER	13	      :NEW.mobile_region_text := NULL;

R_PLAN_LAST_UPDATE	TRIGGER	14	   END IF;

R_PLAN_LAST_UPDATE	TRIGGER	15	

R_PLAN_LAST_UPDATE	TRIGGER	16	   IF :NEW.mobile_post <> 2

R_PLAN_LAST_UPDATE	TRIGGER	17	   THEN

R_PLAN_LAST_UPDATE	TRIGGER	18	      :NEW.mobile_post_text := NULL;

R_PLAN_LAST_UPDATE	TRIGGER	19	   END IF;

R_PLAN_LAST_UPDATE	TRIGGER	20	END r_plan_last_update; 

R_PLAN_LAST_UPDATE	TRIGGER	21	

R_PLAN_LAST_UPDATE	TRIGGER	22	

R_PLAN_LAST_UPDATE	TRIGGER	23	

R_PLAN_DEL	TRIGGER	1	TRIGGER R_PLAN_DEL

R_PLAN_DEL	TRIGGER	2	   BEFORE DELETE

R_PLAN_DEL	TRIGGER	3	   ON R_PLAN

R_PLAN_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

R_PLAN_DEL	TRIGGER	5	   FOR EACH ROW

R_PLAN_DEL	TRIGGER	6	DECLARE

R_PLAN_DEL	TRIGGER	7	BEGIN

R_PLAN_DEL	TRIGGER	8	   DELETE FROM r_probation

R_PLAN_DEL	TRIGGER	9	         WHERE tn = :OLD.tn AND event = :OLD.event;

R_PLAN_DEL	TRIGGER	10	

R_PLAN_DEL	TRIGGER	11	   DELETE FROM r_purpose

R_PLAN_DEL	TRIGGER	12	         WHERE tn = :OLD.tn AND event = :OLD.event;

R_PLAN_DEL	TRIGGER	13	END r_plan_del;
R_OS_NEW	TRIGGER	1	TRIGGER "PERSIK"."R_OS_NEW" 

R_OS_NEW	TRIGGER	2	   BEFORE INSERT

R_OS_NEW	TRIGGER	3	   ON PERSIK.R_os

R_OS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

R_OS_NEW	TRIGGER	5	   FOR EACH ROW

R_OS_NEW	TRIGGER	6	DECLARE

R_OS_NEW	TRIGGER	7	BEGIN

R_OS_NEW	TRIGGER	8	   SELECT NVL (MAX (os_id), 0) + 1 newid INTO :NEW.os_id FROM r_os;

R_OS_NEW	TRIGGER	9	END r_os_new;

R_OS_NEW	TRIGGER	10	

R_OS_MOVEMENT_NEW	TRIGGER	1	TRIGGER "PERSIK"."R_OS_MOVEMENT_NEW" 

R_OS_MOVEMENT_NEW	TRIGGER	2	   BEFORE INSERT

R_OS_MOVEMENT_NEW	TRIGGER	3	   ON PERSIK.R_os_movement

R_OS_MOVEMENT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

R_OS_MOVEMENT_NEW	TRIGGER	5	   FOR EACH ROW

R_OS_MOVEMENT_NEW	TRIGGER	6	DECLARE

R_OS_MOVEMENT_NEW	TRIGGER	7	BEGIN

R_OS_MOVEMENT_NEW	TRIGGER	8	   SELECT NVL (MAX (movement_id), 0) + 1 newid

R_OS_MOVEMENT_NEW	TRIGGER	9	     INTO :NEW.movement_id

R_OS_MOVEMENT_NEW	TRIGGER	10	     FROM r_os_movement;

R_OS_MOVEMENT_NEW	TRIGGER	11	END r_os_movement_new;

R_OS_MOVEMENT_NEW	TRIGGER	12	

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_OS_MOVEMENT_LAST_UPDATE" 

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	3	   ON PERSIK.R_os_movement

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	6	DECLARE

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	7	BEGIN

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	9	END R_os_movement_last_update;

R_OS_MOVEMENT_LAST_UPDATE	TRIGGER	10	

R_OS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_OS_LAST_UPDATE" 

R_OS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

R_OS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.R_os

R_OS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

R_OS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

R_OS_LAST_UPDATE	TRIGGER	6	DECLARE

R_OS_LAST_UPDATE	TRIGGER	7	BEGIN

R_OS_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

R_OS_LAST_UPDATE	TRIGGER	9	END R_os_last_update;

R_OS_LAST_UPDATE	TRIGGER	10	

R_OS_DEL	TRIGGER	1	TRIGGER "PERSIK"."R_OS_DEL" 

R_OS_DEL	TRIGGER	2	   BEFORE DELETE

R_OS_DEL	TRIGGER	3	   ON PERSIK.R_os

R_OS_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

R_OS_DEL	TRIGGER	5	   FOR EACH ROW

R_OS_DEL	TRIGGER	6	DECLARE

R_OS_DEL	TRIGGER	7	BEGIN

R_OS_DEL	TRIGGER	8	   DELETE FROM r_os_movement

R_OS_DEL	TRIGGER	9	         WHERE os_id = :old.os_id;

R_OS_DEL	TRIGGER	10	END r_os_del;

R_OS_DEL	TRIGGER	11	

R_EVENT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_EVENT_LAST_UPDATE" 

R_EVENT_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

R_EVENT_LAST_UPDATE	TRIGGER	3	ON R_EVENT REFERENCING NEW AS New OLD AS Old

R_EVENT_LAST_UPDATE	TRIGGER	4	FOR EACH ROW

R_EVENT_LAST_UPDATE	TRIGGER	5	DECLARE

R_EVENT_LAST_UPDATE	TRIGGER	6	BEGIN

R_EVENT_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

R_EVENT_LAST_UPDATE	TRIGGER	8	END R_EVENT_last_update; 

R_EVENT_LAST_UPDATE	TRIGGER	9	

R_EVENT_LAST_UPDATE	TRIGGER	10	

R_EVENT_LAST_UPDATE	TRIGGER	11	

R_EVENT_LAST_UPDATE	TRIGGER	12	

R_DEV_MOVEMENT_NEW	TRIGGER	1	TRIGGER "PERSIK"."R_DEV_MOVEMENT_NEW" 

R_DEV_MOVEMENT_NEW	TRIGGER	2	BEFORE INSERT

R_DEV_MOVEMENT_NEW	TRIGGER	3	ON R_DEV_MOVEMENT 

R_DEV_MOVEMENT_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

R_DEV_MOVEMENT_NEW	TRIGGER	5	FOR EACH ROW

R_DEV_MOVEMENT_NEW	TRIGGER	6	DECLARE

R_DEV_MOVEMENT_NEW	TRIGGER	7	BEGIN

R_DEV_MOVEMENT_NEW	TRIGGER	8	   select nvl(max(movement_id),0)+1 newid into :NEW.movement_id from r_DEV_MOVEMENT;

R_DEV_MOVEMENT_NEW	TRIGGER	9	END r_DEV_MOVEMENT_new; 

R_DEV_MOVEMENT_NEW	TRIGGER	10	

R_DEV_MOVEMENT_NEW	TRIGGER	11	

R_DEV_MOVEMENT_NEW	TRIGGER	12	

R_DEV_MOVEMENT_NEW	TRIGGER	13	

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."R_DEV_MOVEMENT_LAST_UPDATE" 

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	3	ON R_DEV_MOVEMENT 

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	6	DECLARE

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	7	BEGIN

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	9	END R_DEV_MOVEMENT_last_update; 

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	10	

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	11	

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	12	

R_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	13	

ROUTES_UPD	TRIGGER	1	TRIGGER PERSIK.ROUTES_UPD

ROUTES_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

ROUTES_UPD	TRIGGER	3	   ON PERSIK.ROUTES

ROUTES_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ROUTES_UPD	TRIGGER	5	   FOR EACH ROW

ROUTES_UPD	TRIGGER	6	BEGIN

ROUTES_UPD	TRIGGER	7	   :new.tp_type_short :=

ROUTES_UPD	TRIGGER	8	      SUBSTR (:new.tp_type,

ROUTES_UPD	TRIGGER	9	              INSTR (:new.tp_type, '('),

ROUTES_UPD	TRIGGER	10	              INSTR (:new.tp_type, ')') - INSTR (:new.tp_type, '(') + 1);

ROUTES_UPD	TRIGGER	11	

ROUTES_UPD	TRIGGER	12	   :NEW.h_eta := md5hash (:new.eta);

ROUTES_UPD	TRIGGER	13	   :NEW.h_day_pos := md5hash (:new.day_pos);

ROUTES_UPD	TRIGGER	14	

ROUTES_UPD	TRIGGER	15	   BEGIN

ROUTES_UPD	TRIGGER	16	      IF :new.country IS NOT NULL

ROUTES_UPD	TRIGGER	17	      THEN

ROUTES_UPD	TRIGGER	18	         SELECT dpt_id

ROUTES_UPD	TRIGGER	19	           INTO :new.dpt_id

ROUTES_UPD	TRIGGER	20	           FROM departments

ROUTES_UPD	TRIGGER	21	          WHERE manufak = :new.country;

ROUTES_UPD	TRIGGER	22	      END IF;

ROUTES_UPD	TRIGGER	23	   EXCEPTION

ROUTES_UPD	TRIGGER	24	      WHEN OTHERS

ROUTES_UPD	TRIGGER	25	      THEN

ROUTES_UPD	TRIGGER	26	         NULL;

ROUTES_UPD	TRIGGER	27	   END;

ROUTES_UPD	TRIGGER	28	

ROUTES_UPD	TRIGGER	29	   IF SUBSTR (:new.day_pos, 1, 2) = '0.'

ROUTES_UPD	TRIGGER	30	   THEN

ROUTES_UPD	TRIGGER	31	      :new.dw_num := 0;

ROUTES_UPD	TRIGGER	32	      :new.dw_text := 'ТП не в маршруте';

ROUTES_UPD	TRIGGER	33	   END IF;

ROUTES_UPD	TRIGGER	34	

ROUTES_UPD	TRIGGER	35	   IF SUBSTR (:new.day_pos, 1, 2) = '1.'

ROUTES_UPD	TRIGGER	36	   THEN

ROUTES_UPD	TRIGGER	37	      :new.dw_num := 1;

ROUTES_UPD	TRIGGER	38	      :new.dw_text := 'Понедельник';

ROUTES_UPD	TRIGGER	39	   END IF;

ROUTES_UPD	TRIGGER	40	

ROUTES_UPD	TRIGGER	41	   IF SUBSTR (:new.day_pos, 1, 2) = '2.'

ROUTES_UPD	TRIGGER	42	   THEN

ROUTES_UPD	TRIGGER	43	      :new.dw_num := 2;

ROUTES_UPD	TRIGGER	44	      :new.dw_text := 'Вторник';

ROUTES_UPD	TRIGGER	45	   END IF;

ROUTES_UPD	TRIGGER	46	

ROUTES_UPD	TRIGGER	47	   IF SUBSTR (:new.day_pos, 1, 2) = '3.'

ROUTES_UPD	TRIGGER	48	   THEN

ROUTES_UPD	TRIGGER	49	      :new.dw_num := 3;

ROUTES_UPD	TRIGGER	50	      :new.dw_text := 'Среда';

ROUTES_UPD	TRIGGER	51	   END IF;

ROUTES_UPD	TRIGGER	52	

ROUTES_UPD	TRIGGER	53	   IF SUBSTR (:new.day_pos, 1, 2) = '4.'

ROUTES_UPD	TRIGGER	54	   THEN

ROUTES_UPD	TRIGGER	55	      :new.dw_num := 4;

ROUTES_UPD	TRIGGER	56	      :new.dw_text := 'Четверг';

ROUTES_UPD	TRIGGER	57	   END IF;

ROUTES_UPD	TRIGGER	58	

ROUTES_UPD	TRIGGER	59	   IF SUBSTR (:new.day_pos, 1, 2) = '5.'

ROUTES_UPD	TRIGGER	60	   THEN

ROUTES_UPD	TRIGGER	61	      :new.dw_num := 5;

ROUTES_UPD	TRIGGER	62	      :new.dw_text := 'Пятница';

ROUTES_UPD	TRIGGER	63	   END IF;

ROUTES_UPD	TRIGGER	64	

ROUTES_UPD	TRIGGER	65	   IF SUBSTR (:new.day_pos, 1, 2) = '6.'

ROUTES_UPD	TRIGGER	66	   THEN

ROUTES_UPD	TRIGGER	67	      :new.dw_num := 6;

ROUTES_UPD	TRIGGER	68	      :new.dw_text := 'Суббота';

ROUTES_UPD	TRIGGER	69	   END IF;

ROUTES_UPD	TRIGGER	70	

ROUTES_UPD	TRIGGER	71	   IF SUBSTR (:new.day_pos, 1, 2) = '7.'

ROUTES_UPD	TRIGGER	72	   THEN

ROUTES_UPD	TRIGGER	73	      :new.dw_num := 7;

ROUTES_UPD	TRIGGER	74	      :new.dw_text := 'Воскресенье';

ROUTES_UPD	TRIGGER	75	   END IF;

ROUTES_UPD	TRIGGER	76	END;
ROUTES_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.ROUTES_MV_Q_ADD

ROUTES_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

ROUTES_MV_Q_ADD	TRIGGER	3	   ON PERSIK.ROUTES

ROUTES_MV_Q_ADD	TRIGGER	4	BEGIN

ROUTES_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

ROUTES_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

ROUTES_MV_Q_ADD	TRIGGER	7	END;
REP_SPD_GENERATE	PROCEDURE	1	PROCEDURE        rep_spd_generate

REP_SPD_GENERATE	PROCEDURE	2	IS

REP_SPD_GENERATE	PROCEDURE	3	   v_h_eta      VARCHAR2 (32);

REP_SPD_GENERATE	PROCEDURE	4	   c            INTEGER;

REP_SPD_GENERATE	PROCEDURE	5	   ecode        NUMBER;

REP_SPD_GENERATE	PROCEDURE	6	   emesg        VARCHAR2 (200);

REP_SPD_GENERATE	PROCEDURE	7	   max_photos   INTEGER := 10;

REP_SPD_GENERATE	PROCEDURE	8	   v_task       VARCHAR2 (4000);

REP_SPD_GENERATE	PROCEDURE	9	BEGIN

REP_SPD_GENERATE	PROCEDURE	10	   FOR x IN (  SELECT dt

REP_SPD_GENERATE	PROCEDURE	11	                 FROM rep_spd_dt

REP_SPD_GENERATE	PROCEDURE	12	             ORDER BY dt)

REP_SPD_GENERATE	PROCEDURE	13	   LOOP

REP_SPD_GENERATE	PROCEDURE	14	      INSERT INTO full_log (text, prg)

REP_SPD_GENERATE	PROCEDURE	15	           VALUES (

REP_SPD_GENERATE	PROCEDURE	16	                        'rep_spd generate '

REP_SPD_GENERATE	PROCEDURE	17	                     || TO_CHAR (x.dt, 'dd.mm.yyyy')

REP_SPD_GENERATE	PROCEDURE	18	                     || ' start',

REP_SPD_GENERATE	PROCEDURE	19	                     'rep_spd');

REP_SPD_GENERATE	PROCEDURE	20	

REP_SPD_GENERATE	PROCEDURE	21	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	22	

REP_SPD_GENERATE	PROCEDURE	23	

REP_SPD_GENERATE	PROCEDURE	24	

REP_SPD_GENERATE	PROCEDURE	25	      DELETE FROM rep_spd_visits

REP_SPD_GENERATE	PROCEDURE	26	            WHERE dt = x.dt;

REP_SPD_GENERATE	PROCEDURE	27	

REP_SPD_GENERATE	PROCEDURE	28	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	29	

REP_SPD_GENERATE	PROCEDURE	30	      DELETE FROM rep_spd_urls;

REP_SPD_GENERATE	PROCEDURE	31	

REP_SPD_GENERATE	PROCEDURE	32	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	33	

REP_SPD_GENERATE	PROCEDURE	34	      /*DBMS_RANDOM.initialize (17809465);*/

REP_SPD_GENERATE	PROCEDURE	35	

REP_SPD_GENERATE	PROCEDURE	36	      FOR a

REP_SPD_GENERATE	PROCEDURE	37	         IN (SELECT l.ter_db,

REP_SPD_GENERATE	PROCEDURE	38	                    l.id,

REP_SPD_GENERATE	PROCEDURE	39	                    l.fio,

REP_SPD_GENERATE	PROCEDURE	40	                    l.tn,

REP_SPD_GENERATE	PROCEDURE	41	                    h.service,

REP_SPD_GENERATE	PROCEDURE	42	                    h.h_fio_eta

REP_SPD_GENERATE	PROCEDURE	43	               FROM rep_spd_list l, rep_spd_head h

REP_SPD_GENERATE	PROCEDURE	44	              WHERE     (l.last_month IS NULL OR l.last_month >= x.dt)

REP_SPD_GENERATE	PROCEDURE	45	                    AND h.dt = x.dt

REP_SPD_GENERATE	PROCEDURE	46	                    AND h.tn = l.tn

REP_SPD_GENERATE	PROCEDURE	47	                    AND h.service IS NOT NULL)

REP_SPD_GENERATE	PROCEDURE	48	      LOOP

REP_SPD_GENERATE	PROCEDURE	49	         SELECT h_eta

REP_SPD_GENERATE	PROCEDURE	50	           INTO v_h_eta

REP_SPD_GENERATE	PROCEDURE	51	           FROM (SELECT ROWNUM rn, h_eta

REP_SPD_GENERATE	PROCEDURE	52	                   FROM (  SELECT DISTINCT r.h_eta

REP_SPD_GENERATE	PROCEDURE	53	                             FROM (SELECT DISTINCT tp_place,

REP_SPD_GENERATE	PROCEDURE	54	                                                   tp_type,

REP_SPD_GENERATE	PROCEDURE	55	                                                   stelag,

REP_SPD_GENERATE	PROCEDURE	56	                                                   tumb,

REP_SPD_GENERATE	PROCEDURE	57	                                                   tab_number,

REP_SPD_GENERATE	PROCEDURE	58	                                                   tp_kod,

REP_SPD_GENERATE	PROCEDURE	59	                                                   latitude,

REP_SPD_GENERATE	PROCEDURE	60	                                                   longitude,

REP_SPD_GENERATE	PROCEDURE	61	                                                   ts,

REP_SPD_GENERATE	PROCEDURE	62	                                                   eta,

REP_SPD_GENERATE	PROCEDURE	63	                                                   h_eta

REP_SPD_GENERATE	PROCEDURE	64	                                     FROM routes

REP_SPD_GENERATE	PROCEDURE	65	                                    WHERE dpt_id = 1) r,

REP_SPD_GENERATE	PROCEDURE	66	                                  user_list u

REP_SPD_GENERATE	PROCEDURE	67	                            WHERE     u.tab_num = r.tab_number

REP_SPD_GENERATE	PROCEDURE	68	                                  AND u.dpt_id = 1

REP_SPD_GENERATE	PROCEDURE	69	                                  AND u.tn IN (SELECT slave

REP_SPD_GENERATE	PROCEDURE	70	                                                 FROM full

REP_SPD_GENERATE	PROCEDURE	71	                                                WHERE master = a.ter_db)

REP_SPD_GENERATE	PROCEDURE	72	                                  AND r.h_eta NOT IN

REP_SPD_GENERATE	PROCEDURE	73	                                         (SELECT h.h_fio_eta

REP_SPD_GENERATE	PROCEDURE	74	                                            FROM rep_spd_list l, rep_spd_head h

REP_SPD_GENERATE	PROCEDURE	75	                                           WHERE     (   l.last_month IS NULL

REP_SPD_GENERATE	PROCEDURE	76	                                                      OR l.last_month >= x.dt)

REP_SPD_GENERATE	PROCEDURE	77	                                                 AND h.dt(+) = x.dt

REP_SPD_GENERATE	PROCEDURE	78	                                                 AND h.tn(+) = l.tn

REP_SPD_GENERATE	PROCEDURE	79	                                                 AND h.h_fio_eta IS NOT NULL)

REP_SPD_GENERATE	PROCEDURE	80	                         ORDER BY DBMS_RANDOM.VALUE))

REP_SPD_GENERATE	PROCEDURE	81	          WHERE rn = 1;

REP_SPD_GENERATE	PROCEDURE	82	

REP_SPD_GENERATE	PROCEDURE	83	

REP_SPD_GENERATE	PROCEDURE	84	

REP_SPD_GENERATE	PROCEDURE	85	         UPDATE rep_spd_head

REP_SPD_GENERATE	PROCEDURE	86	            SET h_fio_eta = v_h_eta

REP_SPD_GENERATE	PROCEDURE	87	          WHERE dt = x.dt AND tn = a.tn;

REP_SPD_GENERATE	PROCEDURE	88	

REP_SPD_GENERATE	PROCEDURE	89	         COMMIT;

REP_SPD_GENERATE	PROCEDURE	90	

REP_SPD_GENERATE	PROCEDURE	91	         INSERT INTO rep_spd_visits (VISITDATE,

REP_SPD_GENERATE	PROCEDURE	92	                                     TP_KOD,

REP_SPD_GENERATE	PROCEDURE	93	                                     TP_UR,

REP_SPD_GENERATE	PROCEDURE	94	                                     TP_ADDR,

REP_SPD_GENERATE	PROCEDURE	95	                                     TP_PLACE,

REP_SPD_GENERATE	PROCEDURE	96	                                     TP_TYPE,

REP_SPD_GENERATE	PROCEDURE	97	                                     STELAG,

REP_SPD_GENERATE	PROCEDURE	98	                                     TUMB,

REP_SPD_GENERATE	PROCEDURE	99	                                     LATITUDE,

REP_SPD_GENERATE	PROCEDURE	100	                                     LONGITUDE,

REP_SPD_GENERATE	PROCEDURE	101	                                     H_ETA,

REP_SPD_GENERATE	PROCEDURE	102	                                     TN,

REP_SPD_GENERATE	PROCEDURE	103	                                     dt,

REP_SPD_GENERATE	PROCEDURE	104	                                     nto)

REP_SPD_GENERATE	PROCEDURE	105	            SELECT data,

REP_SPD_GENERATE	PROCEDURE	106	                   tp_kod,

REP_SPD_GENERATE	PROCEDURE	107	                   tp_name,

REP_SPD_GENERATE	PROCEDURE	108	                   address,

REP_SPD_GENERATE	PROCEDURE	109	                   TP_PLACE,

REP_SPD_GENERATE	PROCEDURE	110	                   TP_TYPE,

REP_SPD_GENERATE	PROCEDURE	111	                   STELAG,

REP_SPD_GENERATE	PROCEDURE	112	                   TUMB,

REP_SPD_GENERATE	PROCEDURE	113	                   LATITUDE,

REP_SPD_GENERATE	PROCEDURE	114	                   LONGITUDE,

REP_SPD_GENERATE	PROCEDURE	115	                   H_ETA,

REP_SPD_GENERATE	PROCEDURE	116	                   TN,

REP_SPD_GENERATE	PROCEDURE	117	                   x.dt,

REP_SPD_GENERATE	PROCEDURE	118	                   nto

REP_SPD_GENERATE	PROCEDURE	119	              FROM (SELECT ROWNUM rn, t1.*

REP_SPD_GENERATE	PROCEDURE	120	                      FROM (  SELECT DISTINCT d.data,

REP_SPD_GENERATE	PROCEDURE	121	                                              r.tp_kod,

REP_SPD_GENERATE	PROCEDURE	122	                                              r.tp_name,

REP_SPD_GENERATE	PROCEDURE	123	                                              r.address,

REP_SPD_GENERATE	PROCEDURE	124	                                              r.tp_place,

REP_SPD_GENERATE	PROCEDURE	125	                                              r.tp_type,

REP_SPD_GENERATE	PROCEDURE	126	                                              r.stelag,

REP_SPD_GENERATE	PROCEDURE	127	                                              r.tumb,

REP_SPD_GENERATE	PROCEDURE	128	                                              r.latitude,

REP_SPD_GENERATE	PROCEDURE	129	                                              r.longitude,

REP_SPD_GENERATE	PROCEDURE	130	                                              r.h_eta,

REP_SPD_GENERATE	PROCEDURE	131	                                              a.tn,

REP_SPD_GENERATE	PROCEDURE	132	                                              x.dt,

REP_SPD_GENERATE	PROCEDURE	133	                                              r.nto

REP_SPD_GENERATE	PROCEDURE	134	                                FROM (SELECT DISTINCT tp_name,

REP_SPD_GENERATE	PROCEDURE	135	                                                      address,

REP_SPD_GENERATE	PROCEDURE	136	                                                      tp_place,

REP_SPD_GENERATE	PROCEDURE	137	                                                      tp_type,

REP_SPD_GENERATE	PROCEDURE	138	                                                      stelag,

REP_SPD_GENERATE	PROCEDURE	139	                                                      tumb,

REP_SPD_GENERATE	PROCEDURE	140	                                                      tab_number,

REP_SPD_GENERATE	PROCEDURE	141	                                                      tp_kod,

REP_SPD_GENERATE	PROCEDURE	142	                                                      latitude,

REP_SPD_GENERATE	PROCEDURE	143	                                                      longitude,

REP_SPD_GENERATE	PROCEDURE	144	                                                      ts,

REP_SPD_GENERATE	PROCEDURE	145	                                                      eta,

REP_SPD_GENERATE	PROCEDURE	146	                                                      h_eta,

REP_SPD_GENERATE	PROCEDURE	147	                                                      nto

REP_SPD_GENERATE	PROCEDURE	148	                                        FROM routes

REP_SPD_GENERATE	PROCEDURE	149	                                       WHERE dpt_id = 1) r,

REP_SPD_GENERATE	PROCEDURE	150	                                     user_list u,

REP_SPD_GENERATE	PROCEDURE	151	                                     (SELECT data

REP_SPD_GENERATE	PROCEDURE	152	                                        FROM calendar

REP_SPD_GENERATE	PROCEDURE	153	                                       WHERE     TRUNC (data, 'mm') = x.dt

REP_SPD_GENERATE	PROCEDURE	154	                                             AND is_wd = 1) d

REP_SPD_GENERATE	PROCEDURE	155	                               WHERE     u.tab_num = r.tab_number

REP_SPD_GENERATE	PROCEDURE	156	                                     AND u.dpt_id = 1

REP_SPD_GENERATE	PROCEDURE	157	                                     AND r.h_eta = v_h_eta

REP_SPD_GENERATE	PROCEDURE	158	                            ORDER BY DBMS_RANDOM.VALUE) t1)

REP_SPD_GENERATE	PROCEDURE	159	             WHERE rn <= a.service * 2;

REP_SPD_GENERATE	PROCEDURE	160	

REP_SPD_GENERATE	PROCEDURE	161	         COMMIT;

REP_SPD_GENERATE	PROCEDURE	162	      END LOOP;

REP_SPD_GENERATE	PROCEDURE	163	

REP_SPD_GENERATE	PROCEDURE	164	      INSERT INTO rep_spd_urls (VISITDATE,

REP_SPD_GENERATE	PROCEDURE	165	                                TP_KOD,

REP_SPD_GENERATE	PROCEDURE	166	                                URL,

REP_SPD_GENERATE	PROCEDURE	167	                                H_ETA,

REP_SPD_GENERATE	PROCEDURE	168	                                tn,

REP_SPD_GENERATE	PROCEDURE	169	                                dt)

REP_SPD_GENERATE	PROCEDURE	170	         SELECT v.visitdate,

REP_SPD_GENERATE	PROCEDURE	171	                t.tp_kod_key,

REP_SPD_GENERATE	PROCEDURE	172	                t.url,

REP_SPD_GENERATE	PROCEDURE	173	                t.h_fio_eta,

REP_SPD_GENERATE	PROCEDURE	174	                v.tn,

REP_SPD_GENERATE	PROCEDURE	175	                TRUNC (v.visitdate, 'mm')

REP_SPD_GENERATE	PROCEDURE	176	           FROM rep_spd_visits v, a14to t

REP_SPD_GENERATE	PROCEDURE	177	          WHERE     t.h_url IS NOT NULL

REP_SPD_GENERATE	PROCEDURE	178	                AND t.visitdate >= ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -2)

REP_SPD_GENERATE	PROCEDURE	179	                AND t.tp_kod_key = v.tp_kod

REP_SPD_GENERATE	PROCEDURE	180	                AND t.h_fio_eta = v.h_eta

REP_SPD_GENERATE	PROCEDURE	181	                AND t.visit = 1;

REP_SPD_GENERATE	PROCEDURE	182	

REP_SPD_GENERATE	PROCEDURE	183	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	184	

REP_SPD_GENERATE	PROCEDURE	185	      FOR a IN (  SELECT h_eta,

REP_SPD_GENERATE	PROCEDURE	186	                         visitdate,

REP_SPD_GENERATE	PROCEDURE	187	                         tp_kod,

REP_SPD_GENERATE	PROCEDURE	188	                         COUNT (*) c

REP_SPD_GENERATE	PROCEDURE	189	                    FROM rep_spd_urls

REP_SPD_GENERATE	PROCEDURE	190	                GROUP BY h_eta, visitdate, tp_kod

REP_SPD_GENERATE	PROCEDURE	191	                  HAVING COUNT (*) >= max_photos

REP_SPD_GENERATE	PROCEDURE	192	                ORDER BY c DESC)

REP_SPD_GENERATE	PROCEDURE	193	      LOOP

REP_SPD_GENERATE	PROCEDURE	194	         DELETE FROM rep_spd_urls

REP_SPD_GENERATE	PROCEDURE	195	               WHERE ROWID IN

REP_SPD_GENERATE	PROCEDURE	196	                        (SELECT rid

REP_SPD_GENERATE	PROCEDURE	197	                           FROM (SELECT rid, ROWNUM rn, url

REP_SPD_GENERATE	PROCEDURE	198	                                   FROM (  SELECT ROWID rid, x.*

REP_SPD_GENERATE	PROCEDURE	199	                                             FROM rep_spd_urls x

REP_SPD_GENERATE	PROCEDURE	200	                                            WHERE     h_eta = a.h_eta

REP_SPD_GENERATE	PROCEDURE	201	                                                  AND visitdate = a.visitdate

REP_SPD_GENERATE	PROCEDURE	202	                                                  AND tp_kod = a.tp_kod

REP_SPD_GENERATE	PROCEDURE	203	                                         ORDER BY DBMS_RANDOM.VALUE))

REP_SPD_GENERATE	PROCEDURE	204	                          WHERE rn > max_photos);

REP_SPD_GENERATE	PROCEDURE	205	

REP_SPD_GENERATE	PROCEDURE	206	         COMMIT;

REP_SPD_GENERATE	PROCEDURE	207	      END LOOP;

REP_SPD_GENERATE	PROCEDURE	208	

REP_SPD_GENERATE	PROCEDURE	209	

REP_SPD_GENERATE	PROCEDURE	210	      UPDATE rep_spd_visits v

REP_SPD_GENERATE	PROCEDURE	211	         SET task =

REP_SPD_GENERATE	PROCEDURE	212	                get_random_task (

REP_SPD_GENERATE	PROCEDURE	213	                   (SELECT COUNT (*)

REP_SPD_GENERATE	PROCEDURE	214	                      FROM rep_spd_urls

REP_SPD_GENERATE	PROCEDURE	215	                     WHERE     v.visitdate = visitdate

REP_SPD_GENERATE	PROCEDURE	216	                           AND v.tp_kod = tp_kod

REP_SPD_GENERATE	PROCEDURE	217	                           AND v.h_eta = h_eta

REP_SPD_GENERATE	PROCEDURE	218	                           AND v.tn = tn

REP_SPD_GENERATE	PROCEDURE	219	                           AND v.dt = dt))

REP_SPD_GENERATE	PROCEDURE	220	       WHERE v.dt = x.dt;

REP_SPD_GENERATE	PROCEDURE	221	

REP_SPD_GENERATE	PROCEDURE	222	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	223	

REP_SPD_GENERATE	PROCEDURE	224	      DELETE FROM rep_spd_dt

REP_SPD_GENERATE	PROCEDURE	225	            WHERE dt = x.dt;

REP_SPD_GENERATE	PROCEDURE	226	

REP_SPD_GENERATE	PROCEDURE	227	

REP_SPD_GENERATE	PROCEDURE	228	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	229	

REP_SPD_GENERATE	PROCEDURE	230	      INSERT INTO full_log (text, prg)

REP_SPD_GENERATE	PROCEDURE	231	           VALUES (

REP_SPD_GENERATE	PROCEDURE	232	                        'rep_spd generate '

REP_SPD_GENERATE	PROCEDURE	233	                     || TO_CHAR (x.dt, 'dd.mm.yyyy')

REP_SPD_GENERATE	PROCEDURE	234	                     || ' end',

REP_SPD_GENERATE	PROCEDURE	235	                     'rep_spd');

REP_SPD_GENERATE	PROCEDURE	236	

REP_SPD_GENERATE	PROCEDURE	237	      COMMIT;

REP_SPD_GENERATE	PROCEDURE	238	   END LOOP;

REP_SPD_GENERATE	PROCEDURE	239	END;
REP_SPDMS_GENERATE	PROCEDURE	1	PROCEDURE        rep_spdms_generate

REP_SPDMS_GENERATE	PROCEDURE	2	IS

REP_SPDMS_GENERATE	PROCEDURE	3	   c           INTEGER;

REP_SPDMS_GENERATE	PROCEDURE	4	   /*v_task       VARCHAR2 (4000);*/

REP_SPDMS_GENERATE	PROCEDURE	5	   ratio_avk   INTEGER;

REP_SPDMS_GENERATE	PROCEDURE	6	   ratio_ms    INTEGER;

REP_SPDMS_GENERATE	PROCEDURE	7	   h_avk       FLOAT (126);

REP_SPDMS_GENERATE	PROCEDURE	8	   h_ms        FLOAT (126);

REP_SPDMS_GENERATE	PROCEDURE	9	   koef_avk    FLOAT (126);

REP_SPDMS_GENERATE	PROCEDURE	10	   koef_ms     FLOAT (126);

REP_SPDMS_GENERATE	PROCEDURE	11	   days        INTEGER;

REP_SPDMS_GENERATE	PROCEDURE	12	BEGIN

REP_SPDMS_GENERATE	PROCEDURE	13	   SELECT val_number

REP_SPDMS_GENERATE	PROCEDURE	14	     INTO ratio_avk

REP_SPDMS_GENERATE	PROCEDURE	15	     FROM parameters

REP_SPDMS_GENERATE	PROCEDURE	16	    WHERE param_name = 'ratio_avk';

REP_SPDMS_GENERATE	PROCEDURE	17	

REP_SPDMS_GENERATE	PROCEDURE	18	   SELECT val_number

REP_SPDMS_GENERATE	PROCEDURE	19	     INTO ratio_ms

REP_SPDMS_GENERATE	PROCEDURE	20	     FROM parameters

REP_SPDMS_GENERATE	PROCEDURE	21	    WHERE param_name = 'ratio_ms';

REP_SPDMS_GENERATE	PROCEDURE	22	

REP_SPDMS_GENERATE	PROCEDURE	23	   FOR x IN (  SELECT dt

REP_SPDMS_GENERATE	PROCEDURE	24	                 FROM rep_spdms_dt

REP_SPDMS_GENERATE	PROCEDURE	25	             ORDER BY dt)

REP_SPDMS_GENERATE	PROCEDURE	26	   LOOP

REP_SPDMS_GENERATE	PROCEDURE	27	      INSERT INTO full_log (text, prg)

REP_SPDMS_GENERATE	PROCEDURE	28	              VALUES (

REP_SPDMS_GENERATE	PROCEDURE	29	                           'rep_spdms generate '

REP_SPDMS_GENERATE	PROCEDURE	30	                        || TO_CHAR (x.dt, 'dd.mm.yyyy')

REP_SPDMS_GENERATE	PROCEDURE	31	                        || ' start',

REP_SPDMS_GENERATE	PROCEDURE	32	                        'rep_spdms');

REP_SPDMS_GENERATE	PROCEDURE	33	

REP_SPDMS_GENERATE	PROCEDURE	34	      COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	35	

REP_SPDMS_GENERATE	PROCEDURE	36	      DELETE FROM rep_spdms_visits

REP_SPDMS_GENERATE	PROCEDURE	37	            WHERE dt = x.dt;

REP_SPDMS_GENERATE	PROCEDURE	38	

REP_SPDMS_GENERATE	PROCEDURE	39	      COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	40	

REP_SPDMS_GENERATE	PROCEDURE	41	      FOR a

REP_SPDMS_GENERATE	PROCEDURE	42	         IN (SELECT l.ter_ms,

REP_SPDMS_GENERATE	PROCEDURE	43	                    l.id,

REP_SPDMS_GENERATE	PROCEDURE	44	                    l.fio,

REP_SPDMS_GENERATE	PROCEDURE	45	                    l.tn,

REP_SPDMS_GENERATE	PROCEDURE	46	                    h.service

REP_SPDMS_GENERATE	PROCEDURE	47	               FROM rep_spdms_list l, rep_spdms_head h

REP_SPDMS_GENERATE	PROCEDURE	48	              WHERE     (l.last_month IS NULL OR l.last_month >= x.dt)

REP_SPDMS_GENERATE	PROCEDURE	49	                    AND h.dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	50	                    AND h.tn = l.tn

REP_SPDMS_GENERATE	PROCEDURE	51	                    AND h.service > 0)

REP_SPDMS_GENERATE	PROCEDURE	52	      LOOP

REP_SPDMS_GENERATE	PROCEDURE	53	         INSERT INTO REP_SPDMS_VISITS (TN,

REP_SPDMS_GENERATE	PROCEDURE	54	                                       DT,

REP_SPDMS_GENERATE	PROCEDURE	55	                                       VISITDATE,

REP_SPDMS_GENERATE	PROCEDURE	56	                                       AG_ID,

REP_SPDMS_GENERATE	PROCEDURE	57	                                       AG_NAME,

REP_SPDMS_GENERATE	PROCEDURE	58	                                       TP_KOD,

REP_SPDMS_GENERATE	PROCEDURE	59	                                       TP_UR,

REP_SPDMS_GENERATE	PROCEDURE	60	                                       TP_ADDR,

REP_SPDMS_GENERATE	PROCEDURE	61	                                       OBL,

REP_SPDMS_GENERATE	PROCEDURE	62	                                       CITY,

REP_SPDMS_GENERATE	PROCEDURE	63	                                       NET_NAME,

REP_SPDMS_GENERATE	PROCEDURE	64	                                       PLAN,

REP_SPDMS_GENERATE	PROCEDURE	65	                                       FAKT,

REP_SPDMS_GENERATE	PROCEDURE	66	                                       OOS,

REP_SPDMS_GENERATE	PROCEDURE	67	                                       COMM)

REP_SPDMS_GENERATE	PROCEDURE	68	              SELECT a.tn tn,

REP_SPDMS_GENERATE	PROCEDURE	69	                     TRUNC (mr.dt, 'mm') dt,

REP_SPDMS_GENERATE	PROCEDURE	70	                     mr.dt VISITDATE,

REP_SPDMS_GENERATE	PROCEDURE	71	                     ra.id ag_id,

REP_SPDMS_GENERATE	PROCEDURE	72	                     ra.name ag_name,

REP_SPDMS_GENERATE	PROCEDURE	73	                     cpp1.kodtp tp_kod,

REP_SPDMS_GENERATE	PROCEDURE	74	                     cpp1.ur_tz_name tp_ur,

REP_SPDMS_GENERATE	PROCEDURE	75	                     cpp1.tz_address tp_addr,

REP_SPDMS_GENERATE	PROCEDURE	76	                     cpp1.tz_oblast obl,

REP_SPDMS_GENERATE	PROCEDURE	77	                     cpp1.city city,

REP_SPDMS_GENERATE	PROCEDURE	78	                     n.net_name,

REP_SPDMS_GENERATE	PROCEDURE	79	                     SUM (rb.day_TIME_MR) plan,

REP_SPDMS_GENERATE	PROCEDURE	80	                     SUM (MR_FAKT) fakt,

REP_SPDMS_GENERATE	PROCEDURE	81	                     SUM (

REP_SPDMS_GENERATE	PROCEDURE	82	                        (SELECT SUM (oos)

REP_SPDMS_GENERATE	PROCEDURE	83	                           FROM merch_spec_head msh,

REP_SPDMS_GENERATE	PROCEDURE	84	                                merch_spec_body msb,

REP_SPDMS_GENERATE	PROCEDURE	85	                                merch_spec_report msr

REP_SPDMS_GENERATE	PROCEDURE	86	                          WHERE     msh.kod_tp = cpp1.kodtp

REP_SPDMS_GENERATE	PROCEDURE	87	                                AND msb.head_id = msh.id

REP_SPDMS_GENERATE	PROCEDURE	88	                                AND msh.ag_id = ra.id

REP_SPDMS_GENERATE	PROCEDURE	89	                                AND msh.id_net = n.id_net

REP_SPDMS_GENERATE	PROCEDURE	90	                                AND msb.id = msr.spec_id

REP_SPDMS_GENERATE	PROCEDURE	91	                                AND msr.dt = mr.dt))

REP_SPDMS_GENERATE	PROCEDURE	92	                        oos,

REP_SPDMS_GENERATE	PROCEDURE	93	                     wm_concat (MR_TEXT) COMM

REP_SPDMS_GENERATE	PROCEDURE	94	                FROM merch_report mr,

REP_SPDMS_GENERATE	PROCEDURE	95	                     routes_body1 rb,

REP_SPDMS_GENERATE	PROCEDURE	96	                     routes_head rh,

REP_SPDMS_GENERATE	PROCEDURE	97	                     routes_head_agents rha,

REP_SPDMS_GENERATE	PROCEDURE	98	                     routes_agents ra,

REP_SPDMS_GENERATE	PROCEDURE	99	                     routes_tp rt,

REP_SPDMS_GENERATE	PROCEDURE	100	                     cpp cpp1,

REP_SPDMS_GENERATE	PROCEDURE	101	                     svms_oblast s,

REP_SPDMS_GENERATE	PROCEDURE	102	                     ms_nets n,

REP_SPDMS_GENERATE	PROCEDURE	103	                     (SELECT DISTINCT data, dm

REP_SPDMS_GENERATE	PROCEDURE	104	                        FROM calendar

REP_SPDMS_GENERATE	PROCEDURE	105	                       WHERE TRUNC (data, 'mm') = x.dt) c

REP_SPDMS_GENERATE	PROCEDURE	106	               WHERE     mr.dt = c.data

REP_SPDMS_GENERATE	PROCEDURE	107	                     AND rb.day_num = c.dm

REP_SPDMS_GENERATE	PROCEDURE	108	                     AND rb.id = mr.rb_id

REP_SPDMS_GENERATE	PROCEDURE	109	                     AND rh.id = rb.head_id

REP_SPDMS_GENERATE	PROCEDURE	110	                     AND rh.id = rha.head_id

REP_SPDMS_GENERATE	PROCEDURE	111	                     AND ra.id = rha.ag_id

REP_SPDMS_GENERATE	PROCEDURE	112	                     AND ra.id = rb.ag_id

REP_SPDMS_GENERATE	PROCEDURE	113	                     AND rh.id = rt.head_id

REP_SPDMS_GENERATE	PROCEDURE	114	                     AND rb.kodtp = rt.kodtp

REP_SPDMS_GENERATE	PROCEDURE	115	                     AND rh.tn = s.tn

REP_SPDMS_GENERATE	PROCEDURE	116	                     AND rb.vv = rha.vv

REP_SPDMS_GENERATE	PROCEDURE	117	                     AND rha.vv = rt.vv

REP_SPDMS_GENERATE	PROCEDURE	118	                     AND cpp1.tz_oblast = s.oblast

REP_SPDMS_GENERATE	PROCEDURE	119	                     AND cpp1.kodtp = rb.kodtp

REP_SPDMS_GENERATE	PROCEDURE	120	                     AND cpp1.kodtp = rt.kodtp

REP_SPDMS_GENERATE	PROCEDURE	121	                     AND n.id_net = cpp1.id_net

REP_SPDMS_GENERATE	PROCEDURE	122	                     AND rh.tn = a.ter_ms

REP_SPDMS_GENERATE	PROCEDURE	123	                     AND (  NVL (

REP_SPDMS_GENERATE	PROCEDURE	124	                               (SELECT id

REP_SPDMS_GENERATE	PROCEDURE	125	                                  FROM merch_report_vv

REP_SPDMS_GENERATE	PROCEDURE	126	                                 WHERE     head_id = rh.id

REP_SPDMS_GENERATE	PROCEDURE	127	                                       AND ag_id = ra.id

REP_SPDMS_GENERATE	PROCEDURE	128	                                       AND kod_tp = cpp1.kodtp

REP_SPDMS_GENERATE	PROCEDURE	129	                                       AND dt = mr.dt),

REP_SPDMS_GENERATE	PROCEDURE	130	                               0)

REP_SPDMS_GENERATE	PROCEDURE	131	                          + rb.vv <> 1)

REP_SPDMS_GENERATE	PROCEDURE	132	                     AND (rb.DAY_enabled_MR = 1)

REP_SPDMS_GENERATE	PROCEDURE	133	                     AND MR_FAKT > 0

REP_SPDMS_GENERATE	PROCEDURE	134	            GROUP BY a.tn,

REP_SPDMS_GENERATE	PROCEDURE	135	                     TRUNC (mr.dt, 'mm'),

REP_SPDMS_GENERATE	PROCEDURE	136	                     mr.dt,

REP_SPDMS_GENERATE	PROCEDURE	137	                     ra.id,

REP_SPDMS_GENERATE	PROCEDURE	138	                     ra.name,

REP_SPDMS_GENERATE	PROCEDURE	139	                     cpp1.kodtp,

REP_SPDMS_GENERATE	PROCEDURE	140	                     cpp1.ur_tz_name,

REP_SPDMS_GENERATE	PROCEDURE	141	                     cpp1.tz_address,

REP_SPDMS_GENERATE	PROCEDURE	142	                     cpp1.tz_oblast,

REP_SPDMS_GENERATE	PROCEDURE	143	                     cpp1.city,

REP_SPDMS_GENERATE	PROCEDURE	144	                     n.net_name

REP_SPDMS_GENERATE	PROCEDURE	145	            ORDER BY mr.dt,

REP_SPDMS_GENERATE	PROCEDURE	146	                     cpp1.ur_tz_name,

REP_SPDMS_GENERATE	PROCEDURE	147	                     cpp1.tz_address,

REP_SPDMS_GENERATE	PROCEDURE	148	                     ra.name;

REP_SPDMS_GENERATE	PROCEDURE	149	

REP_SPDMS_GENERATE	PROCEDURE	150	         COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	151	      END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	152	

REP_SPDMS_GENERATE	PROCEDURE	153	

REP_SPDMS_GENERATE	PROCEDURE	154	      -- delete visits in which there is no AVK or present only AVK

REP_SPDMS_GENERATE	PROCEDURE	155	

REP_SPDMS_GENERATE	PROCEDURE	156	      FOR b

REP_SPDMS_GENERATE	PROCEDURE	157	         IN (  SELECT visitdate, tp_kod

REP_SPDMS_GENERATE	PROCEDURE	158	                 FROM REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	159	                WHERE dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	160	             GROUP BY visitdate, tp_kod

REP_SPDMS_GENERATE	PROCEDURE	161	               HAVING    MAX (CASE WHEN ag_id = 100743 THEN 1 END) IS NULL

REP_SPDMS_GENERATE	PROCEDURE	162	                      OR MAX (CASE WHEN ag_id <> 100743 THEN 1 END) IS NULL)

REP_SPDMS_GENERATE	PROCEDURE	163	      LOOP

REP_SPDMS_GENERATE	PROCEDURE	164	         DELETE FROM REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	165	               WHERE     dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	166	                     AND tp_kod = b.tp_kod

REP_SPDMS_GENERATE	PROCEDURE	167	                     AND visitdate = b.visitdate;

REP_SPDMS_GENERATE	PROCEDURE	168	

REP_SPDMS_GENERATE	PROCEDURE	169	         COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	170	      END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	171	

REP_SPDMS_GENERATE	PROCEDURE	172	      -- remove similar visits from different routes

REP_SPDMS_GENERATE	PROCEDURE	173	      /*

REP_SPDMS_GENERATE	PROCEDURE	174	            c := -1;

REP_SPDMS_GENERATE	PROCEDURE	175	

REP_SPDMS_GENERATE	PROCEDURE	176	            WHILE c <> 0

REP_SPDMS_GENERATE	PROCEDURE	177	            LOOP

REP_SPDMS_GENERATE	PROCEDURE	178	               DELETE FROM REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	179	                     WHERE ROWID IN

REP_SPDMS_GENERATE	PROCEDURE	180	                              (  SELECT CASE

REP_SPDMS_GENERATE	PROCEDURE	181	                                           WHEN ROUND (DBMS_RANDOM.VALUE) = 1

REP_SPDMS_GENERATE	PROCEDURE	182	                                           THEN

REP_SPDMS_GENERATE	PROCEDURE	183	                                              MAX (ROWID)

REP_SPDMS_GENERATE	PROCEDURE	184	                                           ELSE

REP_SPDMS_GENERATE	PROCEDURE	185	                                              MIN (ROWID)

REP_SPDMS_GENERATE	PROCEDURE	186	                                        END

REP_SPDMS_GENERATE	PROCEDURE	187	                                           rid

REP_SPDMS_GENERATE	PROCEDURE	188	                                   FROM REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	189	                                  WHERE dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	190	                               GROUP BY dt,

REP_SPDMS_GENERATE	PROCEDURE	191	                                        visitdate,

REP_SPDMS_GENERATE	PROCEDURE	192	                                        ag_id,

REP_SPDMS_GENERATE	PROCEDURE	193	                                        tp_kod,

REP_SPDMS_GENERATE	PROCEDURE	194	                                        tn

REP_SPDMS_GENERATE	PROCEDURE	195	                                 HAVING COUNT (*) > 1);

REP_SPDMS_GENERATE	PROCEDURE	196	

REP_SPDMS_GENERATE	PROCEDURE	197	               COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	198	

REP_SPDMS_GENERATE	PROCEDURE	199	               SELECT COUNT (*)

REP_SPDMS_GENERATE	PROCEDURE	200	                 INTO c

REP_SPDMS_GENERATE	PROCEDURE	201	                 FROM (  SELECT dt,

REP_SPDMS_GENERATE	PROCEDURE	202	                                visitdate,

REP_SPDMS_GENERATE	PROCEDURE	203	                                ag_id,

REP_SPDMS_GENERATE	PROCEDURE	204	                                tp_kod,

REP_SPDMS_GENERATE	PROCEDURE	205	                                tn

REP_SPDMS_GENERATE	PROCEDURE	206	                           FROM REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	207	                          WHERE dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	208	                       GROUP BY dt,

REP_SPDMS_GENERATE	PROCEDURE	209	                                visitdate,

REP_SPDMS_GENERATE	PROCEDURE	210	                                ag_id,

REP_SPDMS_GENERATE	PROCEDURE	211	                                tp_kod,

REP_SPDMS_GENERATE	PROCEDURE	212	                                tn

REP_SPDMS_GENERATE	PROCEDURE	213	                         HAVING COUNT (*) > 1);

REP_SPDMS_GENERATE	PROCEDURE	214	            END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	215	      */

REP_SPDMS_GENERATE	PROCEDURE	216	      FOR a

REP_SPDMS_GENERATE	PROCEDURE	217	         IN (SELECT l.ter_ms,

REP_SPDMS_GENERATE	PROCEDURE	218	                    l.id,

REP_SPDMS_GENERATE	PROCEDURE	219	                    l.fio,

REP_SPDMS_GENERATE	PROCEDURE	220	                    l.tn,

REP_SPDMS_GENERATE	PROCEDURE	221	                    h.service

REP_SPDMS_GENERATE	PROCEDURE	222	               FROM rep_spdms_list l, rep_spdms_head h

REP_SPDMS_GENERATE	PROCEDURE	223	              WHERE     (l.last_month IS NULL OR l.last_month >= x.dt)

REP_SPDMS_GENERATE	PROCEDURE	224	                    AND h.dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	225	                    AND h.tn = l.tn

REP_SPDMS_GENERATE	PROCEDURE	226	                    AND h.service > 0)

REP_SPDMS_GENERATE	PROCEDURE	227	      LOOP

REP_SPDMS_GENERATE	PROCEDURE	228	         h_avk := NVL (a.service / (ratio_avk + ratio_ms) * ratio_avk, 0);

REP_SPDMS_GENERATE	PROCEDURE	229	         h_ms := NVL (a.service / (ratio_avk + ratio_ms) * ratio_ms, 0);

REP_SPDMS_GENERATE	PROCEDURE	230	

REP_SPDMS_GENERATE	PROCEDURE	231	         FOR i IN 1 .. 10

REP_SPDMS_GENERATE	PROCEDURE	232	         LOOP

REP_SPDMS_GENERATE	PROCEDURE	233	            SELECT DECODE (

REP_SPDMS_GENERATE	PROCEDURE	234	                      h_avk,

REP_SPDMS_GENERATE	PROCEDURE	235	                      0, 0,

REP_SPDMS_GENERATE	PROCEDURE	236	                        SUM (CASE WHEN v.ag_id = 100743 THEN v.fakt END)

REP_SPDMS_GENERATE	PROCEDURE	237	                      / 60

REP_SPDMS_GENERATE	PROCEDURE	238	                      / h_avk)

REP_SPDMS_GENERATE	PROCEDURE	239	                      koef_avk,

REP_SPDMS_GENERATE	PROCEDURE	240	                   DECODE (

REP_SPDMS_GENERATE	PROCEDURE	241	                      h_ms,

REP_SPDMS_GENERATE	PROCEDURE	242	                      0, 0,

REP_SPDMS_GENERATE	PROCEDURE	243	                        SUM (CASE WHEN v.ag_id <> 100743 THEN v.fakt END)

REP_SPDMS_GENERATE	PROCEDURE	244	                      / 60

REP_SPDMS_GENERATE	PROCEDURE	245	                      / h_ms)

REP_SPDMS_GENERATE	PROCEDURE	246	                      koef_ms,

REP_SPDMS_GENERATE	PROCEDURE	247	                   COUNT (DISTINCT visitdate) days

REP_SPDMS_GENERATE	PROCEDURE	248	              INTO koef_avk, koef_ms, days

REP_SPDMS_GENERATE	PROCEDURE	249	              FROM REP_SPDMS_VISITS v

REP_SPDMS_GENERATE	PROCEDURE	250	             WHERE tn = a.tn AND dt = x.dt;

REP_SPDMS_GENERATE	PROCEDURE	251	

REP_SPDMS_GENERATE	PROCEDURE	252	            UPDATE REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	253	               SET fakt =

REP_SPDMS_GENERATE	PROCEDURE	254	                      DECODE (

REP_SPDMS_GENERATE	PROCEDURE	255	                         koef_ms,

REP_SPDMS_GENERATE	PROCEDURE	256	                         0, 0,

REP_SPDMS_GENERATE	PROCEDURE	257	                           fakt

REP_SPDMS_GENERATE	PROCEDURE	258	                         / (CASE

REP_SPDMS_GENERATE	PROCEDURE	259	                               WHEN ag_id = 100743 THEN koef_avk

REP_SPDMS_GENERATE	PROCEDURE	260	                               ELSE koef_ms

REP_SPDMS_GENERATE	PROCEDURE	261	                            END)),

REP_SPDMS_GENERATE	PROCEDURE	262	                   plan =

REP_SPDMS_GENERATE	PROCEDURE	263	                      DECODE (

REP_SPDMS_GENERATE	PROCEDURE	264	                         koef_ms,

REP_SPDMS_GENERATE	PROCEDURE	265	                         0, 0,

REP_SPDMS_GENERATE	PROCEDURE	266	                           plan

REP_SPDMS_GENERATE	PROCEDURE	267	                         / (CASE

REP_SPDMS_GENERATE	PROCEDURE	268	                               WHEN ag_id = 100743 THEN koef_avk

REP_SPDMS_GENERATE	PROCEDURE	269	                               ELSE koef_ms

REP_SPDMS_GENERATE	PROCEDURE	270	                            END))

REP_SPDMS_GENERATE	PROCEDURE	271	             WHERE tn = a.tn AND dt = x.dt;

REP_SPDMS_GENERATE	PROCEDURE	272	

REP_SPDMS_GENERATE	PROCEDURE	273	            COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	274	

REP_SPDMS_GENERATE	PROCEDURE	275	            FOR b

REP_SPDMS_GENERATE	PROCEDURE	276	               IN (  SELECT visitdate,

REP_SPDMS_GENERATE	PROCEDURE	277	                            SUM (v.fakt) / 60 / a.service * days koef_day

REP_SPDMS_GENERATE	PROCEDURE	278	                       FROM REP_SPDMS_VISITS v

REP_SPDMS_GENERATE	PROCEDURE	279	                      WHERE tn = a.tn AND dt = x.dt

REP_SPDMS_GENERATE	PROCEDURE	280	                   GROUP BY visitdate)

REP_SPDMS_GENERATE	PROCEDURE	281	            LOOP

REP_SPDMS_GENERATE	PROCEDURE	282	               UPDATE REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	283	                  SET fakt =

REP_SPDMS_GENERATE	PROCEDURE	284	                         DECODE (NVL (b.koef_day, 0),

REP_SPDMS_GENERATE	PROCEDURE	285	                                 0, 0,

REP_SPDMS_GENERATE	PROCEDURE	286	                                 fakt / b.koef_day),

REP_SPDMS_GENERATE	PROCEDURE	287	                      plan =

REP_SPDMS_GENERATE	PROCEDURE	288	                         DECODE (NVL (b.koef_day, 0),

REP_SPDMS_GENERATE	PROCEDURE	289	                                 0, 0,

REP_SPDMS_GENERATE	PROCEDURE	290	                                 plan / b.koef_day)

REP_SPDMS_GENERATE	PROCEDURE	291	                WHERE tn = a.tn AND dt = x.dt AND visitdate = b.visitdate;

REP_SPDMS_GENERATE	PROCEDURE	292	

REP_SPDMS_GENERATE	PROCEDURE	293	               COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	294	            END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	295	

REP_SPDMS_GENERATE	PROCEDURE	296	            UPDATE rep_spdms_head

REP_SPDMS_GENERATE	PROCEDURE	297	               SET lu = SYSDATE

REP_SPDMS_GENERATE	PROCEDURE	298	             WHERE dt = x.dt AND tn = a.tn;

REP_SPDMS_GENERATE	PROCEDURE	299	

REP_SPDMS_GENERATE	PROCEDURE	300	            COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	301	

REP_SPDMS_GENERATE	PROCEDURE	302	            DELETE FROM REP_SPDMS_VISITS

REP_SPDMS_GENERATE	PROCEDURE	303	                  WHERE dt = x.dt AND tn = a.tn AND fakt = 0;

REP_SPDMS_GENERATE	PROCEDURE	304	

REP_SPDMS_GENERATE	PROCEDURE	305	            COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	306	         END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	307	      END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	308	

REP_SPDMS_GENERATE	PROCEDURE	309	      FOR a IN (SELECT ROWID rid, v.*

REP_SPDMS_GENERATE	PROCEDURE	310	                  FROM rep_spdms_visits v

REP_SPDMS_GENERATE	PROCEDURE	311	                 WHERE dt = x.dt)

REP_SPDMS_GENERATE	PROCEDURE	312	      LOOP

REP_SPDMS_GENERATE	PROCEDURE	313	         UPDATE rep_spdms_visits

REP_SPDMS_GENERATE	PROCEDURE	314	            SET tasks = ''

REP_SPDMS_GENERATE	PROCEDURE	315	          WHERE ROWID = a.rid;

REP_SPDMS_GENERATE	PROCEDURE	316	

REP_SPDMS_GENERATE	PROCEDURE	317	         FOR b

REP_SPDMS_GENERATE	PROCEDURE	318	            IN (  SELECT    CASE

REP_SPDMS_GENERATE	PROCEDURE	319	                               WHEN u.is_spd = 1 THEN 'М-Сервис'

REP_SPDMS_GENERATE	PROCEDURE	320	                               ELSE 'Заказчик'

REP_SPDMS_GENERATE	PROCEDURE	321	                            END

REP_SPDMS_GENERATE	PROCEDURE	322	                         || ', '

REP_SPDMS_GENERATE	PROCEDURE	323	                         || TO_CHAR (c.lu, 'dd.mm.yyyy')

REP_SPDMS_GENERATE	PROCEDURE	324	                         || ' '

REP_SPDMS_GENERATE	PROCEDURE	325	                         || c.text

REP_SPDMS_GENERATE	PROCEDURE	326	                            text

REP_SPDMS_GENERATE	PROCEDURE	327	                    FROM (SELECT fc.id,

REP_SPDMS_GENERATE	PROCEDURE	328	                                 f.dt,

REP_SPDMS_GENERATE	PROCEDURE	329	                                 f.ag_id,

REP_SPDMS_GENERATE	PROCEDURE	330	                                 f.kod_tp,

REP_SPDMS_GENERATE	PROCEDURE	331	                                 fc.login,

REP_SPDMS_GENERATE	PROCEDURE	332	                                 fc.text,

REP_SPDMS_GENERATE	PROCEDURE	333	                                 fc.lu

REP_SPDMS_GENERATE	PROCEDURE	334	                            FROM merch_spec_report_files f,

REP_SPDMS_GENERATE	PROCEDURE	335	                                 merch_spec_report_files_chat fc

REP_SPDMS_GENERATE	PROCEDURE	336	                           WHERE f.id = fc.msr_file_id

REP_SPDMS_GENERATE	PROCEDURE	337	                          UNION

REP_SPDMS_GENERATE	PROCEDURE	338	                          SELECT id,

REP_SPDMS_GENERATE	PROCEDURE	339	                                 dt,

REP_SPDMS_GENERATE	PROCEDURE	340	                                 ag_id,

REP_SPDMS_GENERATE	PROCEDURE	341	                                 kod_tp,

REP_SPDMS_GENERATE	PROCEDURE	342	                                 login,

REP_SPDMS_GENERATE	PROCEDURE	343	                                 text,

REP_SPDMS_GENERATE	PROCEDURE	344	                                 lu

REP_SPDMS_GENERATE	PROCEDURE	345	                            FROM merch_chat) c,

REP_SPDMS_GENERATE	PROCEDURE	346	                         user_list u

REP_SPDMS_GENERATE	PROCEDURE	347	                   WHERE     c.dt = a.visitdate

REP_SPDMS_GENERATE	PROCEDURE	348	                         AND c.ag_id = a.ag_id

REP_SPDMS_GENERATE	PROCEDURE	349	                         AND c.kod_tp = a.tp_kod

REP_SPDMS_GENERATE	PROCEDURE	350	                         AND u.login = c.login

REP_SPDMS_GENERATE	PROCEDURE	351	                ORDER BY c.id)

REP_SPDMS_GENERATE	PROCEDURE	352	         LOOP

REP_SPDMS_GENERATE	PROCEDURE	353	            UPDATE rep_spdms_visits

REP_SPDMS_GENERATE	PROCEDURE	354	               SET tasks =

REP_SPDMS_GENERATE	PROCEDURE	355	                         tasks

REP_SPDMS_GENERATE	PROCEDURE	356	                      || CASE WHEN tasks IS NULL THEN '' ELSE '<br>' END

REP_SPDMS_GENERATE	PROCEDURE	357	                      || b.text

REP_SPDMS_GENERATE	PROCEDURE	358	             WHERE ROWID = a.rid;

REP_SPDMS_GENERATE	PROCEDURE	359	

REP_SPDMS_GENERATE	PROCEDURE	360	            COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	361	         END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	362	      END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	363	

REP_SPDMS_GENERATE	PROCEDURE	364	

REP_SPDMS_GENERATE	PROCEDURE	365	

REP_SPDMS_GENERATE	PROCEDURE	366	      UPDATE rep_spdms_visits v

REP_SPDMS_GENERATE	PROCEDURE	367	         SET tasks =

REP_SPDMS_GENERATE	PROCEDURE	368	                   'Осуществить выкладку согласно планограмме и принципу FIFO. '

REP_SPDMS_GENERATE	PROCEDURE	369	                || 'Проверить сроки годности продукции. '

REP_SPDMS_GENERATE	PROCEDURE	370	                || 'Оформить места продаж ценниками и POSM-материалами. '

REP_SPDMS_GENERATE	PROCEDURE	371	                || 'Провести мониторинг цен и активностей основных конкурентов.'

REP_SPDMS_GENERATE	PROCEDURE	372	       /*get_random_task (

REP_SPDMS_GENERATE	PROCEDURE	373	          (SELECT COUNT (*)

REP_SPDMS_GENERATE	PROCEDURE	374	             FROM rep_spdms_urls

REP_SPDMS_GENERATE	PROCEDURE	375	            WHERE     v.visitdate = visitdate

REP_SPDMS_GENERATE	PROCEDURE	376	                  AND v.tp_kod = tp_kod

REP_SPDMS_GENERATE	PROCEDURE	377	                  AND v.h_eta = h_eta

REP_SPDMS_GENERATE	PROCEDURE	378	                  AND v.tn = tn

REP_SPDMS_GENERATE	PROCEDURE	379	                  AND v.dt = dt))*/

REP_SPDMS_GENERATE	PROCEDURE	380	       WHERE v.dt = x.dt AND tasks IS NULL;

REP_SPDMS_GENERATE	PROCEDURE	381	

REP_SPDMS_GENERATE	PROCEDURE	382	      COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	383	

REP_SPDMS_GENERATE	PROCEDURE	384	

REP_SPDMS_GENERATE	PROCEDURE	385	      DELETE FROM rep_spdms_dt

REP_SPDMS_GENERATE	PROCEDURE	386	            WHERE dt = x.dt;

REP_SPDMS_GENERATE	PROCEDURE	387	

REP_SPDMS_GENERATE	PROCEDURE	388	

REP_SPDMS_GENERATE	PROCEDURE	389	      COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	390	

REP_SPDMS_GENERATE	PROCEDURE	391	      INSERT INTO full_log (text, prg)

REP_SPDMS_GENERATE	PROCEDURE	392	              VALUES (

REP_SPDMS_GENERATE	PROCEDURE	393	                           'rep_spdms generate '

REP_SPDMS_GENERATE	PROCEDURE	394	                        || TO_CHAR (x.dt, 'dd.mm.yyyy')

REP_SPDMS_GENERATE	PROCEDURE	395	                        || ' end',

REP_SPDMS_GENERATE	PROCEDURE	396	                        'rep_spdms');

REP_SPDMS_GENERATE	PROCEDURE	397	

REP_SPDMS_GENERATE	PROCEDURE	398	      COMMIT;

REP_SPDMS_GENERATE	PROCEDURE	399	   END LOOP;

REP_SPDMS_GENERATE	PROCEDURE	400	END;
REP_SPDDNKF_GENERATE	PROCEDURE	1	PROCEDURE        rep_spddnkf_generate

REP_SPDDNKF_GENERATE	PROCEDURE	2	IS

REP_SPDDNKF_GENERATE	PROCEDURE	3	   c           INTEGER;

REP_SPDDNKF_GENERATE	PROCEDURE	4	   /*v_task       VARCHAR2 (4000);*/

REP_SPDDNKF_GENERATE	PROCEDURE	5	   ratio_avk   INTEGER;

REP_SPDDNKF_GENERATE	PROCEDURE	6	   ratio_ms    INTEGER;

REP_SPDDNKF_GENERATE	PROCEDURE	7	   h_avk       FLOAT (126);

REP_SPDDNKF_GENERATE	PROCEDURE	8	   h_ms        FLOAT (126);

REP_SPDDNKF_GENERATE	PROCEDURE	9	   koef_avk    FLOAT (126);

REP_SPDDNKF_GENERATE	PROCEDURE	10	   koef_ms     FLOAT (126);

REP_SPDDNKF_GENERATE	PROCEDURE	11	   days        INTEGER;

REP_SPDDNKF_GENERATE	PROCEDURE	12	BEGIN

REP_SPDDNKF_GENERATE	PROCEDURE	13	   SELECT val_number

REP_SPDDNKF_GENERATE	PROCEDURE	14	     INTO ratio_avk

REP_SPDDNKF_GENERATE	PROCEDURE	15	     FROM parameters

REP_SPDDNKF_GENERATE	PROCEDURE	16	    WHERE param_name = 'ratio_dnkf_avk';

REP_SPDDNKF_GENERATE	PROCEDURE	17	

REP_SPDDNKF_GENERATE	PROCEDURE	18	   SELECT val_number

REP_SPDDNKF_GENERATE	PROCEDURE	19	     INTO ratio_ms

REP_SPDDNKF_GENERATE	PROCEDURE	20	     FROM parameters

REP_SPDDNKF_GENERATE	PROCEDURE	21	    WHERE param_name = 'ratio_dnkf_ms';

REP_SPDDNKF_GENERATE	PROCEDURE	22	

REP_SPDDNKF_GENERATE	PROCEDURE	23	   FOR x IN (  SELECT dt

REP_SPDDNKF_GENERATE	PROCEDURE	24	                 FROM rep_spddnkf_dt

REP_SPDDNKF_GENERATE	PROCEDURE	25	             ORDER BY dt)

REP_SPDDNKF_GENERATE	PROCEDURE	26	   LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	27	      INSERT INTO full_log (text, prg)

REP_SPDDNKF_GENERATE	PROCEDURE	28	              VALUES (

REP_SPDDNKF_GENERATE	PROCEDURE	29	                           'rep_spddnkf generate '

REP_SPDDNKF_GENERATE	PROCEDURE	30	                        || TO_CHAR (x.dt, 'dd.mm.yyyy')

REP_SPDDNKF_GENERATE	PROCEDURE	31	                        || ' start',

REP_SPDDNKF_GENERATE	PROCEDURE	32	                        'rep_spddnkf');

REP_SPDDNKF_GENERATE	PROCEDURE	33	

REP_SPDDNKF_GENERATE	PROCEDURE	34	      COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	35	

REP_SPDDNKF_GENERATE	PROCEDURE	36	      DELETE FROM rep_spddnkf_visits

REP_SPDDNKF_GENERATE	PROCEDURE	37	            WHERE dt = x.dt;

REP_SPDDNKF_GENERATE	PROCEDURE	38	

REP_SPDDNKF_GENERATE	PROCEDURE	39	      COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	40	

REP_SPDDNKF_GENERATE	PROCEDURE	41	      FOR a

REP_SPDDNKF_GENERATE	PROCEDURE	42	         IN (SELECT l.h_tz_oblast,

REP_SPDDNKF_GENERATE	PROCEDURE	43	                    l.id,

REP_SPDDNKF_GENERATE	PROCEDURE	44	                    l.fio,

REP_SPDDNKF_GENERATE	PROCEDURE	45	                    l.tn,

REP_SPDDNKF_GENERATE	PROCEDURE	46	                    h.service

REP_SPDDNKF_GENERATE	PROCEDURE	47	               FROM rep_spddnkf_list l, rep_spddnkf_head h

REP_SPDDNKF_GENERATE	PROCEDURE	48	              WHERE     (l.last_month IS NULL OR l.last_month >= x.dt)

REP_SPDDNKF_GENERATE	PROCEDURE	49	                    AND h.dt = x.dt

REP_SPDDNKF_GENERATE	PROCEDURE	50	                    AND h.tn = l.tn

REP_SPDDNKF_GENERATE	PROCEDURE	51	                    AND h.service > 0)

REP_SPDDNKF_GENERATE	PROCEDURE	52	      LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	53	         INSERT INTO REP_spddnkf_VISITS (TN,

REP_SPDDNKF_GENERATE	PROCEDURE	54	                                         DT,

REP_SPDDNKF_GENERATE	PROCEDURE	55	                                         VISITDATE,

REP_SPDDNKF_GENERATE	PROCEDURE	56	                                         AG_ID,

REP_SPDDNKF_GENERATE	PROCEDURE	57	                                         AG_NAME,

REP_SPDDNKF_GENERATE	PROCEDURE	58	                                         TP_KOD,

REP_SPDDNKF_GENERATE	PROCEDURE	59	                                         TP_UR,

REP_SPDDNKF_GENERATE	PROCEDURE	60	                                         TP_ADDR,

REP_SPDDNKF_GENERATE	PROCEDURE	61	                                         OBL,

REP_SPDDNKF_GENERATE	PROCEDURE	62	                                         CITY,

REP_SPDDNKF_GENERATE	PROCEDURE	63	                                         NET_NAME,

REP_SPDDNKF_GENERATE	PROCEDURE	64	                                         PLAN,

REP_SPDDNKF_GENERATE	PROCEDURE	65	                                         FAKT,

REP_SPDDNKF_GENERATE	PROCEDURE	66	                                         OOS,

REP_SPDDNKF_GENERATE	PROCEDURE	67	                                         COMM)

REP_SPDDNKF_GENERATE	PROCEDURE	68	              SELECT a.tn tn,

REP_SPDDNKF_GENERATE	PROCEDURE	69	                     TRUNC (mr.dt, 'mm') dt,

REP_SPDDNKF_GENERATE	PROCEDURE	70	                     mr.dt VISITDATE,

REP_SPDDNKF_GENERATE	PROCEDURE	71	                     ra.id ag_id,

REP_SPDDNKF_GENERATE	PROCEDURE	72	                     ra.name ag_name,

REP_SPDDNKF_GENERATE	PROCEDURE	73	                     cpp1.kodtp tp_kod,

REP_SPDDNKF_GENERATE	PROCEDURE	74	                     cpp1.ur_tz_name tp_ur,

REP_SPDDNKF_GENERATE	PROCEDURE	75	                     cpp1.tz_address tp_addr,

REP_SPDDNKF_GENERATE	PROCEDURE	76	                     cpp1.tz_oblast obl,

REP_SPDDNKF_GENERATE	PROCEDURE	77	                     cpp1.city city,

REP_SPDDNKF_GENERATE	PROCEDURE	78	                     n.net_name,

REP_SPDDNKF_GENERATE	PROCEDURE	79	                     SUM (rb.day_TIME_MR) plan,

REP_SPDDNKF_GENERATE	PROCEDURE	80	                     SUM (MR_FAKT) fakt,

REP_SPDDNKF_GENERATE	PROCEDURE	81	                     SUM (

REP_SPDDNKF_GENERATE	PROCEDURE	82	                        (SELECT SUM (oos)

REP_SPDDNKF_GENERATE	PROCEDURE	83	                           FROM merch_spec_head msh,

REP_SPDDNKF_GENERATE	PROCEDURE	84	                                merch_spec_body msb,

REP_SPDDNKF_GENERATE	PROCEDURE	85	                                merch_spec_report msr

REP_SPDDNKF_GENERATE	PROCEDURE	86	                          WHERE     msh.kod_tp = cpp1.kodtp

REP_SPDDNKF_GENERATE	PROCEDURE	87	                                AND msb.head_id = msh.id

REP_SPDDNKF_GENERATE	PROCEDURE	88	                                AND msh.ag_id = ra.id

REP_SPDDNKF_GENERATE	PROCEDURE	89	                                AND msh.id_net = n.id_net

REP_SPDDNKF_GENERATE	PROCEDURE	90	                                AND msb.id = msr.spec_id

REP_SPDDNKF_GENERATE	PROCEDURE	91	                                AND msr.dt = mr.dt))

REP_SPDDNKF_GENERATE	PROCEDURE	92	                        oos,

REP_SPDDNKF_GENERATE	PROCEDURE	93	                     wm_concat (MR_TEXT) COMM

REP_SPDDNKF_GENERATE	PROCEDURE	94	                FROM merch_report mr,

REP_SPDDNKF_GENERATE	PROCEDURE	95	                     routes_body1 rb,

REP_SPDDNKF_GENERATE	PROCEDURE	96	                     routes_head rh,

REP_SPDDNKF_GENERATE	PROCEDURE	97	                     routes_head_agents rha,

REP_SPDDNKF_GENERATE	PROCEDURE	98	                     routes_agents ra,

REP_SPDDNKF_GENERATE	PROCEDURE	99	                     routes_tp rt,

REP_SPDDNKF_GENERATE	PROCEDURE	100	                     cpp cpp1,

REP_SPDDNKF_GENERATE	PROCEDURE	101	                     svms_oblast s,

REP_SPDDNKF_GENERATE	PROCEDURE	102	                     ms_nets n,

REP_SPDDNKF_GENERATE	PROCEDURE	103	                     (SELECT DISTINCT data, dm

REP_SPDDNKF_GENERATE	PROCEDURE	104	                        FROM calendar

REP_SPDDNKF_GENERATE	PROCEDURE	105	                       WHERE TRUNC (data, 'mm') = x.dt) c

REP_SPDDNKF_GENERATE	PROCEDURE	106	               WHERE     mr.dt = c.data

REP_SPDDNKF_GENERATE	PROCEDURE	107	                     AND rb.day_num = c.dm

REP_SPDDNKF_GENERATE	PROCEDURE	108	                     AND rb.id = mr.rb_id

REP_SPDDNKF_GENERATE	PROCEDURE	109	                     AND rh.id = rb.head_id

REP_SPDDNKF_GENERATE	PROCEDURE	110	                     AND rh.id = rha.head_id

REP_SPDDNKF_GENERATE	PROCEDURE	111	                     AND ra.id = rha.ag_id

REP_SPDDNKF_GENERATE	PROCEDURE	112	                     AND ra.id = rb.ag_id

REP_SPDDNKF_GENERATE	PROCEDURE	113	                     AND rh.id = rt.head_id

REP_SPDDNKF_GENERATE	PROCEDURE	114	                     AND rb.kodtp = rt.kodtp

REP_SPDDNKF_GENERATE	PROCEDURE	115	                     AND rh.tn = s.tn

REP_SPDDNKF_GENERATE	PROCEDURE	116	                     AND rb.vv = rha.vv

REP_SPDDNKF_GENERATE	PROCEDURE	117	                     AND rha.vv = rt.vv

REP_SPDDNKF_GENERATE	PROCEDURE	118	                     AND cpp1.tz_oblast = s.oblast

REP_SPDDNKF_GENERATE	PROCEDURE	119	                     AND cpp1.kodtp = rb.kodtp

REP_SPDDNKF_GENERATE	PROCEDURE	120	                     AND cpp1.kodtp = rt.kodtp

REP_SPDDNKF_GENERATE	PROCEDURE	121	                     AND n.id_net = cpp1.id_net

REP_SPDDNKF_GENERATE	PROCEDURE	122	                     AND cpp1.h_tz_oblast = a.h_tz_oblast

REP_SPDDNKF_GENERATE	PROCEDURE	123	                     AND (  NVL (

REP_SPDDNKF_GENERATE	PROCEDURE	124	                               (SELECT id

REP_SPDDNKF_GENERATE	PROCEDURE	125	                                  FROM merch_report_vv

REP_SPDDNKF_GENERATE	PROCEDURE	126	                                 WHERE     head_id = rh.id

REP_SPDDNKF_GENERATE	PROCEDURE	127	                                       AND ag_id = ra.id

REP_SPDDNKF_GENERATE	PROCEDURE	128	                                       AND kod_tp = cpp1.kodtp

REP_SPDDNKF_GENERATE	PROCEDURE	129	                                       AND dt = mr.dt),

REP_SPDDNKF_GENERATE	PROCEDURE	130	                               0)

REP_SPDDNKF_GENERATE	PROCEDURE	131	                          + rb.vv <> 1)

REP_SPDDNKF_GENERATE	PROCEDURE	132	                     AND (rb.DAY_enabled_MR = 1)

REP_SPDDNKF_GENERATE	PROCEDURE	133	                     AND MR_FAKT > 0

REP_SPDDNKF_GENERATE	PROCEDURE	134	                     AND n.id_net IN (SELECT id_net

REP_SPDDNKF_GENERATE	PROCEDURE	135	                                        FROM ms_nets

REP_SPDDNKF_GENERATE	PROCEDURE	136	                                       WHERE net_name IN ('АТБ',

REP_SPDDNKF_GENERATE	PROCEDURE	137	                                                          'МЕТРО',

REP_SPDDNKF_GENERATE	PROCEDURE	138	                                                          'Фоззи',

REP_SPDDNKF_GENERATE	PROCEDURE	139	                                                          'Фора',

REP_SPDDNKF_GENERATE	PROCEDURE	140	                                                          'Сильпо'))

REP_SPDDNKF_GENERATE	PROCEDURE	141	            GROUP BY a.tn,

REP_SPDDNKF_GENERATE	PROCEDURE	142	                     TRUNC (mr.dt, 'mm'),

REP_SPDDNKF_GENERATE	PROCEDURE	143	                     mr.dt,

REP_SPDDNKF_GENERATE	PROCEDURE	144	                     ra.id,

REP_SPDDNKF_GENERATE	PROCEDURE	145	                     ra.name,

REP_SPDDNKF_GENERATE	PROCEDURE	146	                     cpp1.kodtp,

REP_SPDDNKF_GENERATE	PROCEDURE	147	                     cpp1.ur_tz_name,

REP_SPDDNKF_GENERATE	PROCEDURE	148	                     cpp1.tz_address,

REP_SPDDNKF_GENERATE	PROCEDURE	149	                     cpp1.tz_oblast,

REP_SPDDNKF_GENERATE	PROCEDURE	150	                     cpp1.city,

REP_SPDDNKF_GENERATE	PROCEDURE	151	                     n.net_name

REP_SPDDNKF_GENERATE	PROCEDURE	152	            ORDER BY mr.dt,

REP_SPDDNKF_GENERATE	PROCEDURE	153	                     cpp1.ur_tz_name,

REP_SPDDNKF_GENERATE	PROCEDURE	154	                     cpp1.tz_address,

REP_SPDDNKF_GENERATE	PROCEDURE	155	                     ra.name;

REP_SPDDNKF_GENERATE	PROCEDURE	156	

REP_SPDDNKF_GENERATE	PROCEDURE	157	         COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	158	      END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	159	

REP_SPDDNKF_GENERATE	PROCEDURE	160	

REP_SPDDNKF_GENERATE	PROCEDURE	161	      -- delete visits in which there is no AVK or present only AVK

REP_SPDDNKF_GENERATE	PROCEDURE	162	

REP_SPDDNKF_GENERATE	PROCEDURE	163	      FOR b

REP_SPDDNKF_GENERATE	PROCEDURE	164	         IN (  SELECT visitdate, tp_kod

REP_SPDDNKF_GENERATE	PROCEDURE	165	                 FROM REP_spddnkf_VISITS

REP_SPDDNKF_GENERATE	PROCEDURE	166	                WHERE dt = x.dt

REP_SPDDNKF_GENERATE	PROCEDURE	167	             GROUP BY visitdate, tp_kod

REP_SPDDNKF_GENERATE	PROCEDURE	168	               HAVING    MAX (CASE WHEN ag_id = 100743 THEN 1 END) IS NULL

REP_SPDDNKF_GENERATE	PROCEDURE	169	                      OR MAX (CASE WHEN ag_id <> 100743 THEN 1 END) IS NULL)

REP_SPDDNKF_GENERATE	PROCEDURE	170	      LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	171	         DELETE FROM REP_spddnkf_VISITS

REP_SPDDNKF_GENERATE	PROCEDURE	172	               WHERE     dt = x.dt

REP_SPDDNKF_GENERATE	PROCEDURE	173	                     AND tp_kod = b.tp_kod

REP_SPDDNKF_GENERATE	PROCEDURE	174	                     AND visitdate = b.visitdate;

REP_SPDDNKF_GENERATE	PROCEDURE	175	

REP_SPDDNKF_GENERATE	PROCEDURE	176	         COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	177	      END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	178	

REP_SPDDNKF_GENERATE	PROCEDURE	179	

REP_SPDDNKF_GENERATE	PROCEDURE	180	      FOR a

REP_SPDDNKF_GENERATE	PROCEDURE	181	         IN (SELECT l.h_tz_oblast,

REP_SPDDNKF_GENERATE	PROCEDURE	182	                    l.id,

REP_SPDDNKF_GENERATE	PROCEDURE	183	                    l.fio,

REP_SPDDNKF_GENERATE	PROCEDURE	184	                    l.tn,

REP_SPDDNKF_GENERATE	PROCEDURE	185	                    h.service

REP_SPDDNKF_GENERATE	PROCEDURE	186	               FROM rep_spddnkf_list l, rep_spddnkf_head h

REP_SPDDNKF_GENERATE	PROCEDURE	187	              WHERE     (l.last_month IS NULL OR l.last_month >= x.dt)

REP_SPDDNKF_GENERATE	PROCEDURE	188	                    AND h.dt = x.dt

REP_SPDDNKF_GENERATE	PROCEDURE	189	                    AND h.tn = l.tn

REP_SPDDNKF_GENERATE	PROCEDURE	190	                    AND h.service > 0)

REP_SPDDNKF_GENERATE	PROCEDURE	191	      LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	192	         h_avk := NVL (a.service / (ratio_avk + ratio_ms) * ratio_avk, 0);

REP_SPDDNKF_GENERATE	PROCEDURE	193	         h_ms := NVL (a.service / (ratio_avk + ratio_ms) * ratio_ms, 0);

REP_SPDDNKF_GENERATE	PROCEDURE	194	

REP_SPDDNKF_GENERATE	PROCEDURE	195	         FOR i IN 1 .. 10

REP_SPDDNKF_GENERATE	PROCEDURE	196	         LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	197	            SELECT DECODE (

REP_SPDDNKF_GENERATE	PROCEDURE	198	                      h_avk,

REP_SPDDNKF_GENERATE	PROCEDURE	199	                      0, 0,

REP_SPDDNKF_GENERATE	PROCEDURE	200	                        SUM (CASE WHEN v.ag_id = 100743 THEN v.fakt END)

REP_SPDDNKF_GENERATE	PROCEDURE	201	                      / 60

REP_SPDDNKF_GENERATE	PROCEDURE	202	                      / h_avk)

REP_SPDDNKF_GENERATE	PROCEDURE	203	                      koef_avk,

REP_SPDDNKF_GENERATE	PROCEDURE	204	                   DECODE (

REP_SPDDNKF_GENERATE	PROCEDURE	205	                      h_ms,

REP_SPDDNKF_GENERATE	PROCEDURE	206	                      0, 0,

REP_SPDDNKF_GENERATE	PROCEDURE	207	                        SUM (CASE WHEN v.ag_id <> 100743 THEN v.fakt END)

REP_SPDDNKF_GENERATE	PROCEDURE	208	                      / 60

REP_SPDDNKF_GENERATE	PROCEDURE	209	                      / h_ms)

REP_SPDDNKF_GENERATE	PROCEDURE	210	                      koef_ms,

REP_SPDDNKF_GENERATE	PROCEDURE	211	                   COUNT (DISTINCT visitdate) days

REP_SPDDNKF_GENERATE	PROCEDURE	212	              INTO koef_avk, koef_ms, days

REP_SPDDNKF_GENERATE	PROCEDURE	213	              FROM REP_spddnkf_VISITS v

REP_SPDDNKF_GENERATE	PROCEDURE	214	             WHERE tn = a.tn AND dt = x.dt;

REP_SPDDNKF_GENERATE	PROCEDURE	215	

REP_SPDDNKF_GENERATE	PROCEDURE	216	            UPDATE REP_spddnkf_VISITS

REP_SPDDNKF_GENERATE	PROCEDURE	217	               SET fakt =

REP_SPDDNKF_GENERATE	PROCEDURE	218	                      DECODE (

REP_SPDDNKF_GENERATE	PROCEDURE	219	                         NVL (

REP_SPDDNKF_GENERATE	PROCEDURE	220	                            CASE

REP_SPDDNKF_GENERATE	PROCEDURE	221	                               WHEN ag_id = 100743 THEN koef_avk

REP_SPDDNKF_GENERATE	PROCEDURE	222	                               ELSE koef_ms

REP_SPDDNKF_GENERATE	PROCEDURE	223	                            END,

REP_SPDDNKF_GENERATE	PROCEDURE	224	                            0),

REP_SPDDNKF_GENERATE	PROCEDURE	225	                         0, 0,

REP_SPDDNKF_GENERATE	PROCEDURE	226	                           fakt

REP_SPDDNKF_GENERATE	PROCEDURE	227	                         / (CASE

REP_SPDDNKF_GENERATE	PROCEDURE	228	                               WHEN ag_id = 100743 THEN koef_avk

REP_SPDDNKF_GENERATE	PROCEDURE	229	                               ELSE koef_ms

REP_SPDDNKF_GENERATE	PROCEDURE	230	                            END)),

REP_SPDDNKF_GENERATE	PROCEDURE	231	                   plan =

REP_SPDDNKF_GENERATE	PROCEDURE	232	                      DECODE (

REP_SPDDNKF_GENERATE	PROCEDURE	233	                         NVL (

REP_SPDDNKF_GENERATE	PROCEDURE	234	                            CASE

REP_SPDDNKF_GENERATE	PROCEDURE	235	                               WHEN ag_id = 100743 THEN koef_avk

REP_SPDDNKF_GENERATE	PROCEDURE	236	                               ELSE koef_ms

REP_SPDDNKF_GENERATE	PROCEDURE	237	                            END,

REP_SPDDNKF_GENERATE	PROCEDURE	238	                            0),

REP_SPDDNKF_GENERATE	PROCEDURE	239	                         0, 0,

REP_SPDDNKF_GENERATE	PROCEDURE	240	                           plan

REP_SPDDNKF_GENERATE	PROCEDURE	241	                         / (CASE

REP_SPDDNKF_GENERATE	PROCEDURE	242	                               WHEN ag_id = 100743 THEN koef_avk

REP_SPDDNKF_GENERATE	PROCEDURE	243	                               ELSE koef_ms

REP_SPDDNKF_GENERATE	PROCEDURE	244	                            END))

REP_SPDDNKF_GENERATE	PROCEDURE	245	             WHERE tn = a.tn AND dt = x.dt;

REP_SPDDNKF_GENERATE	PROCEDURE	246	

REP_SPDDNKF_GENERATE	PROCEDURE	247	            COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	248	

REP_SPDDNKF_GENERATE	PROCEDURE	249	            FOR b

REP_SPDDNKF_GENERATE	PROCEDURE	250	               IN (  SELECT visitdate,

REP_SPDDNKF_GENERATE	PROCEDURE	251	                            SUM (v.fakt) / 60 / a.service * days koef_day

REP_SPDDNKF_GENERATE	PROCEDURE	252	                       FROM REP_spddnkf_VISITS v

REP_SPDDNKF_GENERATE	PROCEDURE	253	                      WHERE tn = a.tn AND dt = x.dt

REP_SPDDNKF_GENERATE	PROCEDURE	254	                   GROUP BY visitdate)

REP_SPDDNKF_GENERATE	PROCEDURE	255	            LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	256	               UPDATE REP_spddnkf_VISITS

REP_SPDDNKF_GENERATE	PROCEDURE	257	                  SET fakt =

REP_SPDDNKF_GENERATE	PROCEDURE	258	                         DECODE (NVL (b.koef_day, 0),

REP_SPDDNKF_GENERATE	PROCEDURE	259	                                 0, 0,

REP_SPDDNKF_GENERATE	PROCEDURE	260	                                 fakt / b.koef_day),

REP_SPDDNKF_GENERATE	PROCEDURE	261	                      plan =

REP_SPDDNKF_GENERATE	PROCEDURE	262	                         DECODE (NVL (b.koef_day, 0),

REP_SPDDNKF_GENERATE	PROCEDURE	263	                                 0, 0,

REP_SPDDNKF_GENERATE	PROCEDURE	264	                                 plan / b.koef_day)

REP_SPDDNKF_GENERATE	PROCEDURE	265	                WHERE tn = a.tn AND dt = x.dt AND visitdate = b.visitdate;

REP_SPDDNKF_GENERATE	PROCEDURE	266	

REP_SPDDNKF_GENERATE	PROCEDURE	267	               COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	268	            END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	269	

REP_SPDDNKF_GENERATE	PROCEDURE	270	            UPDATE rep_spddnkf_head

REP_SPDDNKF_GENERATE	PROCEDURE	271	               SET lu = SYSDATE

REP_SPDDNKF_GENERATE	PROCEDURE	272	             WHERE dt = x.dt AND tn = a.tn;

REP_SPDDNKF_GENERATE	PROCEDURE	273	

REP_SPDDNKF_GENERATE	PROCEDURE	274	            COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	275	

REP_SPDDNKF_GENERATE	PROCEDURE	276	            DELETE FROM REP_spddnkf_VISITS

REP_SPDDNKF_GENERATE	PROCEDURE	277	                  WHERE dt = x.dt AND tn = a.tn AND fakt = 0;

REP_SPDDNKF_GENERATE	PROCEDURE	278	

REP_SPDDNKF_GENERATE	PROCEDURE	279	            COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	280	         END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	281	      END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	282	

REP_SPDDNKF_GENERATE	PROCEDURE	283	      FOR a IN (SELECT ROWID rid, v.*

REP_SPDDNKF_GENERATE	PROCEDURE	284	                  FROM rep_spddnkf_visits v

REP_SPDDNKF_GENERATE	PROCEDURE	285	                 WHERE dt = x.dt)

REP_SPDDNKF_GENERATE	PROCEDURE	286	      LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	287	         UPDATE rep_spddnkf_visits

REP_SPDDNKF_GENERATE	PROCEDURE	288	            SET tasks = ''

REP_SPDDNKF_GENERATE	PROCEDURE	289	          WHERE ROWID = a.rid;

REP_SPDDNKF_GENERATE	PROCEDURE	290	

REP_SPDDNKF_GENERATE	PROCEDURE	291	         FOR b

REP_SPDDNKF_GENERATE	PROCEDURE	292	            IN (  SELECT    CASE

REP_SPDDNKF_GENERATE	PROCEDURE	293	                               WHEN u.is_spd = 1 THEN 'Исполнитель'

REP_SPDDNKF_GENERATE	PROCEDURE	294	                               ELSE 'Заказчик'

REP_SPDDNKF_GENERATE	PROCEDURE	295	                            END

REP_SPDDNKF_GENERATE	PROCEDURE	296	                         || ', '

REP_SPDDNKF_GENERATE	PROCEDURE	297	                         || TO_CHAR (c.lu, 'dd.mm.yyyy')

REP_SPDDNKF_GENERATE	PROCEDURE	298	                         || ' '

REP_SPDDNKF_GENERATE	PROCEDURE	299	                         || c.text

REP_SPDDNKF_GENERATE	PROCEDURE	300	                            text

REP_SPDDNKF_GENERATE	PROCEDURE	301	                    FROM (SELECT fc.id,

REP_SPDDNKF_GENERATE	PROCEDURE	302	                                 f.dt,

REP_SPDDNKF_GENERATE	PROCEDURE	303	                                 f.ag_id,

REP_SPDDNKF_GENERATE	PROCEDURE	304	                                 f.kod_tp,

REP_SPDDNKF_GENERATE	PROCEDURE	305	                                 fc.login,

REP_SPDDNKF_GENERATE	PROCEDURE	306	                                 fc.text,

REP_SPDDNKF_GENERATE	PROCEDURE	307	                                 fc.lu

REP_SPDDNKF_GENERATE	PROCEDURE	308	                            FROM merch_spec_report_files f,

REP_SPDDNKF_GENERATE	PROCEDURE	309	                                 merch_spec_report_files_chat fc

REP_SPDDNKF_GENERATE	PROCEDURE	310	                           WHERE f.id = fc.msr_file_id

REP_SPDDNKF_GENERATE	PROCEDURE	311	                          UNION

REP_SPDDNKF_GENERATE	PROCEDURE	312	                          SELECT id,

REP_SPDDNKF_GENERATE	PROCEDURE	313	                                 dt,

REP_SPDDNKF_GENERATE	PROCEDURE	314	                                 ag_id,

REP_SPDDNKF_GENERATE	PROCEDURE	315	                                 kod_tp,

REP_SPDDNKF_GENERATE	PROCEDURE	316	                                 login,

REP_SPDDNKF_GENERATE	PROCEDURE	317	                                 text,

REP_SPDDNKF_GENERATE	PROCEDURE	318	                                 lu

REP_SPDDNKF_GENERATE	PROCEDURE	319	                            FROM merch_chat) c,

REP_SPDDNKF_GENERATE	PROCEDURE	320	                         user_list u

REP_SPDDNKF_GENERATE	PROCEDURE	321	                   WHERE     c.dt = a.visitdate

REP_SPDDNKF_GENERATE	PROCEDURE	322	                         AND c.ag_id = a.ag_id

REP_SPDDNKF_GENERATE	PROCEDURE	323	                         AND c.kod_tp = a.tp_kod

REP_SPDDNKF_GENERATE	PROCEDURE	324	                         AND u.login = c.login

REP_SPDDNKF_GENERATE	PROCEDURE	325	                ORDER BY c.id)

REP_SPDDNKF_GENERATE	PROCEDURE	326	         LOOP

REP_SPDDNKF_GENERATE	PROCEDURE	327	            UPDATE rep_spddnkf_visits

REP_SPDDNKF_GENERATE	PROCEDURE	328	               SET tasks =

REP_SPDDNKF_GENERATE	PROCEDURE	329	                         tasks

REP_SPDDNKF_GENERATE	PROCEDURE	330	                      || CASE WHEN tasks IS NULL THEN '' ELSE '<br>' END

REP_SPDDNKF_GENERATE	PROCEDURE	331	                      || b.text

REP_SPDDNKF_GENERATE	PROCEDURE	332	             WHERE ROWID = a.rid;

REP_SPDDNKF_GENERATE	PROCEDURE	333	

REP_SPDDNKF_GENERATE	PROCEDURE	334	            COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	335	         END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	336	      END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	337	

REP_SPDDNKF_GENERATE	PROCEDURE	338	

REP_SPDDNKF_GENERATE	PROCEDURE	339	

REP_SPDDNKF_GENERATE	PROCEDURE	340	      UPDATE rep_spddnkf_visits v

REP_SPDDNKF_GENERATE	PROCEDURE	341	         SET tasks =

REP_SPDDNKF_GENERATE	PROCEDURE	342	                   'Осуществить выкладку согласно планограмме и принципу FIFO. '

REP_SPDDNKF_GENERATE	PROCEDURE	343	                || 'Проверить сроки годности продукции. '

REP_SPDDNKF_GENERATE	PROCEDURE	344	                || 'Оформить места продаж ценниками и POSM-материалами. '

REP_SPDDNKF_GENERATE	PROCEDURE	345	                || 'Провести мониторинг цен и активностей основных конкурентов.'

REP_SPDDNKF_GENERATE	PROCEDURE	346	       /*get_random_task (

REP_SPDDNKF_GENERATE	PROCEDURE	347	          (SELECT COUNT (*)

REP_SPDDNKF_GENERATE	PROCEDURE	348	             FROM rep_spddnkf_urls

REP_SPDDNKF_GENERATE	PROCEDURE	349	            WHERE     v.visitdate = visitdate

REP_SPDDNKF_GENERATE	PROCEDURE	350	                  AND v.tp_kod = tp_kod

REP_SPDDNKF_GENERATE	PROCEDURE	351	                  AND v.h_eta = h_eta

REP_SPDDNKF_GENERATE	PROCEDURE	352	                  AND v.tn = tn

REP_SPDDNKF_GENERATE	PROCEDURE	353	                  AND v.dt = dt))*/

REP_SPDDNKF_GENERATE	PROCEDURE	354	       WHERE v.dt = x.dt AND tasks IS NULL;

REP_SPDDNKF_GENERATE	PROCEDURE	355	

REP_SPDDNKF_GENERATE	PROCEDURE	356	      COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	357	

REP_SPDDNKF_GENERATE	PROCEDURE	358	

REP_SPDDNKF_GENERATE	PROCEDURE	359	      DELETE FROM rep_spddnkf_dt

REP_SPDDNKF_GENERATE	PROCEDURE	360	            WHERE dt = x.dt;

REP_SPDDNKF_GENERATE	PROCEDURE	361	

REP_SPDDNKF_GENERATE	PROCEDURE	362	

REP_SPDDNKF_GENERATE	PROCEDURE	363	      COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	364	

REP_SPDDNKF_GENERATE	PROCEDURE	365	      INSERT INTO full_log (text, prg)

REP_SPDDNKF_GENERATE	PROCEDURE	366	              VALUES (

REP_SPDDNKF_GENERATE	PROCEDURE	367	                           'rep_spddnkf generate '

REP_SPDDNKF_GENERATE	PROCEDURE	368	                        || TO_CHAR (x.dt, 'dd.mm.yyyy')

REP_SPDDNKF_GENERATE	PROCEDURE	369	                        || ' end',

REP_SPDDNKF_GENERATE	PROCEDURE	370	                        'rep_spddnkf');

REP_SPDDNKF_GENERATE	PROCEDURE	371	

REP_SPDDNKF_GENERATE	PROCEDURE	372	      COMMIT;

REP_SPDDNKF_GENERATE	PROCEDURE	373	   END LOOP;

REP_SPDDNKF_GENERATE	PROCEDURE	374	END;
REPLACCEPTWHENVACSTART	PROCEDURE	1	PROCEDURE        REPLACCEPTWHENVACSTART

REPLACCEPTWHENVACSTART	PROCEDURE	2	IS

REPLACCEPTWHENVACSTART	PROCEDURE	3	   i   INTEGER;

REPLACCEPTWHENVACSTART	PROCEDURE	4	BEGIN

REPLACCEPTWHENVACSTART	PROCEDURE	5	   FOR a

REPLACCEPTWHENVACSTART	PROCEDURE	6	      IN (SELECT *

REPLACCEPTWHENVACSTART	PROCEDURE	7	            FROM (SELECT DISTINCT

REPLACCEPTWHENVACSTART	PROCEDURE	8	                         v.id,

REPLACCEPTWHENVACSTART	PROCEDURE	9	                         TO_CHAR (v.created, 'dd.mm.yyyy hh24:mi:ss') created,

REPLACCEPTWHENVACSTART	PROCEDURE	10	                         v_from,

REPLACCEPTWHENVACSTART	PROCEDURE	11	                         v.tn,

REPLACCEPTWHENVACSTART	PROCEDURE	12	                         u.fio,

REPLACCEPTWHENVACSTART	PROCEDURE	13	                         v.replacement,

REPLACCEPTWHENVACSTART	PROCEDURE	14	                         DECODE (v.replacement,

REPLACCEPTWHENVACSTART	PROCEDURE	15	                                 NULL, v.replacement_fio_eta,

REPLACCEPTWHENVACSTART	PROCEDURE	16	                                 u1.fio)

REPLACCEPTWHENVACSTART	PROCEDURE	17	                            replacement_fio,

REPLACCEPTWHENVACSTART	PROCEDURE	18	                         v.sz_id,

REPLACCEPTWHENVACSTART	PROCEDURE	19	                         v.auto_sz,

REPLACCEPTWHENVACSTART	PROCEDURE	20	                         v.auto_tma,

REPLACCEPTWHENVACSTART	PROCEDURE	21	                         /*f.full,*/

REPLACCEPTWHENVACSTART	PROCEDURE	22	                         (SELECT accepted

REPLACCEPTWHENVACSTART	PROCEDURE	23	                            FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	24	                           WHERE     sz_id = v.sz_id

REPLACCEPTWHENVACSTART	PROCEDURE	25	                                 AND accept_order =

REPLACCEPTWHENVACSTART	PROCEDURE	26	                                        DECODE (

REPLACCEPTWHENVACSTART	PROCEDURE	27	                                           NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	28	                                              (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	29	                                                 FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	30	                                                WHERE     sz_id = v.sz_id

REPLACCEPTWHENVACSTART	PROCEDURE	31	                                                      AND accepted = 2),

REPLACCEPTWHENVACSTART	PROCEDURE	32	                                              0),

REPLACCEPTWHENVACSTART	PROCEDURE	33	                                           0, (SELECT MAX (accept_order)

REPLACCEPTWHENVACSTART	PROCEDURE	34	                                                 FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	35	                                                WHERE sz_id = v.sz_id),

REPLACCEPTWHENVACSTART	PROCEDURE	36	                                           (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	37	                                              FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	38	                                             WHERE     sz_id = v.sz_id

REPLACCEPTWHENVACSTART	PROCEDURE	39	                                                   AND accepted = 2)))

REPLACCEPTWHENVACSTART	PROCEDURE	40	                            sz_status

REPLACCEPTWHENVACSTART	PROCEDURE	41	                    FROM vacation v,

REPLACCEPTWHENVACSTART	PROCEDURE	42	                         full f,

REPLACCEPTWHENVACSTART	PROCEDURE	43	                         user_list u,

REPLACCEPTWHENVACSTART	PROCEDURE	44	                         user_list u1

REPLACCEPTWHENVACSTART	PROCEDURE	45	                   WHERE     v.tn = f.slave

REPLACCEPTWHENVACSTART	PROCEDURE	46	                         AND u.tn = v.tn

REPLACCEPTWHENVACSTART	PROCEDURE	47	                         AND u1.tn(+) = v.replacement

REPLACCEPTWHENVACSTART	PROCEDURE	48	                         AND v.replacement IS NOT NULL)

REPLACCEPTWHENVACSTART	PROCEDURE	49	           WHERE sz_status = 1                        /*  СЗ подтверждена   */

REPLACCEPTWHENVACSTART	PROCEDURE	50	                              AND TRUNC (SYSDATE) = v_from /*   TRUNC (SYSDATE) - 20 >= v_from AND tn = 2444216815    */

REPLACCEPTWHENVACSTART	PROCEDURE	51	                                                          )

REPLACCEPTWHENVACSTART	PROCEDURE	52	   LOOP

REPLACCEPTWHENVACSTART	PROCEDURE	53	      IF a.auto_sz = 1

REPLACCEPTWHENVACSTART	PROCEDURE	54	      THEN

REPLACCEPTWHENVACSTART	PROCEDURE	55	         /*

REPLACCEPTWHENVACSTART	PROCEDURE	56	         в служебках за последние 30 дней,

REPLACCEPTWHENVACSTART	PROCEDURE	57	         которые находятся на согласовании,

REPLACCEPTWHENVACSTART	PROCEDURE	58	         заменить ассептора, где ассептор еще не рассматривал.

REPLACCEPTWHENVACSTART	PROCEDURE	59	         */

REPLACCEPTWHENVACSTART	PROCEDURE	60	         FOR b

REPLACCEPTWHENVACSTART	PROCEDURE	61	            IN (SELECT DISTINCT sz_accept.id, sz_accept.sz_id

REPLACCEPTWHENVACSTART	PROCEDURE	62	                  FROM sz, sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	63	                 WHERE     sz.id = sz_accept.sz_id(+)

REPLACCEPTWHENVACSTART	PROCEDURE	64	                       AND TRUNC (sz.created) BETWEEN TRUNC (SYSDATE) - 30

REPLACCEPTWHENVACSTART	PROCEDURE	65	                                                  AND TRUNC (SYSDATE)

REPLACCEPTWHENVACSTART	PROCEDURE	66	                       AND sz_accept.tn = a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	67	                       AND NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	68	                              (SELECT accepted

REPLACCEPTWHENVACSTART	PROCEDURE	69	                                 FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	70	                                WHERE     sz_id = sz.id

REPLACCEPTWHENVACSTART	PROCEDURE	71	                                      AND accept_order =

REPLACCEPTWHENVACSTART	PROCEDURE	72	                                             DECODE (

REPLACCEPTWHENVACSTART	PROCEDURE	73	                                                NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	74	                                                   (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	75	                                                      FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	76	                                                     WHERE     sz_id = sz.id

REPLACCEPTWHENVACSTART	PROCEDURE	77	                                                           AND accepted = 2),

REPLACCEPTWHENVACSTART	PROCEDURE	78	                                                   0),

REPLACCEPTWHENVACSTART	PROCEDURE	79	                                                0, (SELECT MAX (accept_order)

REPLACCEPTWHENVACSTART	PROCEDURE	80	                                                      FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	81	                                                     WHERE sz_id = sz.id),

REPLACCEPTWHENVACSTART	PROCEDURE	82	                                                (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	83	                                                   FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	84	                                                  WHERE     sz_id = sz.id

REPLACCEPTWHENVACSTART	PROCEDURE	85	                                                        AND accepted = 2))),

REPLACCEPTWHENVACSTART	PROCEDURE	86	                              0) = 0)

REPLACCEPTWHENVACSTART	PROCEDURE	87	         LOOP

REPLACCEPTWHENVACSTART	PROCEDURE	88	            SELECT COUNT (*)

REPLACCEPTWHENVACSTART	PROCEDURE	89	              INTO i

REPLACCEPTWHENVACSTART	PROCEDURE	90	              FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	91	             WHERE sz_id = b.sz_id AND tn = a.replacement;

REPLACCEPTWHENVACSTART	PROCEDURE	92	

REPLACCEPTWHENVACSTART	PROCEDURE	93	            IF i = 0

REPLACCEPTWHENVACSTART	PROCEDURE	94	            THEN

REPLACCEPTWHENVACSTART	PROCEDURE	95	               UPDATE sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	96	                  SET tn = a.replacement

REPLACCEPTWHENVACSTART	PROCEDURE	97	                WHERE id = b.id AND accepted = 0;

REPLACCEPTWHENVACSTART	PROCEDURE	98	            ELSE

REPLACCEPTWHENVACSTART	PROCEDURE	99	               DELETE FROM sz_accept

REPLACCEPTWHENVACSTART	PROCEDURE	100	                     WHERE sz_id = b.sz_id AND tn = a.tn AND accepted = 0;

REPLACCEPTWHENVACSTART	PROCEDURE	101	

REPLACCEPTWHENVACSTART	PROCEDURE	102	               DBMS_OUTPUT.put_line (

REPLACCEPTWHENVACSTART	PROCEDURE	103	                     'sz_id: '

REPLACCEPTWHENVACSTART	PROCEDURE	104	                  || b.sz_id

REPLACCEPTWHENVACSTART	PROCEDURE	105	                  || ' tn: '

REPLACCEPTWHENVACSTART	PROCEDURE	106	                  || a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	107	                  || ' replacement: '

REPLACCEPTWHENVACSTART	PROCEDURE	108	                  || a.replacement);

REPLACCEPTWHENVACSTART	PROCEDURE	109	            END IF;

REPLACCEPTWHENVACSTART	PROCEDURE	110	

REPLACCEPTWHENVACSTART	PROCEDURE	111	            COMMIT;

REPLACCEPTWHENVACSTART	PROCEDURE	112	         END LOOP;

REPLACCEPTWHENVACSTART	PROCEDURE	113	      END IF;

REPLACCEPTWHENVACSTART	PROCEDURE	114	

REPLACCEPTWHENVACSTART	PROCEDURE	115	      IF a.auto_tma = 1

REPLACCEPTWHENVACSTART	PROCEDURE	116	      THEN

REPLACCEPTWHENVACSTART	PROCEDURE	117	         /*

REPLACCEPTWHENVACSTART	PROCEDURE	118	        в заявках ТМА за последние 30 дней,

REPLACCEPTWHENVACSTART	PROCEDURE	119	        которые находятся на согласовании,

REPLACCEPTWHENVACSTART	PROCEDURE	120	        заменить ассептора, где ассептор еще не рассматривал.

REPLACCEPTWHENVACSTART	PROCEDURE	121	        */

REPLACCEPTWHENVACSTART	PROCEDURE	122	         FOR b

REPLACCEPTWHENVACSTART	PROCEDURE	123	            IN (SELECT DISTINCT bud_ru_zay_accept.id, bud_ru_zay_accept.z_id

REPLACCEPTWHENVACSTART	PROCEDURE	124	                  FROM bud_ru_zay, bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	125	                 WHERE     bud_ru_zay.id = bud_ru_zay_accept.z_id(+)

REPLACCEPTWHENVACSTART	PROCEDURE	126	                       AND TRUNC (bud_ru_zay.created) BETWEEN   TRUNC (

REPLACCEPTWHENVACSTART	PROCEDURE	127	                                                                   SYSDATE)

REPLACCEPTWHENVACSTART	PROCEDURE	128	                                                              - 30

REPLACCEPTWHENVACSTART	PROCEDURE	129	                                                          AND TRUNC (SYSDATE)

REPLACCEPTWHENVACSTART	PROCEDURE	130	                       AND bud_ru_zay_accept.tn = a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	131	                       AND NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	132	                              (SELECT accepted

REPLACCEPTWHENVACSTART	PROCEDURE	133	                                 FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	134	                                WHERE     z_id = bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	135	                                      AND accept_order =

REPLACCEPTWHENVACSTART	PROCEDURE	136	                                             DECODE (

REPLACCEPTWHENVACSTART	PROCEDURE	137	                                                NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	138	                                                   (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	139	                                                      FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	140	                                                     WHERE     z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	141	                                                                  bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	142	                                                           AND accepted = 2),

REPLACCEPTWHENVACSTART	PROCEDURE	143	                                                   0),

REPLACCEPTWHENVACSTART	PROCEDURE	144	                                                0, (SELECT MAX (accept_order)

REPLACCEPTWHENVACSTART	PROCEDURE	145	                                                      FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	146	                                                     WHERE z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	147	                                                              bud_ru_zay.id),

REPLACCEPTWHENVACSTART	PROCEDURE	148	                                                (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	149	                                                   FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	150	                                                  WHERE     z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	151	                                                               bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	152	                                                        AND accepted = 2))),

REPLACCEPTWHENVACSTART	PROCEDURE	153	                              0) = 0)

REPLACCEPTWHENVACSTART	PROCEDURE	154	         LOOP

REPLACCEPTWHENVACSTART	PROCEDURE	155	            SELECT COUNT (*)

REPLACCEPTWHENVACSTART	PROCEDURE	156	              INTO i

REPLACCEPTWHENVACSTART	PROCEDURE	157	              FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	158	             WHERE z_id = b.z_id AND tn = a.replacement;

REPLACCEPTWHENVACSTART	PROCEDURE	159	

REPLACCEPTWHENVACSTART	PROCEDURE	160	            IF i = 0

REPLACCEPTWHENVACSTART	PROCEDURE	161	            THEN

REPLACCEPTWHENVACSTART	PROCEDURE	162	               UPDATE bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	163	                  SET tn = a.replacement

REPLACCEPTWHENVACSTART	PROCEDURE	164	                WHERE id = b.id AND accepted = 0;

REPLACCEPTWHENVACSTART	PROCEDURE	165	            ELSE

REPLACCEPTWHENVACSTART	PROCEDURE	166	               DELETE FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	167	                     WHERE z_id = b.z_id AND tn = a.tn AND accepted = 0;

REPLACCEPTWHENVACSTART	PROCEDURE	168	

REPLACCEPTWHENVACSTART	PROCEDURE	169	               DBMS_OUTPUT.put_line (

REPLACCEPTWHENVACSTART	PROCEDURE	170	                     'z_id: '

REPLACCEPTWHENVACSTART	PROCEDURE	171	                  || b.z_id

REPLACCEPTWHENVACSTART	PROCEDURE	172	                  || ' tn: '

REPLACCEPTWHENVACSTART	PROCEDURE	173	                  || a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	174	                  || ' replacement: '

REPLACCEPTWHENVACSTART	PROCEDURE	175	                  || a.replacement);

REPLACCEPTWHENVACSTART	PROCEDURE	176	            END IF;

REPLACCEPTWHENVACSTART	PROCEDURE	177	

REPLACCEPTWHENVACSTART	PROCEDURE	178	            COMMIT;

REPLACCEPTWHENVACSTART	PROCEDURE	179	         END LOOP;

REPLACCEPTWHENVACSTART	PROCEDURE	180	

REPLACCEPTWHENVACSTART	PROCEDURE	181	         /*

REPLACCEPTWHENVACSTART	PROCEDURE	182	        в отчетах ТМА за последние 30 дней,

REPLACCEPTWHENVACSTART	PROCEDURE	183	        которые находятся на согласовании,

REPLACCEPTWHENVACSTART	PROCEDURE	184	        а заявка по данному отчету не отклонена,

REPLACCEPTWHENVACSTART	PROCEDURE	185	        заменить ассептора, где ассептор еще не рассматривал.

REPLACCEPTWHENVACSTART	PROCEDURE	186	        */

REPLACCEPTWHENVACSTART	PROCEDURE	187	         FOR b

REPLACCEPTWHENVACSTART	PROCEDURE	188	            IN (SELECT DISTINCT bud_ru_zay_accept.id, bud_ru_zay_accept.z_id

REPLACCEPTWHENVACSTART	PROCEDURE	189	                  FROM bud_ru_zay, bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	190	                 WHERE     bud_ru_zay.id = bud_ru_zay_accept.z_id(+)

REPLACCEPTWHENVACSTART	PROCEDURE	191	                       AND TRUNC (bud_ru_zay.created) BETWEEN   TRUNC (

REPLACCEPTWHENVACSTART	PROCEDURE	192	                                                                   SYSDATE)

REPLACCEPTWHENVACSTART	PROCEDURE	193	                                                              - 30

REPLACCEPTWHENVACSTART	PROCEDURE	194	                                                          AND TRUNC (SYSDATE)

REPLACCEPTWHENVACSTART	PROCEDURE	195	                       AND bud_ru_zay_accept.tn = a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	196	                       AND NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	197	                              (SELECT rep_accepted

REPLACCEPTWHENVACSTART	PROCEDURE	198	                                 FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	199	                                WHERE     z_id = bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	200	                                      AND INN_not_ReportMA (tn) = 0

REPLACCEPTWHENVACSTART	PROCEDURE	201	                                      AND accept_order =

REPLACCEPTWHENVACSTART	PROCEDURE	202	                                             DECODE (

REPLACCEPTWHENVACSTART	PROCEDURE	203	                                                NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	204	                                                   (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	205	                                                      FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	206	                                                     WHERE     z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	207	                                                                  bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	208	                                                           AND rep_accepted =

REPLACCEPTWHENVACSTART	PROCEDURE	209	                                                                  2

REPLACCEPTWHENVACSTART	PROCEDURE	210	                                                           AND INN_not_ReportMA (

REPLACCEPTWHENVACSTART	PROCEDURE	211	                                                                  tn) = 0),

REPLACCEPTWHENVACSTART	PROCEDURE	212	                                                   0),

REPLACCEPTWHENVACSTART	PROCEDURE	213	                                                0, (SELECT MAX (accept_order)

REPLACCEPTWHENVACSTART	PROCEDURE	214	                                                      FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	215	                                                     WHERE z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	216	                                                              bud_ru_zay.id),

REPLACCEPTWHENVACSTART	PROCEDURE	217	                                                (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	218	                                                   FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	219	                                                  WHERE     z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	220	                                                               bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	221	                                                        AND rep_accepted = 2

REPLACCEPTWHENVACSTART	PROCEDURE	222	                                                        AND INN_not_ReportMA (

REPLACCEPTWHENVACSTART	PROCEDURE	223	                                                               tn) = 0))),

REPLACCEPTWHENVACSTART	PROCEDURE	224	                              0) = 0

REPLACCEPTWHENVACSTART	PROCEDURE	225	                       AND NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	226	                              (SELECT accepted

REPLACCEPTWHENVACSTART	PROCEDURE	227	                                 FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	228	                                WHERE     z_id = bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	229	                                      AND accept_order =

REPLACCEPTWHENVACSTART	PROCEDURE	230	                                             DECODE (

REPLACCEPTWHENVACSTART	PROCEDURE	231	                                                NVL (

REPLACCEPTWHENVACSTART	PROCEDURE	232	                                                   (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	233	                                                      FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	234	                                                     WHERE     z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	235	                                                                  bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	236	                                                           AND accepted = 2),

REPLACCEPTWHENVACSTART	PROCEDURE	237	                                                   0),

REPLACCEPTWHENVACSTART	PROCEDURE	238	                                                0, (SELECT MAX (accept_order)

REPLACCEPTWHENVACSTART	PROCEDURE	239	                                                      FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	240	                                                     WHERE z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	241	                                                              bud_ru_zay.id),

REPLACCEPTWHENVACSTART	PROCEDURE	242	                                                (SELECT accept_order

REPLACCEPTWHENVACSTART	PROCEDURE	243	                                                   FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	244	                                                  WHERE     z_id =

REPLACCEPTWHENVACSTART	PROCEDURE	245	                                                               bud_ru_zay.id

REPLACCEPTWHENVACSTART	PROCEDURE	246	                                                        AND accepted = 2))),

REPLACCEPTWHENVACSTART	PROCEDURE	247	                              0) <> 2)

REPLACCEPTWHENVACSTART	PROCEDURE	248	         LOOP

REPLACCEPTWHENVACSTART	PROCEDURE	249	            SELECT COUNT (*)

REPLACCEPTWHENVACSTART	PROCEDURE	250	              INTO i

REPLACCEPTWHENVACSTART	PROCEDURE	251	              FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	252	             WHERE z_id = b.z_id AND tn = a.replacement;

REPLACCEPTWHENVACSTART	PROCEDURE	253	

REPLACCEPTWHENVACSTART	PROCEDURE	254	            IF i = 0

REPLACCEPTWHENVACSTART	PROCEDURE	255	            THEN

REPLACCEPTWHENVACSTART	PROCEDURE	256	               UPDATE bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	257	                  SET tn = a.replacement

REPLACCEPTWHENVACSTART	PROCEDURE	258	                WHERE     id = b.id

REPLACCEPTWHENVACSTART	PROCEDURE	259	                      AND rep_accepted = 0

REPLACCEPTWHENVACSTART	PROCEDURE	260	                      AND INN_not_ReportMA (tn) = 0;

REPLACCEPTWHENVACSTART	PROCEDURE	261	            ELSE

REPLACCEPTWHENVACSTART	PROCEDURE	262	               DELETE FROM bud_ru_zay_accept

REPLACCEPTWHENVACSTART	PROCEDURE	263	                     WHERE     z_id = b.z_id

REPLACCEPTWHENVACSTART	PROCEDURE	264	                           AND tn = a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	265	                           AND rep_accepted = 0

REPLACCEPTWHENVACSTART	PROCEDURE	266	                           AND INN_not_ReportMA (tn) = 0  /*AND accepted = 0*/

REPLACCEPTWHENVACSTART	PROCEDURE	267	                                                        ;

REPLACCEPTWHENVACSTART	PROCEDURE	268	

REPLACCEPTWHENVACSTART	PROCEDURE	269	               DBMS_OUTPUT.put_line (

REPLACCEPTWHENVACSTART	PROCEDURE	270	                     'z_id: '

REPLACCEPTWHENVACSTART	PROCEDURE	271	                  || b.z_id

REPLACCEPTWHENVACSTART	PROCEDURE	272	                  || ' tn: '

REPLACCEPTWHENVACSTART	PROCEDURE	273	                  || a.tn

REPLACCEPTWHENVACSTART	PROCEDURE	274	                  || ' replacement: '

REPLACCEPTWHENVACSTART	PROCEDURE	275	                  || a.replacement);

REPLACCEPTWHENVACSTART	PROCEDURE	276	            END IF;

REPLACCEPTWHENVACSTART	PROCEDURE	277	

REPLACCEPTWHENVACSTART	PROCEDURE	278	            COMMIT;

REPLACCEPTWHENVACSTART	PROCEDURE	279	         END LOOP;

REPLACCEPTWHENVACSTART	PROCEDURE	280	      END IF;

REPLACCEPTWHENVACSTART	PROCEDURE	281	   END LOOP;

REPLACCEPTWHENVACSTART	PROCEDURE	282	END;
REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	1	PROCEDURE        "REFRESH_TIMEZONE_4_ALL_JOBS"

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	2	IS

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	3	BEGIN

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	4	   FOR a IN (SELECT * FROM USER_SCHEDULER_JOBS)

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	5	   LOOP

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	6	      SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	7	         name        => a.job_name,

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	8	         attribute   => 'START_DATE',

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	9	         VALUE       => TO_TIMESTAMP_TZ ('01-01-2018 00:00:00 Europe/Kiev',

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	10	                                         'DD-MM-YYYY HH24:MI:SS TZR'));

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	11	   END LOOP;

REFRESH_TIMEZONE_4_ALL_JOBS	PROCEDURE	12	END;
REFRESH_MV	PROCEDURE	1	PROCEDURE               "REFRESH_MV" (mv VARCHAR)

REFRESH_MV	PROCEDURE	2	IS

REFRESH_MV	PROCEDURE	3	procedure PR_LOG(nTxt in varchar2, nName in varchar2) 

REFRESH_MV	PROCEDURE	4	is

REFRESH_MV	PROCEDURE	5	PRAGMA AUTONOMOUS_TRANSACTION;

REFRESH_MV	PROCEDURE	6	begin

REFRESH_MV	PROCEDURE	7	  insert into my_logs (data, nTxt, tname) values (sysdate, nTxt, nName);

REFRESH_MV	PROCEDURE	8	  commit;

REFRESH_MV	PROCEDURE	9	end;

REFRESH_MV	PROCEDURE	10	BEGIN

REFRESH_MV	PROCEDURE	11	   --index off

REFRESH_MV	PROCEDURE	12	   /*   FOR i IN (SELECT index_name

REFRESH_MV	PROCEDURE	13	                  FROM user_indexes

REFRESH_MV	PROCEDURE	14	                 WHERE table_name = mv)

REFRESH_MV	PROCEDURE	15	      LOOP

REFRESH_MV	PROCEDURE	16	         EXECUTE IMMEDIATE 'alter index ' || i.index_name || ' unusable';

REFRESH_MV	PROCEDURE	17	      END LOOP;

REFRESH_MV	PROCEDURE	18	   */

REFRESH_MV	PROCEDURE	19	   --mv rebuild

REFRESH_MV	PROCEDURE	20	   --BEGIN

REFRESH_MV	PROCEDURE	21	   /* EXECUTE IMMEDIATE

REFRESH_MV	PROCEDURE	22	       ('alter materialized view ' || mv || ' disable query rewrite');*/

REFRESH_MV	PROCEDURE	23	

REFRESH_MV	PROCEDURE	24	PR_LOG('start refresh', mv);

REFRESH_MV	PROCEDURE	25	

REFRESH_MV	PROCEDURE	26	   DBMS_SNAPSHOT.REFRESH (LIST                   => 'PERSIK.' || mv,

REFRESH_MV	PROCEDURE	27	                          PUSH_DEFERRED_RPC      => TRUE,

REFRESH_MV	PROCEDURE	28	                          REFRESH_AFTER_ERRORS   => FALSE,

REFRESH_MV	PROCEDURE	29	                          PURGE_OPTION           => 1,

REFRESH_MV	PROCEDURE	30	                          /*PARALLELISM            => 0,*/

REFRESH_MV	PROCEDURE	31	                          ATOMIC_REFRESH         => TRUE,

REFRESH_MV	PROCEDURE	32	                          NESTED                 => FALSE);

REFRESH_MV	PROCEDURE	33	                          

REFRESH_MV	PROCEDURE	34	PR_LOG('end refresh', mv);                          

REFRESH_MV	PROCEDURE	35	   /*EXECUTE IMMEDIATE

REFRESH_MV	PROCEDURE	36	      ('alter materialized view ' || mv || ' disable query rewrite');*/

REFRESH_MV	PROCEDURE	37	   --END;

REFRESH_MV	PROCEDURE	38	

REFRESH_MV	PROCEDURE	39	   /*

REFRESH_MV	PROCEDURE	40	      --index rebuild

REFRESH_MV	PROCEDURE	41	      FOR i IN (SELECT index_name

REFRESH_MV	PROCEDURE	42	                  FROM user_indexes

REFRESH_MV	PROCEDURE	43	                 WHERE table_name = mv)

REFRESH_MV	PROCEDURE	44	      LOOP

REFRESH_MV	PROCEDURE	45	         EXECUTE IMMEDIATE 'alter index ' || i.index_name || ' rebuild  online';

REFRESH_MV	PROCEDURE	46	      END LOOP;

REFRESH_MV	PROCEDURE	47	   */

REFRESH_MV	PROCEDURE	48	

REFRESH_MV	PROCEDURE	49	PR_LOG('start gather stats', mv);

REFRESH_MV	PROCEDURE	50	

REFRESH_MV	PROCEDURE	51	   SYS.DBMS_STATS.GATHER_TABLE_STATS (

REFRESH_MV	PROCEDURE	52	      OwnName            => 'PERSIK',

REFRESH_MV	PROCEDURE	53	      TabName            => mv,

REFRESH_MV	PROCEDURE	54	      Estimate_Percent   => 30,

REFRESH_MV	PROCEDURE	55	      Method_Opt         => 'FOR ALL COLUMNS SIZE SKEWONLY ',

REFRESH_MV	PROCEDURE	56	      Degree             => 2,

REFRESH_MV	PROCEDURE	57	      Cascade            => TRUE,

REFRESH_MV	PROCEDURE	58	      No_Invalidate      => FALSE);

REFRESH_MV	PROCEDURE	59	

REFRESH_MV	PROCEDURE	60	PR_LOG('end gather stats', mv);

REFRESH_MV	PROCEDURE	61	

REFRESH_MV	PROCEDURE	62	-- Не нужно этого делать !

REFRESH_MV	PROCEDURE	63	   --EXECUTE IMMEDIATE

REFRESH_MV	PROCEDURE	64	   -- 'ANALYZE TABLE persik.' || mv || ' COMPUTE STATISTICS FOR ALL INDEXES';

REFRESH_MV	PROCEDURE	65	  

REFRESH_MV	PROCEDURE	66	PR_LOG('start compile', mv);

REFRESH_MV	PROCEDURE	67	   EXECUTE IMMEDIATE 'alter MATERIALIZED VIEW ' || mv || ' compile';

REFRESH_MV	PROCEDURE	68	PR_LOG('end compile', mv);

REFRESH_MV	PROCEDURE	69	   

REFRESH_MV	PROCEDURE	70	END;
REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	1	PROCEDURE        refresh_MS_REP_SPEC_FACTS

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	2	AS

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	3	   c   INTEGER;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	4	BEGIN

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	5	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	6	        VALUES ('MS_REP_SPEC_FACTS started', 'MS_REP_SPEC_FACTS');

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	7	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	8	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	9	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	10	   DELETE FROM MS_REP_SPEC_FACTS_TMP;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	11	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	12	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	13	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	14	   INSERT INTO MS_REP_SPEC_FACTS_TMP

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	15	      SELECT TRUNC (msr.dt, 'mm') month,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	16	             msr.r_dt last_visit,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	17	             msrr.n_id_net id_net,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	18	             msrr.n_net_name net_name,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	19	             msrr.rb_kodtp kodtp,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	20	             cpp.kodtp_new kodtpdm,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	21	             msrr.cpp1_ur_tz_name ur_tz_name,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	22	             msrr.cpp1_tz_address tz_address,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	23	             msb.art msb_art,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	24	             msb.name msb_name,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	25	             msr.r_oos msr_oos,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	26	             msr.r_gos msr_gos

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	27	        FROM ms_rep_hbr_max_dt msr,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	28	             MS_REP_HBR_DT msh,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	29	             merch_spec_body msb,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	30	             merch_report mr,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	31	             ms_rep_routes1 msrr,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	32	             cpp

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	33	       WHERE     msh.kod_tp = msrr.rb_kodtp

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	34	             AND msh.ag_id = msrr.rb_ag_id

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	35	             AND msh.id_net = msrr.n_id_net

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	36	             AND msb.head_id = msh.id

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	37	             AND msr.r_spec_id = msb.id

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	38	             AND msrr.rb_id = mr.rb_id

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	39	             AND msh.data = msr.dt

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	40	             AND msrr.cpp1_id = cpp.id

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	41	             AND msr.dt IN (SELECT DISTINCT

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	42	                                   LEAST (TRUNC (SYSDATE) - 1, LAST_DAY (data))

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	43	                                      dt

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	44	                              FROM routes_head)

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	45	             AND msrr.rb_ag_id = 100743

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	46	             AND (msr.r_oos = 1 OR msr.r_gos = 1)

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	47	             AND msrr.rb_data = msr.r_dt;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	48	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	49	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	50	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	51	   DELETE FROM MS_REP_SPEC_FACTS;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	52	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	53	   INSERT INTO MS_REP_SPEC_FACTS

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	54	      SELECT DISTINCT * FROM MS_REP_SPEC_FACTS_TMP;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	55	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	56	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	57	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	58	   SELECT COUNT (*) INTO c FROM MS_REP_SPEC_FACTS;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	59	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	60	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	61	        VALUES ('MS_REP_SPEC_FACTS total records: ' || c, 'MS_REP_SPEC_FACTS');

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	62	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	63	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	64	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	65	   SELECT COUNT (*) INTO c FROM MS_REP_SPEC_FACTS_TMP;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	66	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	67	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	68	           VALUES (

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	69	                     'MS_REP_SPEC_FACTS_TMP total records: ' || c,

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	70	                     'MS_REP_SPEC_FACTS');

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	71	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	72	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	73	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	74	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	75	        VALUES ('MS_REP_SPEC_FACTS finished', 'MS_REP_SPEC_FACTS');

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	76	

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	77	   COMMIT;

REFRESH_MS_REP_SPEC_FACTS	PROCEDURE	78	END;
REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	1	PROCEDURE        REFRESH_MS_REP_HBR_MAX_DT

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	2	IS

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	3	   current_synonym   VARCHAR2 (255);

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	4	   new_synonym       VARCHAR2 (255);

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	5	BEGIN

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	6	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	7	        VALUES ('start', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	8	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	9	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	10	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	11	   SELECT table_name

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	12	     INTO current_synonym

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	13	     FROM user_synonyms

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	14	    WHERE synonym_name = 'MS_REP_HBR_MAX_DT';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	15	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	16	   IF current_synonym = 'MS_REP_HBR_MAX_DT_T1'

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	17	   THEN

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	18	      new_synonym := 'MS_REP_HBR_MAX_DT_T2';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	19	   END IF;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	20	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	21	   IF current_synonym = 'MS_REP_HBR_MAX_DT_T2'

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	22	   THEN

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	23	      new_synonym := 'MS_REP_HBR_MAX_DT_T1';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	24	   END IF;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	25	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	26	   FOR i IN (SELECT index_name

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	27	               FROM user_indexes

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	28	              WHERE table_name = new_synonym)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	29	   LOOP

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	30	      EXECUTE IMMEDIATE 'alter index ' || i.index_name || ' unusable';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	31	   END LOOP;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	32	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	33	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	34	        VALUES ('step 1 completed', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	35	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	36	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	37	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	38	   EXECUTE IMMEDIATE 'truncate table ' || new_synonym || ' drop storage';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	39	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	40	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	41	        VALUES ('step 2 completed', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	42	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	43	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	44	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	45	   FOR a

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	46	      IN (  SELECT data

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	47	              FROM calendar

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	48	             WHERE data BETWEEN ADD_MONTHS (TRUNC (SYSDATE, 'mm'), -3)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	49	                            AND TRUNC (SYSDATE) + 1

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	50	          ORDER BY data)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	51	   LOOP

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	52	      EXECUTE IMMEDIATE

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	53	            'INSERT /*+append*/ INTO '

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	54	         || new_synonym

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	55	         || '    (

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	56	                  r_id,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	57	                  r_spec_id,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	58	                  r_dt,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	59	                  r_remain,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	60	                  r_oos,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	61	                  r_gos,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	62	                  r_fcount,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	63	                  r_price,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	64	                  r_text,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	65	                  dt)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	66	           SELECT r_id,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	67	                  r_spec_id,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	68	                  r_dt,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	69	                  r_remain,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	70	                  r_oos,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	71	                  r_gos,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	72	                  r_fcount,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	73	                  r_price,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	74	                  r_text,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	75	                  TO_DATE ('''

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	76	         || TO_CHAR (a.data, 'dd.mm.yyyy')

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	77	         || ''', ''dd.mm.yyyy'') dt

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	78	             FROM ms_rep_hbr,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	79	                  (  SELECT h_id, MAX (r_dt) dt

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	80	                       FROM ms_rep_hbr

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	81	                       where r_dt<=TO_DATE ('''

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	82	         || TO_CHAR (a.data, 'dd.mm.yyyy')

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	83	         || ''', ''dd.mm.yyyy'')

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	84	                   GROUP BY h_id) h1

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	85	            WHERE ms_rep_hbr.b_head_id = h1.h_id AND ms_rep_hbr.r_dt = h1.dt

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	86	         /*ORDER BY r_spec_id, r_dt*/';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	87	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	88	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	89	      COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	90	   END LOOP;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	91	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	92	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	93	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	94	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	95	        VALUES ('step 3 completed', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	96	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	97	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	98	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	99	   FOR i IN (SELECT index_name

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	100	               FROM user_indexes

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	101	              WHERE table_name = new_synonym)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	102	   LOOP

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	103	      EXECUTE IMMEDIATE 'alter index ' || i.index_name || ' rebuild  online';

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	104	   END LOOP;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	105	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	106	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	107	        VALUES ('step 4 completed', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	108	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	109	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	110	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	111	   SYS.DBMS_STATS.GATHER_TABLE_STATS (

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	112	      OwnName            => 'PERSIK',

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	113	      TabName            => new_synonym,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	114	      Estimate_Percent   => 30,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	115	      Method_Opt         => 'FOR ALL COLUMNS SIZE SKEWONLY ',

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	116	      Degree             => 2,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	117	      Cascade            => TRUE,

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	118	      No_Invalidate      => FALSE);

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	119	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	120	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	121	        VALUES ('step 5 completed', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	122	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	123	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	124	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	125	   EXECUTE IMMEDIATE

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	126	      'CREATE OR REPLACE SYNONYM MS_REP_HBR_MAX_DT FOR ' || new_synonym;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	127	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	128	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	129	        VALUES ('end', 'REFRESH_MS_REP_HBR_MAX_DT');

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	130	

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	131	   COMMIT;

REFRESH_MS_REP_HBR_MAX_DT	PROCEDURE	132	END;
REFRESH_MS_REP_HBR	PROCEDURE	1	PROCEDURE        REFRESH_MS_REP_HBR

REFRESH_MS_REP_HBR	PROCEDURE	2	IS

REFRESH_MS_REP_HBR	PROCEDURE	3	   current_synonym   VARCHAR2 (255);

REFRESH_MS_REP_HBR	PROCEDURE	4	   new_synonym       VARCHAR2 (255);

REFRESH_MS_REP_HBR	PROCEDURE	5	BEGIN

REFRESH_MS_REP_HBR	PROCEDURE	6	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	7	        VALUES ('start', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	8	

REFRESH_MS_REP_HBR	PROCEDURE	9	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	10	

REFRESH_MS_REP_HBR	PROCEDURE	11	   SELECT table_name

REFRESH_MS_REP_HBR	PROCEDURE	12	     INTO current_synonym

REFRESH_MS_REP_HBR	PROCEDURE	13	     FROM user_synonyms

REFRESH_MS_REP_HBR	PROCEDURE	14	    WHERE synonym_name = 'MS_REP_HBR';

REFRESH_MS_REP_HBR	PROCEDURE	15	

REFRESH_MS_REP_HBR	PROCEDURE	16	   IF current_synonym = 'MS_REP_HBR_T1'

REFRESH_MS_REP_HBR	PROCEDURE	17	   THEN

REFRESH_MS_REP_HBR	PROCEDURE	18	      new_synonym := 'MS_REP_HBR_T2';

REFRESH_MS_REP_HBR	PROCEDURE	19	   END IF;

REFRESH_MS_REP_HBR	PROCEDURE	20	

REFRESH_MS_REP_HBR	PROCEDURE	21	   IF current_synonym = 'MS_REP_HBR_T2'

REFRESH_MS_REP_HBR	PROCEDURE	22	   THEN

REFRESH_MS_REP_HBR	PROCEDURE	23	      new_synonym := 'MS_REP_HBR_T1';

REFRESH_MS_REP_HBR	PROCEDURE	24	   END IF;

REFRESH_MS_REP_HBR	PROCEDURE	25	

REFRESH_MS_REP_HBR	PROCEDURE	26	

REFRESH_MS_REP_HBR	PROCEDURE	27	   DBMS_SNAPSHOT.REFRESH (LIST                   => 'PERSIK.MS_REP_HBR_NEW',

REFRESH_MS_REP_HBR	PROCEDURE	28	                          PUSH_DEFERRED_RPC      => TRUE,

REFRESH_MS_REP_HBR	PROCEDURE	29	                          REFRESH_AFTER_ERRORS   => FALSE,

REFRESH_MS_REP_HBR	PROCEDURE	30	                          PURGE_OPTION           => 1,

REFRESH_MS_REP_HBR	PROCEDURE	31	                          ATOMIC_REFRESH         => TRUE,

REFRESH_MS_REP_HBR	PROCEDURE	32	                          NESTED                 => FALSE);

REFRESH_MS_REP_HBR	PROCEDURE	33	

REFRESH_MS_REP_HBR	PROCEDURE	34	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	35	        VALUES ('step 1 completed', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	36	

REFRESH_MS_REP_HBR	PROCEDURE	37	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	38	

REFRESH_MS_REP_HBR	PROCEDURE	39	   FOR i IN (SELECT index_name

REFRESH_MS_REP_HBR	PROCEDURE	40	               FROM user_indexes

REFRESH_MS_REP_HBR	PROCEDURE	41	              WHERE table_name = new_synonym)

REFRESH_MS_REP_HBR	PROCEDURE	42	   LOOP

REFRESH_MS_REP_HBR	PROCEDURE	43	      EXECUTE IMMEDIATE 'alter index ' || i.index_name || ' unusable';

REFRESH_MS_REP_HBR	PROCEDURE	44	   END LOOP;

REFRESH_MS_REP_HBR	PROCEDURE	45	

REFRESH_MS_REP_HBR	PROCEDURE	46	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	47	        VALUES ('step 2 completed', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	48	

REFRESH_MS_REP_HBR	PROCEDURE	49	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	50	

REFRESH_MS_REP_HBR	PROCEDURE	51	   EXECUTE IMMEDIATE 'truncate table ' || new_synonym || ' drop storage';

REFRESH_MS_REP_HBR	PROCEDURE	52	

REFRESH_MS_REP_HBR	PROCEDURE	53	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	54	        VALUES ('step 3 completed', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	55	

REFRESH_MS_REP_HBR	PROCEDURE	56	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	57	

REFRESH_MS_REP_HBR	PROCEDURE	58	   EXECUTE IMMEDIATE

REFRESH_MS_REP_HBR	PROCEDURE	59	         'INSERT /*+append*/ INTO '

REFRESH_MS_REP_HBR	PROCEDURE	60	      || new_synonym

REFRESH_MS_REP_HBR	PROCEDURE	61	      || ' (

REFRESH_MS_REP_HBR	PROCEDURE	62	   H_ID, H_ID_NET, H_AG_ID, 

REFRESH_MS_REP_HBR	PROCEDURE	63	   H_KOD_TP, H_DATA, B_ID, 

REFRESH_MS_REP_HBR	PROCEDURE	64	   B_HEAD_ID, B_SORT, B_ART, 

REFRESH_MS_REP_HBR	PROCEDURE	65	   B_NAME, B_BRAND, B_IZM, 

REFRESH_MS_REP_HBR	PROCEDURE	66	   B_WEIGHT, B_KOD, R_ID, 

REFRESH_MS_REP_HBR	PROCEDURE	67	   R_SPEC_ID, R_DT, R_REMAIN, 

REFRESH_MS_REP_HBR	PROCEDURE	68	   R_OOS, R_GOS, R_FCOUNT, R_PRICE, 

REFRESH_MS_REP_HBR	PROCEDURE	69	   R_TEXT) '

REFRESH_MS_REP_HBR	PROCEDURE	70	      || ' SELECT 

REFRESH_MS_REP_HBR	PROCEDURE	71	      H_ID, H_ID_NET, H_AG_ID, 

REFRESH_MS_REP_HBR	PROCEDURE	72	   H_KOD_TP, H_DATA, B_ID, 

REFRESH_MS_REP_HBR	PROCEDURE	73	   B_HEAD_ID, B_SORT, B_ART, 

REFRESH_MS_REP_HBR	PROCEDURE	74	   B_NAME, B_BRAND, B_IZM, 

REFRESH_MS_REP_HBR	PROCEDURE	75	   B_WEIGHT, B_KOD, R_ID, 

REFRESH_MS_REP_HBR	PROCEDURE	76	   R_SPEC_ID, R_DT, R_REMAIN, 

REFRESH_MS_REP_HBR	PROCEDURE	77	   R_OOS, R_GOS, R_FCOUNT, R_PRICE, 

REFRESH_MS_REP_HBR	PROCEDURE	78	   R_TEXT

REFRESH_MS_REP_HBR	PROCEDURE	79	       FROM MS_REP_HBR_NEW';

REFRESH_MS_REP_HBR	PROCEDURE	80	

REFRESH_MS_REP_HBR	PROCEDURE	81	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	82	

REFRESH_MS_REP_HBR	PROCEDURE	83	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	84	        VALUES ('step 4 completed', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	85	

REFRESH_MS_REP_HBR	PROCEDURE	86	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	87	

REFRESH_MS_REP_HBR	PROCEDURE	88	   FOR i IN (SELECT index_name

REFRESH_MS_REP_HBR	PROCEDURE	89	               FROM user_indexes

REFRESH_MS_REP_HBR	PROCEDURE	90	              WHERE table_name = new_synonym)

REFRESH_MS_REP_HBR	PROCEDURE	91	   LOOP

REFRESH_MS_REP_HBR	PROCEDURE	92	      EXECUTE IMMEDIATE 'alter index ' || i.index_name || ' rebuild  online';

REFRESH_MS_REP_HBR	PROCEDURE	93	   END LOOP;

REFRESH_MS_REP_HBR	PROCEDURE	94	

REFRESH_MS_REP_HBR	PROCEDURE	95	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	96	        VALUES ('step 5 completed', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	97	

REFRESH_MS_REP_HBR	PROCEDURE	98	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	99	

REFRESH_MS_REP_HBR	PROCEDURE	100	   SYS.DBMS_STATS.GATHER_TABLE_STATS (

REFRESH_MS_REP_HBR	PROCEDURE	101	      OwnName            => 'PERSIK',

REFRESH_MS_REP_HBR	PROCEDURE	102	      TabName            => new_synonym,

REFRESH_MS_REP_HBR	PROCEDURE	103	      Estimate_Percent   => 30,

REFRESH_MS_REP_HBR	PROCEDURE	104	      Method_Opt         => 'FOR ALL COLUMNS SIZE SKEWONLY ',

REFRESH_MS_REP_HBR	PROCEDURE	105	      Degree             => 2,

REFRESH_MS_REP_HBR	PROCEDURE	106	      Cascade            => TRUE,

REFRESH_MS_REP_HBR	PROCEDURE	107	      No_Invalidate      => FALSE);

REFRESH_MS_REP_HBR	PROCEDURE	108	

REFRESH_MS_REP_HBR	PROCEDURE	109	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	110	        VALUES ('step 6 completed', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	111	

REFRESH_MS_REP_HBR	PROCEDURE	112	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	113	

REFRESH_MS_REP_HBR	PROCEDURE	114	   EXECUTE IMMEDIATE 'CREATE OR REPLACE SYNONYM MS_REP_HBR FOR ' || new_synonym;

REFRESH_MS_REP_HBR	PROCEDURE	115	

REFRESH_MS_REP_HBR	PROCEDURE	116	   INSERT INTO full_log (text, prg)

REFRESH_MS_REP_HBR	PROCEDURE	117	        VALUES ('end', 'REFRESH_MS_REP_HBR');

REFRESH_MS_REP_HBR	PROCEDURE	118	

REFRESH_MS_REP_HBR	PROCEDURE	119	   COMMIT;

REFRESH_MS_REP_HBR	PROCEDURE	120	END;
RECOMPILE_ALL	PROCEDURE	1	PROCEDURE        RECOMPILE_ALL

RECOMPILE_ALL	PROCEDURE	2	IS

RECOMPILE_ALL	PROCEDURE	3	   PRAGMA AUTONOMOUS_TRANSACTION;

RECOMPILE_ALL	PROCEDURE	4	BEGIN

RECOMPILE_ALL	PROCEDURE	5	   EXECUTE IMMEDIATE 'begin SYS.UTL_RECOMP.recomp_serial(''PERSIK''); end;';

RECOMPILE_ALL	PROCEDURE	6	END;
RECOMMENDATION_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."RECOMMENDATION_LAST_UPDATE" 

RECOMMENDATION_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

RECOMMENDATION_LAST_UPDATE	TRIGGER	3	ON RECOMMENDATION REFERENCING NEW AS New OLD AS Old

RECOMMENDATION_LAST_UPDATE	TRIGGER	4	FOR EACH ROW

RECOMMENDATION_LAST_UPDATE	TRIGGER	5	DECLARE

RECOMMENDATION_LAST_UPDATE	TRIGGER	6	BEGIN

RECOMMENDATION_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

RECOMMENDATION_LAST_UPDATE	TRIGGER	8	END RECOMMENDATION_last_update; 

RECOMMENDATION_LAST_UPDATE	TRIGGER	9	

RECOMMENDATION_LAST_UPDATE	TRIGGER	10	

RECOMMENDATION_LAST_UPDATE	TRIGGER	11	

RECOMMENDATION_LAST_UPDATE	TRIGGER	12	

P_PURPOSE_NEW	TRIGGER	1	TRIGGER "PERSIK"."P_PURPOSE_NEW" 

P_PURPOSE_NEW	TRIGGER	2	BEFORE INSERT

P_PURPOSE_NEW	TRIGGER	3	ON P_PURPOSE 

P_PURPOSE_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

P_PURPOSE_NEW	TRIGGER	5	FOR EACH ROW

P_PURPOSE_NEW	TRIGGER	6	/* Formatted on 2008/10/30 09:50 (Formatter Plus v4.8.8) */

P_PURPOSE_NEW	TRIGGER	7	DECLARE

P_PURPOSE_NEW	TRIGGER	8	BEGIN

P_PURPOSE_NEW	TRIGGER	9	   SELECT NVL (MAX (purpose_id), 0) + 1 newid

P_PURPOSE_NEW	TRIGGER	10	     INTO :NEW.purpose_id

P_PURPOSE_NEW	TRIGGER	11	     FROM p_purpose;

P_PURPOSE_NEW	TRIGGER	12	END p_purpose_new; 

P_PURPOSE_NEW	TRIGGER	13	

P_PURPOSE_NEW	TRIGGER	14	

P_PURPOSE_NEW	TRIGGER	15	

P_PURPOSE_NEW	TRIGGER	16	

P_PURPOSE_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."P_PURPOSE_LAST_UPDATE" 

P_PURPOSE_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

P_PURPOSE_LAST_UPDATE	TRIGGER	3	ON P_PURPOSE REFERENCING NEW AS New OLD AS Old

P_PURPOSE_LAST_UPDATE	TRIGGER	4	FOR EACH ROW

P_PURPOSE_LAST_UPDATE	TRIGGER	5	DECLARE

P_PURPOSE_LAST_UPDATE	TRIGGER	6	BEGIN

P_PURPOSE_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

P_PURPOSE_LAST_UPDATE	TRIGGER	8	END P_PURPOSE_last_update; 

P_PURPOSE_LAST_UPDATE	TRIGGER	9	

P_PURPOSE_LAST_UPDATE	TRIGGER	10	

P_PURPOSE_LAST_UPDATE	TRIGGER	11	

P_PURPOSE_LAST_UPDATE	TRIGGER	12	

P_PURPOSE_DEL	TRIGGER	1	TRIGGER "PERSIK"."P_PURPOSE_DEL" 

P_PURPOSE_DEL	TRIGGER	2	BEFORE DELETE

P_PURPOSE_DEL	TRIGGER	3	ON P_PURPOSE 

P_PURPOSE_DEL	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

P_PURPOSE_DEL	TRIGGER	5	FOR EACH ROW

P_PURPOSE_DEL	TRIGGER	6	/* Formatted on 2008/10/30 09:50 (Formatter Plus v4.8.8) */

P_PURPOSE_DEL	TRIGGER	7	DECLARE

P_PURPOSE_DEL	TRIGGER	8	BEGIN

P_PURPOSE_DEL	TRIGGER	9	   DELETE FROM p_dev_movement

P_PURPOSE_DEL	TRIGGER	10	         WHERE purpose_id = :OLD.purpose_id;

P_PURPOSE_DEL	TRIGGER	11	END p_purpose_del; 

P_PURPOSE_DEL	TRIGGER	12	

P_PURPOSE_DEL	TRIGGER	13	

P_PURPOSE_DEL	TRIGGER	14	

P_PURPOSE_DEL	TRIGGER	15	

P_PROB_INST_NEW	TRIGGER	1	TRIGGER P_PROB_INST_NEW

P_PROB_INST_NEW	TRIGGER	2	   AFTER INSERT

P_PROB_INST_NEW	TRIGGER	3	   ON P_PROB_INST

P_PROB_INST_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PROB_INST_NEW	TRIGGER	5	   FOR EACH ROW

P_PROB_INST_NEW	TRIGGER	6	DECLARE

P_PROB_INST_NEW	TRIGGER	7	   last_purpose_id   NUMBER;

P_PROB_INST_NEW	TRIGGER	8	   tn                NUMBER;

P_PROB_INST_NEW	TRIGGER	9	   manufak           NUMBER;

P_PROB_INST_NEW	TRIGGER	10	   from_tn           NUMBER;

P_PROB_INST_NEW	TRIGGER	11	   c                 NUMBER;

P_PROB_INST_NEW	TRIGGER	12	   PRAGMA AUTONOMOUS_TRANSACTION;

P_PROB_INST_NEW	TRIGGER	13	BEGIN

P_PROB_INST_NEW	TRIGGER	14	   SELECT :NEW.prob_tn, :NEW.prob_manufak

P_PROB_INST_NEW	TRIGGER	15	     INTO tn, manufak

P_PROB_INST_NEW	TRIGGER	16	     FROM DUAL;

P_PROB_INST_NEW	TRIGGER	17	

P_PROB_INST_NEW	TRIGGER	18	   SELECT COUNT (*)

P_PROB_INST_NEW	TRIGGER	19	     INTO c

P_PROB_INST_NEW	TRIGGER	20	     FROM p_plan p

P_PROB_INST_NEW	TRIGGER	21	    WHERE p.tn = :NEW.prob_tn;

P_PROB_INST_NEW	TRIGGER	22	

P_PROB_INST_NEW	TRIGGER	23	   IF c = 0

P_PROB_INST_NEW	TRIGGER	24	   THEN

P_PROB_INST_NEW	TRIGGER	25	      INSERT INTO p_plan (tn)

P_PROB_INST_NEW	TRIGGER	26	           VALUES (tn);

P_PROB_INST_NEW	TRIGGER	27	

P_PROB_INST_NEW	TRIGGER	28	      COMMIT;

P_PROB_INST_NEW	TRIGGER	29	

P_PROB_INST_NEW	TRIGGER	30	      SELECT CASE WHEN tn > 1000000000 THEN 2955913530 ELSE 36 END CASE

P_PROB_INST_NEW	TRIGGER	31	        INTO from_tn

P_PROB_INST_NEW	TRIGGER	32	        FROM DUAL;

P_PROB_INST_NEW	TRIGGER	33	

P_PROB_INST_NEW	TRIGGER	34	      FOR i IN (  SELECT from_tn tn,

P_PROB_INST_NEW	TRIGGER	35	                         43138 manufak,

P_PROB_INST_NEW	TRIGGER	36	                         purpose,

P_PROB_INST_NEW	TRIGGER	37	                         target,

P_PROB_INST_NEW	TRIGGER	38	                         purpose_id

P_PROB_INST_NEW	TRIGGER	39	                    FROM p_purpose

P_PROB_INST_NEW	TRIGGER	40	                   WHERE tn = from_tn AND manufak = 43138

P_PROB_INST_NEW	TRIGGER	41	                ORDER BY purpose_id)

P_PROB_INST_NEW	TRIGGER	42	      LOOP

P_PROB_INST_NEW	TRIGGER	43	         INSERT INTO p_purpose (tn, purpose, target)

P_PROB_INST_NEW	TRIGGER	44	              VALUES (tn, i.purpose, i.target);

P_PROB_INST_NEW	TRIGGER	45	

P_PROB_INST_NEW	TRIGGER	46	         COMMIT;

P_PROB_INST_NEW	TRIGGER	47	

P_PROB_INST_NEW	TRIGGER	48	         SELECT NVL (MAX (purpose_id), 0) INTO last_purpose_id FROM p_purpose;

P_PROB_INST_NEW	TRIGGER	49	

P_PROB_INST_NEW	TRIGGER	50	         FOR j IN (  SELECT MOVEMENT, support, period

P_PROB_INST_NEW	TRIGGER	51	                       FROM p_dev_movement

P_PROB_INST_NEW	TRIGGER	52	                      WHERE purpose_id = i.purpose_id

P_PROB_INST_NEW	TRIGGER	53	                   ORDER BY movement_id)

P_PROB_INST_NEW	TRIGGER	54	         LOOP

P_PROB_INST_NEW	TRIGGER	55	            INSERT INTO p_dev_movement (purpose_id,

P_PROB_INST_NEW	TRIGGER	56	                                        MOVEMENT,

P_PROB_INST_NEW	TRIGGER	57	                                        support,

P_PROB_INST_NEW	TRIGGER	58	                                        period)

P_PROB_INST_NEW	TRIGGER	59	                 VALUES (last_purpose_id,

P_PROB_INST_NEW	TRIGGER	60	                         j.MOVEMENT,

P_PROB_INST_NEW	TRIGGER	61	                         j.support,

P_PROB_INST_NEW	TRIGGER	62	                         j.period);

P_PROB_INST_NEW	TRIGGER	63	

P_PROB_INST_NEW	TRIGGER	64	            COMMIT;

P_PROB_INST_NEW	TRIGGER	65	         END LOOP;

P_PROB_INST_NEW	TRIGGER	66	      END LOOP;

P_PROB_INST_NEW	TRIGGER	67	   END IF;

P_PROB_INST_NEW	TRIGGER	68	END p_prob_inst_new;
P_PROB_INST_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."P_PROB_INST_LAST_UPDATE" 

P_PROB_INST_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

P_PROB_INST_LAST_UPDATE	TRIGGER	3	   ON PERSIK.P_PROB_INST

P_PROB_INST_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PROB_INST_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

P_PROB_INST_LAST_UPDATE	TRIGGER	6	DECLARE

P_PROB_INST_LAST_UPDATE	TRIGGER	7	BEGIN

P_PROB_INST_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

P_PROB_INST_LAST_UPDATE	TRIGGER	9	   :new.chief_manufak := 43138;

P_PROB_INST_LAST_UPDATE	TRIGGER	10	   :new.dir_manufak := 43138;

P_PROB_INST_LAST_UPDATE	TRIGGER	11	   :new.prob_manufak := 43138;

P_PROB_INST_LAST_UPDATE	TRIGGER	12	   :new.inst_manufak := 43138;

P_PROB_INST_LAST_UPDATE	TRIGGER	13	END P_PROB_INST_last_update;

P_PROB_INST_LAST_UPDATE	TRIGGER	14	

P_PROB_INST_LAST_UPDATE	TRIGGER	15	

P_PROB_INST_LAST_UPDATE	TRIGGER	16	

P_PROB_INST_DEL	TRIGGER	1	TRIGGER P_PROB_INST_DEL 

P_PROB_INST_DEL	TRIGGER	2	/* Formatted on 2008/10/30 09:48 (Formatter Plus v4.8.8) */

P_PROB_INST_DEL	TRIGGER	3	BEFORE DELETE

P_PROB_INST_DEL	TRIGGER	4	ON P_PROB_INST 

P_PROB_INST_DEL	TRIGGER	5	REFERENCING NEW AS NEW OLD AS OLD

P_PROB_INST_DEL	TRIGGER	6	FOR EACH ROW

P_PROB_INST_DEL	TRIGGER	7	DECLARE

P_PROB_INST_DEL	TRIGGER	8	BEGIN

P_PROB_INST_DEL	TRIGGER	9	   DELETE FROM p_plan

P_PROB_INST_DEL	TRIGGER	10	         WHERE tn = :OLD.prob_tn;

P_PROB_INST_DEL	TRIGGER	11	END p_prob_inst_del;
P_PROB_INST_CREATED	TRIGGER	1	TRIGGER "PERSIK"."P_PROB_INST_CREATED" 

P_PROB_INST_CREATED	TRIGGER	2	   BEFORE INSERT

P_PROB_INST_CREATED	TRIGGER	3	   ON P_PROB_INST    REFERENCING NEW AS NEW OLD AS OLD

P_PROB_INST_CREATED	TRIGGER	4	   FOR EACH ROW

P_PROB_INST_CREATED	TRIGGER	5	DECLARE

P_PROB_INST_CREATED	TRIGGER	6	BEGIN

P_PROB_INST_CREATED	TRIGGER	7	   :NEW.created := SYSDATE;

P_PROB_INST_CREATED	TRIGGER	8	END p_prob_inst_created; 

P_PROB_INST_CREATED	TRIGGER	9	

P_PROB_INST_CREATED	TRIGGER	10	

P_PROB_INST_CREATED	TRIGGER	11	

P_PROB_INST_CREATED	TRIGGER	12	

P_PLAN_UPD_ok_teacher	TRIGGER	1	TRIGGER "PERSIK"."P_PLAN_UPD_ok_teacher" 

P_PLAN_UPD_ok_teacher	TRIGGER	2	   BEFORE UPDATE OF ok_teacher

P_PLAN_UPD_ok_teacher	TRIGGER	3	   ON PERSIK.P_PLAN

P_PLAN_UPD_ok_teacher	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_UPD_ok_teacher	TRIGGER	5	   FOR EACH ROW

P_PLAN_UPD_ok_teacher	TRIGGER	6	BEGIN

P_PLAN_UPD_ok_teacher	TRIGGER	7	   IF :NEW.ok_teacher = 1

P_PLAN_UPD_ok_teacher	TRIGGER	8	   THEN

P_PLAN_UPD_ok_teacher	TRIGGER	9	      :NEW.stamp_teacher := SYSDATE;

P_PLAN_UPD_ok_teacher	TRIGGER	10	   ELSE

P_PLAN_UPD_ok_teacher	TRIGGER	11	      :NEW.stamp_teacher := NULL;

P_PLAN_UPD_ok_teacher	TRIGGER	12	   END IF;

P_PLAN_UPD_ok_teacher	TRIGGER	13	END;

P_PLAN_UPD_ok_teacher	TRIGGER	14	

P_PLAN_UPD_ok_teacher	TRIGGER	15	

P_PLAN_UPD_ok_teacher	TRIGGER	16	

P_PLAN_UPD_ok_employee	TRIGGER	1	TRIGGER "PERSIK"."P_PLAN_UPD_ok_employee" 

P_PLAN_UPD_ok_employee	TRIGGER	2	   BEFORE UPDATE OF ok_employee

P_PLAN_UPD_ok_employee	TRIGGER	3	   ON PERSIK.P_PLAN

P_PLAN_UPD_ok_employee	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_UPD_ok_employee	TRIGGER	5	   FOR EACH ROW

P_PLAN_UPD_ok_employee	TRIGGER	6	BEGIN

P_PLAN_UPD_ok_employee	TRIGGER	7	   IF :NEW.ok_employee = 1

P_PLAN_UPD_ok_employee	TRIGGER	8	   THEN

P_PLAN_UPD_ok_employee	TRIGGER	9	      :NEW.stamp_employee := SYSDATE;

P_PLAN_UPD_ok_employee	TRIGGER	10	   ELSE

P_PLAN_UPD_ok_employee	TRIGGER	11	      :NEW.stamp_employee := NULL;

P_PLAN_UPD_ok_employee	TRIGGER	12	   END IF;

P_PLAN_UPD_ok_employee	TRIGGER	13	END;

P_PLAN_UPD_ok_employee	TRIGGER	14	

P_PLAN_UPD_ok_employee	TRIGGER	15	

P_PLAN_UPD_ok_employee	TRIGGER	16	

P_PLAN_UPD_ok_chief	TRIGGER	1	TRIGGER "PERSIK"."P_PLAN_UPD_ok_chief" 

P_PLAN_UPD_ok_chief	TRIGGER	2	   BEFORE UPDATE OF ok_chief

P_PLAN_UPD_ok_chief	TRIGGER	3	   ON PERSIK.P_PLAN

P_PLAN_UPD_ok_chief	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_UPD_ok_chief	TRIGGER	5	   FOR EACH ROW

P_PLAN_UPD_ok_chief	TRIGGER	6	BEGIN

P_PLAN_UPD_ok_chief	TRIGGER	7	   IF :NEW.ok_chief = 1

P_PLAN_UPD_ok_chief	TRIGGER	8	   THEN

P_PLAN_UPD_ok_chief	TRIGGER	9	      :NEW.stamp_chief := SYSDATE;

P_PLAN_UPD_ok_chief	TRIGGER	10	   ELSE

P_PLAN_UPD_ok_chief	TRIGGER	11	      :NEW.stamp_chief := NULL;

P_PLAN_UPD_ok_chief	TRIGGER	12	   END IF;

P_PLAN_UPD_ok_chief	TRIGGER	13	END;

P_PLAN_UPD_ok_chief	TRIGGER	14	

P_PLAN_UPD_ok_chief	TRIGGER	15	

P_PLAN_UPD_ok_chief	TRIGGER	16	

P_PLAN_UPD_STATUS	TRIGGER	1	TRIGGER "PERSIK"."P_PLAN_UPD_STATUS" 

P_PLAN_UPD_STATUS	TRIGGER	2	   BEFORE UPDATE OF STATUS

P_PLAN_UPD_STATUS	TRIGGER	3	   ON PERSIK.P_PLAN    REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_UPD_STATUS	TRIGGER	4	   FOR EACH ROW

P_PLAN_UPD_STATUS	TRIGGER	5	BEGIN

P_PLAN_UPD_STATUS	TRIGGER	6	   IF NVL (:OLD.status, -1) <> :NEW.status

P_PLAN_UPD_STATUS	TRIGGER	7	   THEN

P_PLAN_UPD_STATUS	TRIGGER	8	      :NEW.status_date := SYSDATE;

P_PLAN_UPD_STATUS	TRIGGER	9	   END IF;

P_PLAN_UPD_STATUS	TRIGGER	10	END p_plan_upd_STATUS;

P_PLAN_UPD_STATUS	TRIGGER	11	

P_PLAN_UPD_STATUS	TRIGGER	12	

P_PLAN_UPD_STATUS	TRIGGER	13	

P_PLAN_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."P_PLAN_LAST_UPDATE" 

P_PLAN_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

P_PLAN_LAST_UPDATE	TRIGGER	3	ON P_PLAN 

P_PLAN_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

P_PLAN_LAST_UPDATE	TRIGGER	6	DECLARE

P_PLAN_LAST_UPDATE	TRIGGER	7	BEGIN

P_PLAN_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

P_PLAN_LAST_UPDATE	TRIGGER	9	END P_PLAN_last_update; 

P_PLAN_LAST_UPDATE	TRIGGER	10	

P_PLAN_LAST_UPDATE	TRIGGER	11	

P_PLAN_LAST_UPDATE	TRIGGER	12	

P_PLAN_LAST_UPDATE	TRIGGER	13	

P_PLAN_DEL	TRIGGER	1	TRIGGER P_PLAN_DEL

P_PLAN_DEL	TRIGGER	2	   BEFORE DELETE

P_PLAN_DEL	TRIGGER	3	   ON P_PLAN

P_PLAN_DEL	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_DEL	TRIGGER	5	   FOR EACH ROW

P_PLAN_DEL	TRIGGER	6	DECLARE

P_PLAN_DEL	TRIGGER	7	BEGIN

P_PLAN_DEL	TRIGGER	8	   DELETE FROM p_purpose

P_PLAN_DEL	TRIGGER	9	         WHERE tn = :OLD.tn;

P_PLAN_DEL	TRIGGER	10	END p_plan_del;
P_PLAN_BEFORE_UPD	TRIGGER	1	TRIGGER PERSIK.P_PLAN_BEFORE_UPD

P_PLAN_BEFORE_UPD	TRIGGER	2	   BEFORE UPDATE OF ok_employee, ok_teacher, ok_chief

P_PLAN_BEFORE_UPD	TRIGGER	3	   ON PERSIK.P_PLAN

P_PLAN_BEFORE_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_BEFORE_UPD	TRIGGER	5	   FOR EACH ROW

P_PLAN_BEFORE_UPD	TRIGGER	6	DECLARE

P_PLAN_BEFORE_UPD	TRIGGER	7	   v_inst_tn    INTEGER;

P_PLAN_BEFORE_UPD	TRIGGER	8	   v_chief_tn   INTEGER;

P_PLAN_BEFORE_UPD	TRIGGER	9	   v_dir_tn     INTEGER;

P_PLAN_BEFORE_UPD	TRIGGER	10	BEGIN

P_PLAN_BEFORE_UPD	TRIGGER	11	   SELECT inst_tn, chief_tn, dir_tn

P_PLAN_BEFORE_UPD	TRIGGER	12	     INTO v_inst_tn, v_chief_tn, v_dir_tn

P_PLAN_BEFORE_UPD	TRIGGER	13	     FROM p_prob_inst

P_PLAN_BEFORE_UPD	TRIGGER	14	    WHERE prob_tn = :new.tn;

P_PLAN_BEFORE_UPD	TRIGGER	15	

P_PLAN_BEFORE_UPD	TRIGGER	16	   IF     (v_inst_tn IS NULL OR :NEW.ok_employee = 1)

P_PLAN_BEFORE_UPD	TRIGGER	17	      AND (v_chief_tn IS NULL OR :NEW.ok_teacher = 1)

P_PLAN_BEFORE_UPD	TRIGGER	18	      AND (v_dir_tn IS NULL OR :NEW.ok_chief = 1)

P_PLAN_BEFORE_UPD	TRIGGER	19	   THEN

P_PLAN_BEFORE_UPD	TRIGGER	20	      :new.test := 1;

P_PLAN_BEFORE_UPD	TRIGGER	21	      :new.test_lu := SYSDATE;

P_PLAN_BEFORE_UPD	TRIGGER	22	   END IF;

P_PLAN_BEFORE_UPD	TRIGGER	23	END;
P_PLAN_AFTER_UPD	TRIGGER	1	TRIGGER PERSIK.P_PLAN_AFTER_UPD

P_PLAN_AFTER_UPD	TRIGGER	2	   AFTER UPDATE OF ok_employee, ok_teacher, ok_chief

P_PLAN_AFTER_UPD	TRIGGER	3	   ON PERSIK.P_PLAN

P_PLAN_AFTER_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

P_PLAN_AFTER_UPD	TRIGGER	5	   FOR EACH ROW

P_PLAN_AFTER_UPD	TRIGGER	6	DECLARE

P_PLAN_AFTER_UPD	TRIGGER	7	   v_subj           VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	8	   v_fio            VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	9	   v_msg            VARCHAR (4000);

P_PLAN_AFTER_UPD	TRIGGER	10	   v_inst_tn        INTEGER;

P_PLAN_AFTER_UPD	TRIGGER	11	   v_chief_tn       INTEGER;

P_PLAN_AFTER_UPD	TRIGGER	12	   v_dir_tn         INTEGER;

P_PLAN_AFTER_UPD	TRIGGER	13	   v_prob_fio       VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	14	   v_inst_fio       VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	15	   v_chief_fio      VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	16	   v_dir_fio        VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	17	   v_prob_e_mail    VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	18	   v_inst_e_mail    VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	19	   v_chief_e_mail   VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	20	   v_dir_e_mail     VARCHAR (1000);

P_PLAN_AFTER_UPD	TRIGGER	21	   data1            VARCHAR (255);

P_PLAN_AFTER_UPD	TRIGGER	22	BEGIN

P_PLAN_AFTER_UPD	TRIGGER	23	   SELECT inst_tn, chief_tn, dir_tn

P_PLAN_AFTER_UPD	TRIGGER	24	     INTO v_inst_tn, v_chief_tn, v_dir_tn

P_PLAN_AFTER_UPD	TRIGGER	25	     FROM p_prob_inst

P_PLAN_AFTER_UPD	TRIGGER	26	    WHERE prob_tn = :new.tn;

P_PLAN_AFTER_UPD	TRIGGER	27	

P_PLAN_AFTER_UPD	TRIGGER	28	   SELECT fio, e_mail

P_PLAN_AFTER_UPD	TRIGGER	29	     INTO v_prob_fio, v_prob_e_mail

P_PLAN_AFTER_UPD	TRIGGER	30	     FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	31	    WHERE tn = :new.tn;

P_PLAN_AFTER_UPD	TRIGGER	32	

P_PLAN_AFTER_UPD	TRIGGER	33	   IF     (v_inst_tn IS NULL OR :NEW.ok_employee = 1)

P_PLAN_AFTER_UPD	TRIGGER	34	      AND (v_chief_tn IS NULL OR :NEW.ok_teacher = 1)

P_PLAN_AFTER_UPD	TRIGGER	35	      AND (v_dir_tn IS NULL OR :NEW.ok_chief = 1)

P_PLAN_AFTER_UPD	TRIGGER	36	   THEN

P_PLAN_AFTER_UPD	TRIGGER	37	      SELECT fio

P_PLAN_AFTER_UPD	TRIGGER	38	        INTO v_fio

P_PLAN_AFTER_UPD	TRIGGER	39	        FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	40	       WHERE tn = :new.tn;

P_PLAN_AFTER_UPD	TRIGGER	41	

P_PLAN_AFTER_UPD	TRIGGER	42	      SELECT TO_CHAR (

P_PLAN_AFTER_UPD	TRIGGER	43	                DECODE (

P_PLAN_AFTER_UPD	TRIGGER	44	                   SIGN (

P_PLAN_AFTER_UPD	TRIGGER	45	                        DECODE (

P_PLAN_AFTER_UPD	TRIGGER	46	                           SIGN (:new.stamp_employee - :new.stamp_chief),

P_PLAN_AFTER_UPD	TRIGGER	47	                           1, :new.stamp_employee,

P_PLAN_AFTER_UPD	TRIGGER	48	                           :new.stamp_chief)

P_PLAN_AFTER_UPD	TRIGGER	49	                      - :new.stamp_teacher),

P_PLAN_AFTER_UPD	TRIGGER	50	                   1, DECODE (SIGN (:new.stamp_employee - :new.stamp_chief),

P_PLAN_AFTER_UPD	TRIGGER	51	                              1, :new.stamp_employee,

P_PLAN_AFTER_UPD	TRIGGER	52	                              :new.stamp_chief),

P_PLAN_AFTER_UPD	TRIGGER	53	                   :new.stamp_teacher),

P_PLAN_AFTER_UPD	TRIGGER	54	                'dd.mm.yyyy hh24:mi:ss')

P_PLAN_AFTER_UPD	TRIGGER	55	        INTO data1

P_PLAN_AFTER_UPD	TRIGGER	56	        FROM DUAL;

P_PLAN_AFTER_UPD	TRIGGER	57	

P_PLAN_AFTER_UPD	TRIGGER	58	      v_subj :=

P_PLAN_AFTER_UPD	TRIGGER	59	            'Закрытие адаптационной программы и испытательного срока сотрудника '

P_PLAN_AFTER_UPD	TRIGGER	60	         || v_fio;

P_PLAN_AFTER_UPD	TRIGGER	61	      v_msg :=

P_PLAN_AFTER_UPD	TRIGGER	62	            'Здравствуйте, '

P_PLAN_AFTER_UPD	TRIGGER	63	         || v_fio

P_PLAN_AFTER_UPD	TRIGGER	64	         || '.<br>Ваша адаптационная программа на корпоративном портале закрыта.<br>На основе выводов руководителей и бизнес-тренера Вам необходимо сформировать и заполнить "План профессионального развития"';

P_PLAN_AFTER_UPD	TRIGGER	65	      pr_sendmail (v_prob_e_mail, v_subj, v_msg);

P_PLAN_AFTER_UPD	TRIGGER	66	      v_msg :=

P_PLAN_AFTER_UPD	TRIGGER	67	            'Здравствуйте. По сотруднику '

P_PLAN_AFTER_UPD	TRIGGER	68	         || v_fio

P_PLAN_AFTER_UPD	TRIGGER	69	         || ' проставлено окончание адаптационной программы и испытательного срока.<br>Срок окончания адаптационной программы и испытательного срока '

P_PLAN_AFTER_UPD	TRIGGER	70	         || data1

P_PLAN_AFTER_UPD	TRIGGER	71	         || '.<br><br>Выводы осуществлявших поддержку следующие:<br><br>';

P_PLAN_AFTER_UPD	TRIGGER	72	

P_PLAN_AFTER_UPD	TRIGGER	73	      IF v_inst_tn IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	74	      THEN

P_PLAN_AFTER_UPD	TRIGGER	75	         SELECT fio, e_mail

P_PLAN_AFTER_UPD	TRIGGER	76	           INTO v_inst_fio, v_inst_e_mail

P_PLAN_AFTER_UPD	TRIGGER	77	           FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	78	          WHERE tn = v_inst_tn;

P_PLAN_AFTER_UPD	TRIGGER	79	

P_PLAN_AFTER_UPD	TRIGGER	80	         v_msg :=

P_PLAN_AFTER_UPD	TRIGGER	81	               v_msg

P_PLAN_AFTER_UPD	TRIGGER	82	            || 'Непосредственный руководитель '

P_PLAN_AFTER_UPD	TRIGGER	83	            || '<b>'

P_PLAN_AFTER_UPD	TRIGGER	84	            || v_inst_fio

P_PLAN_AFTER_UPD	TRIGGER	85	            || '</b>'

P_PLAN_AFTER_UPD	TRIGGER	86	            || ', дата завершения '

P_PLAN_AFTER_UPD	TRIGGER	87	            || TO_CHAR (:new.stamp_employee, 'dd/mm/yyyy hh24:mi:ss')

P_PLAN_AFTER_UPD	TRIGGER	88	            || ':'

P_PLAN_AFTER_UPD	TRIGGER	89	            || :new.employee_summary

P_PLAN_AFTER_UPD	TRIGGER	90	            || '<br><br>';

P_PLAN_AFTER_UPD	TRIGGER	91	      END IF;

P_PLAN_AFTER_UPD	TRIGGER	92	

P_PLAN_AFTER_UPD	TRIGGER	93	      IF v_chief_tn IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	94	      THEN

P_PLAN_AFTER_UPD	TRIGGER	95	         SELECT fio, e_mail

P_PLAN_AFTER_UPD	TRIGGER	96	           INTO v_chief_fio, v_chief_e_mail

P_PLAN_AFTER_UPD	TRIGGER	97	           FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	98	          WHERE tn = v_chief_tn;

P_PLAN_AFTER_UPD	TRIGGER	99	

P_PLAN_AFTER_UPD	TRIGGER	100	         v_msg :=

P_PLAN_AFTER_UPD	TRIGGER	101	               v_msg

P_PLAN_AFTER_UPD	TRIGGER	102	            || 'Бизнес-тренер '

P_PLAN_AFTER_UPD	TRIGGER	103	            || '<b>'

P_PLAN_AFTER_UPD	TRIGGER	104	            || v_chief_fio

P_PLAN_AFTER_UPD	TRIGGER	105	            || '</b>'

P_PLAN_AFTER_UPD	TRIGGER	106	            || ', дата завершения '

P_PLAN_AFTER_UPD	TRIGGER	107	            || TO_CHAR (:new.stamp_teacher, 'dd/mm/yyyy hh24:mi:ss')

P_PLAN_AFTER_UPD	TRIGGER	108	            || ':'

P_PLAN_AFTER_UPD	TRIGGER	109	            || :new.teacher_comment

P_PLAN_AFTER_UPD	TRIGGER	110	            || '<br><br>';

P_PLAN_AFTER_UPD	TRIGGER	111	      END IF;

P_PLAN_AFTER_UPD	TRIGGER	112	

P_PLAN_AFTER_UPD	TRIGGER	113	      IF v_dir_tn IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	114	      THEN

P_PLAN_AFTER_UPD	TRIGGER	115	         SELECT fio, e_mail

P_PLAN_AFTER_UPD	TRIGGER	116	           INTO v_dir_fio, v_dir_e_mail

P_PLAN_AFTER_UPD	TRIGGER	117	           FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	118	          WHERE tn = v_dir_tn;

P_PLAN_AFTER_UPD	TRIGGER	119	

P_PLAN_AFTER_UPD	TRIGGER	120	         v_msg :=

P_PLAN_AFTER_UPD	TRIGGER	121	               v_msg

P_PLAN_AFTER_UPD	TRIGGER	122	            || 'Вышестоящий руководитель '

P_PLAN_AFTER_UPD	TRIGGER	123	            || '<b>'

P_PLAN_AFTER_UPD	TRIGGER	124	            || v_dir_fio

P_PLAN_AFTER_UPD	TRIGGER	125	            || '</b>'

P_PLAN_AFTER_UPD	TRIGGER	126	            || ', дата завершения '

P_PLAN_AFTER_UPD	TRIGGER	127	            || TO_CHAR (:new.stamp_chief, 'dd/mm/yyyy hh24:mi:ss')

P_PLAN_AFTER_UPD	TRIGGER	128	            || ':'

P_PLAN_AFTER_UPD	TRIGGER	129	            || :new.chief_comment

P_PLAN_AFTER_UPD	TRIGGER	130	            || '<br><br>';

P_PLAN_AFTER_UPD	TRIGGER	131	      END IF;

P_PLAN_AFTER_UPD	TRIGGER	132	

P_PLAN_AFTER_UPD	TRIGGER	133	      v_msg :=

P_PLAN_AFTER_UPD	TRIGGER	134	            v_msg

P_PLAN_AFTER_UPD	TRIGGER	135	         || 'Просьба учесть данную информацию в программе "Кадры" и при выплатах сотруднику.';

P_PLAN_AFTER_UPD	TRIGGER	136	

P_PLAN_AFTER_UPD	TRIGGER	137	      IF v_inst_e_mail IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	138	      THEN

P_PLAN_AFTER_UPD	TRIGGER	139	         pr_sendmail (v_inst_e_mail, v_subj, v_msg);

P_PLAN_AFTER_UPD	TRIGGER	140	      END IF;

P_PLAN_AFTER_UPD	TRIGGER	141	

P_PLAN_AFTER_UPD	TRIGGER	142	      IF v_chief_e_mail IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	143	      THEN

P_PLAN_AFTER_UPD	TRIGGER	144	         pr_sendmail (v_chief_e_mail, v_subj, v_msg);

P_PLAN_AFTER_UPD	TRIGGER	145	      END IF;

P_PLAN_AFTER_UPD	TRIGGER	146	

P_PLAN_AFTER_UPD	TRIGGER	147	      IF v_dir_e_mail IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	148	      THEN

P_PLAN_AFTER_UPD	TRIGGER	149	         pr_sendmail (v_dir_e_mail, v_subj, v_msg);

P_PLAN_AFTER_UPD	TRIGGER	150	      END IF;

P_PLAN_AFTER_UPD	TRIGGER	151	

P_PLAN_AFTER_UPD	TRIGGER	152	      FOR a

P_PLAN_AFTER_UPD	TRIGGER	153	         IN (SELECT val_string

P_PLAN_AFTER_UPD	TRIGGER	154	               FROM parameters

P_PLAN_AFTER_UPD	TRIGGER	155	              WHERE     dpt_id = (SELECT dpt_id

P_PLAN_AFTER_UPD	TRIGGER	156	                                    FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	157	                                   WHERE tn = :new.tn)

P_PLAN_AFTER_UPD	TRIGGER	158	                    AND param_name IN

P_PLAN_AFTER_UPD	TRIGGER	159	                           ('pers1', 'pers2', 'accept1', 'accept2')

P_PLAN_AFTER_UPD	TRIGGER	160	                    AND val_string IS NOT NULL

P_PLAN_AFTER_UPD	TRIGGER	161	             UNION

P_PLAN_AFTER_UPD	TRIGGER	162	             SELECT e_mail

P_PLAN_AFTER_UPD	TRIGGER	163	               FROM user_list

P_PLAN_AFTER_UPD	TRIGGER	164	              WHERE pos_id = 63)

P_PLAN_AFTER_UPD	TRIGGER	165	      LOOP

P_PLAN_AFTER_UPD	TRIGGER	166	         pr_sendmail (a.val_string, v_subj, v_msg);

P_PLAN_AFTER_UPD	TRIGGER	167	      END LOOP;

P_PLAN_AFTER_UPD	TRIGGER	168	   END IF;

P_PLAN_AFTER_UPD	TRIGGER	169	END;
P_DEV_MOVEMENT_NEW	TRIGGER	1	TRIGGER "PERSIK"."P_DEV_MOVEMENT_NEW" 

P_DEV_MOVEMENT_NEW	TRIGGER	2	BEFORE INSERT

P_DEV_MOVEMENT_NEW	TRIGGER	3	ON P_DEV_MOVEMENT 

P_DEV_MOVEMENT_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

P_DEV_MOVEMENT_NEW	TRIGGER	5	FOR EACH ROW

P_DEV_MOVEMENT_NEW	TRIGGER	6	/* Formatted on 2008/10/30 09:49 (Formatter Plus v4.8.8) */

P_DEV_MOVEMENT_NEW	TRIGGER	7	DECLARE

P_DEV_MOVEMENT_NEW	TRIGGER	8	BEGIN

P_DEV_MOVEMENT_NEW	TRIGGER	9	   SELECT NVL (MAX (movement_id), 0) + 1 newid

P_DEV_MOVEMENT_NEW	TRIGGER	10	     INTO :NEW.movement_id

P_DEV_MOVEMENT_NEW	TRIGGER	11	     FROM p_dev_movement;

P_DEV_MOVEMENT_NEW	TRIGGER	12	END p_dev_movement_new; 

P_DEV_MOVEMENT_NEW	TRIGGER	13	

P_DEV_MOVEMENT_NEW	TRIGGER	14	

P_DEV_MOVEMENT_NEW	TRIGGER	15	

P_DEV_MOVEMENT_NEW	TRIGGER	16	

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."P_DEV_MOVEMENT_LAST_UPDATE" 

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	3	ON P_DEV_MOVEMENT 

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	6	DECLARE

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	7	BEGIN

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	9	END P_DEV_MOVEMENT_last_update; 

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	10	

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	11	

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	12	

P_DEV_MOVEMENT_LAST_UPDATE	TRIGGER	13	

PR_VACATION_SZ_OK	PROCEDURE	1	PROCEDURE        "PR_VACATION_SZ_OK" (p_sz_id IN INTEGER)

PR_VACATION_SZ_OK	PROCEDURE	2	AS

PR_VACATION_SZ_OK	PROCEDURE	3	   v_recipient             INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	4	   v_head                  VARCHAR2 (4000);

PR_VACATION_SZ_OK	PROCEDURE	5	   v_head_pers             VARCHAR2 (4000);

PR_VACATION_SZ_OK	PROCEDURE	6	   v_body                  VARCHAR2 (32767);

PR_VACATION_SZ_OK	PROCEDURE	7	   v_fio                   VARCHAR2 (1024);

PR_VACATION_SZ_OK	PROCEDURE	8	   v_from                  VARCHAR (255);

PR_VACATION_SZ_OK	PROCEDURE	9	   v_days                  INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	10	   v_id                    INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	11	   v_tn                    INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	12	   v_dpt_id                INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	13	   v_replacement           INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	14	   v_v_from                DATE;

PR_VACATION_SZ_OK	PROCEDURE	15	   v_v_to                  DATE;

PR_VACATION_SZ_OK	PROCEDURE	16	   v_replacement_mob       VARCHAR (255);

PR_VACATION_SZ_OK	PROCEDURE	17	   v_replacement_mail      VARCHAR (255);

PR_VACATION_SZ_OK	PROCEDURE	18	   v_replacement_h_eta     VARCHAR (32);

PR_VACATION_SZ_OK	PROCEDURE	19	   v_replacement_fio_eta   VARCHAR (255);

PR_VACATION_SZ_OK	PROCEDURE	20	   i                       INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	21	   too_many_lines          INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	22	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_VACATION_SZ_OK	PROCEDURE	23	   v_vac2pers              VARCHAR2 (32767);

PR_VACATION_SZ_OK	PROCEDURE	24	   v_manufak               INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	25	   v_tab_num               INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	26	   v_sz_dt                 DATE;

PR_VACATION_SZ_OK	PROCEDURE	27	   v_vac_cnt               INTEGER;

PR_VACATION_SZ_OK	PROCEDURE	28	

PR_VACATION_SZ_OK	PROCEDURE	29	

PR_VACATION_SZ_OK	PROCEDURE	30	   v_replacement_fio       VARCHAR (255);

PR_VACATION_SZ_OK	PROCEDURE	31	BEGIN

PR_VACATION_SZ_OK	PROCEDURE	32	   SELECT v.tn,

PR_VACATION_SZ_OK	PROCEDURE	33	          v.replacement,

PR_VACATION_SZ_OK	PROCEDURE	34	          v.v_from,

PR_VACATION_SZ_OK	PROCEDURE	35	          v.v_to,

PR_VACATION_SZ_OK	PROCEDURE	36	          v.replacement_mob,

PR_VACATION_SZ_OK	PROCEDURE	37	          v.replacement_mail,

PR_VACATION_SZ_OK	PROCEDURE	38	          v.replacement_h_eta,

PR_VACATION_SZ_OK	PROCEDURE	39	          v.replacement_fio_eta,

PR_VACATION_SZ_OK	PROCEDURE	40	          v.id,

PR_VACATION_SZ_OK	PROCEDURE	41	          v.v_to - v.v_from + 1,

PR_VACATION_SZ_OK	PROCEDURE	42	          DECODE (v.replacement, NULL, v.replacement_fio_eta, u1.fio)

PR_VACATION_SZ_OK	PROCEDURE	43	             replacement_fio

PR_VACATION_SZ_OK	PROCEDURE	44	     INTO v_tn,

PR_VACATION_SZ_OK	PROCEDURE	45	          v_replacement,

PR_VACATION_SZ_OK	PROCEDURE	46	          v_v_from,

PR_VACATION_SZ_OK	PROCEDURE	47	          v_v_to,

PR_VACATION_SZ_OK	PROCEDURE	48	          v_replacement_mob,

PR_VACATION_SZ_OK	PROCEDURE	49	          v_replacement_mail,

PR_VACATION_SZ_OK	PROCEDURE	50	          v_replacement_h_eta,

PR_VACATION_SZ_OK	PROCEDURE	51	          v_replacement_fio_eta,

PR_VACATION_SZ_OK	PROCEDURE	52	          v_id,

PR_VACATION_SZ_OK	PROCEDURE	53	          v_days,

PR_VACATION_SZ_OK	PROCEDURE	54	          v_replacement_fio

PR_VACATION_SZ_OK	PROCEDURE	55	     FROM vacation v, user_list u1

PR_VACATION_SZ_OK	PROCEDURE	56	    WHERE v.sz_id = p_sz_id AND u1.tn(+) = v.replacement;

PR_VACATION_SZ_OK	PROCEDURE	57	

PR_VACATION_SZ_OK	PROCEDURE	58	   SELECT fio, dpt_id, tab_num

PR_VACATION_SZ_OK	PROCEDURE	59	     INTO v_fio, v_dpt_id, v_tab_num

PR_VACATION_SZ_OK	PROCEDURE	60	     FROM user_list

PR_VACATION_SZ_OK	PROCEDURE	61	    WHERE tn = v_tn;

PR_VACATION_SZ_OK	PROCEDURE	62	

PR_VACATION_SZ_OK	PROCEDURE	63	   SELECT manufak

PR_VACATION_SZ_OK	PROCEDURE	64	     INTO v_manufak

PR_VACATION_SZ_OK	PROCEDURE	65	     FROM departments

PR_VACATION_SZ_OK	PROCEDURE	66	    WHERE dpt_id = v_dpt_id;

PR_VACATION_SZ_OK	PROCEDURE	67	

PR_VACATION_SZ_OK	PROCEDURE	68	   SELECT created

PR_VACATION_SZ_OK	PROCEDURE	69	     INTO v_sz_dt

PR_VACATION_SZ_OK	PROCEDURE	70	     FROM sz

PR_VACATION_SZ_OK	PROCEDURE	71	    WHERE id = p_sz_id;

PR_VACATION_SZ_OK	PROCEDURE	72	

PR_VACATION_SZ_OK	PROCEDURE	73	   BEGIN

PR_VACATION_SZ_OK	PROCEDURE	74	      v_vac2pers :=

PR_VACATION_SZ_OK	PROCEDURE	75	            'select count(*) from zlkot@PERS_'

PR_VACATION_SZ_OK	PROCEDURE	76	         || v_manufak

PR_VACATION_SZ_OK	PROCEDURE	77	         || ' where tn = '

PR_VACATION_SZ_OK	PROCEDURE	78	         || v_tab_num

PR_VACATION_SZ_OK	PROCEDURE	79	         || ' and datkof = '''

PR_VACATION_SZ_OK	PROCEDURE	80	         || TO_CHAR (v_v_from, 'yyyymmdd')

PR_VACATION_SZ_OK	PROCEDURE	81	         || '''';

PR_VACATION_SZ_OK	PROCEDURE	82	

PR_VACATION_SZ_OK	PROCEDURE	83	      EXECUTE IMMEDIATE v_vac2pers INTO v_vac_cnt;

PR_VACATION_SZ_OK	PROCEDURE	84	

PR_VACATION_SZ_OK	PROCEDURE	85	      COMMIT;

PR_VACATION_SZ_OK	PROCEDURE	86	

PR_VACATION_SZ_OK	PROCEDURE	87	      IF v_vac_cnt = 0

PR_VACATION_SZ_OK	PROCEDURE	88	      THEN

PR_VACATION_SZ_OK	PROCEDURE	89	         v_vac2pers :=

PR_VACATION_SZ_OK	PROCEDURE	90	               'INSERT INTO zlkot@PERS_'

PR_VACATION_SZ_OK	PROCEDURE	91	            || v_manufak

PR_VACATION_SZ_OK	PROCEDURE	92	            || ' (tn,datkof,datko,dninor,vo,ndd,datapr) VALUES ('

PR_VACATION_SZ_OK	PROCEDURE	93	            || v_tab_num

PR_VACATION_SZ_OK	PROCEDURE	94	            || ','''

PR_VACATION_SZ_OK	PROCEDURE	95	            || TO_CHAR (v_v_from, 'yyyymmdd')

PR_VACATION_SZ_OK	PROCEDURE	96	            || ''','''

PR_VACATION_SZ_OK	PROCEDURE	97	            || TO_CHAR (v_v_to, 'yyyymmdd')

PR_VACATION_SZ_OK	PROCEDURE	98	            || ''','

PR_VACATION_SZ_OK	PROCEDURE	99	            || v_days

PR_VACATION_SZ_OK	PROCEDURE	100	            || ',1,'

PR_VACATION_SZ_OK	PROCEDURE	101	            || p_sz_id

PR_VACATION_SZ_OK	PROCEDURE	102	            || ','''

PR_VACATION_SZ_OK	PROCEDURE	103	            || TO_CHAR (v_sz_dt, 'yyyymmdd')

PR_VACATION_SZ_OK	PROCEDURE	104	            || ''')';

PR_VACATION_SZ_OK	PROCEDURE	105	

PR_VACATION_SZ_OK	PROCEDURE	106	         EXECUTE IMMEDIATE v_vac2pers;

PR_VACATION_SZ_OK	PROCEDURE	107	

PR_VACATION_SZ_OK	PROCEDURE	108	         COMMIT;

PR_VACATION_SZ_OK	PROCEDURE	109	      END IF;

PR_VACATION_SZ_OK	PROCEDURE	110	   EXCEPTION

PR_VACATION_SZ_OK	PROCEDURE	111	      WHEN OTHERS

PR_VACATION_SZ_OK	PROCEDURE	112	      THEN

PR_VACATION_SZ_OK	PROCEDURE	113	         NULL;

PR_VACATION_SZ_OK	PROCEDURE	114	   END;

PR_VACATION_SZ_OK	PROCEDURE	115	

PR_VACATION_SZ_OK	PROCEDURE	116	   v_head :=

PR_VACATION_SZ_OK	PROCEDURE	117	         'Вы назначены исполняющим обязанности на период отпуска сотрудника - '

PR_VACATION_SZ_OK	PROCEDURE	118	      || v_fio;

PR_VACATION_SZ_OK	PROCEDURE	119	

PR_VACATION_SZ_OK	PROCEDURE	120	

PR_VACATION_SZ_OK	PROCEDURE	121	   v_head_pers :=

PR_VACATION_SZ_OK	PROCEDURE	122	      'Согласован отпуск сотрудника - ' || v_fio;

PR_VACATION_SZ_OK	PROCEDURE	123	

PR_VACATION_SZ_OK	PROCEDURE	124	

PR_VACATION_SZ_OK	PROCEDURE	125	   v_body :=

PR_VACATION_SZ_OK	PROCEDURE	126	         '<p>Период отпуска - с '

PR_VACATION_SZ_OK	PROCEDURE	127	      || TO_CHAR (v_v_from, 'dd.mm.yyyy')

PR_VACATION_SZ_OK	PROCEDURE	128	      || ' по '

PR_VACATION_SZ_OK	PROCEDURE	129	      || TO_CHAR (v_v_to, 'dd.mm.yyyy')

PR_VACATION_SZ_OK	PROCEDURE	130	      || '</p>'

PR_VACATION_SZ_OK	PROCEDURE	131	      || '<p>На период отпуска исполняющему обязанности - '

PR_VACATION_SZ_OK	PROCEDURE	132	      || v_replacement_fio

PR_VACATION_SZ_OK	PROCEDURE	133	      || ' - определены следующие задачи:<br>';

PR_VACATION_SZ_OK	PROCEDURE	134	

PR_VACATION_SZ_OK	PROCEDURE	135	   FOR a IN (  SELECT DISTINCT p.sort, t.part_id, p.name

PR_VACATION_SZ_OK	PROCEDURE	136	                 FROM vacation_tasks t, vacation_task_parts p

PR_VACATION_SZ_OK	PROCEDURE	137	                WHERE t.vac_id = v_id AND t.part_id = p.id

PR_VACATION_SZ_OK	PROCEDURE	138	             ORDER BY p.sort, p.name)

PR_VACATION_SZ_OK	PROCEDURE	139	   LOOP

PR_VACATION_SZ_OK	PROCEDURE	140	      v_body := v_body || '<b>' || a.name || '</b><br>';

PR_VACATION_SZ_OK	PROCEDURE	141	      i := 1;

PR_VACATION_SZ_OK	PROCEDURE	142	

PR_VACATION_SZ_OK	PROCEDURE	143	      FOR b

PR_VACATION_SZ_OK	PROCEDURE	144	         IN (  SELECT t.id,

PR_VACATION_SZ_OK	PROCEDURE	145	                      TO_CHAR (t.dt_end, 'dd.mm.yyyy') dt_end,

PR_VACATION_SZ_OK	PROCEDURE	146	                      task,

PR_VACATION_SZ_OK	PROCEDURE	147	                      result,

PR_VACATION_SZ_OK	PROCEDURE	148	                      t.part_id,

PR_VACATION_SZ_OK	PROCEDURE	149	                      p.name

PR_VACATION_SZ_OK	PROCEDURE	150	                 FROM vacation_tasks t, vacation_task_parts p

PR_VACATION_SZ_OK	PROCEDURE	151	                WHERE     t.vac_id = v_id

PR_VACATION_SZ_OK	PROCEDURE	152	                      AND t.part_id = p.id

PR_VACATION_SZ_OK	PROCEDURE	153	                      AND t.part_id = a.part_id

PR_VACATION_SZ_OK	PROCEDURE	154	             ORDER BY p.sort, t.id)

PR_VACATION_SZ_OK	PROCEDURE	155	      LOOP

PR_VACATION_SZ_OK	PROCEDURE	156	         IF NVL (LENGTH (v_body), 0) < 10000

PR_VACATION_SZ_OK	PROCEDURE	157	         THEN

PR_VACATION_SZ_OK	PROCEDURE	158	            v_body :=

PR_VACATION_SZ_OK	PROCEDURE	159	                  v_body

PR_VACATION_SZ_OK	PROCEDURE	160	               || i

PR_VACATION_SZ_OK	PROCEDURE	161	               || ' '

PR_VACATION_SZ_OK	PROCEDURE	162	               || b.task

PR_VACATION_SZ_OK	PROCEDURE	163	               || ' '

PR_VACATION_SZ_OK	PROCEDURE	164	               || b.result

PR_VACATION_SZ_OK	PROCEDURE	165	               || ' '

PR_VACATION_SZ_OK	PROCEDURE	166	               || b.dt_end

PR_VACATION_SZ_OK	PROCEDURE	167	               || ' '

PR_VACATION_SZ_OK	PROCEDURE	168	               || '<br>';

PR_VACATION_SZ_OK	PROCEDURE	169	            i := i + 1;

PR_VACATION_SZ_OK	PROCEDURE	170	            too_many_lines := 0;

PR_VACATION_SZ_OK	PROCEDURE	171	         ELSE

PR_VACATION_SZ_OK	PROCEDURE	172	            too_many_lines := 1;

PR_VACATION_SZ_OK	PROCEDURE	173	         END IF;

PR_VACATION_SZ_OK	PROCEDURE	174	      END LOOP;

PR_VACATION_SZ_OK	PROCEDURE	175	   END LOOP;

PR_VACATION_SZ_OK	PROCEDURE	176	

PR_VACATION_SZ_OK	PROCEDURE	177	   v_body := v_body || '</p>';

PR_VACATION_SZ_OK	PROCEDURE	178	

PR_VACATION_SZ_OK	PROCEDURE	179	

PR_VACATION_SZ_OK	PROCEDURE	180	   IF too_many_lines = 1

PR_VACATION_SZ_OK	PROCEDURE	181	   THEN

PR_VACATION_SZ_OK	PROCEDURE	182	      v_body :=

PR_VACATION_SZ_OK	PROCEDURE	183	            v_body

PR_VACATION_SZ_OK	PROCEDURE	184	         || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

PR_VACATION_SZ_OK	PROCEDURE	185	   END IF;

PR_VACATION_SZ_OK	PROCEDURE	186	

PR_VACATION_SZ_OK	PROCEDURE	187	   FOR a IN (SELECT val_string

PR_VACATION_SZ_OK	PROCEDURE	188	               FROM parameters

PR_VACATION_SZ_OK	PROCEDURE	189	              WHERE dpt_id = v_dpt_id AND param_name IN ('pers1', 'pers2'))

PR_VACATION_SZ_OK	PROCEDURE	190	   LOOP

PR_VACATION_SZ_OK	PROCEDURE	191	      PR_SENDMAIL (a.val_string, v_head_pers, v_body);

PR_VACATION_SZ_OK	PROCEDURE	192	   END LOOP;

PR_VACATION_SZ_OK	PROCEDURE	193	

PR_VACATION_SZ_OK	PROCEDURE	194	   v_body :=

PR_VACATION_SZ_OK	PROCEDURE	195	         v_body

PR_VACATION_SZ_OK	PROCEDURE	196	      || '<p>Отметку и комментарии о выставлении задач мы можете осуществлять<br>'

PR_VACATION_SZ_OK	PROCEDURE	197	      || 'через раздел "Команда / Отпуска / Отчет по задачам",<br>'

PR_VACATION_SZ_OK	PROCEDURE	198	      || 'через ссылку "Отпуск руководителя"<br>'

PR_VACATION_SZ_OK	PROCEDURE	199	      || 'или при переходе на <a href="https://ps.avk.ua/?action=vacation_report">ссылку</a></p>';

PR_VACATION_SZ_OK	PROCEDURE	200	

PR_VACATION_SZ_OK	PROCEDURE	201	   IF v_replacement_mail IS NOT NULL

PR_VACATION_SZ_OK	PROCEDURE	202	   THEN

PR_VACATION_SZ_OK	PROCEDURE	203	      PR_SENDMAIL (v_replacement_mail, v_head, v_body);

PR_VACATION_SZ_OK	PROCEDURE	204	   END IF;

PR_VACATION_SZ_OK	PROCEDURE	205	END;
PR_VACATION_SZ_CREATE	PROCEDURE	1	PROCEDURE        "PR_VACATION_SZ_CREATE" (

PR_VACATION_SZ_CREATE	PROCEDURE	2	   p_vac_id   IN INTEGER)

PR_VACATION_SZ_CREATE	PROCEDURE	3	AS

PR_VACATION_SZ_CREATE	PROCEDURE	4	   v_recipient               INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	5	   v_head                    VARCHAR2 (4000);

PR_VACATION_SZ_CREATE	PROCEDURE	6	   v_body                    VARCHAR2 (4000);

PR_VACATION_SZ_CREATE	PROCEDURE	7	   v_fio                     VARCHAR2 (1024);

PR_VACATION_SZ_CREATE	PROCEDURE	8	   v_from                    VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	9	   v_days                    INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	10	   v_fio_otv                 VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	11	   v_sz_id                   INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	12	   v_tn                      INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	13	   v_replacement             INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	14	   v_v_from                  DATE;

PR_VACATION_SZ_CREATE	PROCEDURE	15	   v_v_to                    DATE;

PR_VACATION_SZ_CREATE	PROCEDURE	16	   prev_v_from               DATE;

PR_VACATION_SZ_CREATE	PROCEDURE	17	   prev_v_to                 DATE;

PR_VACATION_SZ_CREATE	PROCEDURE	18	   prev                      VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	19	   v_replacement_mob         VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	20	   v_replacement_mail        VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	21	   v_replacement_h_eta       VARCHAR (32);

PR_VACATION_SZ_CREATE	PROCEDURE	22	   v_replacement_fio_eta     VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	23	   v_replacement_pos_name    VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	24	   i                         INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	25	   param_vacation_tn         INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	26	   param_vacation_order_tn   INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	27	   i1                        INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	28	   param_vacation            INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	29	   param_vacation_order      INTEGER;

PR_VACATION_SZ_CREATE	PROCEDURE	30	   v_planned                 VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	31	   v_paided                  VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	32	   v_auto_sz                 VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	33	   v_auto_tma                VARCHAR (255);

PR_VACATION_SZ_CREATE	PROCEDURE	34	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_VACATION_SZ_CREATE	PROCEDURE	35	BEGIN

PR_VACATION_SZ_CREATE	PROCEDURE	36	   SELECT v.tn,

PR_VACATION_SZ_CREATE	PROCEDURE	37	          v.replacement,

PR_VACATION_SZ_CREATE	PROCEDURE	38	          v.v_from,

PR_VACATION_SZ_CREATE	PROCEDURE	39	          v.v_to,

PR_VACATION_SZ_CREATE	PROCEDURE	40	          v.replacement_mob,

PR_VACATION_SZ_CREATE	PROCEDURE	41	          v.replacement_mail,

PR_VACATION_SZ_CREATE	PROCEDURE	42	          v.replacement_h_eta,

PR_VACATION_SZ_CREATE	PROCEDURE	43	          v.replacement_fio_eta,

PR_VACATION_SZ_CREATE	PROCEDURE	44	          v.sz_id,

PR_VACATION_SZ_CREATE	PROCEDURE	45	          spl.name planned,

PR_VACATION_SZ_CREATE	PROCEDURE	46	          spa.name paided,

PR_VACATION_SZ_CREATE	PROCEDURE	47	          DECODE (v.auto_sz, 1, 'да', 'нет'),

PR_VACATION_SZ_CREATE	PROCEDURE	48	          DECODE (v.auto_tma, 1, 'да', 'нет')

PR_VACATION_SZ_CREATE	PROCEDURE	49	     INTO v_tn,

PR_VACATION_SZ_CREATE	PROCEDURE	50	          v_replacement,

PR_VACATION_SZ_CREATE	PROCEDURE	51	          v_v_from,

PR_VACATION_SZ_CREATE	PROCEDURE	52	          v_v_to,

PR_VACATION_SZ_CREATE	PROCEDURE	53	          v_replacement_mob,

PR_VACATION_SZ_CREATE	PROCEDURE	54	          v_replacement_mail,

PR_VACATION_SZ_CREATE	PROCEDURE	55	          v_replacement_h_eta,

PR_VACATION_SZ_CREATE	PROCEDURE	56	          v_replacement_fio_eta,

PR_VACATION_SZ_CREATE	PROCEDURE	57	          v_sz_id,

PR_VACATION_SZ_CREATE	PROCEDURE	58	          v_planned,

PR_VACATION_SZ_CREATE	PROCEDURE	59	          v_paided,

PR_VACATION_SZ_CREATE	PROCEDURE	60	          v_auto_sz,

PR_VACATION_SZ_CREATE	PROCEDURE	61	          v_auto_tma

PR_VACATION_SZ_CREATE	PROCEDURE	62	     FROM vacation v, vacation_spr_planned spl, vacation_spr_paided spa

PR_VACATION_SZ_CREATE	PROCEDURE	63	    WHERE v.id = p_vac_id AND v.planned = spl.id(+) AND v.paided = spa.id(+);

PR_VACATION_SZ_CREATE	PROCEDURE	64	

PR_VACATION_SZ_CREATE	PROCEDURE	65	   DELETE FROM sz

PR_VACATION_SZ_CREATE	PROCEDURE	66	         WHERE id = v_sz_id;

PR_VACATION_SZ_CREATE	PROCEDURE	67	

PR_VACATION_SZ_CREATE	PROCEDURE	68	   COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	69	

PR_VACATION_SZ_CREATE	PROCEDURE	70	   SELECT master

PR_VACATION_SZ_CREATE	PROCEDURE	71	     INTO v_recipient

PR_VACATION_SZ_CREATE	PROCEDURE	72	     FROM (    SELECT LEVEL, f.*

PR_VACATION_SZ_CREATE	PROCEDURE	73	                 FROM (SELECT *

PR_VACATION_SZ_CREATE	PROCEDURE	74	                         FROM full

PR_VACATION_SZ_CREATE	PROCEDURE	75	                        WHERE full = 1) f,

PR_VACATION_SZ_CREATE	PROCEDURE	76	                      user_list u

PR_VACATION_SZ_CREATE	PROCEDURE	77	                WHERE f.MASTER = u.tn AND u.datauvol IS NULL

PR_VACATION_SZ_CREATE	PROCEDURE	78	           CONNECT BY PRIOR f.master = f.slave

PR_VACATION_SZ_CREATE	PROCEDURE	79	           START WITH f.slave = v_tn

PR_VACATION_SZ_CREATE	PROCEDURE	80	             ORDER BY LEVEL DESC)

PR_VACATION_SZ_CREATE	PROCEDURE	81	    WHERE ROWNUM = 1;

PR_VACATION_SZ_CREATE	PROCEDURE	82	

PR_VACATION_SZ_CREATE	PROCEDURE	83	   SELECT fio

PR_VACATION_SZ_CREATE	PROCEDURE	84	     INTO v_fio

PR_VACATION_SZ_CREATE	PROCEDURE	85	     FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	86	    WHERE tn = v_tn;

PR_VACATION_SZ_CREATE	PROCEDURE	87	

PR_VACATION_SZ_CREATE	PROCEDURE	88	   SELECT COUNT (DISTINCT (mt || ' ' || y))

PR_VACATION_SZ_CREATE	PROCEDURE	89	     INTO i

PR_VACATION_SZ_CREATE	PROCEDURE	90	     FROM calendar

PR_VACATION_SZ_CREATE	PROCEDURE	91	    WHERE data IN (v_v_from, v_v_to);

PR_VACATION_SZ_CREATE	PROCEDURE	92	

PR_VACATION_SZ_CREATE	PROCEDURE	93	   IF i = 1

PR_VACATION_SZ_CREATE	PROCEDURE	94	   THEN

PR_VACATION_SZ_CREATE	PROCEDURE	95	      SELECT DISTINCT (mt || ' ' || y)

PR_VACATION_SZ_CREATE	PROCEDURE	96	        INTO v_from

PR_VACATION_SZ_CREATE	PROCEDURE	97	        FROM calendar

PR_VACATION_SZ_CREATE	PROCEDURE	98	       WHERE data IN (v_v_from, v_v_to);

PR_VACATION_SZ_CREATE	PROCEDURE	99	   ELSE

PR_VACATION_SZ_CREATE	PROCEDURE	100	        SELECT wm_concat (mt || ' ' || y)

PR_VACATION_SZ_CREATE	PROCEDURE	101	          INTO v_from

PR_VACATION_SZ_CREATE	PROCEDURE	102	          FROM calendar

PR_VACATION_SZ_CREATE	PROCEDURE	103	         WHERE data IN (v_v_from, v_v_to)

PR_VACATION_SZ_CREATE	PROCEDURE	104	      ORDER BY data;

PR_VACATION_SZ_CREATE	PROCEDURE	105	   END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	106	

PR_VACATION_SZ_CREATE	PROCEDURE	107	   SELECT v_v_to - v_v_from + 1 INTO v_days FROM DUAL;

PR_VACATION_SZ_CREATE	PROCEDURE	108	

PR_VACATION_SZ_CREATE	PROCEDURE	109	   IF v_replacement IS NOT NULL

PR_VACATION_SZ_CREATE	PROCEDURE	110	   THEN

PR_VACATION_SZ_CREATE	PROCEDURE	111	      SELECT fio, pos_name

PR_VACATION_SZ_CREATE	PROCEDURE	112	        INTO v_fio_otv, v_replacement_pos_name

PR_VACATION_SZ_CREATE	PROCEDURE	113	        FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	114	       WHERE tn = v_replacement;

PR_VACATION_SZ_CREATE	PROCEDURE	115	   ELSE

PR_VACATION_SZ_CREATE	PROCEDURE	116	      v_fio_otv := v_replacement_fio_eta;

PR_VACATION_SZ_CREATE	PROCEDURE	117	

PR_VACATION_SZ_CREATE	PROCEDURE	118	      SELECT pos_name

PR_VACATION_SZ_CREATE	PROCEDURE	119	        INTO v_replacement_pos_name

PR_VACATION_SZ_CREATE	PROCEDURE	120	        FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	121	       WHERE h_eta = v_replacement_h_eta;

PR_VACATION_SZ_CREATE	PROCEDURE	122	   END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	123	

PR_VACATION_SZ_CREATE	PROCEDURE	124	   SELECT COUNT (*)

PR_VACATION_SZ_CREATE	PROCEDURE	125	     INTO i

PR_VACATION_SZ_CREATE	PROCEDURE	126	     FROM vacation v, sz

PR_VACATION_SZ_CREATE	PROCEDURE	127	    WHERE v.sz_id = sz.id AND v.tn = v_tn AND v.v_to < v_v_from;

PR_VACATION_SZ_CREATE	PROCEDURE	128	

PR_VACATION_SZ_CREATE	PROCEDURE	129	   IF i > 0

PR_VACATION_SZ_CREATE	PROCEDURE	130	   THEN

PR_VACATION_SZ_CREATE	PROCEDURE	131	      SELECT v_from, v_to

PR_VACATION_SZ_CREATE	PROCEDURE	132	        INTO prev_v_from, prev_v_to

PR_VACATION_SZ_CREATE	PROCEDURE	133	        FROM vacation

PR_VACATION_SZ_CREATE	PROCEDURE	134	       WHERE id = (SELECT MAX (v.id)

PR_VACATION_SZ_CREATE	PROCEDURE	135	                     FROM vacation v, sz

PR_VACATION_SZ_CREATE	PROCEDURE	136	                    WHERE     v.sz_id = sz.id

PR_VACATION_SZ_CREATE	PROCEDURE	137	                          AND v.tn = v_tn

PR_VACATION_SZ_CREATE	PROCEDURE	138	                          AND v.v_to < v_v_from

PR_VACATION_SZ_CREATE	PROCEDURE	139	                          AND (SELECT accepted

PR_VACATION_SZ_CREATE	PROCEDURE	140	                                 FROM sz_accept

PR_VACATION_SZ_CREATE	PROCEDURE	141	                                WHERE     accept_order =

PR_VACATION_SZ_CREATE	PROCEDURE	142	                                             (SELECT MAX (accept_order)

PR_VACATION_SZ_CREATE	PROCEDURE	143	                                                FROM sz_accept

PR_VACATION_SZ_CREATE	PROCEDURE	144	                                               WHERE sz_id = v.sz_id)

PR_VACATION_SZ_CREATE	PROCEDURE	145	                                      AND sz_id = v.sz_id) = 1);

PR_VACATION_SZ_CREATE	PROCEDURE	146	   END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	147	

PR_VACATION_SZ_CREATE	PROCEDURE	148	   v_head := 'Отпуск ' || v_fio || ', ' || v_from;

PR_VACATION_SZ_CREATE	PROCEDURE	149	   v_body :=

PR_VACATION_SZ_CREATE	PROCEDURE	150	         'Прошу предоставить мне отпуск в количестве '

PR_VACATION_SZ_CREATE	PROCEDURE	151	      || v_days

PR_VACATION_SZ_CREATE	PROCEDURE	152	      || ' календарных дней в период с '

PR_VACATION_SZ_CREATE	PROCEDURE	153	      || TO_CHAR (v_v_from, 'dd.mm.yyyy')

PR_VACATION_SZ_CREATE	PROCEDURE	154	      || ' по '

PR_VACATION_SZ_CREATE	PROCEDURE	155	      || TO_CHAR (v_v_to, 'dd.mm.yyyy')

PR_VACATION_SZ_CREATE	PROCEDURE	156	      || '.<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	157	      || 'Исполняющим обязанности на период моего отсутствия назначен(а) '

PR_VACATION_SZ_CREATE	PROCEDURE	158	      || v_fio_otv

PR_VACATION_SZ_CREATE	PROCEDURE	159	      || ', '

PR_VACATION_SZ_CREATE	PROCEDURE	160	      || v_replacement_pos_name

PR_VACATION_SZ_CREATE	PROCEDURE	161	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	162	      || 'Контактный номер телефона: '

PR_VACATION_SZ_CREATE	PROCEDURE	163	      || v_replacement_mob

PR_VACATION_SZ_CREATE	PROCEDURE	164	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	165	      || 'Адрес электронной почты: '

PR_VACATION_SZ_CREATE	PROCEDURE	166	      || v_replacement_mail

PR_VACATION_SZ_CREATE	PROCEDURE	167	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	168	      || 'Плановость: '

PR_VACATION_SZ_CREATE	PROCEDURE	169	      || v_planned

PR_VACATION_SZ_CREATE	PROCEDURE	170	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	171	      || 'Оплачивается: '

PR_VACATION_SZ_CREATE	PROCEDURE	172	      || v_paided

PR_VACATION_SZ_CREATE	PROCEDURE	173	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	174	      || 'Автозамена СЗ: '

PR_VACATION_SZ_CREATE	PROCEDURE	175	      || v_auto_sz

PR_VACATION_SZ_CREATE	PROCEDURE	176	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	177	      || 'Автозамена ТМА: '

PR_VACATION_SZ_CREATE	PROCEDURE	178	      || v_auto_tma

PR_VACATION_SZ_CREATE	PROCEDURE	179	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	180	      || 'Последний отпуск был с '

PR_VACATION_SZ_CREATE	PROCEDURE	181	      || TO_CHAR (prev_v_from, 'dd.mm.yyyy')

PR_VACATION_SZ_CREATE	PROCEDURE	182	      || ' по '

PR_VACATION_SZ_CREATE	PROCEDURE	183	      || TO_CHAR (prev_v_to, 'dd.mm.yyyy')

PR_VACATION_SZ_CREATE	PROCEDURE	184	      || '<br>'

PR_VACATION_SZ_CREATE	PROCEDURE	185	      || 'Ему выставлены следующие задачи на период отпуска:<br>';

PR_VACATION_SZ_CREATE	PROCEDURE	186	

PR_VACATION_SZ_CREATE	PROCEDURE	187	   FOR a IN (  SELECT DISTINCT p.sort, t.part_id, p.name

PR_VACATION_SZ_CREATE	PROCEDURE	188	                 FROM vacation_tasks t, vacation_task_parts p

PR_VACATION_SZ_CREATE	PROCEDURE	189	                WHERE t.vac_id = p_vac_id AND t.part_id = p.id

PR_VACATION_SZ_CREATE	PROCEDURE	190	             ORDER BY p.sort, p.name)

PR_VACATION_SZ_CREATE	PROCEDURE	191	   LOOP

PR_VACATION_SZ_CREATE	PROCEDURE	192	      v_body := v_body || '<b>' || a.name || '</b><br>';

PR_VACATION_SZ_CREATE	PROCEDURE	193	      i := 1;

PR_VACATION_SZ_CREATE	PROCEDURE	194	

PR_VACATION_SZ_CREATE	PROCEDURE	195	      FOR b

PR_VACATION_SZ_CREATE	PROCEDURE	196	         IN (  SELECT t.id,

PR_VACATION_SZ_CREATE	PROCEDURE	197	                      TO_CHAR (t.dt_end, 'dd.mm.yyyy') dt_end,

PR_VACATION_SZ_CREATE	PROCEDURE	198	                      task,

PR_VACATION_SZ_CREATE	PROCEDURE	199	                      result,

PR_VACATION_SZ_CREATE	PROCEDURE	200	                      t.part_id,

PR_VACATION_SZ_CREATE	PROCEDURE	201	                      p.name

PR_VACATION_SZ_CREATE	PROCEDURE	202	                 FROM vacation_tasks t, vacation_task_parts p

PR_VACATION_SZ_CREATE	PROCEDURE	203	                WHERE     t.vac_id = p_vac_id

PR_VACATION_SZ_CREATE	PROCEDURE	204	                      AND t.part_id = p.id

PR_VACATION_SZ_CREATE	PROCEDURE	205	                      AND t.part_id = a.part_id

PR_VACATION_SZ_CREATE	PROCEDURE	206	             ORDER BY p.sort, t.id)

PR_VACATION_SZ_CREATE	PROCEDURE	207	      LOOP

PR_VACATION_SZ_CREATE	PROCEDURE	208	         v_body :=

PR_VACATION_SZ_CREATE	PROCEDURE	209	               v_body

PR_VACATION_SZ_CREATE	PROCEDURE	210	            || i

PR_VACATION_SZ_CREATE	PROCEDURE	211	            || ' '

PR_VACATION_SZ_CREATE	PROCEDURE	212	            || b.task

PR_VACATION_SZ_CREATE	PROCEDURE	213	            || '. Результат: '

PR_VACATION_SZ_CREATE	PROCEDURE	214	            || b.result

PR_VACATION_SZ_CREATE	PROCEDURE	215	            || '. Срок: '

PR_VACATION_SZ_CREATE	PROCEDURE	216	            || b.dt_end

PR_VACATION_SZ_CREATE	PROCEDURE	217	            || '<br>';

PR_VACATION_SZ_CREATE	PROCEDURE	218	         i := i + 1;

PR_VACATION_SZ_CREATE	PROCEDURE	219	      END LOOP;

PR_VACATION_SZ_CREATE	PROCEDURE	220	   END LOOP;

PR_VACATION_SZ_CREATE	PROCEDURE	221	

PR_VACATION_SZ_CREATE	PROCEDURE	222	   SELECT seq_all.NEXTVAL INTO v_sz_id FROM DUAL;

PR_VACATION_SZ_CREATE	PROCEDURE	223	

PR_VACATION_SZ_CREATE	PROCEDURE	224	   UPDATE vacation

PR_VACATION_SZ_CREATE	PROCEDURE	225	      SET sz_id = v_sz_id

PR_VACATION_SZ_CREATE	PROCEDURE	226	    WHERE id = p_vac_id;

PR_VACATION_SZ_CREATE	PROCEDURE	227	

PR_VACATION_SZ_CREATE	PROCEDURE	228	   COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	229	

PR_VACATION_SZ_CREATE	PROCEDURE	230	   INSERT INTO sz (id,

PR_VACATION_SZ_CREATE	PROCEDURE	231	                   tn,

PR_VACATION_SZ_CREATE	PROCEDURE	232	                   recipient,

PR_VACATION_SZ_CREATE	PROCEDURE	233	                   head,

PR_VACATION_SZ_CREATE	PROCEDURE	234	                   body,

PR_VACATION_SZ_CREATE	PROCEDURE	235	                   cat)

PR_VACATION_SZ_CREATE	PROCEDURE	236	        VALUES (v_sz_id,

PR_VACATION_SZ_CREATE	PROCEDURE	237	                v_tn,

PR_VACATION_SZ_CREATE	PROCEDURE	238	                v_recipient,

PR_VACATION_SZ_CREATE	PROCEDURE	239	                v_head,

PR_VACATION_SZ_CREATE	PROCEDURE	240	                v_body,

PR_VACATION_SZ_CREATE	PROCEDURE	241	                927679);

PR_VACATION_SZ_CREATE	PROCEDURE	242	

PR_VACATION_SZ_CREATE	PROCEDURE	243	   COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	244	

PR_VACATION_SZ_CREATE	PROCEDURE	245	   /*2854110641    Соловьева Анна Анатольевна*/

PR_VACATION_SZ_CREATE	PROCEDURE	246	   /*2856800344    Рекубрацкая Елена Валерьевна*/

PR_VACATION_SZ_CREATE	PROCEDURE	247	/*

PR_VACATION_SZ_CREATE	PROCEDURE	248	   INSERT INTO sz_executors (sz_id, tn)

PR_VACATION_SZ_CREATE	PROCEDURE	249	        VALUES (v_sz_id, 2854110641);

PR_VACATION_SZ_CREATE	PROCEDURE	250	

PR_VACATION_SZ_CREATE	PROCEDURE	251	   INSERT INTO sz_executors (sz_id, tn)

PR_VACATION_SZ_CREATE	PROCEDURE	252	        VALUES (v_sz_id, 2856800344);

PR_VACATION_SZ_CREATE	PROCEDURE	253	

PR_VACATION_SZ_CREATE	PROCEDURE	254	   COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	255	*/

PR_VACATION_SZ_CREATE	PROCEDURE	256	

PR_VACATION_SZ_CREATE	PROCEDURE	257	

PR_VACATION_SZ_CREATE	PROCEDURE	258	       -- считаем общее количество согласователей в цепочке

PR_VACATION_SZ_CREATE	PROCEDURE	259	       SELECT MAX (LEVEL)

PR_VACATION_SZ_CREATE	PROCEDURE	260	         INTO i

PR_VACATION_SZ_CREATE	PROCEDURE	261	         FROM (SELECT *

PR_VACATION_SZ_CREATE	PROCEDURE	262	                 FROM FULL

PR_VACATION_SZ_CREATE	PROCEDURE	263	                WHERE FULL = 1) f,

PR_VACATION_SZ_CREATE	PROCEDURE	264	              user_list u

PR_VACATION_SZ_CREATE	PROCEDURE	265	        WHERE f.MASTER = u.tn AND u.datauvol IS NULL

PR_VACATION_SZ_CREATE	PROCEDURE	266	   CONNECT BY PRIOR f.master = f.slave

PR_VACATION_SZ_CREATE	PROCEDURE	267	   START WITH f.slave = v_tn;

PR_VACATION_SZ_CREATE	PROCEDURE	268	

PR_VACATION_SZ_CREATE	PROCEDURE	269	   -- считаем, существует ли переменная vacation

PR_VACATION_SZ_CREATE	PROCEDURE	270	   SELECT COUNT (*)

PR_VACATION_SZ_CREATE	PROCEDURE	271	     INTO param_vacation

PR_VACATION_SZ_CREATE	PROCEDURE	272	     FROM parameters

PR_VACATION_SZ_CREATE	PROCEDURE	273	    WHERE     param_name = 'vacation'

PR_VACATION_SZ_CREATE	PROCEDURE	274	          AND dpt_id = (SELECT dpt_id

PR_VACATION_SZ_CREATE	PROCEDURE	275	                          FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	276	                         WHERE tn = v_tn);

PR_VACATION_SZ_CREATE	PROCEDURE	277	

PR_VACATION_SZ_CREATE	PROCEDURE	278	   -- и запоминаем ее значение

PR_VACATION_SZ_CREATE	PROCEDURE	279	   IF param_vacation = 1

PR_VACATION_SZ_CREATE	PROCEDURE	280	   THEN

PR_VACATION_SZ_CREATE	PROCEDURE	281	      SELECT val_number

PR_VACATION_SZ_CREATE	PROCEDURE	282	        INTO param_vacation_tn

PR_VACATION_SZ_CREATE	PROCEDURE	283	        FROM parameters

PR_VACATION_SZ_CREATE	PROCEDURE	284	       WHERE     param_name = 'vacation'

PR_VACATION_SZ_CREATE	PROCEDURE	285	             AND dpt_id = (SELECT dpt_id

PR_VACATION_SZ_CREATE	PROCEDURE	286	                             FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	287	                            WHERE tn = v_tn);

PR_VACATION_SZ_CREATE	PROCEDURE	288	   ELSE

PR_VACATION_SZ_CREATE	PROCEDURE	289	      param_vacation_tn := 0;

PR_VACATION_SZ_CREATE	PROCEDURE	290	   END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	291	

PR_VACATION_SZ_CREATE	PROCEDURE	292	   -- считаем, существует ли переменная vacation_order

PR_VACATION_SZ_CREATE	PROCEDURE	293	   SELECT COUNT (*)

PR_VACATION_SZ_CREATE	PROCEDURE	294	     INTO param_vacation_order

PR_VACATION_SZ_CREATE	PROCEDURE	295	     FROM parameters

PR_VACATION_SZ_CREATE	PROCEDURE	296	    WHERE     param_name = 'vacation_order'

PR_VACATION_SZ_CREATE	PROCEDURE	297	          AND dpt_id = (SELECT dpt_id

PR_VACATION_SZ_CREATE	PROCEDURE	298	                          FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	299	                         WHERE tn = v_tn);

PR_VACATION_SZ_CREATE	PROCEDURE	300	

PR_VACATION_SZ_CREATE	PROCEDURE	301	   -- и запоминаем ее значение

PR_VACATION_SZ_CREATE	PROCEDURE	302	   IF param_vacation_order = 1

PR_VACATION_SZ_CREATE	PROCEDURE	303	   THEN

PR_VACATION_SZ_CREATE	PROCEDURE	304	      SELECT val_number

PR_VACATION_SZ_CREATE	PROCEDURE	305	        INTO param_vacation_order_tn

PR_VACATION_SZ_CREATE	PROCEDURE	306	        FROM parameters

PR_VACATION_SZ_CREATE	PROCEDURE	307	       WHERE     param_name = 'vacation_order'

PR_VACATION_SZ_CREATE	PROCEDURE	308	             AND dpt_id = (SELECT dpt_id

PR_VACATION_SZ_CREATE	PROCEDURE	309	                             FROM user_list

PR_VACATION_SZ_CREATE	PROCEDURE	310	                            WHERE tn = v_tn);

PR_VACATION_SZ_CREATE	PROCEDURE	311	   ELSE

PR_VACATION_SZ_CREATE	PROCEDURE	312	      param_vacation_order_tn := 0;

PR_VACATION_SZ_CREATE	PROCEDURE	313	   END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	314	

PR_VACATION_SZ_CREATE	PROCEDURE	315	   -- пробегаемся по цепочке согласователей

PR_VACATION_SZ_CREATE	PROCEDURE	316	   -- цепочка согласования: прямой руководитель - прямой руководитель прямого руководителя - ... - Бабец Р.

PR_VACATION_SZ_CREATE	PROCEDURE	317	   FOR A IN (    SELECT f.MASTER, LEVEL

PR_VACATION_SZ_CREATE	PROCEDURE	318	                   FROM (SELECT *

PR_VACATION_SZ_CREATE	PROCEDURE	319	                           FROM FULL

PR_VACATION_SZ_CREATE	PROCEDURE	320	                          WHERE FULL = 1) f,

PR_VACATION_SZ_CREATE	PROCEDURE	321	                        user_list u

PR_VACATION_SZ_CREATE	PROCEDURE	322	                  WHERE f.MASTER = u.tn AND u.datauvol IS NULL

PR_VACATION_SZ_CREATE	PROCEDURE	323	             CONNECT BY PRIOR f.master = f.slave

PR_VACATION_SZ_CREATE	PROCEDURE	324	             START WITH f.slave = v_tn)

PR_VACATION_SZ_CREATE	PROCEDURE	325	   LOOP

PR_VACATION_SZ_CREATE	PROCEDURE	326	      -- если для страны задана переменная среды vacation_order

PR_VACATION_SZ_CREATE	PROCEDURE	327	      -- и ее значение содержит ИНН добавляемого участника согласования отпуска,

PR_VACATION_SZ_CREATE	PROCEDURE	328	      -- или переменная не задана и мы добавляем последнего согласователя

PR_VACATION_SZ_CREATE	PROCEDURE	329	      -- то непрямые руководители (или сотрудник из переменной vacation, если она задана) добавляются ПЕРЕД текущим согласователем

PR_VACATION_SZ_CREATE	PROCEDURE	330	      IF    (a.master = param_vacation_order_tn AND param_vacation_order = 1)

PR_VACATION_SZ_CREATE	PROCEDURE	331	         OR (a.LEVEL = i AND param_vacation_order = 0)

PR_VACATION_SZ_CREATE	PROCEDURE	332	      THEN

PR_VACATION_SZ_CREATE	PROCEDURE	333	         -- перед тем, как собираемся добавить последнего согласователся

PR_VACATION_SZ_CREATE	PROCEDURE	334	         -- проверяем, существует ли переменная vacation в данной стране

PR_VACATION_SZ_CREATE	PROCEDURE	335	         IF param_vacation = 0

PR_VACATION_SZ_CREATE	PROCEDURE	336	         THEN

PR_VACATION_SZ_CREATE	PROCEDURE	337	            -- если для указанной страны не задана переменная среды vacation,

PR_VACATION_SZ_CREATE	PROCEDURE	338	            -- то вместо сотрудника из данной переменной среды добавляются

PR_VACATION_SZ_CREATE	PROCEDURE	339	            -- все НЕПРЯМЫЕ РУКОВОДИТЕЛИ (статус "руководитель" = "нет"),

PR_VACATION_SZ_CREATE	PROCEDURE	340	            -- которые привязаны к отпускунику на форме "эксперт-оцениваемый",

PR_VACATION_SZ_CREATE	PROCEDURE	341	            -- но которых еще НЕТ В СПИСКЕ СОГЛАСОВАТЕЛЕЙ.

PR_VACATION_SZ_CREATE	PROCEDURE	342	            FOR b

PR_VACATION_SZ_CREATE	PROCEDURE	343	               IN (SELECT e.*

PR_VACATION_SZ_CREATE	PROCEDURE	344	                     FROM emp_exp e, user_list u

PR_VACATION_SZ_CREATE	PROCEDURE	345	                    WHERE     e.emp_tn = v_tn

PR_VACATION_SZ_CREATE	PROCEDURE	346	                          AND e.exp_tn <> e.emp_tn

PR_VACATION_SZ_CREATE	PROCEDURE	347	                          AND u.tn = e.exp_tn

PR_VACATION_SZ_CREATE	PROCEDURE	348	                          AND u.datauvol IS NULL)

PR_VACATION_SZ_CREATE	PROCEDURE	349	            LOOP

PR_VACATION_SZ_CREATE	PROCEDURE	350	               BEGIN

PR_VACATION_SZ_CREATE	PROCEDURE	351	                  INSERT INTO sz_accept (sz_id, tn)

PR_VACATION_SZ_CREATE	PROCEDURE	352	                       VALUES (v_sz_id, b.exp_tn);

PR_VACATION_SZ_CREATE	PROCEDURE	353	

PR_VACATION_SZ_CREATE	PROCEDURE	354	                  COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	355	               EXCEPTION

PR_VACATION_SZ_CREATE	PROCEDURE	356	                  WHEN OTHERS

PR_VACATION_SZ_CREATE	PROCEDURE	357	                  THEN

PR_VACATION_SZ_CREATE	PROCEDURE	358	                     NULL;

PR_VACATION_SZ_CREATE	PROCEDURE	359	               END;

PR_VACATION_SZ_CREATE	PROCEDURE	360	            END LOOP;

PR_VACATION_SZ_CREATE	PROCEDURE	361	         ELSE

PR_VACATION_SZ_CREATE	PROCEDURE	362	            -- если переменная vacation задана

PR_VACATION_SZ_CREATE	PROCEDURE	363	            -- добавляется сотрудник, ИНН которого указан в данной переменной

PR_VACATION_SZ_CREATE	PROCEDURE	364	            -- и которого еще НЕТ В СПИСКЕ СОГЛАСОВАТЕЛЕЙ.

PR_VACATION_SZ_CREATE	PROCEDURE	365	

PR_VACATION_SZ_CREATE	PROCEDURE	366	            BEGIN

PR_VACATION_SZ_CREATE	PROCEDURE	367	               INSERT INTO sz_accept (sz_id, tn)

PR_VACATION_SZ_CREATE	PROCEDURE	368	                    VALUES (v_sz_id, param_vacation_tn);

PR_VACATION_SZ_CREATE	PROCEDURE	369	

PR_VACATION_SZ_CREATE	PROCEDURE	370	               COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	371	            EXCEPTION

PR_VACATION_SZ_CREATE	PROCEDURE	372	               WHEN OTHERS

PR_VACATION_SZ_CREATE	PROCEDURE	373	               THEN

PR_VACATION_SZ_CREATE	PROCEDURE	374	                  NULL;

PR_VACATION_SZ_CREATE	PROCEDURE	375	            END;

PR_VACATION_SZ_CREATE	PROCEDURE	376	         END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	377	      END IF;

PR_VACATION_SZ_CREATE	PROCEDURE	378	

PR_VACATION_SZ_CREATE	PROCEDURE	379	      BEGIN

PR_VACATION_SZ_CREATE	PROCEDURE	380	         INSERT INTO sz_accept (sz_id, tn)

PR_VACATION_SZ_CREATE	PROCEDURE	381	              VALUES (v_sz_id, a.master);

PR_VACATION_SZ_CREATE	PROCEDURE	382	

PR_VACATION_SZ_CREATE	PROCEDURE	383	         COMMIT;

PR_VACATION_SZ_CREATE	PROCEDURE	384	      EXCEPTION

PR_VACATION_SZ_CREATE	PROCEDURE	385	         WHEN OTHERS

PR_VACATION_SZ_CREATE	PROCEDURE	386	         THEN

PR_VACATION_SZ_CREATE	PROCEDURE	387	            NULL;

PR_VACATION_SZ_CREATE	PROCEDURE	388	      END;

PR_VACATION_SZ_CREATE	PROCEDURE	389	   END LOOP;

PR_VACATION_SZ_CREATE	PROCEDURE	390	END;
PR_SEND_M_CHAT	PROCEDURE	1	PROCEDURE        "PR_SEND_M_CHAT" (p_id IN INTEGER)

PR_SEND_M_CHAT	PROCEDURE	2	IS

PR_SEND_M_CHAT	PROCEDURE	3	   subj               VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	4	   from_fio           VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	5	   text               VARCHAR (4000);

PR_SEND_M_CHAT	PROCEDURE	6	   spd                INTEGER;

PR_SEND_M_CHAT	PROCEDURE	7	   net                VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	8	   tpn                VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	9	   tpa                VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	10	   v_kod_tp           INTEGER;

PR_SEND_M_CHAT	PROCEDURE	11	   v_dt               DATE;

PR_SEND_M_CHAT	PROCEDURE	12	   v_login            VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	13	   v_text             VARCHAR (4000);

PR_SEND_M_CHAT	PROCEDURE	14	   v_n_id_net         VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	15	   v_cpp1_tz_oblast   VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	16	   v_cpp1_city        VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	17	   v_ag_id            INTEGER;

PR_SEND_M_CHAT	PROCEDURE	18	   v_ag_name          VARCHAR (255);

PR_SEND_M_CHAT	PROCEDURE	19	   line               VARCHAR (4000);

PR_SEND_M_CHAT	PROCEDURE	20	   v_contact_avk      VARCHAR (4000);

PR_SEND_M_CHAT	PROCEDURE	21	   ma                 INTEGER;

PR_SEND_M_CHAT	PROCEDURE	22	BEGIN

PR_SEND_M_CHAT	PROCEDURE	23	   RETURN;

PR_SEND_M_CHAT	PROCEDURE	24	

PR_SEND_M_CHAT	PROCEDURE	25	   SELECT login,

PR_SEND_M_CHAT	PROCEDURE	26	          text,

PR_SEND_M_CHAT	PROCEDURE	27	          kod_tp,

PR_SEND_M_CHAT	PROCEDURE	28	          dt,

PR_SEND_M_CHAT	PROCEDURE	29	          ag_id

PR_SEND_M_CHAT	PROCEDURE	30	     INTO v_login,

PR_SEND_M_CHAT	PROCEDURE	31	          v_text,

PR_SEND_M_CHAT	PROCEDURE	32	          v_kod_tp,

PR_SEND_M_CHAT	PROCEDURE	33	          v_dt,

PR_SEND_M_CHAT	PROCEDURE	34	          v_ag_id

PR_SEND_M_CHAT	PROCEDURE	35	     FROM merch_chat

PR_SEND_M_CHAT	PROCEDURE	36	    WHERE id = p_id;

PR_SEND_M_CHAT	PROCEDURE	37	

PR_SEND_M_CHAT	PROCEDURE	38	   SELECT name, contact_avk

PR_SEND_M_CHAT	PROCEDURE	39	     INTO v_ag_name, v_contact_avk

PR_SEND_M_CHAT	PROCEDURE	40	     FROM routes_agents

PR_SEND_M_CHAT	PROCEDURE	41	    WHERE id = v_ag_id;

PR_SEND_M_CHAT	PROCEDURE	42	

PR_SEND_M_CHAT	PROCEDURE	43	   SELECT DISTINCT n_net_name,

PR_SEND_M_CHAT	PROCEDURE	44	                   cpp1_ur_tz_name,

PR_SEND_M_CHAT	PROCEDURE	45	                   cpp1_tz_address,

PR_SEND_M_CHAT	PROCEDURE	46	                   n_id_net,

PR_SEND_M_CHAT	PROCEDURE	47	                   cpp1_tz_oblast,

PR_SEND_M_CHAT	PROCEDURE	48	                   cpp1_city

PR_SEND_M_CHAT	PROCEDURE	49	     INTO net,

PR_SEND_M_CHAT	PROCEDURE	50	          tpn,

PR_SEND_M_CHAT	PROCEDURE	51	          tpa,

PR_SEND_M_CHAT	PROCEDURE	52	          v_n_id_net,

PR_SEND_M_CHAT	PROCEDURE	53	          v_cpp1_tz_oblast,

PR_SEND_M_CHAT	PROCEDURE	54	          v_cpp1_city

PR_SEND_M_CHAT	PROCEDURE	55	     FROM ms_rep_routes1 rr

PR_SEND_M_CHAT	PROCEDURE	56	    WHERE rr.rb_kodtp = v_kod_tp;

PR_SEND_M_CHAT	PROCEDURE	57	

PR_SEND_M_CHAT	PROCEDURE	58	   SELECT DECODE (u.is_spd, 1, u.fio, NVL (p.comm, v_login)),

PR_SEND_M_CHAT	PROCEDURE	59	          NVL (is_spd, 0) is_spd,

PR_SEND_M_CHAT	PROCEDURE	60	          NVL (is_ma, 0) is_ma

PR_SEND_M_CHAT	PROCEDURE	61	     INTO from_fio, spd, ma

PR_SEND_M_CHAT	PROCEDURE	62	     FROM user_list u, routes_agents_pwd p

PR_SEND_M_CHAT	PROCEDURE	63	    WHERE v_login = u.login AND u.login = p.login(+);

PR_SEND_M_CHAT	PROCEDURE	64	

PR_SEND_M_CHAT	PROCEDURE	65	   subj :=

PR_SEND_M_CHAT	PROCEDURE	66	         'Задача по работе в ТЗ: '

PR_SEND_M_CHAT	PROCEDURE	67	      || net

PR_SEND_M_CHAT	PROCEDURE	68	      || ', '

PR_SEND_M_CHAT	PROCEDURE	69	      || tpn

PR_SEND_M_CHAT	PROCEDURE	70	      || ', '

PR_SEND_M_CHAT	PROCEDURE	71	      || tpa

PR_SEND_M_CHAT	PROCEDURE	72	      || ' от '

PR_SEND_M_CHAT	PROCEDURE	73	      || TO_CHAR (v_dt, 'dd.mm.yyyy');

PR_SEND_M_CHAT	PROCEDURE	74	

PR_SEND_M_CHAT	PROCEDURE	75	   text :=

PR_SEND_M_CHAT	PROCEDURE	76	         '<b>Заказчик: '

PR_SEND_M_CHAT	PROCEDURE	77	      || v_ag_name

PR_SEND_M_CHAT	PROCEDURE	78	      || '</b><br>'

PR_SEND_M_CHAT	PROCEDURE	79	      || from_fio

PR_SEND_M_CHAT	PROCEDURE	80	      || ' оставил(а) следующую задачу: '

PR_SEND_M_CHAT	PROCEDURE	81	      || v_text;

PR_SEND_M_CHAT	PROCEDURE	82	

PR_SEND_M_CHAT	PROCEDURE	83	   FOR a IN (SELECT fn

PR_SEND_M_CHAT	PROCEDURE	84	               FROM merch_chat_f

PR_SEND_M_CHAT	PROCEDURE	85	              WHERE chat_id = p_id)

PR_SEND_M_CHAT	PROCEDURE	86	   LOOP

PR_SEND_M_CHAT	PROCEDURE	87	      line :=

PR_SEND_M_CHAT	PROCEDURE	88	            '<br><a target=_blank href="https://ps.avk.ua/files/merch_chat_files/'

PR_SEND_M_CHAT	PROCEDURE	89	         || a.fn

PR_SEND_M_CHAT	PROCEDURE	90	         || '">

PR_SEND_M_CHAT	PROCEDURE	91	         <img height=50px alt="'

PR_SEND_M_CHAT	PROCEDURE	92	         || a.fn

PR_SEND_M_CHAT	PROCEDURE	93	         || '" src="https://ps.avk.ua/files/merch_chat_files/'

PR_SEND_M_CHAT	PROCEDURE	94	         || a.fn

PR_SEND_M_CHAT	PROCEDURE	95	         || '">

PR_SEND_M_CHAT	PROCEDURE	96	         </a>';

PR_SEND_M_CHAT	PROCEDURE	97	

PR_SEND_M_CHAT	PROCEDURE	98	      IF LENGTH (subj || '<br>' || text || line) <= 1024

PR_SEND_M_CHAT	PROCEDURE	99	      THEN

PR_SEND_M_CHAT	PROCEDURE	100	         text := text || line;

PR_SEND_M_CHAT	PROCEDURE	101	      END IF;

PR_SEND_M_CHAT	PROCEDURE	102	   END LOOP;

PR_SEND_M_CHAT	PROCEDURE	103	

PR_SEND_M_CHAT	PROCEDURE	104	   INSERT INTO full_log (text, prg, login)

PR_SEND_M_CHAT	PROCEDURE	105	        VALUES (subj || '<br>' || text, 'ms', v_login);

PR_SEND_M_CHAT	PROCEDURE	106	

PR_SEND_M_CHAT	PROCEDURE	107	   /*

PR_SEND_M_CHAT	PROCEDURE	108	   СВМС не может создавать задачи.

PR_SEND_M_CHAT	PROCEDURE	109	   если заказчик создает задачу или пишет в чат по задаче, то сообщение получают ответственные за ТЗ СВМС, и контакт АВК заказчика.

PR_SEND_M_CHAT	PROCEDURE	110	   если МС-админ создает задачу или пишет в чат по задаче, то сообщение получают ответственные за ТЗ СВМС.

PR_SEND_M_CHAT	PROCEDURE	111	   если СВМС пишет в чат по задаче, то сообщение получает заказчик, который создал задачу.

PR_SEND_M_CHAT	PROCEDURE	112	   */

PR_SEND_M_CHAT	PROCEDURE	113	

PR_SEND_M_CHAT	PROCEDURE	114	   IF spd = 0 OR ma = 1

PR_SEND_M_CHAT	PROCEDURE	115	   THEN

PR_SEND_M_CHAT	PROCEDURE	116	      text :=

PR_SEND_M_CHAT	PROCEDURE	117	            text

PR_SEND_M_CHAT	PROCEDURE	118	         || '<br><a target="_blank" href="https://ps.avk.ua/?action=merch_report_4sv_file_chat&dates_list1='

PR_SEND_M_CHAT	PROCEDURE	119	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_M_CHAT	PROCEDURE	120	         || '&dates_list2='

PR_SEND_M_CHAT	PROCEDURE	121	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_M_CHAT	PROCEDURE	122	         || '&nets='

PR_SEND_M_CHAT	PROCEDURE	123	         || v_n_id_net

PR_SEND_M_CHAT	PROCEDURE	124	         || '&agent='

PR_SEND_M_CHAT	PROCEDURE	125	         || v_ag_id

PR_SEND_M_CHAT	PROCEDURE	126	         || '&flt_chat=3&select=1">Перейти на сайт</a>';

PR_SEND_M_CHAT	PROCEDURE	127	

PR_SEND_M_CHAT	PROCEDURE	128	      FOR a

PR_SEND_M_CHAT	PROCEDURE	129	         IN (SELECT DISTINCT u.e_mail

PR_SEND_M_CHAT	PROCEDURE	130	               FROM ms_rep_routes1 rr, svms_oblast r, user_list u

PR_SEND_M_CHAT	PROCEDURE	131	              WHERE     rr.rb_kodtp = v_kod_tp

PR_SEND_M_CHAT	PROCEDURE	132	                    AND rr.cpp1_tz_oblast = r.oblast

PR_SEND_M_CHAT	PROCEDURE	133	                    AND rr.rh_tn = u.tn

PR_SEND_M_CHAT	PROCEDURE	134	                    AND u.e_mail IS NOT NULL

PR_SEND_M_CHAT	PROCEDURE	135	                    AND rr.rb_ag_id = v_ag_id

PR_SEND_M_CHAT	PROCEDURE	136	                    AND rr.rh_tn = r.tn)

PR_SEND_M_CHAT	PROCEDURE	137	      LOOP

PR_SEND_M_CHAT	PROCEDURE	138	         PR_SENDMAIL_MS (a.e_mail, subj, text);

PR_SEND_M_CHAT	PROCEDURE	139	      END LOOP;

PR_SEND_M_CHAT	PROCEDURE	140	   END IF;

PR_SEND_M_CHAT	PROCEDURE	141	

PR_SEND_M_CHAT	PROCEDURE	142	   IF spd = 0 AND v_contact_avk IS NOT NULL

PR_SEND_M_CHAT	PROCEDURE	143	   THEN

PR_SEND_M_CHAT	PROCEDURE	144	      /*text :=

PR_SEND_M_CHAT	PROCEDURE	145	            text

PR_SEND_M_CHAT	PROCEDURE	146	         || '<br><a target="_blank" href="https://ps.avk.ua/?action=merch_report_4sv_file_chat&dates_list1='

PR_SEND_M_CHAT	PROCEDURE	147	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_M_CHAT	PROCEDURE	148	         || '&dates_list2='

PR_SEND_M_CHAT	PROCEDURE	149	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_M_CHAT	PROCEDURE	150	         || '&nets='

PR_SEND_M_CHAT	PROCEDURE	151	         || v_n_id_net

PR_SEND_M_CHAT	PROCEDURE	152	         || '&agent='

PR_SEND_M_CHAT	PROCEDURE	153	         || v_ag_id

PR_SEND_M_CHAT	PROCEDURE	154	         || '&flt_chat=3&select=1">Перейти на сайт</a>';*/

PR_SEND_M_CHAT	PROCEDURE	155	

PR_SEND_M_CHAT	PROCEDURE	156	      --IF v_contact_avk IS NOT NULL

PR_SEND_M_CHAT	PROCEDURE	157	      --THEN

PR_SEND_M_CHAT	PROCEDURE	158	     PR_SENDMAIL_MS (v_contact_avk, subj, text);

PR_SEND_M_CHAT	PROCEDURE	159	   --END IF;

PR_SEND_M_CHAT	PROCEDURE	160	   END IF;

PR_SEND_M_CHAT	PROCEDURE	161	

PR_SEND_M_CHAT	PROCEDURE	162	   IF spd = 1 AND ma = 0

PR_SEND_M_CHAT	PROCEDURE	163	   THEN

PR_SEND_M_CHAT	PROCEDURE	164	      text :=

PR_SEND_M_CHAT	PROCEDURE	165	            text

PR_SEND_M_CHAT	PROCEDURE	166	         || '<br><a target="_blank" href="http://merchservice.com.ua/login.php?action=merch_report_file_chat&dates_list1='

PR_SEND_M_CHAT	PROCEDURE	167	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_M_CHAT	PROCEDURE	168	         || '&dates_list2='

PR_SEND_M_CHAT	PROCEDURE	169	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_M_CHAT	PROCEDURE	170	         || '&oblast='

PR_SEND_M_CHAT	PROCEDURE	171	         || v_cpp1_tz_oblast

PR_SEND_M_CHAT	PROCEDURE	172	         || '&city='

PR_SEND_M_CHAT	PROCEDURE	173	         || v_cpp1_city

PR_SEND_M_CHAT	PROCEDURE	174	         || '&flt_chat=2&select=1">Перейти на сайт</a>';

PR_SEND_M_CHAT	PROCEDURE	175	

PR_SEND_M_CHAT	PROCEDURE	176	      FOR a

PR_SEND_M_CHAT	PROCEDURE	177	         IN (SELECT DISTINCT p.email

PR_SEND_M_CHAT	PROCEDURE	178	               FROM ms_rep_routes1 rr,

PR_SEND_M_CHAT	PROCEDURE	179	                    routes_logins_oblast r,

PR_SEND_M_CHAT	PROCEDURE	180	                    routes_agents_pwd p,

PR_SEND_M_CHAT	PROCEDURE	181	                    user_list u

PR_SEND_M_CHAT	PROCEDURE	182	              WHERE     rr.rb_kodtp = v_kod_tp

PR_SEND_M_CHAT	PROCEDURE	183	                    AND rr.cpp1_tz_oblast = r.oblast

PR_SEND_M_CHAT	PROCEDURE	184	                    AND r.login = p.login

PR_SEND_M_CHAT	PROCEDURE	185	                    AND rr.rb_ag_id = p.ag_id

PR_SEND_M_CHAT	PROCEDURE	186	                    AND u.login = p.login

PR_SEND_M_CHAT	PROCEDURE	187	                    AND p.email IS NOT NULL

PR_SEND_M_CHAT	PROCEDURE	188	                    AND rr.rb_ag_id = v_ag_id

PR_SEND_M_CHAT	PROCEDURE	189	                    AND p.login IN (SELECT DISTINCT login

PR_SEND_M_CHAT	PROCEDURE	190	                                      FROM merch_chat

PR_SEND_M_CHAT	PROCEDURE	191	                                     WHERE     kod_tp = v_kod_tp

PR_SEND_M_CHAT	PROCEDURE	192	                                           AND ag_id = v_ag_id

PR_SEND_M_CHAT	PROCEDURE	193	                                           AND dt = v_dt)

PR_SEND_M_CHAT	PROCEDURE	194	                    AND ma = 0)

PR_SEND_M_CHAT	PROCEDURE	195	      LOOP

PR_SEND_M_CHAT	PROCEDURE	196	      PR_SENDMAIL_MS (a.email, subj, text);

PR_SEND_M_CHAT	PROCEDURE	197	      END LOOP;

PR_SEND_M_CHAT	PROCEDURE	198	   END IF;

PR_SEND_M_CHAT	PROCEDURE	199	END;
PR_SEND_MSRF_CHAT	PROCEDURE	1	PROCEDURE        "PR_SEND_MSRF_CHAT" (p_id IN INTEGER)

PR_SEND_MSRF_CHAT	PROCEDURE	2	IS

PR_SEND_MSRF_CHAT	PROCEDURE	3	   subj               VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	4	   from_fio           VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	5	   text               VARCHAR (4000);

PR_SEND_MSRF_CHAT	PROCEDURE	6	   spd                INTEGER;

PR_SEND_MSRF_CHAT	PROCEDURE	7	   net                VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	8	   tpn                VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	9	   tpa                VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	10	   v_kod_tp           INTEGER;

PR_SEND_MSRF_CHAT	PROCEDURE	11	   v_dt               DATE;

PR_SEND_MSRF_CHAT	PROCEDURE	12	   v_msr_file_id      INTEGER;

PR_SEND_MSRF_CHAT	PROCEDURE	13	   v_login            VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	14	   v_text             VARCHAR (4000);

PR_SEND_MSRF_CHAT	PROCEDURE	15	   v_n_id_net         VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	16	   v_cpp1_tz_oblast   VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	17	   v_cpp1_city        VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	18	   v_ag_id            INTEGER;

PR_SEND_MSRF_CHAT	PROCEDURE	19	   v_ag_name          VARCHAR (255);

PR_SEND_MSRF_CHAT	PROCEDURE	20	   line               VARCHAR (4000);

PR_SEND_MSRF_CHAT	PROCEDURE	21	   v_contact_avk      VARCHAR (4000);

PR_SEND_MSRF_CHAT	PROCEDURE	22	   ma                 INTEGER;

PR_SEND_MSRF_CHAT	PROCEDURE	23	BEGIN

PR_SEND_MSRF_CHAT	PROCEDURE	24	   RETURN;

PR_SEND_MSRF_CHAT	PROCEDURE	25	

PR_SEND_MSRF_CHAT	PROCEDURE	26	   SELECT msr_file_id, login, text

PR_SEND_MSRF_CHAT	PROCEDURE	27	     INTO v_msr_file_id, v_login, v_text

PR_SEND_MSRF_CHAT	PROCEDURE	28	     FROM merch_spec_report_files_chat

PR_SEND_MSRF_CHAT	PROCEDURE	29	    WHERE id = p_id;

PR_SEND_MSRF_CHAT	PROCEDURE	30	

PR_SEND_MSRF_CHAT	PROCEDURE	31	   SELECT kod_tp, dt, ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	32	     INTO v_kod_tp, v_dt, v_ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	33	     FROM MERCH_SPEC_REPORT_FILES

PR_SEND_MSRF_CHAT	PROCEDURE	34	    WHERE id = v_msr_file_id;

PR_SEND_MSRF_CHAT	PROCEDURE	35	

PR_SEND_MSRF_CHAT	PROCEDURE	36	   SELECT name, contact_avk

PR_SEND_MSRF_CHAT	PROCEDURE	37	     INTO v_ag_name, v_contact_avk

PR_SEND_MSRF_CHAT	PROCEDURE	38	     FROM routes_agents

PR_SEND_MSRF_CHAT	PROCEDURE	39	    WHERE id = v_ag_id;

PR_SEND_MSRF_CHAT	PROCEDURE	40	

PR_SEND_MSRF_CHAT	PROCEDURE	41	   SELECT DISTINCT n_net_name,

PR_SEND_MSRF_CHAT	PROCEDURE	42	                   cpp1_ur_tz_name,

PR_SEND_MSRF_CHAT	PROCEDURE	43	                   cpp1_tz_address,

PR_SEND_MSRF_CHAT	PROCEDURE	44	                   n_id_net,

PR_SEND_MSRF_CHAT	PROCEDURE	45	                   cpp1_tz_oblast,

PR_SEND_MSRF_CHAT	PROCEDURE	46	                   cpp1_city

PR_SEND_MSRF_CHAT	PROCEDURE	47	     INTO net,

PR_SEND_MSRF_CHAT	PROCEDURE	48	          tpn,

PR_SEND_MSRF_CHAT	PROCEDURE	49	          tpa,

PR_SEND_MSRF_CHAT	PROCEDURE	50	          v_n_id_net,

PR_SEND_MSRF_CHAT	PROCEDURE	51	          v_cpp1_tz_oblast,

PR_SEND_MSRF_CHAT	PROCEDURE	52	          v_cpp1_city

PR_SEND_MSRF_CHAT	PROCEDURE	53	     FROM ms_rep_routes1 rr

PR_SEND_MSRF_CHAT	PROCEDURE	54	    WHERE rr.rb_kodtp = v_kod_tp;

PR_SEND_MSRF_CHAT	PROCEDURE	55	

PR_SEND_MSRF_CHAT	PROCEDURE	56	   SELECT DECODE (u.is_spd, 1, u.fio, NVL (p.comm, v_login)),

PR_SEND_MSRF_CHAT	PROCEDURE	57	          NVL (is_spd, 0) is_spd,

PR_SEND_MSRF_CHAT	PROCEDURE	58	          NVL (is_ma, 0) is_ma

PR_SEND_MSRF_CHAT	PROCEDURE	59	     INTO from_fio, spd, ma

PR_SEND_MSRF_CHAT	PROCEDURE	60	     FROM user_list u, routes_agents_pwd p

PR_SEND_MSRF_CHAT	PROCEDURE	61	    WHERE v_login = u.login AND u.login = p.login(+);

PR_SEND_MSRF_CHAT	PROCEDURE	62	

PR_SEND_MSRF_CHAT	PROCEDURE	63	   subj :=

PR_SEND_MSRF_CHAT	PROCEDURE	64	         'Задача по работе в ТЗ: '

PR_SEND_MSRF_CHAT	PROCEDURE	65	      || net

PR_SEND_MSRF_CHAT	PROCEDURE	66	      || ', '

PR_SEND_MSRF_CHAT	PROCEDURE	67	      || tpn

PR_SEND_MSRF_CHAT	PROCEDURE	68	      || ', '

PR_SEND_MSRF_CHAT	PROCEDURE	69	      || tpa

PR_SEND_MSRF_CHAT	PROCEDURE	70	      || ' от '

PR_SEND_MSRF_CHAT	PROCEDURE	71	      || TO_CHAR (v_dt, 'dd.mm.yyyy');

PR_SEND_MSRF_CHAT	PROCEDURE	72	

PR_SEND_MSRF_CHAT	PROCEDURE	73	   text :=

PR_SEND_MSRF_CHAT	PROCEDURE	74	         '<b>Заказчик: '

PR_SEND_MSRF_CHAT	PROCEDURE	75	      || v_ag_name

PR_SEND_MSRF_CHAT	PROCEDURE	76	      || '</b><br>'

PR_SEND_MSRF_CHAT	PROCEDURE	77	      || from_fio

PR_SEND_MSRF_CHAT	PROCEDURE	78	      || ' оставил(а) следующую задачу: '

PR_SEND_MSRF_CHAT	PROCEDURE	79	      || v_text;

PR_SEND_MSRF_CHAT	PROCEDURE	80	

PR_SEND_MSRF_CHAT	PROCEDURE	81	   FOR a IN (SELECT fn

PR_SEND_MSRF_CHAT	PROCEDURE	82	               FROM merch_spec_report_files_chat_f

PR_SEND_MSRF_CHAT	PROCEDURE	83	              WHERE chat_id = p_id)

PR_SEND_MSRF_CHAT	PROCEDURE	84	   LOOP

PR_SEND_MSRF_CHAT	PROCEDURE	85	      line :=

PR_SEND_MSRF_CHAT	PROCEDURE	86	            '<br><a target=_blank href="https://ps.avk.ua/files/merch_spec_report_files_chat_files/'

PR_SEND_MSRF_CHAT	PROCEDURE	87	         || a.fn

PR_SEND_MSRF_CHAT	PROCEDURE	88	         || '">

PR_SEND_MSRF_CHAT	PROCEDURE	89	         <img height=50px alt="'

PR_SEND_MSRF_CHAT	PROCEDURE	90	         || a.fn

PR_SEND_MSRF_CHAT	PROCEDURE	91	         || '" src="https://ps.avk.ua/files/merch_spec_report_files_chat_files/'

PR_SEND_MSRF_CHAT	PROCEDURE	92	         || a.fn

PR_SEND_MSRF_CHAT	PROCEDURE	93	         || '">

PR_SEND_MSRF_CHAT	PROCEDURE	94	         </a>';

PR_SEND_MSRF_CHAT	PROCEDURE	95	

PR_SEND_MSRF_CHAT	PROCEDURE	96	      IF LENGTH (subj || '<br>' || text || line) <= 1024

PR_SEND_MSRF_CHAT	PROCEDURE	97	      THEN

PR_SEND_MSRF_CHAT	PROCEDURE	98	         text := text || line;

PR_SEND_MSRF_CHAT	PROCEDURE	99	      END IF;

PR_SEND_MSRF_CHAT	PROCEDURE	100	   END LOOP;

PR_SEND_MSRF_CHAT	PROCEDURE	101	

PR_SEND_MSRF_CHAT	PROCEDURE	102	   INSERT INTO full_log (text, prg, login)

PR_SEND_MSRF_CHAT	PROCEDURE	103	        VALUES (subj || '<br>' || text, 'ms', v_login);

PR_SEND_MSRF_CHAT	PROCEDURE	104	

PR_SEND_MSRF_CHAT	PROCEDURE	105	   /*

PR_SEND_MSRF_CHAT	PROCEDURE	106	   СВМС не может создавать задачи.

PR_SEND_MSRF_CHAT	PROCEDURE	107	   если заказчик создает задачу или пишет в чат по задаче, то сообщение получают ответственные за ТЗ СВМС, и контакт АВК заказчика.

PR_SEND_MSRF_CHAT	PROCEDURE	108	   если МС-админ создает задачу или пишет в чат по задаче, то сообщение получают ответственные за ТЗ СВМС.

PR_SEND_MSRF_CHAT	PROCEDURE	109	   если СВМС пишет в чат по задаче, то сообщение получает заказчик, который создал задачу.

PR_SEND_MSRF_CHAT	PROCEDURE	110	   */

PR_SEND_MSRF_CHAT	PROCEDURE	111	

PR_SEND_MSRF_CHAT	PROCEDURE	112	   IF spd = 0 OR ma = 1

PR_SEND_MSRF_CHAT	PROCEDURE	113	   THEN

PR_SEND_MSRF_CHAT	PROCEDURE	114	      text :=

PR_SEND_MSRF_CHAT	PROCEDURE	115	            text

PR_SEND_MSRF_CHAT	PROCEDURE	116	         || '<br><a target="_blank" href="https://ps.avk.ua/?action=merch_report_4sv_file_chat&dates_list1='

PR_SEND_MSRF_CHAT	PROCEDURE	117	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_MSRF_CHAT	PROCEDURE	118	         || '&dates_list2='

PR_SEND_MSRF_CHAT	PROCEDURE	119	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_MSRF_CHAT	PROCEDURE	120	         || '&nets='

PR_SEND_MSRF_CHAT	PROCEDURE	121	         || v_n_id_net

PR_SEND_MSRF_CHAT	PROCEDURE	122	         || '&agent='

PR_SEND_MSRF_CHAT	PROCEDURE	123	         || v_ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	124	         || '&flt_chat=3&select=1">Перейти на сайт</a>';

PR_SEND_MSRF_CHAT	PROCEDURE	125	

PR_SEND_MSRF_CHAT	PROCEDURE	126	      FOR a

PR_SEND_MSRF_CHAT	PROCEDURE	127	         IN (SELECT DISTINCT u.e_mail

PR_SEND_MSRF_CHAT	PROCEDURE	128	               FROM ms_rep_routes1 rr, svms_oblast r, user_list u

PR_SEND_MSRF_CHAT	PROCEDURE	129	              WHERE     rr.rb_kodtp = v_kod_tp

PR_SEND_MSRF_CHAT	PROCEDURE	130	                    AND rr.cpp1_tz_oblast = r.oblast

PR_SEND_MSRF_CHAT	PROCEDURE	131	                    AND rr.rh_tn = u.tn

PR_SEND_MSRF_CHAT	PROCEDURE	132	                    AND u.e_mail IS NOT NULL

PR_SEND_MSRF_CHAT	PROCEDURE	133	                    AND rr.rb_ag_id = v_ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	134	                    AND rr.rh_tn = r.tn)

PR_SEND_MSRF_CHAT	PROCEDURE	135	      LOOP

PR_SEND_MSRF_CHAT	PROCEDURE	136	         PR_SENDMAIL_MS (a.e_mail, subj, text);

PR_SEND_MSRF_CHAT	PROCEDURE	137	      END LOOP;

PR_SEND_MSRF_CHAT	PROCEDURE	138	   END IF;

PR_SEND_MSRF_CHAT	PROCEDURE	139	

PR_SEND_MSRF_CHAT	PROCEDURE	140	   IF spd = 0 AND v_contact_avk IS NOT NULL

PR_SEND_MSRF_CHAT	PROCEDURE	141	   THEN

PR_SEND_MSRF_CHAT	PROCEDURE	142	      /*text :=

PR_SEND_MSRF_CHAT	PROCEDURE	143	            text

PR_SEND_MSRF_CHAT	PROCEDURE	144	         || '<br><a target="_blank" href="https://ps.avk.ua/?action=merch_report_4sv_file_chat&dates_list1='

PR_SEND_MSRF_CHAT	PROCEDURE	145	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_MSRF_CHAT	PROCEDURE	146	         || '&dates_list2='

PR_SEND_MSRF_CHAT	PROCEDURE	147	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_MSRF_CHAT	PROCEDURE	148	         || '&nets='

PR_SEND_MSRF_CHAT	PROCEDURE	149	         || v_n_id_net

PR_SEND_MSRF_CHAT	PROCEDURE	150	         || '&agent='

PR_SEND_MSRF_CHAT	PROCEDURE	151	         || v_ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	152	         || '&flt_chat=3&select=1">Перейти на сайт</a>';*/

PR_SEND_MSRF_CHAT	PROCEDURE	153	

PR_SEND_MSRF_CHAT	PROCEDURE	154	      --IF v_contact_avk IS NOT NULL

PR_SEND_MSRF_CHAT	PROCEDURE	155	      --THEN

PR_SEND_MSRF_CHAT	PROCEDURE	156	      PR_SENDMAIL_MS (v_contact_avk, subj, text);

PR_SEND_MSRF_CHAT	PROCEDURE	157	   --END IF;

PR_SEND_MSRF_CHAT	PROCEDURE	158	   END IF;

PR_SEND_MSRF_CHAT	PROCEDURE	159	

PR_SEND_MSRF_CHAT	PROCEDURE	160	   IF spd = 1 AND ma = 0

PR_SEND_MSRF_CHAT	PROCEDURE	161	   THEN

PR_SEND_MSRF_CHAT	PROCEDURE	162	      text :=

PR_SEND_MSRF_CHAT	PROCEDURE	163	            text

PR_SEND_MSRF_CHAT	PROCEDURE	164	         || '<br><a target="_blank" href="http://merchservice.com.ua/login.php?action=merch_report_file_chat&dates_list1='

PR_SEND_MSRF_CHAT	PROCEDURE	165	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_MSRF_CHAT	PROCEDURE	166	         || '&dates_list2='

PR_SEND_MSRF_CHAT	PROCEDURE	167	         || TO_CHAR (v_dt, 'dd.mm.yyyy')

PR_SEND_MSRF_CHAT	PROCEDURE	168	         || '&oblast='

PR_SEND_MSRF_CHAT	PROCEDURE	169	         || v_cpp1_tz_oblast

PR_SEND_MSRF_CHAT	PROCEDURE	170	         || '&city='

PR_SEND_MSRF_CHAT	PROCEDURE	171	         || v_cpp1_city

PR_SEND_MSRF_CHAT	PROCEDURE	172	         || '&flt_chat=2&select=1">Перейти на сайт</a>';

PR_SEND_MSRF_CHAT	PROCEDURE	173	

PR_SEND_MSRF_CHAT	PROCEDURE	174	      FOR a IN (SELECT DISTINCT p.email

PR_SEND_MSRF_CHAT	PROCEDURE	175	                  FROM ms_rep_routes1 rr,

PR_SEND_MSRF_CHAT	PROCEDURE	176	                       routes_logins_oblast r,

PR_SEND_MSRF_CHAT	PROCEDURE	177	                       routes_agents_pwd p,

PR_SEND_MSRF_CHAT	PROCEDURE	178	                       user_list u

PR_SEND_MSRF_CHAT	PROCEDURE	179	                 WHERE     rr.rb_kodtp = v_kod_tp

PR_SEND_MSRF_CHAT	PROCEDURE	180	                       AND rr.cpp1_tz_oblast = r.oblast

PR_SEND_MSRF_CHAT	PROCEDURE	181	                       AND r.login = p.login

PR_SEND_MSRF_CHAT	PROCEDURE	182	                       AND rr.rb_ag_id = p.ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	183	                       AND u.login = p.login

PR_SEND_MSRF_CHAT	PROCEDURE	184	                       AND p.email IS NOT NULL

PR_SEND_MSRF_CHAT	PROCEDURE	185	                       AND rr.rb_ag_id = v_ag_id

PR_SEND_MSRF_CHAT	PROCEDURE	186	                       AND p.login IN (SELECT DISTINCT login

PR_SEND_MSRF_CHAT	PROCEDURE	187	                                         FROM merch_spec_report_files_chat

PR_SEND_MSRF_CHAT	PROCEDURE	188	                                        WHERE msr_file_id = v_msr_file_id))

PR_SEND_MSRF_CHAT	PROCEDURE	189	      LOOP

PR_SEND_MSRF_CHAT	PROCEDURE	190	         PR_SENDMAIL_MS (a.email, subj, text);

PR_SEND_MSRF_CHAT	PROCEDURE	191	      END LOOP;

PR_SEND_MSRF_CHAT	PROCEDURE	192	   END IF;

PR_SEND_MSRF_CHAT	PROCEDURE	193	END;
PR_SENDMAIL_TEST	PROCEDURE	1	PROCEDURE        PR_SENDMAIL_TEST (

PR_SENDMAIL_TEST	PROCEDURE	2	   iaddr      IN VARCHAR2,

PR_SENDMAIL_TEST	PROCEDURE	3	   isubj      IN VARCHAR2,

PR_SENDMAIL_TEST	PROCEDURE	4	   imsg       IN CLOB,

PR_SENDMAIL_TEST	PROCEDURE	5	   iattach    IN BLOB := NULL,

PR_SENDMAIL_TEST	PROCEDURE	6	   iattachn   IN VARCHAR2 := NULL,

PR_SENDMAIL_TEST	PROCEDURE	7	   imime      IN VARCHAR2 := 'text/html')

PR_SENDMAIL_TEST	PROCEDURE	8	IS

PR_SENDMAIL_TEST	PROCEDURE	9	   ecode   NUMBER;

PR_SENDMAIL_TEST	PROCEDURE	10	   emesg   CLOB;

PR_SENDMAIL_TEST	PROCEDURE	11	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_SENDMAIL_TEST	PROCEDURE	12	BEGIN

PR_SENDMAIL_TEST	PROCEDURE	13	   IF iattach IS NOT NULL

PR_SENDMAIL_TEST	PROCEDURE	14	   THEN

PR_SENDMAIL_TEST	PROCEDURE	15	      MAIL_PKG.ADD_ATTACHMENT (iattach, iattachn, 'text/html');

PR_SENDMAIL_TEST	PROCEDURE	16	   END IF;

PR_SENDMAIL_TEST	PROCEDURE	17	

PR_SENDMAIL_TEST	PROCEDURE	18	   MAIL_PKG.SEND (

PR_SENDMAIL_TEST	PROCEDURE	19	      iaddr,

PR_SENDMAIL_TEST	PROCEDURE	20	      isubj,

PR_SENDMAIL_TEST	PROCEDURE	21	      imsg,

PR_SENDMAIL_TEST	PROCEDURE	22	      'Портал дирекции по продажам АВК <robot@avk.ua>',

PR_SENDMAIL_TEST	PROCEDURE	23	      'text/html');

PR_SENDMAIL_TEST	PROCEDURE	24	END;
PR_SENDMAIL_MS	PROCEDURE	1	PROCEDURE        "PR_SENDMAIL_MS" (iaddr   IN VARCHAR2,

PR_SENDMAIL_MS	PROCEDURE	2	                                                     isubj   IN VARCHAR2,

PR_SENDMAIL_MS	PROCEDURE	3	                                                     imsg    IN CLOB)

PR_SENDMAIL_MS	PROCEDURE	4	IS

PR_SENDMAIL_MS	PROCEDURE	5	   ecode   NUMBER;

PR_SENDMAIL_MS	PROCEDURE	6	   emesg   VARCHAR2 (200);

PR_SENDMAIL_MS	PROCEDURE	7	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_SENDMAIL_MS	PROCEDURE	8	BEGIN

PR_SENDMAIL_MS	PROCEDURE	9	   RETURN;

PR_SENDMAIL_MS	PROCEDURE	10	

PR_SENDMAIL_MS	PROCEDURE	11	   BEGIN

PR_SENDMAIL_MS	PROCEDURE	12	      IF iaddr IS NOT NULL

PR_SENDMAIL_MS	PROCEDURE	13	      THEN

PR_SENDMAIL_MS	PROCEDURE	14	         MAIL_PKG.SEND (

PR_SENDMAIL_MS	PROCEDURE	15	            iaddr,

PR_SENDMAIL_MS	PROCEDURE	16	            isubj,

PR_SENDMAIL_MS	PROCEDURE	17	            SUBSTR (imsg, 0, 16000),

PR_SENDMAIL_MS	PROCEDURE	18	            'Информационная система М-Сервис <contacts@merchservice.com.ua>',

PR_SENDMAIL_MS	PROCEDURE	19	            'text/html');

PR_SENDMAIL_MS	PROCEDURE	20	

PR_SENDMAIL_MS	PROCEDURE	21	         INSERT INTO full_log_mail (text)

PR_SENDMAIL_MS	PROCEDURE	22	                 VALUES (

PR_SENDMAIL_MS	PROCEDURE	23	                              'recipients => '

PR_SENDMAIL_MS	PROCEDURE	24	                           || REPLACE (REPLACE (iaddr, ';', ' '), ',', ' ')

PR_SENDMAIL_MS	PROCEDURE	25	                           || CHR (10)

PR_SENDMAIL_MS	PROCEDURE	26	                           || 'subject => '

PR_SENDMAIL_MS	PROCEDURE	27	                           || isubj

PR_SENDMAIL_MS	PROCEDURE	28	                           || CHR (10)

PR_SENDMAIL_MS	PROCEDURE	29	                           || 'MESSAGE => '

PR_SENDMAIL_MS	PROCEDURE	30	                           || imsg);

PR_SENDMAIL_MS	PROCEDURE	31	

PR_SENDMAIL_MS	PROCEDURE	32	         COMMIT;

PR_SENDMAIL_MS	PROCEDURE	33	      END IF;

PR_SENDMAIL_MS	PROCEDURE	34	   EXCEPTION

PR_SENDMAIL_MS	PROCEDURE	35	      WHEN OTHERS

PR_SENDMAIL_MS	PROCEDURE	36	      THEN

PR_SENDMAIL_MS	PROCEDURE	37	         ecode := SQLCODE;

PR_SENDMAIL_MS	PROCEDURE	38	         emesg := SQLERRM;

PR_SENDMAIL_MS	PROCEDURE	39	

PR_SENDMAIL_MS	PROCEDURE	40	         INSERT INTO full_log (prg, text)

PR_SENDMAIL_MS	PROCEDURE	41	                 VALUES (

PR_SENDMAIL_MS	PROCEDURE	42	                           'error',

PR_SENDMAIL_MS	PROCEDURE	43	                           SUBSTR (

PR_SENDMAIL_MS	PROCEDURE	44	                                 emesg

PR_SENDMAIL_MS	PROCEDURE	45	                              || CHR (10)

PR_SENDMAIL_MS	PROCEDURE	46	                              || 'recipients => '

PR_SENDMAIL_MS	PROCEDURE	47	                              || REPLACE (REPLACE (iaddr, ';', ' '), ',', ' ')

PR_SENDMAIL_MS	PROCEDURE	48	                              || CHR (10)

PR_SENDMAIL_MS	PROCEDURE	49	                              || 'subject => '

PR_SENDMAIL_MS	PROCEDURE	50	                              || isubj

PR_SENDMAIL_MS	PROCEDURE	51	                              || CHR (10)

PR_SENDMAIL_MS	PROCEDURE	52	                              || 'MESSAGE => '

PR_SENDMAIL_MS	PROCEDURE	53	                              || imsg,

PR_SENDMAIL_MS	PROCEDURE	54	                              0,

PR_SENDMAIL_MS	PROCEDURE	55	                              4000));

PR_SENDMAIL_MS	PROCEDURE	56	

PR_SENDMAIL_MS	PROCEDURE	57	         COMMIT;

PR_SENDMAIL_MS	PROCEDURE	58	   END;

PR_SENDMAIL_MS	PROCEDURE	59	END;
PR_SENDMAIL	PROCEDURE	1	PROCEDURE        "PR_SENDMAIL" (

PR_SENDMAIL	PROCEDURE	2	   iaddr      IN VARCHAR2,

PR_SENDMAIL	PROCEDURE	3	   isubj      IN VARCHAR2,

PR_SENDMAIL	PROCEDURE	4	   imsg       IN CLOB,

PR_SENDMAIL	PROCEDURE	5	   iattach    IN BLOB := NULL,

PR_SENDMAIL	PROCEDURE	6	   iattachn   IN VARCHAR2 := NULL,

PR_SENDMAIL	PROCEDURE	7	   imime      IN VARCHAR2 := 'text/html',

PR_SENDMAIL	PROCEDURE	8	   isender    IN VARCHAR2 := 'Портал дирекции по продажам АВК <robot@avk.ua>')

PR_SENDMAIL	PROCEDURE	9	IS

PR_SENDMAIL	PROCEDURE	10	   ecode   NUMBER;

PR_SENDMAIL	PROCEDURE	11	   emesg   CLOB;

PR_SENDMAIL	PROCEDURE	12	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_SENDMAIL	PROCEDURE	13	BEGIN

PR_SENDMAIL	PROCEDURE	14	   BEGIN

PR_SENDMAIL	PROCEDURE	15	      IF iaddr IS NOT NULL

PR_SENDMAIL	PROCEDURE	16	      THEN

PR_SENDMAIL	PROCEDURE	17	         IF iattach IS NOT NULL

PR_SENDMAIL	PROCEDURE	18	         THEN

PR_SENDMAIL	PROCEDURE	19	            MAIL_PKG.ADD_ATTACHMENT (iattach, iattachn, imime);

PR_SENDMAIL	PROCEDURE	20	         END IF;

PR_SENDMAIL	PROCEDURE	21	

PR_SENDMAIL	PROCEDURE	22	         MAIL_PKG.SEND (iaddr,

PR_SENDMAIL	PROCEDURE	23	                        isubj,

PR_SENDMAIL	PROCEDURE	24	                        SUBSTR (imsg, 0, 16000),

PR_SENDMAIL	PROCEDURE	25	                        isender,

PR_SENDMAIL	PROCEDURE	26	                        'text/html');

PR_SENDMAIL	PROCEDURE	27	

PR_SENDMAIL	PROCEDURE	28	         INSERT INTO full_log_mail (text)

PR_SENDMAIL	PROCEDURE	29	                 VALUES (

PR_SENDMAIL	PROCEDURE	30	                              'recipients => '

PR_SENDMAIL	PROCEDURE	31	                           || REPLACE (REPLACE (iaddr, ';', ' '), ',', ' ')

PR_SENDMAIL	PROCEDURE	32	                           || CHR (10)

PR_SENDMAIL	PROCEDURE	33	                           || 'subject => '

PR_SENDMAIL	PROCEDURE	34	                           || isubj

PR_SENDMAIL	PROCEDURE	35	                           || CHR (10)

PR_SENDMAIL	PROCEDURE	36	                           || 'MESSAGE => '

PR_SENDMAIL	PROCEDURE	37	                           || imsg);

PR_SENDMAIL	PROCEDURE	38	

PR_SENDMAIL	PROCEDURE	39	         COMMIT;

PR_SENDMAIL	PROCEDURE	40	      END IF;

PR_SENDMAIL	PROCEDURE	41	   EXCEPTION

PR_SENDMAIL	PROCEDURE	42	      WHEN OTHERS

PR_SENDMAIL	PROCEDURE	43	      THEN

PR_SENDMAIL	PROCEDURE	44	         ecode := SQLCODE;

PR_SENDMAIL	PROCEDURE	45	         emesg := SQLERRM;

PR_SENDMAIL	PROCEDURE	46	

PR_SENDMAIL	PROCEDURE	47	         INSERT INTO full_log (prg, text)

PR_SENDMAIL	PROCEDURE	48	                 VALUES (

PR_SENDMAIL	PROCEDURE	49	                           'error',

PR_SENDMAIL	PROCEDURE	50	                           SUBSTR (

PR_SENDMAIL	PROCEDURE	51	                                 emesg

PR_SENDMAIL	PROCEDURE	52	                              || CHR (10)

PR_SENDMAIL	PROCEDURE	53	                              || 'recipients => '

PR_SENDMAIL	PROCEDURE	54	                              || REPLACE (REPLACE (iaddr, ';', ' '),

PR_SENDMAIL	PROCEDURE	55	                                          ',',

PR_SENDMAIL	PROCEDURE	56	                                          ' ')

PR_SENDMAIL	PROCEDURE	57	                              || CHR (10)

PR_SENDMAIL	PROCEDURE	58	                              || 'subject => '

PR_SENDMAIL	PROCEDURE	59	                              || isubj

PR_SENDMAIL	PROCEDURE	60	                              || CHR (10)

PR_SENDMAIL	PROCEDURE	61	                              || 'MESSAGE => '

PR_SENDMAIL	PROCEDURE	62	                              || imsg,

PR_SENDMAIL	PROCEDURE	63	                              0,

PR_SENDMAIL	PROCEDURE	64	                              4000));

PR_SENDMAIL	PROCEDURE	65	

PR_SENDMAIL	PROCEDURE	66	         COMMIT;

PR_SENDMAIL	PROCEDURE	67	   END;

PR_SENDMAIL	PROCEDURE	68	END;
PR_REPLACE_TS	PROCEDURE	1	PROCEDURE        pr_replace_ts (p_from     IN INTEGER,

PR_REPLACE_TS	PROCEDURE	2	                                                  p_to       IN INTEGER,

PR_REPLACE_TS	PROCEDURE	3	                                                  p_dpt_id      INTEGER)

PR_REPLACE_TS	PROCEDURE	4	IS

PR_REPLACE_TS	PROCEDURE	5	   from_tabnum   INTEGER;

PR_REPLACE_TS	PROCEDURE	6	   to_tabnum     INTEGER;

PR_REPLACE_TS	PROCEDURE	7	   sql_text      VARCHAR2 (10000);

PR_REPLACE_TS	PROCEDURE	8	   v_from        INTEGER;

PR_REPLACE_TS	PROCEDURE	9	   v_to          INTEGER;

PR_REPLACE_TS	PROCEDURE	10	   dpt_needed    INTEGER;

PR_REPLACE_TS	PROCEDURE	11	   ecode         NUMBER;

PR_REPLACE_TS	PROCEDURE	12	   emesg         VARCHAR2 (200);

PR_REPLACE_TS	PROCEDURE	13	   fio_from      VARCHAR2 (200);

PR_REPLACE_TS	PROCEDURE	14	   fio_to        VARCHAR2 (200);

PR_REPLACE_TS	PROCEDURE	15	BEGIN

PR_REPLACE_TS	PROCEDURE	16	   SELECT tab_num, fio

PR_REPLACE_TS	PROCEDURE	17	     INTO from_tabnum, fio_from

PR_REPLACE_TS	PROCEDURE	18	     FROM user_list

PR_REPLACE_TS	PROCEDURE	19	    WHERE tn = p_from;

PR_REPLACE_TS	PROCEDURE	20	

PR_REPLACE_TS	PROCEDURE	21	   SELECT tab_num, fio

PR_REPLACE_TS	PROCEDURE	22	     INTO to_tabnum, fio_to

PR_REPLACE_TS	PROCEDURE	23	     FROM user_list

PR_REPLACE_TS	PROCEDURE	24	    WHERE tn = p_to;

PR_REPLACE_TS	PROCEDURE	25	

PR_REPLACE_TS	PROCEDURE	26	   INSERT INTO full_log (text, prg)

PR_REPLACE_TS	PROCEDURE	27	           VALUES (

PR_REPLACE_TS	PROCEDURE	28	                        'заменил ТС '

PR_REPLACE_TS	PROCEDURE	29	                     || fio_from

PR_REPLACE_TS	PROCEDURE	30	                     || ' '

PR_REPLACE_TS	PROCEDURE	31	                     || p_from

PR_REPLACE_TS	PROCEDURE	32	                     || ' на '

PR_REPLACE_TS	PROCEDURE	33	                     || fio_to

PR_REPLACE_TS	PROCEDURE	34	                     || ' '

PR_REPLACE_TS	PROCEDURE	35	                     || p_to,

PR_REPLACE_TS	PROCEDURE	36	                     'replace_ts');

PR_REPLACE_TS	PROCEDURE	37	

PR_REPLACE_TS	PROCEDURE	38	   COMMIT;

PR_REPLACE_TS	PROCEDURE	39	

PR_REPLACE_TS	PROCEDURE	40	

PR_REPLACE_TS	PROCEDURE	41	   FOR a IN (  SELECT *

PR_REPLACE_TS	PROCEDURE	42	                 FROM replace_ts

PR_REPLACE_TS	PROCEDURE	43	             ORDER BY action_name, table_name, field_name)

PR_REPLACE_TS	PROCEDURE	44	   LOOP

PR_REPLACE_TS	PROCEDURE	45	      BEGIN

PR_REPLACE_TS	PROCEDURE	46	         SELECT DECODE (a.field_name, 'tn', p_to, to_tabnum)

PR_REPLACE_TS	PROCEDURE	47	           INTO v_to

PR_REPLACE_TS	PROCEDURE	48	           FROM DUAL;

PR_REPLACE_TS	PROCEDURE	49	

PR_REPLACE_TS	PROCEDURE	50	         SELECT DECODE (a.field_name, 'tn', p_from, from_tabnum)

PR_REPLACE_TS	PROCEDURE	51	           INTO v_from

PR_REPLACE_TS	PROCEDURE	52	           FROM DUAL;

PR_REPLACE_TS	PROCEDURE	53	

PR_REPLACE_TS	PROCEDURE	54	         SELECT COUNT (*)

PR_REPLACE_TS	PROCEDURE	55	           INTO dpt_needed

PR_REPLACE_TS	PROCEDURE	56	           FROM user_tab_columns

PR_REPLACE_TS	PROCEDURE	57	          WHERE     LOWER (table_name) = a.table_name

PR_REPLACE_TS	PROCEDURE	58	                AND LOWER (column_name) = 'dpt_id';

PR_REPLACE_TS	PROCEDURE	59	

PR_REPLACE_TS	PROCEDURE	60	         sql_text :=

PR_REPLACE_TS	PROCEDURE	61	               'update '

PR_REPLACE_TS	PROCEDURE	62	            || a.table_name

PR_REPLACE_TS	PROCEDURE	63	            || ' set '

PR_REPLACE_TS	PROCEDURE	64	            || a.field_name

PR_REPLACE_TS	PROCEDURE	65	            || '='

PR_REPLACE_TS	PROCEDURE	66	            || v_to

PR_REPLACE_TS	PROCEDURE	67	            || ' where '

PR_REPLACE_TS	PROCEDURE	68	            || a.field_name

PR_REPLACE_TS	PROCEDURE	69	            || '='

PR_REPLACE_TS	PROCEDURE	70	            || v_from;

PR_REPLACE_TS	PROCEDURE	71	

PR_REPLACE_TS	PROCEDURE	72	         IF dpt_needed = 1

PR_REPLACE_TS	PROCEDURE	73	         THEN

PR_REPLACE_TS	PROCEDURE	74	            sql_text := sql_text || ' and dpt_id=' || p_dpt_id;

PR_REPLACE_TS	PROCEDURE	75	         END IF;

PR_REPLACE_TS	PROCEDURE	76	

PR_REPLACE_TS	PROCEDURE	77	         EXECUTE IMMEDIATE sql_text;

PR_REPLACE_TS	PROCEDURE	78	

PR_REPLACE_TS	PROCEDURE	79	         COMMIT;

PR_REPLACE_TS	PROCEDURE	80	

PR_REPLACE_TS	PROCEDURE	81	         /*DBMS_OUTPUT.put_line (sql_text);*/

PR_REPLACE_TS	PROCEDURE	82	

PR_REPLACE_TS	PROCEDURE	83	         /*INSERT INTO full_log (text, prg)

PR_REPLACE_TS	PROCEDURE	84	                 VALUES (

PR_REPLACE_TS	PROCEDURE	85	                              'заменил ТС '

PR_REPLACE_TS	PROCEDURE	86	                           || fio_from

PR_REPLACE_TS	PROCEDURE	87	                           || ' '

PR_REPLACE_TS	PROCEDURE	88	                           || p_from

PR_REPLACE_TS	PROCEDURE	89	                           || ' на '

PR_REPLACE_TS	PROCEDURE	90	                           || fio_to

PR_REPLACE_TS	PROCEDURE	91	                           || ' '

PR_REPLACE_TS	PROCEDURE	92	                           || p_to

PR_REPLACE_TS	PROCEDURE	93	                           || ' '

PR_REPLACE_TS	PROCEDURE	94	                           || sql_text,

PR_REPLACE_TS	PROCEDURE	95	                           'replace_ts');*/

PR_REPLACE_TS	PROCEDURE	96	

PR_REPLACE_TS	PROCEDURE	97	         COMMIT;

PR_REPLACE_TS	PROCEDURE	98	      EXCEPTION

PR_REPLACE_TS	PROCEDURE	99	         WHEN OTHERS

PR_REPLACE_TS	PROCEDURE	100	         THEN

PR_REPLACE_TS	PROCEDURE	101	            ecode := SQLCODE;

PR_REPLACE_TS	PROCEDURE	102	            emesg := SQLERRM;

PR_REPLACE_TS	PROCEDURE	103	

PR_REPLACE_TS	PROCEDURE	104	            INSERT INTO full_log (prg, text)

PR_REPLACE_TS	PROCEDURE	105	                    VALUES (

PR_REPLACE_TS	PROCEDURE	106	                              'error',

PR_REPLACE_TS	PROCEDURE	107	                                 'pr_replace_ts '

PR_REPLACE_TS	PROCEDURE	108	                              || emesg

PR_REPLACE_TS	PROCEDURE	109	                              || CHR (10)

PR_REPLACE_TS	PROCEDURE	110	                              || sql_text);

PR_REPLACE_TS	PROCEDURE	111	

PR_REPLACE_TS	PROCEDURE	112	            COMMIT;

PR_REPLACE_TS	PROCEDURE	113	      END;

PR_REPLACE_TS	PROCEDURE	114	   END LOOP;

PR_REPLACE_TS	PROCEDURE	115	END;
PR_PROMO_OK_SZ_CREATE	PROCEDURE	1	PROCEDURE        PR_PROMO_OK_SZ_CREATE (p_tn   IN INTEGER,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	2	                                                          p_y    IN INTEGER,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	3	                                                          p_m    IN INTEGER)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	4	AS

PR_PROMO_OK_SZ_CREATE	PROCEDURE	5	   v_head     VARCHAR2 (4000);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	6	   v_body     VARCHAR2 (4000);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	7	   v_sz_id    INTEGER;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	8	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	9	   v_period   VARCHAR2 (255);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	10	   v_text     VARCHAR2 (4000);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	11	   v_fn       VARCHAR2 (255);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	12	BEGIN

PR_PROMO_OK_SZ_CREATE	PROCEDURE	13	   SELECT seq_all.NEXTVAL INTO v_sz_id FROM DUAL;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	14	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	15	   SELECT MAX (mt || ' ' || y)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	16	     INTO v_period

PR_PROMO_OK_SZ_CREATE	PROCEDURE	17	     FROM calendar

PR_PROMO_OK_SZ_CREATE	PROCEDURE	18	    WHERE y = p_y AND my = p_m;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	19	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	20	   SELECT text, fn

PR_PROMO_OK_SZ_CREATE	PROCEDURE	21	     INTO v_text, v_fn

PR_PROMO_OK_SZ_CREATE	PROCEDURE	22	     FROM promo_nm

PR_PROMO_OK_SZ_CREATE	PROCEDURE	23	    WHERE tn = p_tn AND year = p_y AND month = p_m;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	24	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	25	   v_head := 'Перечисление промо КК, ' || v_period;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	26	   v_body :=

PR_PROMO_OK_SZ_CREATE	PROCEDURE	27	         'Прошу утвердить перечисления промо бюджета на '

PR_PROMO_OK_SZ_CREATE	PROCEDURE	28	      || v_period

PR_PROMO_OK_SZ_CREATE	PROCEDURE	29	      || '<br>'

PR_PROMO_OK_SZ_CREATE	PROCEDURE	30	      || v_text;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	31	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	32	   INSERT INTO sz (id,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	33	                   tn,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	34	                   recipient,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	35	                   head,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	36	                   body,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	37	                   cat)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	38	        VALUES (v_sz_id,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	39	                p_tn,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	40	                2923402273,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	41	                v_head,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	42	                v_body,

PR_PROMO_OK_SZ_CREATE	PROCEDURE	43	                927680);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	44	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	45	   COMMIT;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	46	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	47	   INSERT INTO sz_files (sz_id, fn)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	48	        VALUES (v_sz_id, v_fn);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	49	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	50	   COMMIT;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	51	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	52	   INSERT INTO sz_accept (sz_id, tn)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	53	        VALUES (v_sz_id, 2898314783);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	54	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	55	   COMMIT;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	56	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	57	   /*INSERT INTO sz_accept (sz_id, tn)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	58	        VALUES (v_sz_id, 2750113295);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	59	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	60	   COMMIT;*/

PR_PROMO_OK_SZ_CREATE	PROCEDURE	61	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	62	   INSERT INTO sz_accept (sz_id, tn)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	63	        VALUES (v_sz_id, 2923402273);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	64	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	65	   COMMIT;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	66	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	67	   INSERT INTO sz_executors (sz_id, tn)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	68	        VALUES (v_sz_id, 2970);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	69	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	70	   COMMIT;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	71	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	72	   INSERT INTO sz_executors (sz_id, tn)

PR_PROMO_OK_SZ_CREATE	PROCEDURE	73	        VALUES (v_sz_id, 2741600286);

PR_PROMO_OK_SZ_CREATE	PROCEDURE	74	

PR_PROMO_OK_SZ_CREATE	PROCEDURE	75	   COMMIT;

PR_PROMO_OK_SZ_CREATE	PROCEDURE	76	END;
PR_OL_STAFF_RECREATE	PROCEDURE	1	PROCEDURE        pr_ol_staff_recreate (p_dpt_id IN INTEGER)

PR_OL_STAFF_RECREATE	PROCEDURE	2	IS

PR_OL_STAFF_RECREATE	PROCEDURE	3	BEGIN

PR_OL_STAFF_RECREATE	PROCEDURE	4	   FOR a

PR_OL_STAFF_RECREATE	PROCEDURE	5	      IN (  SELECT s.free_staff_id

PR_OL_STAFF_RECREATE	PROCEDURE	6	              FROM ol_staff s, free_staff f, user_list u

PR_OL_STAFF_RECREATE	PROCEDURE	7	             WHERE     f.id = s.free_staff_id

PR_OL_STAFF_RECREATE	PROCEDURE	8	                   AND u.tn = f.tn

PR_OL_STAFF_RECREATE	PROCEDURE	9	                   AND u.dpt_id = p_dpt_id

PR_OL_STAFF_RECREATE	PROCEDURE	10	            HAVING COUNT (*) <> NVL (SUM (s.accepted), 0)

PR_OL_STAFF_RECREATE	PROCEDURE	11	          GROUP BY s.free_staff_id)

PR_OL_STAFF_RECREATE	PROCEDURE	12	   LOOP

PR_OL_STAFF_RECREATE	PROCEDURE	13	      pr_ol_staff_create (a.free_staff_id);

PR_OL_STAFF_RECREATE	PROCEDURE	14	   END LOOP;

PR_OL_STAFF_RECREATE	PROCEDURE	15	

PR_OL_STAFF_RECREATE	PROCEDURE	16	   COMMIT;

PR_OL_STAFF_RECREATE	PROCEDURE	17	END;
PR_OL_STAFF_CREATE	PROCEDURE	1	PROCEDURE        "PR_OL_STAFF_CREATE" (id_ IN INTEGER)

PR_OL_STAFF_CREATE	PROCEDURE	2	IS

PR_OL_STAFF_CREATE	PROCEDURE	3	   s       VARCHAR (1024);

PR_OL_STAFF_CREATE	PROCEDURE	4	   is_nm   INTEGER;

PR_OL_STAFF_CREATE	PROCEDURE	5	   c       INTEGER;

PR_OL_STAFF_CREATE	PROCEDURE	6	BEGIN

PR_OL_STAFF_CREATE	PROCEDURE	7	   s := '';

PR_OL_STAFF_CREATE	PROCEDURE	8	

PR_OL_STAFF_CREATE	PROCEDURE	9	   DELETE FROM ol_staff

PR_OL_STAFF_CREATE	PROCEDURE	10	         WHERE free_staff_id = id_ AND NVL (accepted, 0) <> 1;

PR_OL_STAFF_CREATE	PROCEDURE	11	

PR_OL_STAFF_CREATE	PROCEDURE	12	   COMMIT;

PR_OL_STAFF_CREATE	PROCEDURE	13	

PR_OL_STAFF_CREATE	PROCEDURE	14	   FOR a IN (SELECT f.*, u.fio, u.e_mail

PR_OL_STAFF_CREATE	PROCEDURE	15	               FROM free_staff f, user_list u

PR_OL_STAFF_CREATE	PROCEDURE	16	              WHERE f.id = id_ AND u.tn = f.tn)

PR_OL_STAFF_CREATE	PROCEDURE	17	   LOOP

PR_OL_STAFF_CREATE	PROCEDURE	18	      is_nm := 0;

PR_OL_STAFF_CREATE	PROCEDURE	19	

PR_OL_STAFF_CREATE	PROCEDURE	20	

PR_OL_STAFF_CREATE	PROCEDURE	21	      FOR b

PR_OL_STAFF_CREATE	PROCEDURE	22	         IN (  SELECT z.tn,

PR_OL_STAFF_CREATE	PROCEDURE	23	                      z.num,

PR_OL_STAFF_CREATE	PROCEDURE	24	                      u.e_mail,

PR_OL_STAFF_CREATE	PROCEDURE	25	                      z.cat,

PR_OL_STAFF_CREATE	PROCEDURE	26	                      z.fio,

PR_OL_STAFF_CREATE	PROCEDURE	27	                      z.gruppa,

PR_OL_STAFF_CREATE	PROCEDURE	28	                      z.comm,

PR_OL_STAFF_CREATE	PROCEDURE	29	                      z.is_nm,

PR_OL_STAFF_CREATE	PROCEDURE	30	                      z.is_nmkk,

PR_OL_STAFF_CREATE	PROCEDURE	31	                      z.is_nmms,

PR_OL_STAFF_CREATE	PROCEDURE	32	                      z.lev,

PR_OL_STAFF_CREATE	PROCEDURE	33	                      z.name

PR_OL_STAFF_CREATE	PROCEDURE	34	                 FROM (SELECT tn,

PR_OL_STAFF_CREATE	PROCEDURE	35	                              num,

PR_OL_STAFF_CREATE	PROCEDURE	36	                              cat,

PR_OL_STAFF_CREATE	PROCEDURE	37	                              fio,

PR_OL_STAFF_CREATE	PROCEDURE	38	                              gruppa,

PR_OL_STAFF_CREATE	PROCEDURE	39	                              comm,

PR_OL_STAFF_CREATE	PROCEDURE	40	                              is_nm,

PR_OL_STAFF_CREATE	PROCEDURE	41	                              is_nmkk,

PR_OL_STAFF_CREATE	PROCEDURE	42	                              is_nmms,

PR_OL_STAFF_CREATE	PROCEDURE	43	                              lev,

PR_OL_STAFF_CREATE	PROCEDURE	44	                              name

PR_OL_STAFF_CREATE	PROCEDURE	45	                         FROM (    SELECT z.exp_tn tn,

PR_OL_STAFF_CREATE	PROCEDURE	46	                                          900 + LEVEL num,

PR_OL_STAFF_CREATE	PROCEDURE	47	                                          'Руководители' cat,

PR_OL_STAFF_CREATE	PROCEDURE	48	                                          u1.fio,

PR_OL_STAFF_CREATE	PROCEDURE	49	                                          900 + LEVEL gruppa,

PR_OL_STAFF_CREATE	PROCEDURE	50	                                          NULL comm,

PR_OL_STAFF_CREATE	PROCEDURE	51	                                          u1.is_nm,

PR_OL_STAFF_CREATE	PROCEDURE	52	                                          u1.is_nmkk,

PR_OL_STAFF_CREATE	PROCEDURE	53	                                          u1.is_nmms,

PR_OL_STAFF_CREATE	PROCEDURE	54	                                          LEVEL lev,

PR_OL_STAFF_CREATE	PROCEDURE	55	                                          'Руководители' name

PR_OL_STAFF_CREATE	PROCEDURE	56	                                     FROM (SELECT *

PR_OL_STAFF_CREATE	PROCEDURE	57	                                             FROM emp_exp

PR_OL_STAFF_CREATE	PROCEDURE	58	                                            WHERE full = 1) z,

PR_OL_STAFF_CREATE	PROCEDURE	59	                                          user_list u1

PR_OL_STAFF_CREATE	PROCEDURE	60	                                    WHERE     z.exp_tn = u1.tn

PR_OL_STAFF_CREATE	PROCEDURE	61	                                          AND z.exp_tn <> 2923402273

PR_OL_STAFF_CREATE	PROCEDURE	62	                               CONNECT BY PRIOR z.exp_tn = z.emp_tn

PR_OL_STAFF_CREATE	PROCEDURE	63	                               START WITH z.emp_tn = a.tn)

PR_OL_STAFF_CREATE	PROCEDURE	64	                        WHERE tn NOT IN (SELECT f.tn

PR_OL_STAFF_CREATE	PROCEDURE	65	                                           FROM ol f, user_list u1

PR_OL_STAFF_CREATE	PROCEDURE	66	                                          WHERE     f.dpt_id =

PR_OL_STAFF_CREATE	PROCEDURE	67	                                                       (SELECT dpt_id

PR_OL_STAFF_CREATE	PROCEDURE	68	                                                          FROM user_list

PR_OL_STAFF_CREATE	PROCEDURE	69	                                                         WHERE tn = a.tn)

PR_OL_STAFF_CREATE	PROCEDURE	70	                                                AND u1.tn = f.tn)

PR_OL_STAFF_CREATE	PROCEDURE	71	                       UNION

PR_OL_STAFF_CREATE	PROCEDURE	72	                       SELECT f.tn,

PR_OL_STAFF_CREATE	PROCEDURE	73	                              f.num,

PR_OL_STAFF_CREATE	PROCEDURE	74	                              f.cat,

PR_OL_STAFF_CREATE	PROCEDURE	75	                              u1.fio,

PR_OL_STAFF_CREATE	PROCEDURE	76	                              g.gr,

PR_OL_STAFF_CREATE	PROCEDURE	77	                              f.comm,

PR_OL_STAFF_CREATE	PROCEDURE	78	                              u1.is_nm,

PR_OL_STAFF_CREATE	PROCEDURE	79	                              u1.is_nmkk,

PR_OL_STAFF_CREATE	PROCEDURE	80	                              u1.is_nmms,

PR_OL_STAFF_CREATE	PROCEDURE	81	                              0,

PR_OL_STAFF_CREATE	PROCEDURE	82	                              g.name

PR_OL_STAFF_CREATE	PROCEDURE	83	                         FROM ol f, user_list u1, ol_gr g

PR_OL_STAFF_CREATE	PROCEDURE	84	                        WHERE     f.dpt_id = (SELECT dpt_id

PR_OL_STAFF_CREATE	PROCEDURE	85	                                                FROM user_list

PR_OL_STAFF_CREATE	PROCEDURE	86	                                               WHERE tn = a.tn)

PR_OL_STAFF_CREATE	PROCEDURE	87	                              AND g.dpt_id = f.dpt_id

PR_OL_STAFF_CREATE	PROCEDURE	88	                              AND f.gruppa = g.id

PR_OL_STAFF_CREATE	PROCEDURE	89	                              AND u1.tn = f.tn) z,

PR_OL_STAFF_CREATE	PROCEDURE	90	                      user_list u

PR_OL_STAFF_CREATE	PROCEDURE	91	                WHERE z.tn = u.tn

PR_OL_STAFF_CREATE	PROCEDURE	92	             ORDER BY gruppa, num)

PR_OL_STAFF_CREATE	PROCEDURE	93	      LOOP

PR_OL_STAFF_CREATE	PROCEDURE	94	         IF (   NVL (b.is_nm, 0) = 1

PR_OL_STAFF_CREATE	PROCEDURE	95	             OR NVL (b.is_nmkk, 0) = 1

PR_OL_STAFF_CREATE	PROCEDURE	96	             OR NVL (b.is_nmms, 0) = 1)

PR_OL_STAFF_CREATE	PROCEDURE	97	         THEN

PR_OL_STAFF_CREATE	PROCEDURE	98	            is_nm := 1;

PR_OL_STAFF_CREATE	PROCEDURE	99	         END IF;

PR_OL_STAFF_CREATE	PROCEDURE	100	

PR_OL_STAFF_CREATE	PROCEDURE	101	         IF b.lev <= 2 OR (b.lev > 2 AND is_nm = 0)

PR_OL_STAFF_CREATE	PROCEDURE	102	         THEN

PR_OL_STAFF_CREATE	PROCEDURE	103	            IF b.gruppa = 1

PR_OL_STAFF_CREATE	PROCEDURE	104	            THEN

PR_OL_STAFF_CREATE	PROCEDURE	105	               pr_sendmail (

PR_OL_STAFF_CREATE	PROCEDURE	106	                  b.e_mail,

PR_OL_STAFF_CREATE	PROCEDURE	107	                     'Сформирован обходной лист по увольняемому сотруднику - '

PR_OL_STAFF_CREATE	PROCEDURE	108	                  || a.fio,

PR_OL_STAFF_CREATE	PROCEDURE	109	                     'Сформирован обходной лист по увольняемому сотруднику - '

PR_OL_STAFF_CREATE	PROCEDURE	110	                  || a.fio

PR_OL_STAFF_CREATE	PROCEDURE	111	                  || '.<br>Вы являетесь участником процесса заполнения обходного листа в разделе '

PR_OL_STAFF_CREATE	PROCEDURE	112	                  || b.cat);

PR_OL_STAFF_CREATE	PROCEDURE	113	            END IF;

PR_OL_STAFF_CREATE	PROCEDURE	114	

PR_OL_STAFF_CREATE	PROCEDURE	115	            SELECT COUNT (*)

PR_OL_STAFF_CREATE	PROCEDURE	116	              INTO c

PR_OL_STAFF_CREATE	PROCEDURE	117	              FROM ol_staff

PR_OL_STAFF_CREATE	PROCEDURE	118	             WHERE free_staff_id = id_ AND tn = b.tn;

PR_OL_STAFF_CREATE	PROCEDURE	119	

PR_OL_STAFF_CREATE	PROCEDURE	120	            IF c = 0

PR_OL_STAFF_CREATE	PROCEDURE	121	            THEN

PR_OL_STAFF_CREATE	PROCEDURE	122	               INSERT INTO ol_staff (tn,

PR_OL_STAFF_CREATE	PROCEDURE	123	                                     free_staff_id,

PR_OL_STAFF_CREATE	PROCEDURE	124	                                     num,

PR_OL_STAFF_CREATE	PROCEDURE	125	                                     fio,

PR_OL_STAFF_CREATE	PROCEDURE	126	                                     gruppa,

PR_OL_STAFF_CREATE	PROCEDURE	127	                                     text,

PR_OL_STAFF_CREATE	PROCEDURE	128	                                     cat,

PR_OL_STAFF_CREATE	PROCEDURE	129	                                     name)

PR_OL_STAFF_CREATE	PROCEDURE	130	                    VALUES (b.tn,

PR_OL_STAFF_CREATE	PROCEDURE	131	                            id_,

PR_OL_STAFF_CREATE	PROCEDURE	132	                            b.num,

PR_OL_STAFF_CREATE	PROCEDURE	133	                            b.fio,

PR_OL_STAFF_CREATE	PROCEDURE	134	                            b.gruppa,

PR_OL_STAFF_CREATE	PROCEDURE	135	                            b.comm,

PR_OL_STAFF_CREATE	PROCEDURE	136	                            b.cat,

PR_OL_STAFF_CREATE	PROCEDURE	137	                            b.name);

PR_OL_STAFF_CREATE	PROCEDURE	138	

PR_OL_STAFF_CREATE	PROCEDURE	139	               COMMIT;

PR_OL_STAFF_CREATE	PROCEDURE	140	            END IF;

PR_OL_STAFF_CREATE	PROCEDURE	141	

PR_OL_STAFF_CREATE	PROCEDURE	142	            s := s || b.fio || '<br>';

PR_OL_STAFF_CREATE	PROCEDURE	143	         END IF;

PR_OL_STAFF_CREATE	PROCEDURE	144	      END LOOP;

PR_OL_STAFF_CREATE	PROCEDURE	145	

PR_OL_STAFF_CREATE	PROCEDURE	146	      FOR a1

PR_OL_STAFF_CREATE	PROCEDURE	147	         IN (SELECT u.e_mail

PR_OL_STAFF_CREATE	PROCEDURE	148	               FROM ol_staff os, user_list u

PR_OL_STAFF_CREATE	PROCEDURE	149	              WHERE os.free_staff_id = id_ AND os.num = 901 AND os.tn = u.tn)

PR_OL_STAFF_CREATE	PROCEDURE	150	      LOOP

PR_OL_STAFF_CREATE	PROCEDURE	151	         pr_sendmail (

PR_OL_STAFF_CREATE	PROCEDURE	152	            a1.e_mail,

PR_OL_STAFF_CREATE	PROCEDURE	153	               'Сформирован обходной лист по увольняемому сотруднику - '

PR_OL_STAFF_CREATE	PROCEDURE	154	            || a.fio,

PR_OL_STAFF_CREATE	PROCEDURE	155	               'Сформирован обходной лист по увольняемому сотруднику - '

PR_OL_STAFF_CREATE	PROCEDURE	156	            || a.fio

PR_OL_STAFF_CREATE	PROCEDURE	157	            || '<br>Список согласователей:<br>'

PR_OL_STAFF_CREATE	PROCEDURE	158	            || s);

PR_OL_STAFF_CREATE	PROCEDURE	159	      END LOOP;

PR_OL_STAFF_CREATE	PROCEDURE	160	   END LOOP;

PR_OL_STAFF_CREATE	PROCEDURE	161	

PR_OL_STAFF_CREATE	PROCEDURE	162	   COMMIT;

PR_OL_STAFF_CREATE	PROCEDURE	163	END;
PR_OCENKA_EVENT_ENABLED	PROCEDURE	1	PROCEDURE          "PR_OCENKA_EVENT_ENABLED" (event_ IN INTEGER)

PR_OCENKA_EVENT_ENABLED	PROCEDURE	2	AS

PR_OCENKA_EVENT_ENABLED	PROCEDURE	3	   v   NUMBER;

PR_OCENKA_EVENT_ENABLED	PROCEDURE	4	BEGIN

PR_OCENKA_EVENT_ENABLED	PROCEDURE	5	   IF event_ <> 0

PR_OCENKA_EVENT_ENABLED	PROCEDURE	6	   THEN

PR_OCENKA_EVENT_ENABLED	PROCEDURE	7	      SELECT disabled

PR_OCENKA_EVENT_ENABLED	PROCEDURE	8	        INTO v

PR_OCENKA_EVENT_ENABLED	PROCEDURE	9	        FROM ocenka_events

PR_OCENKA_EVENT_ENABLED	PROCEDURE	10	       WHERE year = event_;

PR_OCENKA_EVENT_ENABLED	PROCEDURE	11	

PR_OCENKA_EVENT_ENABLED	PROCEDURE	12	      IF v = 1

PR_OCENKA_EVENT_ENABLED	PROCEDURE	13	      THEN

PR_OCENKA_EVENT_ENABLED	PROCEDURE	14	         raise_application_error (-20000, 'Изменения в данном периоде оценки запрещены!');

PR_OCENKA_EVENT_ENABLED	PROCEDURE	15	      END IF;

PR_OCENKA_EVENT_ENABLED	PROCEDURE	16	   END IF;

PR_OCENKA_EVENT_ENABLED	PROCEDURE	17	END;

PR_OCENKA_EVENT_ENABLED	PROCEDURE	18	 

PR_OCENKA_EVENT_ENABLED	PROCEDURE	19	 

PR_OCENKA_EVENT_ENABLED	PROCEDURE	20	 

PR_OCENKA_EVENT_ENABLED	PROCEDURE	21	 
PR_MOVE_STAFF	PROCEDURE	1	PROCEDURE        "PR_MOVE_STAFF" (id_ IN INTEGER)

PR_MOVE_STAFF	PROCEDURE	2	IS

PR_MOVE_STAFF	PROCEDURE	3	   r   VARCHAR (255);

PR_MOVE_STAFF	PROCEDURE	4	BEGIN

PR_MOVE_STAFF	PROCEDURE	5	   FOR a IN (SELECT *

PR_MOVE_STAFF	PROCEDURE	6	               FROM move_staff

PR_MOVE_STAFF	PROCEDURE	7	              WHERE id = id_)

PR_MOVE_STAFF	PROCEDURE	8	   LOOP

PR_MOVE_STAFF	PROCEDURE	9	      UPDATE spdtree

PR_MOVE_STAFF	PROCEDURE	10	         SET pos_id = a.pos_id,

PR_MOVE_STAFF	PROCEDURE	11	             is_db = a.is_db,

PR_MOVE_STAFF	PROCEDURE	12	             is_coach = a.is_coach,

PR_MOVE_STAFF	PROCEDURE	13	             is_mz = a.is_mz

PR_MOVE_STAFF	PROCEDURE	14	       WHERE svideninn = a.tn;

PR_MOVE_STAFF	PROCEDURE	15	

PR_MOVE_STAFF	PROCEDURE	16	      COMMIT;

PR_MOVE_STAFF	PROCEDURE	17	

PR_MOVE_STAFF	PROCEDURE	18	      IF a.tn_new_db IS NOT NULL

PR_MOVE_STAFF	PROCEDURE	19	      THEN

PR_MOVE_STAFF	PROCEDURE	20	         UPDATE spdtree

PR_MOVE_STAFF	PROCEDURE	21	            SET is_db = 1

PR_MOVE_STAFF	PROCEDURE	22	          WHERE svideninn = a.tn_new_db;

PR_MOVE_STAFF	PROCEDURE	23	

PR_MOVE_STAFF	PROCEDURE	24	         COMMIT;

PR_MOVE_STAFF	PROCEDURE	25	         pr_bud_replace_db (a.tn, a.tn_new_db);

PR_MOVE_STAFF	PROCEDURE	26	         pr_bud_replace_db_accept (a.tn, a.tn_new_db);

PR_MOVE_STAFF	PROCEDURE	27	

PR_MOVE_STAFF	PROCEDURE	28	         UPDATE spdtree

PR_MOVE_STAFF	PROCEDURE	29	            SET is_db = 0

PR_MOVE_STAFF	PROCEDURE	30	          WHERE svideninn = a.tn;

PR_MOVE_STAFF	PROCEDURE	31	

PR_MOVE_STAFF	PROCEDURE	32	         COMMIT;

PR_MOVE_STAFF	PROCEDURE	33	      END IF;

PR_MOVE_STAFF	PROCEDURE	34	

PR_MOVE_STAFF	PROCEDURE	35	      IF a.is_db IS NOT NULL

PR_MOVE_STAFF	PROCEDURE	36	      THEN

PR_MOVE_STAFF	PROCEDURE	37	         INSERT INTO bud_tn_fil (tn, bud_id)

PR_MOVE_STAFF	PROCEDURE	38	            SELECT ns.tn, nsbf.fil

PR_MOVE_STAFF	PROCEDURE	39	              FROM move_staff ns, move_staff_bud_fil nsbf

PR_MOVE_STAFF	PROCEDURE	40	             WHERE     ns.ID = id_

PR_MOVE_STAFF	PROCEDURE	41	                   AND ns.id = nsbf.parent

PR_MOVE_STAFF	PROCEDURE	42	                   AND (SELECT COUNT (*)

PR_MOVE_STAFF	PROCEDURE	43	                          FROM bud_tn_fil f

PR_MOVE_STAFF	PROCEDURE	44	                         WHERE ns.tn = f.tn AND nsbf.fil = f.bud_id) = 0;

PR_MOVE_STAFF	PROCEDURE	45	

PR_MOVE_STAFF	PROCEDURE	46	         COMMIT;

PR_MOVE_STAFF	PROCEDURE	47	      END IF;

PR_MOVE_STAFF	PROCEDURE	48	   END LOOP;

PR_MOVE_STAFF	PROCEDURE	49	END;
PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	1	PROCEDURE        "PR_MERCH_SPEC_HEAD_INS_NEW" (

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	2	   ag_id_    IN INTEGER,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	3	   id_net_   IN INTEGER := 0,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	4	   oblast_   IN VARCHAR2 := '',

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	5	   kod_tp_   IN INTEGER := 0,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	6	   dt_       IN DATE)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	7	IS

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	8	   v_subj        VARCHAR2 (255);

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	9	   v_text        VARCHAR2 (4000);

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	10	   tooManyRows   INTEGER;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	11	BEGIN

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	12	   FOR a

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	13	      IN (SELECT h.*

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	14	            FROM cpp, merch_spec_head h

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	15	           WHERE     DECODE (id_net_, 0, cpp.id_net, id_net_) = cpp.id_net

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	16	                 AND DECODE (oblast_, '0', cpp.h_tz_oblast, oblast_) =

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	17	                        cpp.h_tz_oblast

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	18	                 AND DECODE (kod_tp_, 0, cpp.kodtp, kod_tp_) = cpp.kodtp

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	19	                 AND cpp.id_net = h.id_net

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	20	                 AND cpp.kodtp = h.kod_tp

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	21	                 AND h.ag_id = ag_id_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	22	                 AND h.sd >= dt_)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	23	   LOOP

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	24	      DELETE FROM merch_spec_head

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	25	            WHERE id = a.id;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	26	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	27	      COMMIT;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	28	   END LOOP;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	29	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	30	   FOR a

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	31	      IN (SELECT cpp.*

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	32	            FROM cpp

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	33	           WHERE     DECODE (id_net_, 0, cpp.id_net, id_net_) = cpp.id_net

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	34	                 AND DECODE (oblast_, '0', cpp.h_tz_oblast, oblast_) =

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	35	                        cpp.h_tz_oblast

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	36	                 AND DECODE (kod_tp_, 0, cpp.kodtp, kod_tp_) = cpp.kodtp)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	37	   LOOP

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	38	      INSERT INTO merch_spec_head (ag_id,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	39	                                   id_net,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	40	                                   kod_tp,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	41	                                   sd)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	42	           VALUES (ag_id_,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	43	                   a.id_net,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	44	                   a.kodtp,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	45	                   dt_);

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	46	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	47	      COMMIT;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	48	   END LOOP;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	49	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	50	   v_subj := 'Изменение спецификации по ТЗ';

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	51	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	52	   FOR a

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	53	      IN (SELECT DISTINCT u.e_mail, u.fio, u.tn

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	54	            FROM ms_rep_routes1 r, user_list u

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	55	           WHERE     DECODE (id_net_, 0, r.n_id_net, id_net_) = r.n_id_net

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	56	                 AND DECODE (oblast_, '0', r.cpp1_h_tz_oblast, oblast_) =

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	57	                        r.cpp1_h_tz_oblast

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	58	                 AND DECODE (kod_tp_, 0, r.rb_kodtp, kod_tp_) = r.rb_kodtp

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	59	                 AND r.rh_data = TRUNC (dt_, 'mm')

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	60	                 AND r.rb_ag_id = ag_id_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	61	                 AND u.tn = r.rh_tn)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	62	   LOOP

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	63	      v_text :=

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	64	            'С '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	65	         || TO_CHAR (dt_, 'dd.mm.yyyy')

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	66	         || ' изменена спецификация по следующим ТЗ:<br>';

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	67	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	68	      FOR b

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	69	         IN (SELECT DISTINCT r.n_id_net,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	70	                             r.n_net_name,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	71	                             r.rb_ag_id,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	72	                             r.ra_name,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	73	                             r.cpp1_ur_tz_name,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	74	                             r.cpp1_tz_address,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	75	                             r.cpp1_tz_oblast,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	76	                             r.cpp1_city

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	77	               FROM ms_rep_routes1 r, user_list u

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	78	              WHERE     DECODE (id_net_, 0, r.n_id_net, id_net_) = r.n_id_net

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	79	                    AND DECODE (oblast_, '0', r.cpp1_h_tz_oblast, oblast_) =

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	80	                           r.cpp1_h_tz_oblast

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	81	                    AND DECODE (kod_tp_, 0, r.rb_kodtp, kod_tp_) = r.rb_kodtp

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	82	                    AND r.rh_data = TRUNC (dt_, 'mm')

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	83	                    AND r.rb_ag_id = ag_id_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	84	                    AND u.tn = r.rh_tn

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	85	                    AND u.tn = a.tn)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	86	      LOOP

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	87	         IF NVL (LENGTH (v_text), 0) < 10000

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	88	         THEN

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	89	            v_text :=

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	90	                  v_text

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	91	               || b.cpp1_tz_oblast

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	92	               || ', '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	93	               || b.cpp1_city

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	94	               || ', '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	95	               || b.n_net_name

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	96	               || ', '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	97	               || b.cpp1_tz_address

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	98	               || ', '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	99	               || b.ra_name

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	100	               || '<br>';

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	101	            tooManyRows := 0;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	102	         ELSE

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	103	            tooManyRows := 1;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	104	         END IF;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	105	      END LOOP;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	106	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	107	      IF tooManyRows = 1

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	108	      THEN

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	109	         v_text :=

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	110	               v_text

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	111	            || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	112	      END IF;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	113	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	114	      pr_sendmail (a.e_mail, v_subj, v_text);

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	115	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	116	      INSERT INTO full_log (text, prg)

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	117	              VALUES (

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	118	                           a.e_mail

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	119	                        || ' - '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	120	                        || v_subj

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	121	                        || ' '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	122	                        || v_text

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	123	                        || ' ag_id_ '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	124	                        || ag_id_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	125	                        || ' id_net_ '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	126	                        || id_net_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	127	                        || ' oblast_ '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	128	                        || oblast_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	129	                        || ' kod_tp_ '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	130	                        || kod_tp_

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	131	                        || ' dt_ '

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	132	                        || dt_,

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	133	                        'PR_MERCH_SPEC_HEAD_INS_NEW');

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	134	

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	135	      COMMIT;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	136	   END LOOP;

PR_MERCH_SPEC_HEAD_INS_NEW	PROCEDURE	137	END;
PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	1	PROCEDURE          "PR_MERCH_SPEC_BODY_INS_NEW" (

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	2	   ag_id_    IN INTEGER,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	3	   id_net_   IN INTEGER := 0,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	4	   oblast_   IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	5	   kod_tp_   IN INTEGER := 0,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	6	   dt_/*c*/      IN date/*VARCHAR2*/,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	7	   sort_     IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	8	   art_      IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	9	   name_     IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	10	   brand_    IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	11	   izm_      IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	12	   weight_   IN VARCHAR2 := '',

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	13	   kod_      IN VARCHAR2 := '')

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	14	IS

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	15	   --dt_   DATE;

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	16	BEGIN

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	17	   --SELECT TO_DATE (dtc_, 'dd.mm.yyyy') INTO dt_ FROM DUAL;

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	18	

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	19	

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	20	   FOR a

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	21	      IN (SELECT h.*

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	22	            FROM cpp, merch_spec_head h

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	23	           WHERE     DECODE (id_net_, 0, cpp.id_net, id_net_) = cpp.id_net

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	24	                 AND DECODE (oblast_, '0', cpp.h_tz_oblast, oblast_) =

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	25	                        cpp.h_tz_oblast

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	26	                 AND DECODE (kod_tp_, 0, cpp.kodtp, kod_tp_) = cpp.kodtp

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	27	                 AND cpp.id_net = h.id_net

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	28	                 AND cpp.kodtp = h.kod_tp

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	29	                 AND h.ag_id = ag_id_

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	30	                 AND h.sd = dt_)

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	31	   LOOP

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	32	      INSERT INTO merch_spec_body (head_id,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	33	                                   sort,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	34	                                   art,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	35	                                   name,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	36	                                   brand,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	37	                                   izm,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	38	                                   weight,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	39	                                   kod)

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	40	           VALUES (a.id,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	41	                   sort_,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	42	                   art_,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	43	                   name_,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	44	                   brand_,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	45	                   izm_,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	46	                   weight_,

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	47	                   kod_);

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	48	

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	49	      COMMIT;

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	50	   END LOOP;

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	51	END;

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	52	 

PR_MERCH_SPEC_BODY_INS_NEW	PROCEDURE	53	 
PR_MERCH_REPORT_VV_INS1	PROCEDURE	1	PROCEDURE        "PR_MERCH_REPORT_VV_INS1" (

PR_MERCH_REPORT_VV_INS1	PROCEDURE	2	   head_id_   IN INTEGER,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	3	   kod_tp_    IN INTEGER,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	4	   ag_id_     IN INTEGER,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	5	   dtc_       IN VARCHAR)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	6	IS

PR_MERCH_REPORT_VV_INS1	PROCEDURE	7	   i     INTEGER;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	8	   i1    INTEGER;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	9	   d     INTEGER;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	10	   dt_   DATE;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	11	BEGIN

PR_MERCH_REPORT_VV_INS1	PROCEDURE	12	   SELECT TO_DATE (dtc_, 'dd.mm.yyyy') INTO dt_ FROM DUAL;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	13	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	14	   SELECT COUNT (id)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	15	     INTO i

PR_MERCH_REPORT_VV_INS1	PROCEDURE	16	     FROM routes_tp rt

PR_MERCH_REPORT_VV_INS1	PROCEDURE	17	    WHERE head_id = head_id_ AND kodtp = kod_tp_ AND vv = 1;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	18	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	19	   IF i = 0

PR_MERCH_REPORT_VV_INS1	PROCEDURE	20	   THEN

PR_MERCH_REPORT_VV_INS1	PROCEDURE	21	      INSERT INTO routes_tp (head_id, kodtp, vv)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	22	           VALUES (head_id_, kod_tp_, 1);

PR_MERCH_REPORT_VV_INS1	PROCEDURE	23	   END IF;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	24	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	25	   SELECT COUNT (id)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	26	     INTO i

PR_MERCH_REPORT_VV_INS1	PROCEDURE	27	     FROM routes_head_agents rha

PR_MERCH_REPORT_VV_INS1	PROCEDURE	28	    WHERE head_id = head_id_ AND ag_id = ag_id_ AND vv = 1;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	29	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	30	   IF i = 0

PR_MERCH_REPORT_VV_INS1	PROCEDURE	31	   THEN

PR_MERCH_REPORT_VV_INS1	PROCEDURE	32	      INSERT INTO routes_head_agents (head_id, ag_id, vv)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	33	           VALUES (head_id_, ag_id_, 1);

PR_MERCH_REPORT_VV_INS1	PROCEDURE	34	   END IF;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	35	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	36	   SELECT COUNT (*)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	37	     INTO i1

PR_MERCH_REPORT_VV_INS1	PROCEDURE	38	     FROM routes_body1 rb

PR_MERCH_REPORT_VV_INS1	PROCEDURE	39	    WHERE     head_id = head_id_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	40	          AND kodtp = kod_tp_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	41	          AND ag_id = ag_id_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	42	          AND DECODE (

PR_MERCH_REPORT_VV_INS1	PROCEDURE	43	                 (SELECT dm

PR_MERCH_REPORT_VV_INS1	PROCEDURE	44	                    FROM calendar

PR_MERCH_REPORT_VV_INS1	PROCEDURE	45	                   WHERE data = dt_),

PR_MERCH_REPORT_VV_INS1	PROCEDURE	46	                 day_num, NVL (day_enabled_mr, 0) /*+ NVL (day_enabled_f, 0)*/) >

PR_MERCH_REPORT_VV_INS1	PROCEDURE	47	                 0

PR_MERCH_REPORT_VV_INS1	PROCEDURE	48	          AND vv = 0;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	49	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	50	   IF i1 = 0

PR_MERCH_REPORT_VV_INS1	PROCEDURE	51	   THEN

PR_MERCH_REPORT_VV_INS1	PROCEDURE	52	      SELECT COUNT (id)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	53	        INTO i

PR_MERCH_REPORT_VV_INS1	PROCEDURE	54	        FROM routes_body1 rb

PR_MERCH_REPORT_VV_INS1	PROCEDURE	55	       WHERE     head_id = head_id_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	56	             AND kodtp = kod_tp_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	57	             AND ag_id = ag_id_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	58	             AND day_num = (SELECT dm

PR_MERCH_REPORT_VV_INS1	PROCEDURE	59	                              FROM calendar

PR_MERCH_REPORT_VV_INS1	PROCEDURE	60	                             WHERE data = dt_)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	61	             AND vv = 1;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	62	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	63	      IF i = 0

PR_MERCH_REPORT_VV_INS1	PROCEDURE	64	      THEN

PR_MERCH_REPORT_VV_INS1	PROCEDURE	65	         INSERT INTO routes_body1 (head_id,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	66	                                   kodtp,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	67	                                   ag_id,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	68	                                   vv,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	69	                                   day_enabled_mr,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	70	                                   /*day_enabled_f,*/

PR_MERCH_REPORT_VV_INS1	PROCEDURE	71	                                   day_num)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	72	              VALUES (head_id_,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	73	                      kod_tp_,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	74	                      ag_id_,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	75	                      1,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	76	                      1,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	77	                      /*1,*/

PR_MERCH_REPORT_VV_INS1	PROCEDURE	78	                      (SELECT dm

PR_MERCH_REPORT_VV_INS1	PROCEDURE	79	                         FROM calendar

PR_MERCH_REPORT_VV_INS1	PROCEDURE	80	                        WHERE data = dt_));

PR_MERCH_REPORT_VV_INS1	PROCEDURE	81	      END IF;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	82	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	83	      SELECT COUNT (id)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	84	        INTO i

PR_MERCH_REPORT_VV_INS1	PROCEDURE	85	        FROM merch_report_vv vv

PR_MERCH_REPORT_VV_INS1	PROCEDURE	86	       WHERE     head_id = head_id_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	87	             AND kod_tp = kod_tp_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	88	             AND ag_id = ag_id_

PR_MERCH_REPORT_VV_INS1	PROCEDURE	89	             AND dt = dt_;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	90	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	91	      IF i = 0

PR_MERCH_REPORT_VV_INS1	PROCEDURE	92	      THEN

PR_MERCH_REPORT_VV_INS1	PROCEDURE	93	         INSERT INTO merch_report_vv (head_id,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	94	                                      kod_tp,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	95	                                      ag_id,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	96	                                      dt)

PR_MERCH_REPORT_VV_INS1	PROCEDURE	97	              VALUES (head_id_,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	98	                      kod_tp_,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	99	                      ag_id_,

PR_MERCH_REPORT_VV_INS1	PROCEDURE	100	                      dt_);

PR_MERCH_REPORT_VV_INS1	PROCEDURE	101	      END IF;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	102	   END IF;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	103	

PR_MERCH_REPORT_VV_INS1	PROCEDURE	104	   COMMIT;

PR_MERCH_REPORT_VV_INS1	PROCEDURE	105	END;
PR_MERCH_REPORT_VV_DEL	PROCEDURE	1	PROCEDURE        PR_MERCH_REPORT_VV_del (vv_id_ IN INTEGER)

PR_MERCH_REPORT_VV_DEL	PROCEDURE	2	IS

PR_MERCH_REPORT_VV_DEL	PROCEDURE	3	BEGIN

PR_MERCH_REPORT_VV_DEL	PROCEDURE	4	   FOR a IN (SELECT *

PR_MERCH_REPORT_VV_DEL	PROCEDURE	5	               FROM merch_report_vv

PR_MERCH_REPORT_VV_DEL	PROCEDURE	6	              WHERE id = vv_id_)

PR_MERCH_REPORT_VV_DEL	PROCEDURE	7	   LOOP

PR_MERCH_REPORT_VV_DEL	PROCEDURE	8	      DELETE FROM routes_body1

PR_MERCH_REPORT_VV_DEL	PROCEDURE	9	            WHERE     head_id = a.head_id

PR_MERCH_REPORT_VV_DEL	PROCEDURE	10	                  AND kodtp = a.kod_tp

PR_MERCH_REPORT_VV_DEL	PROCEDURE	11	                  AND ag_id = a.ag_id

PR_MERCH_REPORT_VV_DEL	PROCEDURE	12	                  AND vv = 1

PR_MERCH_REPORT_VV_DEL	PROCEDURE	13	                  AND day_enabled_mr = 1

PR_MERCH_REPORT_VV_DEL	PROCEDURE	14	                  /*AND day_enabled_f = 1*/

PR_MERCH_REPORT_VV_DEL	PROCEDURE	15	                  AND day_num = (SELECT dm

PR_MERCH_REPORT_VV_DEL	PROCEDURE	16	                                   FROM calendar

PR_MERCH_REPORT_VV_DEL	PROCEDURE	17	                                  WHERE data = a.dt);

PR_MERCH_REPORT_VV_DEL	PROCEDURE	18	

PR_MERCH_REPORT_VV_DEL	PROCEDURE	19	

PR_MERCH_REPORT_VV_DEL	PROCEDURE	20	

PR_MERCH_REPORT_VV_DEL	PROCEDURE	21	      COMMIT;

PR_MERCH_REPORT_VV_DEL	PROCEDURE	22	   END LOOP;

PR_MERCH_REPORT_VV_DEL	PROCEDURE	23	

PR_MERCH_REPORT_VV_DEL	PROCEDURE	24	   DELETE FROM merch_report_vv

PR_MERCH_REPORT_VV_DEL	PROCEDURE	25	         WHERE id = vv_id_;

PR_MERCH_REPORT_VV_DEL	PROCEDURE	26	

PR_MERCH_REPORT_VV_DEL	PROCEDURE	27	   COMMIT;

PR_MERCH_REPORT_VV_DEL	PROCEDURE	28	END;
PR_GET_UM_DATA	PROCEDURE	1	PROCEDURE        PR_GET_um_DATA

PR_GET_UM_DATA	PROCEDURE	2	IS

PR_GET_UM_DATA	PROCEDURE	3	   r   INTEGER;

PR_GET_UM_DATA	PROCEDURE	4	   c   INTEGER;

PR_GET_UM_DATA	PROCEDURE	5	BEGIN

PR_GET_UM_DATA	PROCEDURE	6	   INSERT INTO full_log (text, prg)

PR_GET_UM_DATA	PROCEDURE	7	           VALUES (

PR_GET_UM_DATA	PROCEDURE	8	                     'запущена процедура закачки данных по УМ',

PR_GET_UM_DATA	PROCEDURE	9	                     'get_data');

PR_GET_UM_DATA	PROCEDURE	10	

PR_GET_UM_DATA	PROCEDURE	11	   COMMIT;

PR_GET_UM_DATA	PROCEDURE	12	

PR_GET_UM_DATA	PROCEDURE	13	   SELECT fn_get_data (

PR_GET_UM_DATA	PROCEDURE	14	             'DM2015_02_UM_Info',

PR_GET_UM_DATA	PROCEDURE	15	             'um_transit',

PR_GET_UM_DATA	PROCEDURE	16	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","UM_DATE",

PR_GET_UM_DATA	PROCEDURE	17	             "TIME_Begin","Time_Last_Update","TS_Visa",

PR_GET_UM_DATA	PROCEDURE	18	             "Plan_EV","Plan_VAL","Plan_C1","Plan_C2","Plan_C3",

PR_GET_UM_DATA	PROCEDURE	19	             "Time_First_Visit","GPS_koord","Time_Last_Visit","GPS_koord_Last_Visit",

PR_GET_UM_DATA	PROCEDURE	20	             "UM_Posted",

PR_GET_UM_DATA	PROCEDURE	21	             "TP_KOD_Last","TP_UR_Last","TP_ADDR_Last","Country"

PR_GET_UM_DATA	PROCEDURE	22	             ',

PR_GET_UM_DATA	PROCEDURE	23	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,UM_DATE,

PR_GET_UM_DATA	PROCEDURE	24	             TIME_Begin,Time_Last_Update,TS_Visa,

PR_GET_UM_DATA	PROCEDURE	25	             Plan_EV,Plan_VAL,Plan_C1,Plan_C2,Plan_C3,

PR_GET_UM_DATA	PROCEDURE	26	             Time_First_Visit,GPS_koord,Time_Last_Visit,GPS_koord_Last_Visit,

PR_GET_UM_DATA	PROCEDURE	27	             UM_Posted,

PR_GET_UM_DATA	PROCEDURE	28	             TP_KOD_Last,TP_UR_Last,TP_ADDR_Last,Country')

PR_GET_UM_DATA	PROCEDURE	29	     INTO r

PR_GET_UM_DATA	PROCEDURE	30	     FROM DUAL;

PR_GET_UM_DATA	PROCEDURE	31	

PR_GET_UM_DATA	PROCEDURE	32	   COMMIT;

PR_GET_UM_DATA	PROCEDURE	33	

PR_GET_UM_DATA	PROCEDURE	34	   SELECT COUNT (*) INTO c FROM um_TRANSIT;

PR_GET_UM_DATA	PROCEDURE	35	

PR_GET_UM_DATA	PROCEDURE	36	   IF c > 0

PR_GET_UM_DATA	PROCEDURE	37	   THEN

PR_GET_UM_DATA	PROCEDURE	38	      FOR a IN (SELECT DISTINCT um_date FROM um_TRANSIT)

PR_GET_UM_DATA	PROCEDURE	39	      LOOP

PR_GET_UM_DATA	PROCEDURE	40	         DELETE FROM um

PR_GET_UM_DATA	PROCEDURE	41	               WHERE um_date = a.um_date;

PR_GET_UM_DATA	PROCEDURE	42	

PR_GET_UM_DATA	PROCEDURE	43	         COMMIT;

PR_GET_UM_DATA	PROCEDURE	44	      END LOOP;

PR_GET_UM_DATA	PROCEDURE	45	

PR_GET_UM_DATA	PROCEDURE	46	      INSERT INTO um

PR_GET_UM_DATA	PROCEDURE	47	         SELECT * FROM um_TRANSIT;

PR_GET_UM_DATA	PROCEDURE	48	

PR_GET_UM_DATA	PROCEDURE	49	      COMMIT;

PR_GET_UM_DATA	PROCEDURE	50	   END IF;

PR_GET_UM_DATA	PROCEDURE	51	

PR_GET_UM_DATA	PROCEDURE	52	   INSERT INTO full_log (text, prg)

PR_GET_UM_DATA	PROCEDURE	53	           VALUES (

PR_GET_UM_DATA	PROCEDURE	54	                     'завершена процедура закачки данных по УМ',

PR_GET_UM_DATA	PROCEDURE	55	                     'get_data');

PR_GET_UM_DATA	PROCEDURE	56	

PR_GET_UM_DATA	PROCEDURE	57	   COMMIT;

PR_GET_UM_DATA	PROCEDURE	58	END;
PR_GET_TO_DATA	PROCEDURE	1	PROCEDURE        PR_GET_TO_DATA

PR_GET_TO_DATA	PROCEDURE	2	IS

PR_GET_TO_DATA	PROCEDURE	3	   r   INTEGER;

PR_GET_TO_DATA	PROCEDURE	4	   c   INTEGER;

PR_GET_TO_DATA	PROCEDURE	5	BEGIN

PR_GET_TO_DATA	PROCEDURE	6	   INSERT INTO full_log (text, prg)

PR_GET_TO_DATA	PROCEDURE	7	           VALUES (

PR_GET_TO_DATA	PROCEDURE	8	                     'запущена процедура закачки данных по ТО',

PR_GET_TO_DATA	PROCEDURE	9	                     'get_data');

PR_GET_TO_DATA	PROCEDURE	10	

PR_GET_TO_DATA	PROCEDURE	11	   SELECT fn_get_data (

PR_GET_TO_DATA	PROCEDURE	12	             'StandartA',

PR_GET_TO_DATA	PROCEDURE	13	             'a18to_transit',

PR_GET_TO_DATA	PROCEDURE	14	             '"VisitDate","FIO_TS","TAB_NUM","FIO_ETA","DM_KOD","TP_UR","TP_ADDR","TP_KOD_KEY","URL","VISIT","NAME_TO","TYPE_STANDART","TARGET","TARGET_INFO"',

PR_GET_TO_DATA	PROCEDURE	15	             'VISITDATE,FIO_TS,TAB_NUM,FIO_ETA,DM_KOD,TP_UR,TP_ADDR,TP_KOD_KEY,URL,VISIT,NAME_TO,TYPE_STANDART,TARGET,TARGET_INFO')

PR_GET_TO_DATA	PROCEDURE	16	     INTO r

PR_GET_TO_DATA	PROCEDURE	17	     FROM DUAL;

PR_GET_TO_DATA	PROCEDURE	18	

PR_GET_TO_DATA	PROCEDURE	19	

PR_GET_TO_DATA	PROCEDURE	20	

PR_GET_TO_DATA	PROCEDURE	21	   SELECT COUNT (*) INTO c FROM A18TO_transit;

PR_GET_TO_DATA	PROCEDURE	22	

PR_GET_TO_DATA	PROCEDURE	23	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	24	   THEN

PR_GET_TO_DATA	PROCEDURE	25	      DELETE FROM A18TO

PR_GET_TO_DATA	PROCEDURE	26	            WHERE visitdate IN (SELECT DISTINCT visitdate FROM A18TO_transit);

PR_GET_TO_DATA	PROCEDURE	27	

PR_GET_TO_DATA	PROCEDURE	28	      INSERT INTO PERSIK.A18TO (DM_KOD,

PR_GET_TO_DATA	PROCEDURE	29	                                FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	30	                                FIO_TS,

PR_GET_TO_DATA	PROCEDURE	31	                                NAME_TO,

PR_GET_TO_DATA	PROCEDURE	32	                                TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	33	                                TARGET,

PR_GET_TO_DATA	PROCEDURE	34	                                TARGET_INFO,

PR_GET_TO_DATA	PROCEDURE	35	                                TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	36	                                TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	37	                                TP_UR,

PR_GET_TO_DATA	PROCEDURE	38	                                TYPE_STANDART,

PR_GET_TO_DATA	PROCEDURE	39	                                URL,

PR_GET_TO_DATA	PROCEDURE	40	                                VISIT,

PR_GET_TO_DATA	PROCEDURE	41	                                VISITDATE)

PR_GET_TO_DATA	PROCEDURE	42	           SELECT DM_KOD,

PR_GET_TO_DATA	PROCEDURE	43	                  FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	44	                  FIO_TS,

PR_GET_TO_DATA	PROCEDURE	45	                  NAME_TO,

PR_GET_TO_DATA	PROCEDURE	46	                  TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	47	                  TARGET,

PR_GET_TO_DATA	PROCEDURE	48	                  TARGET_INFO,

PR_GET_TO_DATA	PROCEDURE	49	                  TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	50	                  TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	51	                  TP_UR,

PR_GET_TO_DATA	PROCEDURE	52	                  MAX (TYPE_STANDART) TYPE_STANDART,

PR_GET_TO_DATA	PROCEDURE	53	                  URL,

PR_GET_TO_DATA	PROCEDURE	54	                  VISIT,

PR_GET_TO_DATA	PROCEDURE	55	                  VISITDATE

PR_GET_TO_DATA	PROCEDURE	56	             FROM PERSIK.A18TO_TRANSIT

PR_GET_TO_DATA	PROCEDURE	57	         GROUP BY DM_KOD,

PR_GET_TO_DATA	PROCEDURE	58	                  FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	59	                  FIO_TS,

PR_GET_TO_DATA	PROCEDURE	60	                  NAME_TO,

PR_GET_TO_DATA	PROCEDURE	61	                  TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	62	                  TARGET,

PR_GET_TO_DATA	PROCEDURE	63	                  TARGET_INFO,

PR_GET_TO_DATA	PROCEDURE	64	                  TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	65	                  TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	66	                  TP_UR,

PR_GET_TO_DATA	PROCEDURE	67	                  URL,

PR_GET_TO_DATA	PROCEDURE	68	                  VISIT,

PR_GET_TO_DATA	PROCEDURE	69	                  VISITDATE;

PR_GET_TO_DATA	PROCEDURE	70	   END IF;

PR_GET_TO_DATA	PROCEDURE	71	

PR_GET_TO_DATA	PROCEDURE	72	   COMMIT;

PR_GET_TO_DATA	PROCEDURE	73	

PR_GET_TO_DATA	PROCEDURE	74	   FOR a IN (  SELECT VISITDATE,

PR_GET_TO_DATA	PROCEDURE	75	                      FIO_TS,

PR_GET_TO_DATA	PROCEDURE	76	                      TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	77	                      FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	78	                      DM_KOD,

PR_GET_TO_DATA	PROCEDURE	79	                      TP_UR,

PR_GET_TO_DATA	PROCEDURE	80	                      TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	81	                      TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	82	                      VISIT,

PR_GET_TO_DATA	PROCEDURE	83	                      NAME_TO,

PR_GET_TO_DATA	PROCEDURE	84	                      TARGET,

PR_GET_TO_DATA	PROCEDURE	85	                      TARGET_INFO,

PR_GET_TO_DATA	PROCEDURE	86	                      H_FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	87	                      H_NAME_TO,

PR_GET_TO_DATA	PROCEDURE	88	                      wm_concat (type_standart) f1,

PR_GET_TO_DATA	PROCEDURE	89	                      MIN (TYPE_STANDART) TYPE_STANDART,

PR_GET_TO_DATA	PROCEDURE	90	                      COUNT (DISTINCT NVL (TYPE_STANDART, 'z'))

PR_GET_TO_DATA	PROCEDURE	91	                 FROM a18to z

PR_GET_TO_DATA	PROCEDURE	92	             GROUP BY VISITDATE,

PR_GET_TO_DATA	PROCEDURE	93	                      FIO_TS,

PR_GET_TO_DATA	PROCEDURE	94	                      TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	95	                      FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	96	                      DM_KOD,

PR_GET_TO_DATA	PROCEDURE	97	                      TP_UR,

PR_GET_TO_DATA	PROCEDURE	98	                      TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	99	                      TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	100	                      VISIT,

PR_GET_TO_DATA	PROCEDURE	101	                      NAME_TO,

PR_GET_TO_DATA	PROCEDURE	102	                      TARGET,

PR_GET_TO_DATA	PROCEDURE	103	                      TARGET_INFO,

PR_GET_TO_DATA	PROCEDURE	104	                      H_FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	105	                      H_NAME_TO

PR_GET_TO_DATA	PROCEDURE	106	               HAVING COUNT (DISTINCT NVL (TYPE_STANDART, 'z')) > 1)

PR_GET_TO_DATA	PROCEDURE	107	   LOOP

PR_GET_TO_DATA	PROCEDURE	108	      DELETE FROM a18to

PR_GET_TO_DATA	PROCEDURE	109	            WHERE     VISITDATE = a.VISITDATE

PR_GET_TO_DATA	PROCEDURE	110	                  AND TP_KOD_KEY = a.TP_KOD_KEY

PR_GET_TO_DATA	PROCEDURE	111	                  AND NAME_TO = a.NAME_TO

PR_GET_TO_DATA	PROCEDURE	112	                  AND TYPE_STANDART = a.TYPE_STANDART;

PR_GET_TO_DATA	PROCEDURE	113	   END LOOP;

PR_GET_TO_DATA	PROCEDURE	114	

PR_GET_TO_DATA	PROCEDURE	115	   COMMIT;

PR_GET_TO_DATA	PROCEDURE	116	

PR_GET_TO_DATA	PROCEDURE	117	

PR_GET_TO_DATA	PROCEDURE	118	   DELETE FROM a18totp

PR_GET_TO_DATA	PROCEDURE	119	         WHERE ROWID IN (SELECT p.ROWID rid

PR_GET_TO_DATA	PROCEDURE	120	                           FROM a18to t, a18totp p

PR_GET_TO_DATA	PROCEDURE	121	                          WHERE     t.tp_kod_key(+) = p.tp_kod

PR_GET_TO_DATA	PROCEDURE	122	                                AND t.visitdate(+) = p.visitdate

PR_GET_TO_DATA	PROCEDURE	123	                                AND t.h_name_to(+) = p.h_name_to

PR_GET_TO_DATA	PROCEDURE	124	                                AND t.h_name_to IS NULL);

PR_GET_TO_DATA	PROCEDURE	125	

PR_GET_TO_DATA	PROCEDURE	126	   COMMIT;

PR_GET_TO_DATA	PROCEDURE	127	

PR_GET_TO_DATA	PROCEDURE	128	   SELECT COUNT (*)

PR_GET_TO_DATA	PROCEDURE	129	     INTO c

PR_GET_TO_DATA	PROCEDURE	130	     FROM (  SELECT tp_kod_key, visitdate

PR_GET_TO_DATA	PROCEDURE	131	               FROM (SELECT DISTINCT tp_kod_key, visitdate, visit FROM A18TO)

PR_GET_TO_DATA	PROCEDURE	132	           GROUP BY tp_kod_key, visitdate

PR_GET_TO_DATA	PROCEDURE	133	             HAVING COUNT (*) > 1);

PR_GET_TO_DATA	PROCEDURE	134	

PR_GET_TO_DATA	PROCEDURE	135	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	136	   THEN

PR_GET_TO_DATA	PROCEDURE	137	      pr_sendmail (

PR_GET_TO_DATA	PROCEDURE	138	         'alexander.guzhva@avk.ua,dmytro.kalashnikov@avk.com.ua',

PR_GET_TO_DATA	PROCEDURE	139	         'нарушение целостности во вьюхе StandartA',

PR_GET_TO_DATA	PROCEDURE	140	         'после загрузки вьюхи обнаружены записи с разными visit в рамках одного дня по одной ТП');

PR_GET_TO_DATA	PROCEDURE	141	   END IF;

PR_GET_TO_DATA	PROCEDURE	142	

PR_GET_TO_DATA	PROCEDURE	143	   SELECT fn_get_data (

PR_GET_TO_DATA	PROCEDURE	144	             'A2016_06_POS_URL_A',

PR_GET_TO_DATA	PROCEDURE	145	             'a14to_transit',

PR_GET_TO_DATA	PROCEDURE	146	             '"VISITDATE","FIO_TS","TAB_NUM","FIO_ETA","DM_KOD","TP_UR","TP_ADDR","TP_KOD_KEY","URL","VISIT","TARGET","TARGET_INFO"',

PR_GET_TO_DATA	PROCEDURE	147	             'VISITDATE,FIO_TS,TAB_NUM,FIO_ETA,DM_KOD,TP_UR,TP_ADDR,TP_KOD_KEY,URL,VISIT,TARGET,TARGET_INFO')

PR_GET_TO_DATA	PROCEDURE	148	     INTO r

PR_GET_TO_DATA	PROCEDURE	149	     FROM DUAL;

PR_GET_TO_DATA	PROCEDURE	150	

PR_GET_TO_DATA	PROCEDURE	151	

PR_GET_TO_DATA	PROCEDURE	152	

PR_GET_TO_DATA	PROCEDURE	153	   SELECT COUNT (*) INTO c FROM a14to_transit;

PR_GET_TO_DATA	PROCEDURE	154	

PR_GET_TO_DATA	PROCEDURE	155	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	156	   THEN

PR_GET_TO_DATA	PROCEDURE	157	      DELETE FROM a14to

PR_GET_TO_DATA	PROCEDURE	158	            WHERE     visitdate IN (SELECT DISTINCT visitdate

PR_GET_TO_DATA	PROCEDURE	159	                                      FROM a14to_transit)

PR_GET_TO_DATA	PROCEDURE	160	                  AND standart = 'A';

PR_GET_TO_DATA	PROCEDURE	161	

PR_GET_TO_DATA	PROCEDURE	162	      /*

PR_GET_TO_DATA	PROCEDURE	163	      delete b-standart from a14to that exists in a14to_transit with a-standart

PR_GET_TO_DATA	PROCEDURE	164	      it happens when TP was b-standart in the past and now it has a-standart

PR_GET_TO_DATA	PROCEDURE	165	      */

PR_GET_TO_DATA	PROCEDURE	166	      FOR A

PR_GET_TO_DATA	PROCEDURE	167	         IN (SELECT a6.*

PR_GET_TO_DATA	PROCEDURE	168	               FROM (SELECT DISTINCT visitdate, tp_kod_key

PR_GET_TO_DATA	PROCEDURE	169	                       FROM a14to

PR_GET_TO_DATA	PROCEDURE	170	                      WHERE standart = 'B') a4,

PR_GET_TO_DATA	PROCEDURE	171	                    (SELECT DISTINCT visitdate, tp_kod_key FROM a14to_transit)

PR_GET_TO_DATA	PROCEDURE	172	                    a6

PR_GET_TO_DATA	PROCEDURE	173	              WHERE     a4.visitdate = a6.visitdate

PR_GET_TO_DATA	PROCEDURE	174	                    AND a4.tp_kod_key = a6.tp_kod_key)

PR_GET_TO_DATA	PROCEDURE	175	      LOOP

PR_GET_TO_DATA	PROCEDURE	176	         DELETE FROM a14to

PR_GET_TO_DATA	PROCEDURE	177	               WHERE visitdate = a.visitdate AND tp_kod_key = a.tp_kod_key;

PR_GET_TO_DATA	PROCEDURE	178	      END LOOP;

PR_GET_TO_DATA	PROCEDURE	179	

PR_GET_TO_DATA	PROCEDURE	180	      INSERT INTO PERSIK.A14TO (DM_KOD,

PR_GET_TO_DATA	PROCEDURE	181	                                FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	182	                                FIO_TS,

PR_GET_TO_DATA	PROCEDURE	183	                                H_FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	184	                                H_URL,

PR_GET_TO_DATA	PROCEDURE	185	                                STANDART,

PR_GET_TO_DATA	PROCEDURE	186	                                TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	187	                                TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	188	                                TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	189	                                TP_UR,

PR_GET_TO_DATA	PROCEDURE	190	                                URL,

PR_GET_TO_DATA	PROCEDURE	191	                                VISIT,

PR_GET_TO_DATA	PROCEDURE	192	                                VISITDATE,

PR_GET_TO_DATA	PROCEDURE	193	                                TARGET,

PR_GET_TO_DATA	PROCEDURE	194	                                TARGET_INFO)

PR_GET_TO_DATA	PROCEDURE	195	         SELECT DM_KOD,

PR_GET_TO_DATA	PROCEDURE	196	                FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	197	                FIO_TS,

PR_GET_TO_DATA	PROCEDURE	198	                H_FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	199	                H_URL,

PR_GET_TO_DATA	PROCEDURE	200	                'A' STANDART,

PR_GET_TO_DATA	PROCEDURE	201	                TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	202	                TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	203	                TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	204	                TP_UR,

PR_GET_TO_DATA	PROCEDURE	205	                URL,

PR_GET_TO_DATA	PROCEDURE	206	                VISIT,

PR_GET_TO_DATA	PROCEDURE	207	                VISITDATE,

PR_GET_TO_DATA	PROCEDURE	208	                TARGET,

PR_GET_TO_DATA	PROCEDURE	209	                TARGET_INFO

PR_GET_TO_DATA	PROCEDURE	210	           FROM PERSIK.A14TO_TRANSIT;

PR_GET_TO_DATA	PROCEDURE	211	   END IF;

PR_GET_TO_DATA	PROCEDURE	212	

PR_GET_TO_DATA	PROCEDURE	213	   COMMIT;

PR_GET_TO_DATA	PROCEDURE	214	

PR_GET_TO_DATA	PROCEDURE	215	   SELECT COUNT (*)

PR_GET_TO_DATA	PROCEDURE	216	     INTO c

PR_GET_TO_DATA	PROCEDURE	217	     FROM (  SELECT tp_kod_key, visitdate

PR_GET_TO_DATA	PROCEDURE	218	               FROM (SELECT DISTINCT tp_kod_key, visitdate, visit FROM a14to)

PR_GET_TO_DATA	PROCEDURE	219	           GROUP BY tp_kod_key, visitdate

PR_GET_TO_DATA	PROCEDURE	220	             HAVING COUNT (*) > 1);

PR_GET_TO_DATA	PROCEDURE	221	

PR_GET_TO_DATA	PROCEDURE	222	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	223	   THEN

PR_GET_TO_DATA	PROCEDURE	224	      pr_sendmail (

PR_GET_TO_DATA	PROCEDURE	225	         'alexander.guzhva@avk.ua,dmytro.kalashnikov@avk.com.ua',

PR_GET_TO_DATA	PROCEDURE	226	         'нарушение целостности во вьюхе A2016_06_POS_URL_A',

PR_GET_TO_DATA	PROCEDURE	227	         'после загрузки вьюхи обнаружены записи с разными visit в рамках одного дня по одной ТП');

PR_GET_TO_DATA	PROCEDURE	228	   END IF;

PR_GET_TO_DATA	PROCEDURE	229	

PR_GET_TO_DATA	PROCEDURE	230	

PR_GET_TO_DATA	PROCEDURE	231	   SELECT fn_get_data (

PR_GET_TO_DATA	PROCEDURE	232	             'A2016_06_POS_URL_B',

PR_GET_TO_DATA	PROCEDURE	233	             'a14to_transit',

PR_GET_TO_DATA	PROCEDURE	234	             '"VISITDATE","FIO_TS","TAB_NUM","FIO_ETA","DM_KOD","TP_UR","TP_ADDR","TP_KOD_KEY","URL","VISIT","TARGET","TARGET_INFO"',

PR_GET_TO_DATA	PROCEDURE	235	             'VISITDATE,FIO_TS,TAB_NUM,FIO_ETA,DM_KOD,TP_UR,TP_ADDR,TP_KOD_KEY,URL,VISIT,TARGET,TARGET_INFO')

PR_GET_TO_DATA	PROCEDURE	236	     INTO r

PR_GET_TO_DATA	PROCEDURE	237	     FROM DUAL;

PR_GET_TO_DATA	PROCEDURE	238	

PR_GET_TO_DATA	PROCEDURE	239	   FOR a

PR_GET_TO_DATA	PROCEDURE	240	      IN (SELECT a6.*

PR_GET_TO_DATA	PROCEDURE	241	            FROM (SELECT DISTINCT visitdate, tp_kod_key

PR_GET_TO_DATA	PROCEDURE	242	                    FROM a14to

PR_GET_TO_DATA	PROCEDURE	243	                   WHERE standart = 'A') a4,

PR_GET_TO_DATA	PROCEDURE	244	                 (SELECT DISTINCT visitdate, tp_kod_key FROM a14to_transit) a6

PR_GET_TO_DATA	PROCEDURE	245	           WHERE a4.visitdate = a6.visitdate AND a4.tp_kod_key = a6.tp_kod_key)

PR_GET_TO_DATA	PROCEDURE	246	   LOOP

PR_GET_TO_DATA	PROCEDURE	247	      DELETE FROM a14to_transit

PR_GET_TO_DATA	PROCEDURE	248	            WHERE visitdate = a.visitdate AND tp_kod_key = a.tp_kod_key;

PR_GET_TO_DATA	PROCEDURE	249	   END LOOP;

PR_GET_TO_DATA	PROCEDURE	250	

PR_GET_TO_DATA	PROCEDURE	251	

PR_GET_TO_DATA	PROCEDURE	252	

PR_GET_TO_DATA	PROCEDURE	253	   SELECT COUNT (*) INTO c FROM A14TO_transit;

PR_GET_TO_DATA	PROCEDURE	254	

PR_GET_TO_DATA	PROCEDURE	255	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	256	   THEN

PR_GET_TO_DATA	PROCEDURE	257	      DELETE FROM A14TO

PR_GET_TO_DATA	PROCEDURE	258	            WHERE     visitdate IN (SELECT DISTINCT visitdate

PR_GET_TO_DATA	PROCEDURE	259	                                      FROM A14TO_transit)

PR_GET_TO_DATA	PROCEDURE	260	                  AND standart = 'B';

PR_GET_TO_DATA	PROCEDURE	261	

PR_GET_TO_DATA	PROCEDURE	262	      INSERT INTO PERSIK.A14TO (DM_KOD,

PR_GET_TO_DATA	PROCEDURE	263	                                FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	264	                                FIO_TS,

PR_GET_TO_DATA	PROCEDURE	265	                                H_FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	266	                                H_URL,

PR_GET_TO_DATA	PROCEDURE	267	                                STANDART,

PR_GET_TO_DATA	PROCEDURE	268	                                TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	269	                                TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	270	                                TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	271	                                TP_UR,

PR_GET_TO_DATA	PROCEDURE	272	                                URL,

PR_GET_TO_DATA	PROCEDURE	273	                                VISIT,

PR_GET_TO_DATA	PROCEDURE	274	                                VISITDATE,

PR_GET_TO_DATA	PROCEDURE	275	                                TARGET,

PR_GET_TO_DATA	PROCEDURE	276	                                TARGET_INFO)

PR_GET_TO_DATA	PROCEDURE	277	         SELECT DM_KOD,

PR_GET_TO_DATA	PROCEDURE	278	                FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	279	                FIO_TS,

PR_GET_TO_DATA	PROCEDURE	280	                H_FIO_ETA,

PR_GET_TO_DATA	PROCEDURE	281	                H_URL,

PR_GET_TO_DATA	PROCEDURE	282	                'B' STANDART,

PR_GET_TO_DATA	PROCEDURE	283	                TAB_NUM,

PR_GET_TO_DATA	PROCEDURE	284	                TP_ADDR,

PR_GET_TO_DATA	PROCEDURE	285	                TP_KOD_KEY,

PR_GET_TO_DATA	PROCEDURE	286	                TP_UR,

PR_GET_TO_DATA	PROCEDURE	287	                URL,

PR_GET_TO_DATA	PROCEDURE	288	                VISIT,

PR_GET_TO_DATA	PROCEDURE	289	                VISITDATE,

PR_GET_TO_DATA	PROCEDURE	290	                TARGET,

PR_GET_TO_DATA	PROCEDURE	291	                TARGET_INFO

PR_GET_TO_DATA	PROCEDURE	292	           FROM PERSIK.A14TO_TRANSIT;

PR_GET_TO_DATA	PROCEDURE	293	   END IF;

PR_GET_TO_DATA	PROCEDURE	294	

PR_GET_TO_DATA	PROCEDURE	295	   COMMIT;

PR_GET_TO_DATA	PROCEDURE	296	

PR_GET_TO_DATA	PROCEDURE	297	   SELECT COUNT (*)

PR_GET_TO_DATA	PROCEDURE	298	     INTO c

PR_GET_TO_DATA	PROCEDURE	299	     FROM (  SELECT tp_kod_key, visitdate

PR_GET_TO_DATA	PROCEDURE	300	               FROM (SELECT DISTINCT tp_kod_key, visitdate, visit FROM A14TO)

PR_GET_TO_DATA	PROCEDURE	301	           GROUP BY tp_kod_key, visitdate

PR_GET_TO_DATA	PROCEDURE	302	             HAVING COUNT (*) > 1);

PR_GET_TO_DATA	PROCEDURE	303	

PR_GET_TO_DATA	PROCEDURE	304	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	305	   THEN

PR_GET_TO_DATA	PROCEDURE	306	      pr_sendmail (

PR_GET_TO_DATA	PROCEDURE	307	         'alexander.guzhva@avk.ua,dmytro.kalashnikov@avk.com.ua',

PR_GET_TO_DATA	PROCEDURE	308	         'нарушение целостности во вьюхе A2016_06_POS_URL_B',

PR_GET_TO_DATA	PROCEDURE	309	         'после загрузки вьюхи обнаружены записи с разными visit в рамках одного дня по одной ТП');

PR_GET_TO_DATA	PROCEDURE	310	   END IF;

PR_GET_TO_DATA	PROCEDURE	311	

PR_GET_TO_DATA	PROCEDURE	312	   SELECT fn_get_data ('A2014_11_Sale_Plans',

PR_GET_TO_DATA	PROCEDURE	313	                       'a14tosp_transit',

PR_GET_TO_DATA	PROCEDURE	314	                       'DATA,SALE_PLAN_NAME,FIO_TS,TAB_NUM,FIO_ETA,VALUE',

PR_GET_TO_DATA	PROCEDURE	315	                       'DATA,SALE_PLAN_NAME,FIO_TS,TAB_NUM,FIO_ETA,VALUE')

PR_GET_TO_DATA	PROCEDURE	316	     INTO r

PR_GET_TO_DATA	PROCEDURE	317	     FROM DUAL;

PR_GET_TO_DATA	PROCEDURE	318	

PR_GET_TO_DATA	PROCEDURE	319	

PR_GET_TO_DATA	PROCEDURE	320	

PR_GET_TO_DATA	PROCEDURE	321	   SELECT COUNT (*) INTO c FROM a14tosp_transit;

PR_GET_TO_DATA	PROCEDURE	322	

PR_GET_TO_DATA	PROCEDURE	323	   IF c > 0

PR_GET_TO_DATA	PROCEDURE	324	   THEN

PR_GET_TO_DATA	PROCEDURE	325	      DELETE FROM a14tosp

PR_GET_TO_DATA	PROCEDURE	326	            WHERE data IN (SELECT DISTINCT data FROM a14tosp_transit);

PR_GET_TO_DATA	PROCEDURE	327	

PR_GET_TO_DATA	PROCEDURE	328	      INSERT INTO a14tosp

PR_GET_TO_DATA	PROCEDURE	329	         SELECT * FROM a14tosp_transit;

PR_GET_TO_DATA	PROCEDURE	330	   END IF;

PR_GET_TO_DATA	PROCEDURE	331	

PR_GET_TO_DATA	PROCEDURE	332	   FILL_A14TOZST;

PR_GET_TO_DATA	PROCEDURE	333	

PR_GET_TO_DATA	PROCEDURE	334	   INSERT INTO full_log (text, prg)

PR_GET_TO_DATA	PROCEDURE	335	           VALUES (

PR_GET_TO_DATA	PROCEDURE	336	                     'завершена процедура закачки данных по ТО',

PR_GET_TO_DATA	PROCEDURE	337	                     'get_data');

PR_GET_TO_DATA	PROCEDURE	338	

PR_GET_TO_DATA	PROCEDURE	339	   COMMIT;

PR_GET_TO_DATA	PROCEDURE	340	END;
PR_GET_REPORT_GPS	PROCEDURE	1	PROCEDURE        PR_get_report_gps

PR_GET_REPORT_GPS	PROCEDURE	2	IS

PR_GET_REPORT_GPS	PROCEDURE	3	   c   INTEGER;

PR_GET_REPORT_GPS	PROCEDURE	4	BEGIN

PR_GET_REPORT_GPS	PROCEDURE	5	   DELETE FROM MERCH_REPORT_GPS_tmp;

PR_GET_REPORT_GPS	PROCEDURE	6	

PR_GET_REPORT_GPS	PROCEDURE	7	   COMMIT;

PR_GET_REPORT_GPS	PROCEDURE	8	

PR_GET_REPORT_GPS	PROCEDURE	9	   INSERT INTO MERCH_REPORT_GPS_tmp (dt,

PR_GET_REPORT_GPS	PROCEDURE	10	                                     kod_ag,

PR_GET_REPORT_GPS	PROCEDURE	11	                                     kod_tp,

PR_GET_REPORT_GPS	PROCEDURE	12	                                     tp_name,

PR_GET_REPORT_GPS	PROCEDURE	13	                                     time_in,

PR_GET_REPORT_GPS	PROCEDURE	14	                                     time_out)

PR_GET_REPORT_GPS	PROCEDURE	15	      SELECT vf.dt,

PR_GET_REPORT_GPS	PROCEDURE	16	             h.num,

PR_GET_REPORT_GPS	PROCEDURE	17	             vf.kod_tp,

PR_GET_REPORT_GPS	PROCEDURE	18	             vf.tp_name,

PR_GET_REPORT_GPS	PROCEDURE	19	             vf.time_in,

PR_GET_REPORT_GPS	PROCEDURE	20	             vf.time_out

PR_GET_REPORT_GPS	PROCEDURE	21	        FROM web.MS_visits_fact@sw vf, routes_head h

PR_GET_REPORT_GPS	PROCEDURE	22	       WHERE h.data = TRUNC (vf.dt, 'mm') AND h.login = vf.merch_login;

PR_GET_REPORT_GPS	PROCEDURE	23	

PR_GET_REPORT_GPS	PROCEDURE	24	   SELECT COUNT (*) INTO c FROM MERCH_REPORT_GPS_tmp;

PR_GET_REPORT_GPS	PROCEDURE	25	

PR_GET_REPORT_GPS	PROCEDURE	26	   IF c > 0

PR_GET_REPORT_GPS	PROCEDURE	27	   THEN

PR_GET_REPORT_GPS	PROCEDURE	28	      FOR a IN (SELECT DISTINCT dt FROM MERCH_REPORT_GPS_tmp)

PR_GET_REPORT_GPS	PROCEDURE	29	      LOOP

PR_GET_REPORT_GPS	PROCEDURE	30	         DELETE FROM MERCH_REPORT_GPS

PR_GET_REPORT_GPS	PROCEDURE	31	               WHERE DT = a.dt;

PR_GET_REPORT_GPS	PROCEDURE	32	

PR_GET_REPORT_GPS	PROCEDURE	33	         COMMIT;

PR_GET_REPORT_GPS	PROCEDURE	34	      END LOOP;

PR_GET_REPORT_GPS	PROCEDURE	35	

PR_GET_REPORT_GPS	PROCEDURE	36	      INSERT INTO MERCH_REPORT_GPS

PR_GET_REPORT_GPS	PROCEDURE	37	         SELECT * FROM MERCH_REPORT_GPS_tmp;

PR_GET_REPORT_GPS	PROCEDURE	38	

PR_GET_REPORT_GPS	PROCEDURE	39	      COMMIT;

PR_GET_REPORT_GPS	PROCEDURE	40	   END IF;

PR_GET_REPORT_GPS	PROCEDURE	41	END;
PR_GET_DATA	PROCEDURE	1	PROCEDURE        PR_get_data

PR_GET_DATA	PROCEDURE	2	IS

PR_GET_DATA	PROCEDURE	3	   r   INTEGER;

PR_GET_DATA	PROCEDURE	4	   c   INTEGER;

PR_GET_DATA	PROCEDURE	5	BEGIN

PR_GET_DATA	PROCEDURE	6	   INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	7	           VALUES (

PR_GET_DATA	PROCEDURE	8	                     'запущена процедура закачки данных из SW',

PR_GET_DATA	PROCEDURE	9	                     'get_data');

PR_GET_DATA	PROCEDURE	10	

PR_GET_DATA	PROCEDURE	11	   COMMIT;

PR_GET_DATA	PROCEDURE	12	

PR_GET_DATA	PROCEDURE	13	

PR_GET_DATA	PROCEDURE	14	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	15	             'Sales_Nac_By_Distr_2014',

PR_GET_DATA	PROCEDURE	16	             'sales_transit',

PR_GET_DATA	PROCEDURE	17	             '"Cust_id","Cust_Name","Y","M","Sales_Fact","Sales_Price",

PR_GET_DATA	PROCEDURE	18	             "Skid_Nacenka","Sales_2_5","Dop_Zarobotok",

PR_GET_DATA	PROCEDURE	19	             "FondMarketing","Sales_Fact_KK","Sales_Pricet_KK"',

PR_GET_DATA	PROCEDURE	20	             'CUST_ID,CUST_NAME,Y,M,SALES_FACT,SALES_PRICE,

PR_GET_DATA	PROCEDURE	21	             SKID_NACENKA,SALES_2_5,DOP_ZAROBOTOK,

PR_GET_DATA	PROCEDURE	22	             FondMarketing,Sales_Fact_KK,Sales_Pricet_KK')

PR_GET_DATA	PROCEDURE	23	     INTO r

PR_GET_DATA	PROCEDURE	24	     FROM DUAL;

PR_GET_DATA	PROCEDURE	25	

PR_GET_DATA	PROCEDURE	26	   SELECT COUNT (*) INTO c FROM sales_transit;

PR_GET_DATA	PROCEDURE	27	

PR_GET_DATA	PROCEDURE	28	   IF c > 0

PR_GET_DATA	PROCEDURE	29	   THEN

PR_GET_DATA	PROCEDURE	30	      FOR a IN (SELECT DISTINCT y, m FROM sales_transit)

PR_GET_DATA	PROCEDURE	31	      LOOP

PR_GET_DATA	PROCEDURE	32	         DELETE FROM sales

PR_GET_DATA	PROCEDURE	33	               WHERE y = a.y AND m = a.m;

PR_GET_DATA	PROCEDURE	34	

PR_GET_DATA	PROCEDURE	35	         COMMIT;

PR_GET_DATA	PROCEDURE	36	      END LOOP;

PR_GET_DATA	PROCEDURE	37	

PR_GET_DATA	PROCEDURE	38	      INSERT INTO sales

PR_GET_DATA	PROCEDURE	39	         SELECT * FROM sales_transit;

PR_GET_DATA	PROCEDURE	40	

PR_GET_DATA	PROCEDURE	41	      COMMIT;

PR_GET_DATA	PROCEDURE	42	   END IF;

PR_GET_DATA	PROCEDURE	43	

PR_GET_DATA	PROCEDURE	44	   SELECT fn_get_data ('tp_nets',

PR_GET_DATA	PROCEDURE	45	                       'tp_nets',

PR_GET_DATA	PROCEDURE	46	                       '

PR_GET_DATA	PROCEDURE	47	             "NET_KOD","NET","TP_KOD","isRC"

PR_GET_DATA	PROCEDURE	48	             ',

PR_GET_DATA	PROCEDURE	49	                       '

PR_GET_DATA	PROCEDURE	50	             NET_KOD,NET,TP_KOD,ISRC

PR_GET_DATA	PROCEDURE	51	             ')

PR_GET_DATA	PROCEDURE	52	     INTO r

PR_GET_DATA	PROCEDURE	53	     FROM DUAL;

PR_GET_DATA	PROCEDURE	54	

PR_GET_DATA	PROCEDURE	55	   SELECT fn_get_data ('tp_nets_kk',

PR_GET_DATA	PROCEDURE	56	                       'tp_nets_kk',

PR_GET_DATA	PROCEDURE	57	                       '

PR_GET_DATA	PROCEDURE	58	             "NET_KOD","NET","TP_KOD","isRC"

PR_GET_DATA	PROCEDURE	59	             ',

PR_GET_DATA	PROCEDURE	60	                       '

PR_GET_DATA	PROCEDURE	61	             NET_KOD,NET,TP_KOD,ISRC

PR_GET_DATA	PROCEDURE	62	             ')

PR_GET_DATA	PROCEDURE	63	     INTO r

PR_GET_DATA	PROCEDURE	64	     FROM DUAL;

PR_GET_DATA	PROCEDURE	65	

PR_GET_DATA	PROCEDURE	66	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	67	             'KPR_2015',

PR_GET_DATA	PROCEDURE	68	             'kpr_transit',

PR_GET_DATA	PROCEDURE	69	             '

PR_GET_DATA	PROCEDURE	70	             "country_id",M,Y,TAB_NUM,FIO_ETA,"Val_Plan","Val_Fact","AKB_Plan","AKB_Fact",

PR_GET_DATA	PROCEDURE	71	             "Cel_1_Plan","Cel_2_Plan","Cel_3_Plan","Cel_4_Plan",

PR_GET_DATA	PROCEDURE	72	             "Cel_1_Fact","Cel_2_Fact","Cel_3_Fact","Cel_4_Fact",

PR_GET_DATA	PROCEDURE	73	             "Focus_1_Plan","Focus_2_Plan","Focus_3_Plan","Focus_4_Plan","Focus_5_Plan",

PR_GET_DATA	PROCEDURE	74	             "Focus_1_Fact","Focus_2_Fact","Focus_3_Fact","Focus_4_Fact","Focus_5_Fact",

PR_GET_DATA	PROCEDURE	75	             "COFFEE_PLAN","COFFEE_FACT"

PR_GET_DATA	PROCEDURE	76	             ',

PR_GET_DATA	PROCEDURE	77	             '

PR_GET_DATA	PROCEDURE	78	             country_id,M,Y,TAB_NUM,ETA,Val_Plan,Val_Fact,AKB_Plan,AKB_Fact,

PR_GET_DATA	PROCEDURE	79	             Cel_1_Plan,Cel_2_Plan,Cel_3_Plan,Cel_4_Plan,

PR_GET_DATA	PROCEDURE	80	             Cel_1_Fact,Cel_2_Fact,Cel_3_Fact,Cel_4_Fact,

PR_GET_DATA	PROCEDURE	81	             Focus_1_Plan,Focus_2_Plan,Focus_3_Plan,Focus_4_Plan,Focus_5_Plan,

PR_GET_DATA	PROCEDURE	82	             Focus_1_Fact,Focus_2_Fact,Focus_3_Fact,Focus_4_Fact,Focus_5_Fact,

PR_GET_DATA	PROCEDURE	83	             COFFEE_PLAN,COFFEE_FACT

PR_GET_DATA	PROCEDURE	84	             ')

PR_GET_DATA	PROCEDURE	85	     INTO r

PR_GET_DATA	PROCEDURE	86	     FROM DUAL;

PR_GET_DATA	PROCEDURE	87	

PR_GET_DATA	PROCEDURE	88	

PR_GET_DATA	PROCEDURE	89	

PR_GET_DATA	PROCEDURE	90	   SELECT COUNT (*) INTO c FROM kpr_transit;

PR_GET_DATA	PROCEDURE	91	

PR_GET_DATA	PROCEDURE	92	   IF c > 0

PR_GET_DATA	PROCEDURE	93	   THEN

PR_GET_DATA	PROCEDURE	94	      FOR a IN (SELECT DISTINCT y, m FROM kpr_transit)

PR_GET_DATA	PROCEDURE	95	      LOOP

PR_GET_DATA	PROCEDURE	96	         DELETE FROM kpr

PR_GET_DATA	PROCEDURE	97	               WHERE y = a.y AND m = a.m;

PR_GET_DATA	PROCEDURE	98	

PR_GET_DATA	PROCEDURE	99	         COMMIT;

PR_GET_DATA	PROCEDURE	100	      END LOOP;

PR_GET_DATA	PROCEDURE	101	

PR_GET_DATA	PROCEDURE	102	      INSERT INTO kpr

PR_GET_DATA	PROCEDURE	103	         SELECT * FROM kpr_transit;

PR_GET_DATA	PROCEDURE	104	

PR_GET_DATA	PROCEDURE	105	      COMMIT;

PR_GET_DATA	PROCEDURE	106	   END IF;

PR_GET_DATA	PROCEDURE	107	

PR_GET_DATA	PROCEDURE	108	   DELETE FROM kpr

PR_GET_DATA	PROCEDURE	109	         WHERE dpt_id IS NULL;

PR_GET_DATA	PROCEDURE	110	

PR_GET_DATA	PROCEDURE	111	   COMMIT;

PR_GET_DATA	PROCEDURE	112	

PR_GET_DATA	PROCEDURE	113	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	114	             'Sales_Export',

PR_GET_DATA	PROCEDURE	115	             'SALES_EXPORT_TRANSIT',

PR_GET_DATA	PROCEDURE	116	             '"Country","Country_ID","M","Y","Qty","Summ_Grn","Summ_Dol","Summ_Evr"',

PR_GET_DATA	PROCEDURE	117	             'Country,Country_ID,M,Y,Qty,Summ_Grn,Summ_Dol,Summ_Evr')

PR_GET_DATA	PROCEDURE	118	     INTO r

PR_GET_DATA	PROCEDURE	119	     FROM DUAL;

PR_GET_DATA	PROCEDURE	120	

PR_GET_DATA	PROCEDURE	121	

PR_GET_DATA	PROCEDURE	122	

PR_GET_DATA	PROCEDURE	123	   SELECT COUNT (*) INTO c FROM SALES_EXPORT_TRANSIT;

PR_GET_DATA	PROCEDURE	124	

PR_GET_DATA	PROCEDURE	125	   IF c > 0

PR_GET_DATA	PROCEDURE	126	   THEN

PR_GET_DATA	PROCEDURE	127	      FOR a IN (SELECT DISTINCT y, m FROM SALES_EXPORT_TRANSIT)

PR_GET_DATA	PROCEDURE	128	      LOOP

PR_GET_DATA	PROCEDURE	129	         DELETE FROM SALES_EXPORT

PR_GET_DATA	PROCEDURE	130	               WHERE y = a.y AND m = a.m;

PR_GET_DATA	PROCEDURE	131	

PR_GET_DATA	PROCEDURE	132	         COMMIT;

PR_GET_DATA	PROCEDURE	133	      END LOOP;

PR_GET_DATA	PROCEDURE	134	

PR_GET_DATA	PROCEDURE	135	      INSERT INTO SALES_EXPORT

PR_GET_DATA	PROCEDURE	136	         SELECT * FROM SALES_EXPORT_TRANSIT;

PR_GET_DATA	PROCEDURE	137	

PR_GET_DATA	PROCEDURE	138	      COMMIT;

PR_GET_DATA	PROCEDURE	139	   END IF;

PR_GET_DATA	PROCEDURE	140	

PR_GET_DATA	PROCEDURE	141	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	142	             'a2014_01_mega_by_tt',

PR_GET_DATA	PROCEDURE	143	             'a14mega_transit',

PR_GET_DATA	PROCEDURE	144	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","Y","M",

PR_GET_DATA	PROCEDURE	145	             "SUMMA","Skidka","Bedt_Summ","ETA_TAB_NUMBER","Country","tp_type",

PR_GET_DATA	PROCEDURE	146	             "SummSkidka","SKU","COFFEE","S_Ya","NP","TP_KOD_DM","ETA_Coffee","KOD_FILIAL","PER_ZP"',

PR_GET_DATA	PROCEDURE	147	             'FIO_TS,TAB_NUM,ETA,TP_KOD,TP_UR,TP_ADDR,Y,M,

PR_GET_DATA	PROCEDURE	148	             SUMMA,Skidka,Bedt_Summ,ETA_TAB_NUMBER,Country,tp_type,

PR_GET_DATA	PROCEDURE	149	             SummSkidka,SKU,COFFEE,S_YA,NP,TP_KOD_DM,ETA_Coffee,KOD_FILIAL,PER_ZP')

PR_GET_DATA	PROCEDURE	150	     INTO r

PR_GET_DATA	PROCEDURE	151	     FROM DUAL;

PR_GET_DATA	PROCEDURE	152	

PR_GET_DATA	PROCEDURE	153	

PR_GET_DATA	PROCEDURE	154	

PR_GET_DATA	PROCEDURE	155	   SELECT COUNT (*) INTO c FROM a14mega_transit;

PR_GET_DATA	PROCEDURE	156	

PR_GET_DATA	PROCEDURE	157	   IF c > 0

PR_GET_DATA	PROCEDURE	158	   THEN

PR_GET_DATA	PROCEDURE	159	      INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	160	           VALUES ('delete from a14mega', 'get_data');

PR_GET_DATA	PROCEDURE	161	

PR_GET_DATA	PROCEDURE	162	      COMMIT;

PR_GET_DATA	PROCEDURE	163	

PR_GET_DATA	PROCEDURE	164	      FOR a IN (SELECT DISTINCT y, m FROM a14mega_transit)

PR_GET_DATA	PROCEDURE	165	      LOOP

PR_GET_DATA	PROCEDURE	166	         DELETE FROM a14mega

PR_GET_DATA	PROCEDURE	167	               WHERE y = a.y AND m = a.m;

PR_GET_DATA	PROCEDURE	168	

PR_GET_DATA	PROCEDURE	169	         COMMIT;

PR_GET_DATA	PROCEDURE	170	      END LOOP;

PR_GET_DATA	PROCEDURE	171	

PR_GET_DATA	PROCEDURE	172	      INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	173	           VALUES ('insert into a14mega', 'get_data');

PR_GET_DATA	PROCEDURE	174	

PR_GET_DATA	PROCEDURE	175	      COMMIT;

PR_GET_DATA	PROCEDURE	176	

PR_GET_DATA	PROCEDURE	177	      INSERT INTO a14mega

PR_GET_DATA	PROCEDURE	178	         SELECT * FROM a14mega_transit;

PR_GET_DATA	PROCEDURE	179	

PR_GET_DATA	PROCEDURE	180	      COMMIT;

PR_GET_DATA	PROCEDURE	181	

PR_GET_DATA	PROCEDURE	182	      INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	183	           VALUES ('delete from a14mega where dpt_id is null', 'get_data');

PR_GET_DATA	PROCEDURE	184	

PR_GET_DATA	PROCEDURE	185	      COMMIT;

PR_GET_DATA	PROCEDURE	186	

PR_GET_DATA	PROCEDURE	187	

PR_GET_DATA	PROCEDURE	188	      DELETE FROM a14mega

PR_GET_DATA	PROCEDURE	189	            WHERE dpt_id IS NULL;

PR_GET_DATA	PROCEDURE	190	

PR_GET_DATA	PROCEDURE	191	      COMMIT;

PR_GET_DATA	PROCEDURE	192	   /*INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	193	        VALUES ('delete from bud_svod_zp', 'get_data');

PR_GET_DATA	PROCEDURE	194	

PR_GET_DATA	PROCEDURE	195	   COMMIT;

PR_GET_DATA	PROCEDURE	196	

PR_GET_DATA	PROCEDURE	197	   DELETE FROM bud_svod_zp

PR_GET_DATA	PROCEDURE	198	         WHERE id IN (SELECT sv.id

PR_GET_DATA	PROCEDURE	199	                        FROM bud_svod_zp sv,

PR_GET_DATA	PROCEDURE	200	                             (SELECT DISTINCT m.h_eta, m.dt, m.dpt_id

PR_GET_DATA	PROCEDURE	201	                                FROM a14mega m) s

PR_GET_DATA	PROCEDURE	202	                       WHERE     sv.dt = s.dt(+)

PR_GET_DATA	PROCEDURE	203	                             AND sv.dpt_id = s.dpt_id(+)

PR_GET_DATA	PROCEDURE	204	                             AND sv.h_eta = s.h_eta(+)

PR_GET_DATA	PROCEDURE	205	                             AND sv.unscheduled = 0

PR_GET_DATA	PROCEDURE	206	                             AND s.h_eta IS NULL);

PR_GET_DATA	PROCEDURE	207	

PR_GET_DATA	PROCEDURE	208	   COMMIT;*/

PR_GET_DATA	PROCEDURE	209	   END IF;

PR_GET_DATA	PROCEDURE	210	

PR_GET_DATA	PROCEDURE	211	   INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	212	        VALUES ('execute UpadteBudSvodZP', 'get_data');

PR_GET_DATA	PROCEDURE	213	

PR_GET_DATA	PROCEDURE	214	   COMMIT;

PR_GET_DATA	PROCEDURE	215	

PR_GET_DATA	PROCEDURE	216	   UpadteBudSvodZP;

PR_GET_DATA	PROCEDURE	217	

PR_GET_DATA	PROCEDURE	218	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	219	             'networkplanfacttt',

PR_GET_DATA	PROCEDURE	220	             'networkplanfact_transit',

PR_GET_DATA	PROCEDURE	221	             'id_net,year,month,plan_kond,fakt_kond,plan_ng,fakt_ng,plan_kofe,fakt_kofe',

PR_GET_DATA	PROCEDURE	222	             'id_net,year,month,plan,fakt,plan_ng,fakt_ng,plan_coffee,fakt_coffee')

PR_GET_DATA	PROCEDURE	223	     INTO r

PR_GET_DATA	PROCEDURE	224	     FROM DUAL;

PR_GET_DATA	PROCEDURE	225	

PR_GET_DATA	PROCEDURE	226	   SELECT COUNT (*) INTO c FROM networkplanfact_transit;

PR_GET_DATA	PROCEDURE	227	

PR_GET_DATA	PROCEDURE	228	   IF c > 0

PR_GET_DATA	PROCEDURE	229	   THEN

PR_GET_DATA	PROCEDURE	230	      FOR a IN (SELECT DISTINCT year, month FROM networkplanfact_transit)

PR_GET_DATA	PROCEDURE	231	      LOOP

PR_GET_DATA	PROCEDURE	232	         DELETE FROM networkplanfact

PR_GET_DATA	PROCEDURE	233	               WHERE year = a.year AND month = a.month;

PR_GET_DATA	PROCEDURE	234	

PR_GET_DATA	PROCEDURE	235	         COMMIT;

PR_GET_DATA	PROCEDURE	236	      END LOOP;

PR_GET_DATA	PROCEDURE	237	

PR_GET_DATA	PROCEDURE	238	      INSERT INTO networkplanfact

PR_GET_DATA	PROCEDURE	239	         SELECT * FROM networkplanfact_transit;

PR_GET_DATA	PROCEDURE	240	

PR_GET_DATA	PROCEDURE	241	      COMMIT;

PR_GET_DATA	PROCEDURE	242	   END IF;

PR_GET_DATA	PROCEDURE	243	

PR_GET_DATA	PROCEDURE	244	   FOR A IN (SELECT npy.YEAR,

PR_GET_DATA	PROCEDURE	245	                    npy.id_net,

PR_GET_DATA	PROCEDURE	246	                    mk.MONTH,

PR_GET_DATA	PROCEDURE	247	                    nets_plan_month_koeff (npy.YEAR,

PR_GET_DATA	PROCEDURE	248	                                           mk.MONTH,

PR_GET_DATA	PROCEDURE	249	                                           npy.id_net,

PR_GET_DATA	PROCEDURE	250	                                           1)

PR_GET_DATA	PROCEDURE	251	                       koeff_ng,

PR_GET_DATA	PROCEDURE	252	                      npy.sales_ng

PR_GET_DATA	PROCEDURE	253	                    * nets_plan_month_koeff (npy.YEAR,

PR_GET_DATA	PROCEDURE	254	                                             mk.MONTH,

PR_GET_DATA	PROCEDURE	255	                                             npy.id_net,

PR_GET_DATA	PROCEDURE	256	                                             1)

PR_GET_DATA	PROCEDURE	257	                    / 100

PR_GET_DATA	PROCEDURE	258	                       summa_ng

PR_GET_DATA	PROCEDURE	259	               FROM month_koeff mk, nets_plan_year npy

PR_GET_DATA	PROCEDURE	260	              WHERE npy.plan_type = 1)

PR_GET_DATA	PROCEDURE	261	   LOOP

PR_GET_DATA	PROCEDURE	262	      UPDATE networkplanfact

PR_GET_DATA	PROCEDURE	263	         SET plan_ng = a.summa_ng

PR_GET_DATA	PROCEDURE	264	       WHERE     id_net = (SELECT sw_kod

PR_GET_DATA	PROCEDURE	265	                             FROM nets

PR_GET_DATA	PROCEDURE	266	                            WHERE id_net = a.id_net)

PR_GET_DATA	PROCEDURE	267	             AND year = a.year

PR_GET_DATA	PROCEDURE	268	             AND month = a.month;

PR_GET_DATA	PROCEDURE	269	

PR_GET_DATA	PROCEDURE	270	      COMMIT;

PR_GET_DATA	PROCEDURE	271	   END LOOP;

PR_GET_DATA	PROCEDURE	272	

PR_GET_DATA	PROCEDURE	273	   UPDATE nets_plan_month m

PR_GET_DATA	PROCEDURE	274	      SET payment_format = 1

PR_GET_DATA	PROCEDURE	275	    WHERE     m.plan_type IN (3, 4)

PR_GET_DATA	PROCEDURE	276	          AND m.payment_format = 1

PR_GET_DATA	PROCEDURE	277	          AND m.statya IN (SELECT id

PR_GET_DATA	PROCEDURE	278	                             FROM statya

PR_GET_DATA	PROCEDURE	279	                            WHERE parent = 42)

PR_GET_DATA	PROCEDURE	280	          AND m.year >= TO_CHAR (SYSDATE, 'yyyy') - 1;

PR_GET_DATA	PROCEDURE	281	

PR_GET_DATA	PROCEDURE	282	   COMMIT;

PR_GET_DATA	PROCEDURE	283	

PR_GET_DATA	PROCEDURE	284	   COVERINGPOINTSPOS_CHECK;

PR_GET_DATA	PROCEDURE	285	

PR_GET_DATA	PROCEDURE	286	   COMMIT;

PR_GET_DATA	PROCEDURE	287	

PR_GET_DATA	PROCEDURE	288	

PR_GET_DATA	PROCEDURE	289	

PR_GET_DATA	PROCEDURE	290	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	291	             'routes',

PR_GET_DATA	PROCEDURE	292	             'routes',

PR_GET_DATA	PROCEDURE	293	             '"ADDRESS", "CONTACT_FIO", "CONTACT_TEL", "DAY_POS", "ETA", "NTO",

PR_GET_DATA	PROCEDURE	294	              "STELAG", "TAB_NUMBER",

PR_GET_DATA	PROCEDURE	295	               "tp_kod", "TP_NAME", "TP_PLACE", "TP_ROUTE_NUM", "TP_TYPE",

PR_GET_DATA	PROCEDURE	296	                "TS", "TUMB", "Country", "OLStatus", "ETA_TAB_NUMBER",

PR_GET_DATA	PROCEDURE	297	                "latitude","longitude","filial"',

PR_GET_DATA	PROCEDURE	298	             'ADDRESS, CONTACT_FIO, CONTACT_TEL, DAY_POS, ETA, NTO,

PR_GET_DATA	PROCEDURE	299	              STELAG, TAB_NUMBER,

PR_GET_DATA	PROCEDURE	300	               TP_KOD, TP_NAME, TP_PLACE, TP_ROUTE_NUM, TP_TYPE,

PR_GET_DATA	PROCEDURE	301	                TS, TUMB, COUNTRY, OLSTATUS, ETA_TAB_NUMBER,

PR_GET_DATA	PROCEDURE	302	                latitude,longitude,filial')

PR_GET_DATA	PROCEDURE	303	     INTO r

PR_GET_DATA	PROCEDURE	304	     FROM DUAL;

PR_GET_DATA	PROCEDURE	305	

PR_GET_DATA	PROCEDURE	306	

PR_GET_DATA	PROCEDURE	307	

PR_GET_DATA	PROCEDURE	308	   DELETE FROM routes

PR_GET_DATA	PROCEDURE	309	         WHERE dpt_id IS NULL;

PR_GET_DATA	PROCEDURE	310	

PR_GET_DATA	PROCEDURE	311	   COMMIT;

PR_GET_DATA	PROCEDURE	312	

PR_GET_DATA	PROCEDURE	313	   pr_fill_spr_users_eta;

PR_GET_DATA	PROCEDURE	314	

PR_GET_DATA	PROCEDURE	315	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	316	             'dimProducts',

PR_GET_DATA	PROCEDURE	317	             'dimProduct',

PR_GET_DATA	PROCEDURE	318	             '"Product_id","Product_name_SW","ProductType_ID_SW",

PR_GET_DATA	PROCEDURE	319	             "ProductType_Name_SW","ProdGroup_ID_SW","ProdGroup_Name_SW",

PR_GET_DATA	PROCEDURE	320	             "Unit_ID_SW","Unit_Name_SW",SKU_ID,"TagID","Product_name_AVK",

PR_GET_DATA	PROCEDURE	321	             "Product_weight","Package_Qty","Product_SubType_AVK",

PR_GET_DATA	PROCEDURE	322	             "Product_Type_AVK","Product_SubGroup_AVK","Product_Group_AVK",

PR_GET_DATA	PROCEDURE	323	             "Unit_Name_AVK","Product_Brand","AltGroup","EANCode","DateInput",

PR_GET_DATA	PROCEDURE	324	             "Group_by_Product_ID"',

PR_GET_DATA	PROCEDURE	325	             'Product_id,Product_name_SW,ProductType_ID_SW,ProductType_Name_SW,

PR_GET_DATA	PROCEDURE	326	             ProdGroup_ID_SW,ProdGroup_Name_SW,Unit_ID_SW,Unit_Name_SW,SKU_ID,

PR_GET_DATA	PROCEDURE	327	             TagID,Product_name_AVK,Product_weight,Package_Qty,

PR_GET_DATA	PROCEDURE	328	             Product_SubType_AVK,Product_Type_AVK,Product_SubGroup_AVK,

PR_GET_DATA	PROCEDURE	329	             Product_Group_AVK,Unit_Name_AVK,Product_Brand,AltGroup,EANCode,

PR_GET_DATA	PROCEDURE	330	             DateInput,Group_by_Product_ID')

PR_GET_DATA	PROCEDURE	331	     INTO r

PR_GET_DATA	PROCEDURE	332	     FROM DUAL;

PR_GET_DATA	PROCEDURE	333	

PR_GET_DATA	PROCEDURE	334	   SELECT fn_get_data (

PR_GET_DATA	PROCEDURE	335	             'tblPriceAVK',

PR_GET_DATA	PROCEDURE	336	             'tblpriceavk',

PR_GET_DATA	PROCEDURE	337	             '"Sku_ID","Date","Price_Grn","Price_Usd","Price_Rus","RUS","USD","Country_ID","Discount","currency"',

PR_GET_DATA	PROCEDURE	338	             'SKU_ID,DT,PRICE_GRN,PRICE_USD,PRICE_RUS,RUS,USD,COUNTRY_ID,DISCOUNT,CURRENCY',

PR_GET_DATA	PROCEDURE	339	             'dbo.')

PR_GET_DATA	PROCEDURE	340	     INTO r

PR_GET_DATA	PROCEDURE	341	     FROM DUAL;

PR_GET_DATA	PROCEDURE	342	

PR_GET_DATA	PROCEDURE	343	   SELECT fn_get_data ('refCustomers',

PR_GET_DATA	PROCEDURE	344	                       'dzc_refCustomers',

PR_GET_DATA	PROCEDURE	345	                       NULL,

PR_GET_DATA	PROCEDURE	346	                       NULL,

PR_GET_DATA	PROCEDURE	347	                       '',

PR_GET_DATA	PROCEDURE	348	                       'MSSQLVOL')

PR_GET_DATA	PROCEDURE	349	     INTO r

PR_GET_DATA	PROCEDURE	350	     FROM DUAL;

PR_GET_DATA	PROCEDURE	351	

PR_GET_DATA	PROCEDURE	352	

PR_GET_DATA	PROCEDURE	353	

PR_GET_DATA	PROCEDURE	354	   SELECT fn_get_data ('refStatesOfExpences',

PR_GET_DATA	PROCEDURE	355	                       'dzc_refStatesOfExpences',

PR_GET_DATA	PROCEDURE	356	                       NULL,

PR_GET_DATA	PROCEDURE	357	                       NULL,

PR_GET_DATA	PROCEDURE	358	                       '',

PR_GET_DATA	PROCEDURE	359	                       'MSSQLVOL')

PR_GET_DATA	PROCEDURE	360	     INTO r

PR_GET_DATA	PROCEDURE	361	     FROM DUAL;

PR_GET_DATA	PROCEDURE	362	

PR_GET_DATA	PROCEDURE	363	

PR_GET_DATA	PROCEDURE	364	

PR_GET_DATA	PROCEDURE	365	   SELECT fn_get_data ('refDepartments',

PR_GET_DATA	PROCEDURE	366	                       'dzc_refDepartments',

PR_GET_DATA	PROCEDURE	367	                       '"DepartmentID","DepartemntName"',

PR_GET_DATA	PROCEDURE	368	                       'DepartmentId,DepartmentName',

PR_GET_DATA	PROCEDURE	369	                       '',

PR_GET_DATA	PROCEDURE	370	                       'MSSQLVOL')

PR_GET_DATA	PROCEDURE	371	     INTO r

PR_GET_DATA	PROCEDURE	372	     FROM DUAL;

PR_GET_DATA	PROCEDURE	373	

PR_GET_DATA	PROCEDURE	374	

PR_GET_DATA	PROCEDURE	375	

PR_GET_DATA	PROCEDURE	376	   SELECT fn_get_data ('refProductTypes',

PR_GET_DATA	PROCEDURE	377	                       'dzc_refProductTypes',

PR_GET_DATA	PROCEDURE	378	                       '"ProductType"',

PR_GET_DATA	PROCEDURE	379	                       'ProductType',

PR_GET_DATA	PROCEDURE	380	                       '',

PR_GET_DATA	PROCEDURE	381	                       'MSSQLVOL')

PR_GET_DATA	PROCEDURE	382	     INTO r

PR_GET_DATA	PROCEDURE	383	     FROM DUAL;

PR_GET_DATA	PROCEDURE	384	

PR_GET_DATA	PROCEDURE	385	

PR_GET_DATA	PROCEDURE	386	

PR_GET_DATA	PROCEDURE	387	   SELECT fn_get_data ('refCurrency',

PR_GET_DATA	PROCEDURE	388	                       'dzc_refCurrency',

PR_GET_DATA	PROCEDURE	389	                       NULL,

PR_GET_DATA	PROCEDURE	390	                       NULL,

PR_GET_DATA	PROCEDURE	391	                       '',

PR_GET_DATA	PROCEDURE	392	                       'MSSQLVOL')

PR_GET_DATA	PROCEDURE	393	     INTO r

PR_GET_DATA	PROCEDURE	394	     FROM DUAL;

PR_GET_DATA	PROCEDURE	395	

PR_GET_DATA	PROCEDURE	396	   SELECT fn_get_data ('vw_TPDM_vs_TPDW',

PR_GET_DATA	PROCEDURE	397	                       'vw_TPDM_vs_TPDW',

PR_GET_DATA	PROCEDURE	398	                       '"dm_id","ol_id"',

PR_GET_DATA	PROCEDURE	399	                       'DM_ID,OL_ID')

PR_GET_DATA	PROCEDURE	400	     INTO r

PR_GET_DATA	PROCEDURE	401	     FROM DUAL;

PR_GET_DATA	PROCEDURE	402	

PR_GET_DATA	PROCEDURE	403	   INSERT INTO full_log (text, prg)

PR_GET_DATA	PROCEDURE	404	           VALUES (

PR_GET_DATA	PROCEDURE	405	                     'завершена процедура закачки данных из SW',

PR_GET_DATA	PROCEDURE	406	                     'get_data');

PR_GET_DATA	PROCEDURE	407	

PR_GET_DATA	PROCEDURE	408	   COMMIT;

PR_GET_DATA	PROCEDURE	409	END;
PR_GET_COFFEE_DATA	PROCEDURE	1	PROCEDURE        PR_GET_coffee_DATA

PR_GET_COFFEE_DATA	PROCEDURE	2	IS

PR_GET_COFFEE_DATA	PROCEDURE	3	   r   INTEGER;

PR_GET_COFFEE_DATA	PROCEDURE	4	   c   INTEGER;

PR_GET_COFFEE_DATA	PROCEDURE	5	BEGIN

PR_GET_COFFEE_DATA	PROCEDURE	6	   INSERT INTO full_log (text, prg)

PR_GET_COFFEE_DATA	PROCEDURE	7	           VALUES (

PR_GET_COFFEE_DATA	PROCEDURE	8	                     'запущена процедура закачки данных по стандарту кофе',

PR_GET_COFFEE_DATA	PROCEDURE	9	                     'get_data');

PR_GET_COFFEE_DATA	PROCEDURE	10	

PR_GET_COFFEE_DATA	PROCEDURE	11	

PR_GET_COFFEE_DATA	PROCEDURE	12	

PR_GET_COFFEE_DATA	PROCEDURE	13	   SELECT fn_get_data (

PR_GET_COFFEE_DATA	PROCEDURE	14	             'vw_Standart_Coffee',

PR_GET_COFFEE_DATA	PROCEDURE	15	             'a16co_transit',

PR_GET_COFFEE_DATA	PROCEDURE	16	             '"VISITDATE","FIO_TS","TAB_NUM","FIO_ETA","DM_KOD","TP","TP_KOD_KEY","URL","TARGET","TARGET_INFO"',

PR_GET_COFFEE_DATA	PROCEDURE	17	             'VISITDATE,FIO_TS,TAB_NUM,FIO_ETA,DM_KOD,TP,TP_KOD_KEY,URL,TARGET,TARGET_INFO')

PR_GET_COFFEE_DATA	PROCEDURE	18	     INTO r

PR_GET_COFFEE_DATA	PROCEDURE	19	     FROM DUAL;

PR_GET_COFFEE_DATA	PROCEDURE	20	

PR_GET_COFFEE_DATA	PROCEDURE	21	   SELECT COUNT (*) INTO c FROM a16co_transit;

PR_GET_COFFEE_DATA	PROCEDURE	22	

PR_GET_COFFEE_DATA	PROCEDURE	23	   IF c > 0

PR_GET_COFFEE_DATA	PROCEDURE	24	   THEN

PR_GET_COFFEE_DATA	PROCEDURE	25	      DELETE FROM a16co

PR_GET_COFFEE_DATA	PROCEDURE	26	            WHERE visitdate IN (SELECT DISTINCT visitdate FROM a16co_transit);

PR_GET_COFFEE_DATA	PROCEDURE	27	

PR_GET_COFFEE_DATA	PROCEDURE	28	      INSERT INTO PERSIK.a16co (DM_KOD,

PR_GET_COFFEE_DATA	PROCEDURE	29	                                FIO_ETA,

PR_GET_COFFEE_DATA	PROCEDURE	30	                                FIO_TS,

PR_GET_COFFEE_DATA	PROCEDURE	31	                                H_FIO_ETA,

PR_GET_COFFEE_DATA	PROCEDURE	32	                                H_URL,

PR_GET_COFFEE_DATA	PROCEDURE	33	                                TAB_NUM,

PR_GET_COFFEE_DATA	PROCEDURE	34	                                TP,

PR_GET_COFFEE_DATA	PROCEDURE	35	                                TP_KOD_KEY,

PR_GET_COFFEE_DATA	PROCEDURE	36	                                URL,

PR_GET_COFFEE_DATA	PROCEDURE	37	                                VISITDATE,

PR_GET_COFFEE_DATA	PROCEDURE	38	                                TARGET,

PR_GET_COFFEE_DATA	PROCEDURE	39	                                TARGET_INFO)

PR_GET_COFFEE_DATA	PROCEDURE	40	         SELECT DM_KOD,

PR_GET_COFFEE_DATA	PROCEDURE	41	                FIO_ETA,

PR_GET_COFFEE_DATA	PROCEDURE	42	                FIO_TS,

PR_GET_COFFEE_DATA	PROCEDURE	43	                H_FIO_ETA,

PR_GET_COFFEE_DATA	PROCEDURE	44	                H_URL,

PR_GET_COFFEE_DATA	PROCEDURE	45	                TAB_NUM,

PR_GET_COFFEE_DATA	PROCEDURE	46	                TP,

PR_GET_COFFEE_DATA	PROCEDURE	47	                TP_KOD_KEY,

PR_GET_COFFEE_DATA	PROCEDURE	48	                URL,

PR_GET_COFFEE_DATA	PROCEDURE	49	                VISITDATE,

PR_GET_COFFEE_DATA	PROCEDURE	50	                TARGET,

PR_GET_COFFEE_DATA	PROCEDURE	51	                TARGET_INFO

PR_GET_COFFEE_DATA	PROCEDURE	52	           FROM PERSIK.a16co_transit;

PR_GET_COFFEE_DATA	PROCEDURE	53	   END IF;

PR_GET_COFFEE_DATA	PROCEDURE	54	

PR_GET_COFFEE_DATA	PROCEDURE	55	   INSERT INTO full_log (text, prg)

PR_GET_COFFEE_DATA	PROCEDURE	56	           VALUES (

PR_GET_COFFEE_DATA	PROCEDURE	57	                     'завершена процедура закачки данных по стандарту кофе',

PR_GET_COFFEE_DATA	PROCEDURE	58	                     'get_data');

PR_GET_COFFEE_DATA	PROCEDURE	59	

PR_GET_COFFEE_DATA	PROCEDURE	60	   COMMIT;

PR_GET_COFFEE_DATA	PROCEDURE	61	END;
PR_GET_ACT_DATA	PROCEDURE	1	PROCEDURE        PR_GET_ACT_DATA

PR_GET_ACT_DATA	PROCEDURE	2	IS

PR_GET_ACT_DATA	PROCEDURE	3	   r   INTEGER;

PR_GET_ACT_DATA	PROCEDURE	4	   c   INTEGER;

PR_GET_ACT_DATA	PROCEDURE	5	BEGIN

PR_GET_ACT_DATA	PROCEDURE	6	   INSERT INTO full_log (text, prg)

PR_GET_ACT_DATA	PROCEDURE	7	           VALUES (

PR_GET_ACT_DATA	PROCEDURE	8	                     'запущена процедура закачки данных по активностям',

PR_GET_ACT_DATA	PROCEDURE	9	                     'get_data');

PR_GET_ACT_DATA	PROCEDURE	10	

PR_GET_ACT_DATA	PROCEDURE	11	   COMMIT;

PR_GET_ACT_DATA	PROCEDURE	12	

PR_GET_ACT_DATA	PROCEDURE	13	   SELECT fn_get_data (

PR_GET_ACT_DATA	PROCEDURE	14	             'A2014_12_Activity',

PR_GET_ACT_DATA	PROCEDURE	15	             'p_activity_transit',

PR_GET_ACT_DATA	PROCEDURE	16	             '"USER_FIO","USER_INN","FIO_ETA","Activity_Date","Activity_Name","TP_QTY","H_LINK","Country"',

PR_GET_ACT_DATA	PROCEDURE	17	             'FIO,tab_num,FIO_ETA,dt,Name,TP_QTY,H_LINK,Country')

PR_GET_ACT_DATA	PROCEDURE	18	     INTO r

PR_GET_ACT_DATA	PROCEDURE	19	     FROM DUAL;

PR_GET_ACT_DATA	PROCEDURE	20	

PR_GET_ACT_DATA	PROCEDURE	21	   COMMIT;

PR_GET_ACT_DATA	PROCEDURE	22	

PR_GET_ACT_DATA	PROCEDURE	23	   SELECT COUNT (*) INTO c FROM p_activity_transit;

PR_GET_ACT_DATA	PROCEDURE	24	

PR_GET_ACT_DATA	PROCEDURE	25	   IF c > 0

PR_GET_ACT_DATA	PROCEDURE	26	   THEN

PR_GET_ACT_DATA	PROCEDURE	27	      DELETE FROM p_activity

PR_GET_ACT_DATA	PROCEDURE	28	            WHERE dt IN (SELECT DISTINCT dt FROM p_activity_transit);

PR_GET_ACT_DATA	PROCEDURE	29	

PR_GET_ACT_DATA	PROCEDURE	30	      INSERT INTO PERSIK.p_activity

PR_GET_ACT_DATA	PROCEDURE	31	         SELECT * FROM PERSIK.p_activity_transit;

PR_GET_ACT_DATA	PROCEDURE	32	   END IF;

PR_GET_ACT_DATA	PROCEDURE	33	

PR_GET_ACT_DATA	PROCEDURE	34	   INSERT INTO full_log (text, prg)

PR_GET_ACT_DATA	PROCEDURE	35	           VALUES (

PR_GET_ACT_DATA	PROCEDURE	36	                     'завершена процедура закачки данных по активностям',

PR_GET_ACT_DATA	PROCEDURE	37	                     'get_data');

PR_GET_ACT_DATA	PROCEDURE	38	

PR_GET_ACT_DATA	PROCEDURE	39	   COMMIT;

PR_GET_ACT_DATA	PROCEDURE	40	END;
PR_GET_ACTIVITIES_DATA	PROCEDURE	1	PROCEDURE        PR_get_activities_data

PR_GET_ACTIVITIES_DATA	PROCEDURE	2	IS

PR_GET_ACTIVITIES_DATA	PROCEDURE	3	   r   INTEGER;

PR_GET_ACTIVITIES_DATA	PROCEDURE	4	BEGIN

PR_GET_ACTIVITIES_DATA	PROCEDURE	5	   INSERT INTO full_log (text, prg)

PR_GET_ACTIVITIES_DATA	PROCEDURE	6	           VALUES (

PR_GET_ACTIVITIES_DATA	PROCEDURE	7	                     'запущена процедура закачки данных по акциям из SW',

PR_GET_ACTIVITIES_DATA	PROCEDURE	8	                     'get_data');

PR_GET_ACTIVITIES_DATA	PROCEDURE	9	

PR_GET_ACTIVITIES_DATA	PROCEDURE	10	   COMMIT;

PR_GET_ACTIVITIES_DATA	PROCEDURE	11	

PR_GET_ACTIVITIES_DATA	PROCEDURE	12	   /*SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	13	             'A2017_11_Chocolate_Season6',

PR_GET_ACTIVITIES_DATA	PROCEDURE	14	             'a1711cs6',

PR_GET_ACTIVITIES_DATA	PROCEDURE	15	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	16	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT')

PR_GET_ACTIVITIES_DATA	PROCEDURE	17	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	18	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	19	

PR_GET_ACTIVITIES_DATA	PROCEDURE	20	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	21	             'A2017_11_Chocolate_Season4',

PR_GET_ACTIVITIES_DATA	PROCEDURE	22	             'a1711cs4',

PR_GET_ACTIVITIES_DATA	PROCEDURE	23	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	24	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT')

PR_GET_ACTIVITIES_DATA	PROCEDURE	25	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	26	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	27	

PR_GET_ACTIVITIES_DATA	PROCEDURE	28	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	29	             'A2017_11_Strong_Three',

PR_GET_ACTIVITIES_DATA	PROCEDURE	30	             'a1711st',

PR_GET_ACTIVITIES_DATA	PROCEDURE	31	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	32	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	33	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	34	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	35	

PR_GET_ACTIVITIES_DATA	PROCEDURE	36	

PR_GET_ACTIVITIES_DATA	PROCEDURE	37	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	38	             'A2017_11_Season_Of_Shedevr',

PR_GET_ACTIVITIES_DATA	PROCEDURE	39	             'a1711ss',

PR_GET_ACTIVITIES_DATA	PROCEDURE	40	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	41	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	42	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	43	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	44	

PR_GET_ACTIVITIES_DATA	PROCEDURE	45	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	46	             'A2017_11_Exclusive_Set',

PR_GET_ACTIVITIES_DATA	PROCEDURE	47	             'a1711es',

PR_GET_ACTIVITIES_DATA	PROCEDURE	48	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	49	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	50	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	51	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	52	

PR_GET_ACTIVITIES_DATA	PROCEDURE	53	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	54	             'A2017_11_Coffee_Break',

PR_GET_ACTIVITIES_DATA	PROCEDURE	55	             'a1711cb',

PR_GET_ACTIVITIES_DATA	PROCEDURE	56	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	57	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	58	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	59	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	60	

PR_GET_ACTIVITIES_DATA	PROCEDURE	61	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	62	             'A2017_11_Choco_Season_Net',

PR_GET_ACTIVITIES_DATA	PROCEDURE	63	             'a1711csn',

PR_GET_ACTIVITIES_DATA	PROCEDURE	64	             '"FIO_TS","TAB_NUM","KOD_FILIAL","NET_KOD","NET_NAME","PLAN","FACT"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	65	             'FIO_TS,TAB_NUM,KOD_FILIAL,NET_KOD,NET_NAME,PLAN,FACT')

PR_GET_ACTIVITIES_DATA	PROCEDURE	66	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	67	     FROM DUAL;*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	68	

PR_GET_ACTIVITIES_DATA	PROCEDURE	69	   /*12*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	70	

PR_GET_ACTIVITIES_DATA	PROCEDURE	71	   /*SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	72	             'A2017_12_Bestsellers',

PR_GET_ACTIVITIES_DATA	PROCEDURE	73	             'a1712bs',

PR_GET_ACTIVITIES_DATA	PROCEDURE	74	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2","ACT_NABOR_3"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	75	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2,ACT_NABOR_3')

PR_GET_ACTIVITIES_DATA	PROCEDURE	76	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	77	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	78	

PR_GET_ACTIVITIES_DATA	PROCEDURE	79	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	80	             'A2017_12_Coffee_Break',

PR_GET_ACTIVITIES_DATA	PROCEDURE	81	             'a1712cbr',

PR_GET_ACTIVITIES_DATA	PROCEDURE	82	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	83	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	84	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	85	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	86	

PR_GET_ACTIVITIES_DATA	PROCEDURE	87	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	88	             'A2017_12_Exclusive_Set',

PR_GET_ACTIVITIES_DATA	PROCEDURE	89	             'a1712es',

PR_GET_ACTIVITIES_DATA	PROCEDURE	90	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2","ACT_NABOR_3"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	91	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2,ACT_NABOR_3')

PR_GET_ACTIVITIES_DATA	PROCEDURE	92	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	93	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	94	

PR_GET_ACTIVITIES_DATA	PROCEDURE	95	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	96	             'A2017_12_Christmas_Bell',

PR_GET_ACTIVITIES_DATA	PROCEDURE	97	             'a1712cb',

PR_GET_ACTIVITIES_DATA	PROCEDURE	98	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	99	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	100	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	101	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	102	

PR_GET_ACTIVITIES_DATA	PROCEDURE	103	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	104	             'A2017_12_NewYearsOrder1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	105	             'a1712nyo1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	106	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	107	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	108	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	109	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	110	

PR_GET_ACTIVITIES_DATA	PROCEDURE	111	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	112	             'A2017_12_NewYearsOrder2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	113	             'a1712nyo2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	114	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	115	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	116	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	117	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	118	

PR_GET_ACTIVITIES_DATA	PROCEDURE	119	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	120	             'A2017_12_NewYearsOrder3',

PR_GET_ACTIVITIES_DATA	PROCEDURE	121	             'a1712nyo3',

PR_GET_ACTIVITIES_DATA	PROCEDURE	122	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	123	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	124	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	125	     FROM DUAL;*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	126	

PR_GET_ACTIVITIES_DATA	PROCEDURE	127	   /* 2018.01 */

PR_GET_ACTIVITIES_DATA	PROCEDURE	128	

PR_GET_ACTIVITIES_DATA	PROCEDURE	129	   /*SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	130	             'A2018_01_Coffee_Choice',

PR_GET_ACTIVITIES_DATA	PROCEDURE	131	             'a1801cc',

PR_GET_ACTIVITIES_DATA	PROCEDURE	132	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	133	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	134	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	135	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	136	

PR_GET_ACTIVITIES_DATA	PROCEDURE	137	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	138	             'A2018_01_Christmas_Trees',

PR_GET_ACTIVITIES_DATA	PROCEDURE	139	             'a1801ct',

PR_GET_ACTIVITIES_DATA	PROCEDURE	140	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	141	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	142	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	143	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	144	

PR_GET_ACTIVITIES_DATA	PROCEDURE	145	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	146	             'A2018_01_New_Years_Gift',

PR_GET_ACTIVITIES_DATA	PROCEDURE	147	             'a1801nyg',

PR_GET_ACTIVITIES_DATA	PROCEDURE	148	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	149	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	150	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	151	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	152	

PR_GET_ACTIVITIES_DATA	PROCEDURE	153	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	154	             'A2018_01_Pokhrustim',

PR_GET_ACTIVITIES_DATA	PROCEDURE	155	             'a1801po',

PR_GET_ACTIVITIES_DATA	PROCEDURE	156	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	157	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	158	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	159	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	160	

PR_GET_ACTIVITIES_DATA	PROCEDURE	161	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	162	             'A2018_01_Snow_and_Kresko',

PR_GET_ACTIVITIES_DATA	PROCEDURE	163	             'a1801sk',

PR_GET_ACTIVITIES_DATA	PROCEDURE	164	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	165	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	166	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	167	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	168	

PR_GET_ACTIVITIES_DATA	PROCEDURE	169	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	170	             'A2018_01_Truffle_January',

PR_GET_ACTIVITIES_DATA	PROCEDURE	171	             'a1801tj',

PR_GET_ACTIVITIES_DATA	PROCEDURE	172	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	173	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	174	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	175	     FROM DUAL;*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	176	

PR_GET_ACTIVITIES_DATA	PROCEDURE	177	

PR_GET_ACTIVITIES_DATA	PROCEDURE	178	   /*2018.02*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	179	

PR_GET_ACTIVITIES_DATA	PROCEDURE	180	   /*SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	181	             'A2018_02_Priority_100_Percent',

PR_GET_ACTIVITIES_DATA	PROCEDURE	182	             'a1802pp',

PR_GET_ACTIVITIES_DATA	PROCEDURE	183	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	184	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	185	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	186	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	187	

PR_GET_ACTIVITIES_DATA	PROCEDURE	188	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	189	             'A2018_02_Crunchy_Land',

PR_GET_ACTIVITIES_DATA	PROCEDURE	190	             'a1802cl',

PR_GET_ACTIVITIES_DATA	PROCEDURE	191	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	192	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	193	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	194	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	195	

PR_GET_ACTIVITIES_DATA	PROCEDURE	196	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	197	             'A2018_02_Season_Of_Shedevr',

PR_GET_ACTIVITIES_DATA	PROCEDURE	198	             'a1802ss',

PR_GET_ACTIVITIES_DATA	PROCEDURE	199	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	200	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	201	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	202	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	203	

PR_GET_ACTIVITIES_DATA	PROCEDURE	204	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	205	             'A2018_02_Candy_Mix',

PR_GET_ACTIVITIES_DATA	PROCEDURE	206	             'a1802cm',

PR_GET_ACTIVITIES_DATA	PROCEDURE	207	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	208	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	209	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	210	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	211	

PR_GET_ACTIVITIES_DATA	PROCEDURE	212	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	213	             'A2018_02_Coffee_Boom',

PR_GET_ACTIVITIES_DATA	PROCEDURE	214	             'a1802cb',

PR_GET_ACTIVITIES_DATA	PROCEDURE	215	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	216	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	217	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	218	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	219	

PR_GET_ACTIVITIES_DATA	PROCEDURE	220	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	221	             'A2018_02_Catching_Baristi',

PR_GET_ACTIVITIES_DATA	PROCEDURE	222	             'a1802caba',

PR_GET_ACTIVITIES_DATA	PROCEDURE	223	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	224	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	225	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	226	     FROM DUAL;*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	227	

PR_GET_ACTIVITIES_DATA	PROCEDURE	228	   /*2018.03*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	229	

PR_GET_ACTIVITIES_DATA	PROCEDURE	230	   /*SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	231	             'A2018_03_Plus5_To_EASTER',

PR_GET_ACTIVITIES_DATA	PROCEDURE	232	             'a1803p5te',

PR_GET_ACTIVITIES_DATA	PROCEDURE	233	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	234	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	235	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	236	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	237	

PR_GET_ACTIVITIES_DATA	PROCEDURE	238	

PR_GET_ACTIVITIES_DATA	PROCEDURE	239	

PR_GET_ACTIVITIES_DATA	PROCEDURE	240	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	241	             'A2018_03_Crisps',

PR_GET_ACTIVITIES_DATA	PROCEDURE	242	             'a1803cr',

PR_GET_ACTIVITIES_DATA	PROCEDURE	243	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	244	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	245	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	246	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	247	

PR_GET_ACTIVITIES_DATA	PROCEDURE	248	

PR_GET_ACTIVITIES_DATA	PROCEDURE	249	

PR_GET_ACTIVITIES_DATA	PROCEDURE	250	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	251	             'A2018_03_Best_Offer',

PR_GET_ACTIVITIES_DATA	PROCEDURE	252	             'a1803bo',

PR_GET_ACTIVITIES_DATA	PROCEDURE	253	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	254	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	255	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	256	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	257	

PR_GET_ACTIVITIES_DATA	PROCEDURE	258	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	259	             'A2018_04_6_Boxes_of_Delicious',

PR_GET_ACTIVITIES_DATA	PROCEDURE	260	             'a1804bd',

PR_GET_ACTIVITIES_DATA	PROCEDURE	261	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	262	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	263	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	264	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	265	

PR_GET_ACTIVITIES_DATA	PROCEDURE	266	

PR_GET_ACTIVITIES_DATA	PROCEDURE	267	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	268	             'A2018_04_Chocolate_Every_Glad',

PR_GET_ACTIVITIES_DATA	PROCEDURE	269	             'a1804ceg',

PR_GET_ACTIVITIES_DATA	PROCEDURE	270	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	271	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	272	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	273	     FROM DUAL;*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	274	

PR_GET_ACTIVITIES_DATA	PROCEDURE	275	   /*SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	276	             'A2018_05_Season_BARISTI',

PR_GET_ACTIVITIES_DATA	PROCEDURE	277	             'a1805sb',

PR_GET_ACTIVITIES_DATA	PROCEDURE	278	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	279	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	280	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	281	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	282	

PR_GET_ACTIVITIES_DATA	PROCEDURE	283	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	284	             'A2018_05_Double_Benefit',

PR_GET_ACTIVITIES_DATA	PROCEDURE	285	             'a1805db',

PR_GET_ACTIVITIES_DATA	PROCEDURE	286	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	287	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	288	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	289	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	290	

PR_GET_ACTIVITIES_DATA	PROCEDURE	291	

PR_GET_ACTIVITIES_DATA	PROCEDURE	292	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	293	             'A2018_05_Simple_Arithmetic',

PR_GET_ACTIVITIES_DATA	PROCEDURE	294	             'a1805sa',

PR_GET_ACTIVITIES_DATA	PROCEDURE	295	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1","ACT_NABOR_2"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	296	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1,ACT_NABOR_2')

PR_GET_ACTIVITIES_DATA	PROCEDURE	297	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	298	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	299	

PR_GET_ACTIVITIES_DATA	PROCEDURE	300	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	301	             'A2018_05_Season_BARISTI2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	302	             'a1805sb2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	303	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	304	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	305	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	306	     FROM DUAL;*/

PR_GET_ACTIVITIES_DATA	PROCEDURE	307	

PR_GET_ACTIVITIES_DATA	PROCEDURE	308	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	309	             'A2018_06_Season_BARISTI3',

PR_GET_ACTIVITIES_DATA	PROCEDURE	310	             'a1806sb3',

PR_GET_ACTIVITIES_DATA	PROCEDURE	311	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	312	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	313	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	314	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	315	

PR_GET_ACTIVITIES_DATA	PROCEDURE	316	

PR_GET_ACTIVITIES_DATA	PROCEDURE	317	

PR_GET_ACTIVITIES_DATA	PROCEDURE	318	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	319	             'A2018_06_Sweet_Snack',

PR_GET_ACTIVITIES_DATA	PROCEDURE	320	             'a1806ss',

PR_GET_ACTIVITIES_DATA	PROCEDURE	321	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	322	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	323	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	324	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	325	

PR_GET_ACTIVITIES_DATA	PROCEDURE	326	

PR_GET_ACTIVITIES_DATA	PROCEDURE	327	

PR_GET_ACTIVITIES_DATA	PROCEDURE	328	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	329	             'A2018_06_Crisp_Holidays',

PR_GET_ACTIVITIES_DATA	PROCEDURE	330	             'a1806ch',

PR_GET_ACTIVITIES_DATA	PROCEDURE	331	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	332	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	333	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	334	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	335	

PR_GET_ACTIVITIES_DATA	PROCEDURE	336	

PR_GET_ACTIVITIES_DATA	PROCEDURE	337	

PR_GET_ACTIVITIES_DATA	PROCEDURE	338	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	339	             'A2018_07_Season_BARISTI4',

PR_GET_ACTIVITIES_DATA	PROCEDURE	340	             'a1807sb4',

PR_GET_ACTIVITIES_DATA	PROCEDURE	341	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	342	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	343	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	344	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	345	

PR_GET_ACTIVITIES_DATA	PROCEDURE	346	

PR_GET_ACTIVITIES_DATA	PROCEDURE	347	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	348	             'A2018_07_Month_of_Sticks_1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	349	             'a1807ms1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	350	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	351	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	352	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	353	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	354	

PR_GET_ACTIVITIES_DATA	PROCEDURE	355	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	356	             'A2018_07_Month_of_Sticks_2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	357	             'a1807ms2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	358	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	359	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	360	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	361	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	362	

PR_GET_ACTIVITIES_DATA	PROCEDURE	363	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	364	             'A2018_07_SUPERCRUNCH',

PR_GET_ACTIVITIES_DATA	PROCEDURE	365	             'a1807sc',

PR_GET_ACTIVITIES_DATA	PROCEDURE	366	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	367	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	368	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	369	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	370	

PR_GET_ACTIVITIES_DATA	PROCEDURE	371	

PR_GET_ACTIVITIES_DATA	PROCEDURE	372	

PR_GET_ACTIVITIES_DATA	PROCEDURE	373	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	374	             'A2018_07_SUPERCRUNCH-2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	375	             'a1807sc2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	376	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	377	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	378	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	379	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	380	

PR_GET_ACTIVITIES_DATA	PROCEDURE	381	

PR_GET_ACTIVITIES_DATA	PROCEDURE	382	

PR_GET_ACTIVITIES_DATA	PROCEDURE	383	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	384	             'A2018_07_SUMMER_SNACK_1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	385	             'a1807ss1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	386	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	387	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	388	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	389	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	390	

PR_GET_ACTIVITIES_DATA	PROCEDURE	391	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	392	             'A2018_07_SUMMER_SNACK_2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	393	             'a1807ss2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	394	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	395	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	396	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	397	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	398	

PR_GET_ACTIVITIES_DATA	PROCEDURE	399	

PR_GET_ACTIVITIES_DATA	PROCEDURE	400	

PR_GET_ACTIVITIES_DATA	PROCEDURE	401	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	402	             'A2018_07_Apron',

PR_GET_ACTIVITIES_DATA	PROCEDURE	403	             'a1807f',

PR_GET_ACTIVITIES_DATA	PROCEDURE	404	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	405	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	406	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	407	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	408	

PR_GET_ACTIVITIES_DATA	PROCEDURE	409	

PR_GET_ACTIVITIES_DATA	PROCEDURE	410	

PR_GET_ACTIVITIES_DATA	PROCEDURE	411	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	412	             'A2018_08_MAX_Proceeds',

PR_GET_ACTIVITIES_DATA	PROCEDURE	413	             'a1808mp',

PR_GET_ACTIVITIES_DATA	PROCEDURE	414	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","PLAN","FACT","PLAN_TARGET","FACT_TARGET"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	415	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,PLAN,FACT,PLAN_TARGET,FACT_TARGET')

PR_GET_ACTIVITIES_DATA	PROCEDURE	416	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	417	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	418	

PR_GET_ACTIVITIES_DATA	PROCEDURE	419	

PR_GET_ACTIVITIES_DATA	PROCEDURE	420	

PR_GET_ACTIVITIES_DATA	PROCEDURE	421	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	422	             'A2018_08_Season_BARISTI5',

PR_GET_ACTIVITIES_DATA	PROCEDURE	423	             'a1808sb5',

PR_GET_ACTIVITIES_DATA	PROCEDURE	424	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	425	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	426	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	427	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	428	

PR_GET_ACTIVITIES_DATA	PROCEDURE	429	

PR_GET_ACTIVITIES_DATA	PROCEDURE	430	

PR_GET_ACTIVITIES_DATA	PROCEDURE	431	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	432	             'A2018_08_Month_of_Sticks2_1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	433	             'a1808ms1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	434	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	435	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	436	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	437	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	438	

PR_GET_ACTIVITIES_DATA	PROCEDURE	439	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	440	             'A2018_08_Month_of_Sticks2_2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	441	             'a1808ms2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	442	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	443	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	444	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	445	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	446	

PR_GET_ACTIVITIES_DATA	PROCEDURE	447	

PR_GET_ACTIVITIES_DATA	PROCEDURE	448	

PR_GET_ACTIVITIES_DATA	PROCEDURE	449	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	450	             'A2018_08_Must_Have_1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	451	             'a1808mh1',

PR_GET_ACTIVITIES_DATA	PROCEDURE	452	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	453	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	454	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	455	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	456	

PR_GET_ACTIVITIES_DATA	PROCEDURE	457	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	458	             'A2018_08_Must_Have_2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	459	             'a1808mh2',

PR_GET_ACTIVITIES_DATA	PROCEDURE	460	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	461	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	462	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	463	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	464	

PR_GET_ACTIVITIES_DATA	PROCEDURE	465	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	466	             'A2018_08_Must_Have_3',

PR_GET_ACTIVITIES_DATA	PROCEDURE	467	             'a1808mh3',

PR_GET_ACTIVITIES_DATA	PROCEDURE	468	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	469	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	470	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	471	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	472	

PR_GET_ACTIVITIES_DATA	PROCEDURE	473	   SELECT fn_get_data (

PR_GET_ACTIVITIES_DATA	PROCEDURE	474	             'A2018_08_Refill_Shop',

PR_GET_ACTIVITIES_DATA	PROCEDURE	475	             'a1808rs',

PR_GET_ACTIVITIES_DATA	PROCEDURE	476	             '"FIO_TS","TAB_NUM","FIO_ETA","TP_KOD","TP_UR","TP_ADDR","NAKL","DATA","NAKL_SUMM","ACT_NABOR_1"',

PR_GET_ACTIVITIES_DATA	PROCEDURE	477	             'FIO_TS,TAB_NUM,FIO_ETA,TP_KOD,TP_UR,TP_ADDR,NAKL,DATA,NAKL_SUMM,ACT_NABOR_1')

PR_GET_ACTIVITIES_DATA	PROCEDURE	478	     INTO r

PR_GET_ACTIVITIES_DATA	PROCEDURE	479	     FROM DUAL;

PR_GET_ACTIVITIES_DATA	PROCEDURE	480	

PR_GET_ACTIVITIES_DATA	PROCEDURE	481	

PR_GET_ACTIVITIES_DATA	PROCEDURE	482	

PR_GET_ACTIVITIES_DATA	PROCEDURE	483	   INSERT INTO full_log (text, prg)

PR_GET_ACTIVITIES_DATA	PROCEDURE	484	           VALUES (

PR_GET_ACTIVITIES_DATA	PROCEDURE	485	                     'завершена процедура закачки данных по акциям из SW',

PR_GET_ACTIVITIES_DATA	PROCEDURE	486	                     'get_data');

PR_GET_ACTIVITIES_DATA	PROCEDURE	487	

PR_GET_ACTIVITIES_DATA	PROCEDURE	488	   COMMIT;

PR_GET_ACTIVITIES_DATA	PROCEDURE	489	END;
PR_FULL_UPDATE	PROCEDURE	1	PROCEDURE          "PR_FULL_UPDATE" (tn_   IN VARCHAR,

PR_FULL_UPDATE	PROCEDURE	2	                                                     ins   IN INTEGER := 0)

PR_FULL_UPDATE	PROCEDURE	3	IS

PR_FULL_UPDATE	PROCEDURE	4	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_FULL_UPDATE	PROCEDURE	5	   master_   INTEGER;

PR_FULL_UPDATE	PROCEDURE	6	BEGIN

PR_FULL_UPDATE	PROCEDURE	7	   DELETE FROM full

PR_FULL_UPDATE	PROCEDURE	8	         WHERE master = tn_;

PR_FULL_UPDATE	PROCEDURE	9	

PR_FULL_UPDATE	PROCEDURE	10	   IF ins = 1

PR_FULL_UPDATE	PROCEDURE	11	   THEN

PR_FULL_UPDATE	PROCEDURE	12	      FOR a

PR_FULL_UPDATE	PROCEDURE	13	         IN (SELECT DISTINCT fn_get_full (tn_, s.tn) full,

PR_FULL_UPDATE	PROCEDURE	14	                             s.tn slave,

PR_FULL_UPDATE	PROCEDURE	15	                             s.dpt_id,

PR_FULL_UPDATE	PROCEDURE	16	                             s.datauvol

PR_FULL_UPDATE	PROCEDURE	17	               FROM emp_exp e, user_list s

PR_FULL_UPDATE	PROCEDURE	18	              WHERE     e.emp_tn = s.tn

PR_FULL_UPDATE	PROCEDURE	19	                    AND ADD_MONTHS (TRUNC (NVL (s.datauvol, SYSDATE), 'mm'),

PR_FULL_UPDATE	PROCEDURE	20	                                    +1) >= TRUNC (SYSDATE, 'mm')

PR_FULL_UPDATE	PROCEDURE	21	                    AND s.dpt_id IS NOT NULL)

PR_FULL_UPDATE	PROCEDURE	22	      LOOP

PR_FULL_UPDATE	PROCEDURE	23	         IF a.full <> -1

PR_FULL_UPDATE	PROCEDURE	24	         THEN

PR_FULL_UPDATE	PROCEDURE	25	            INSERT INTO full (full,

PR_FULL_UPDATE	PROCEDURE	26	                              master,

PR_FULL_UPDATE	PROCEDURE	27	                              slave,

PR_FULL_UPDATE	PROCEDURE	28	                              dpt_id,

PR_FULL_UPDATE	PROCEDURE	29	                              datauvol)

PR_FULL_UPDATE	PROCEDURE	30	                 VALUES (a.full,

PR_FULL_UPDATE	PROCEDURE	31	                         tn_,

PR_FULL_UPDATE	PROCEDURE	32	                         a.slave,

PR_FULL_UPDATE	PROCEDURE	33	                         a.dpt_id,

PR_FULL_UPDATE	PROCEDURE	34	                         a.datauvol);

PR_FULL_UPDATE	PROCEDURE	35	         END IF;

PR_FULL_UPDATE	PROCEDURE	36	      END LOOP;

PR_FULL_UPDATE	PROCEDURE	37	   END IF;

PR_FULL_UPDATE	PROCEDURE	38	

PR_FULL_UPDATE	PROCEDURE	39	   COMMIT;

PR_FULL_UPDATE	PROCEDURE	40	END;

PR_FULL_UPDATE	PROCEDURE	41	 

PR_FULL_UPDATE	PROCEDURE	42	 

PR_FULL_UPDATE	PROCEDURE	43	 

PR_FULL_UPDATE	PROCEDURE	44	 
PR_FREE_STAFF	PROCEDURE	1	PROCEDURE        "PR_FREE_STAFF" (id_ IN INTEGER)

PR_FREE_STAFF	PROCEDURE	2	IS

PR_FREE_STAFF	PROCEDURE	3	   r          VARCHAR (255);

PR_FREE_STAFF	PROCEDURE	4	   tn_is_db   INTEGER;

PR_FREE_STAFF	PROCEDURE	5	BEGIN

PR_FREE_STAFF	PROCEDURE	6	   FOR a IN (SELECT *

PR_FREE_STAFF	PROCEDURE	7	               FROM free_staff

PR_FREE_STAFF	PROCEDURE	8	              WHERE id = id_)

PR_FREE_STAFF	PROCEDURE	9	   LOOP

PR_FREE_STAFF	PROCEDURE	10	      UPDATE spr_users

PR_FREE_STAFF	PROCEDURE	11	         SET access_ocenka = 0

PR_FREE_STAFF	PROCEDURE	12	       WHERE tn = a.tn;

PR_FREE_STAFF	PROCEDURE	13	

PR_FREE_STAFF	PROCEDURE	14	      COMMIT;

PR_FREE_STAFF	PROCEDURE	15	

PR_FREE_STAFF	PROCEDURE	16	      UPDATE spdtree

PR_FREE_STAFF	PROCEDURE	17	         SET datauvol = a.datauvol

PR_FREE_STAFF	PROCEDURE	18	       WHERE svideninn = a.tn;

PR_FREE_STAFF	PROCEDURE	19	

PR_FREE_STAFF	PROCEDURE	20	      COMMIT;

PR_FREE_STAFF	PROCEDURE	21	

PR_FREE_STAFF	PROCEDURE	22	      SELECT is_db

PR_FREE_STAFF	PROCEDURE	23	        INTO tn_is_db

PR_FREE_STAFF	PROCEDURE	24	        FROM spdtree

PR_FREE_STAFF	PROCEDURE	25	       WHERE svideninn = a.tn;

PR_FREE_STAFF	PROCEDURE	26	

PR_FREE_STAFF	PROCEDURE	27	      IF a.tn_new_db IS NOT NULL AND tn_is_db = 1 AND 0 = 1 /* temporary disabled */

PR_FREE_STAFF	PROCEDURE	28	      THEN

PR_FREE_STAFF	PROCEDURE	29	         UPDATE spdtree

PR_FREE_STAFF	PROCEDURE	30	            SET is_db = 1

PR_FREE_STAFF	PROCEDURE	31	          WHERE svideninn = a.tn_new_db;

PR_FREE_STAFF	PROCEDURE	32	

PR_FREE_STAFF	PROCEDURE	33	         COMMIT;

PR_FREE_STAFF	PROCEDURE	34	         pr_bud_replace_db (a.tn, a.tn_new_db);

PR_FREE_STAFF	PROCEDURE	35	         pr_bud_replace_db_accept (a.tn, a.tn_new_db);

PR_FREE_STAFF	PROCEDURE	36	

PR_FREE_STAFF	PROCEDURE	37	         UPDATE spdtree

PR_FREE_STAFF	PROCEDURE	38	            SET is_db = 0

PR_FREE_STAFF	PROCEDURE	39	          WHERE svideninn = a.tn;

PR_FREE_STAFF	PROCEDURE	40	

PR_FREE_STAFF	PROCEDURE	41	         COMMIT;

PR_FREE_STAFF	PROCEDURE	42	      END IF;

PR_FREE_STAFF	PROCEDURE	43	

PR_FREE_STAFF	PROCEDURE	44	      IF a.val_new IN (1, 2)

PR_FREE_STAFF	PROCEDURE	45	      THEN

PR_FREE_STAFF	PROCEDURE	46	         FOR a1 IN (SELECT *

PR_FREE_STAFF	PROCEDURE	47	                      FROM emp_exp

PR_FREE_STAFF	PROCEDURE	48	                     WHERE exp_tn = a.tn AND full = 1)

PR_FREE_STAFF	PROCEDURE	49	         LOOP

PR_FREE_STAFF	PROCEDURE	50	            SELECT fn_empexpdel (a1.emp_tn, a1.exp_tn) INTO r FROM DUAL;

PR_FREE_STAFF	PROCEDURE	51	

PR_FREE_STAFF	PROCEDURE	52	            SELECT fn_emp_exp_ins (a1.emp_tn, a.tn_new, 1) INTO r FROM DUAL;

PR_FREE_STAFF	PROCEDURE	53	         END LOOP;

PR_FREE_STAFF	PROCEDURE	54	

PR_FREE_STAFF	PROCEDURE	55	         FOR a2 IN (SELECT *

PR_FREE_STAFF	PROCEDURE	56	                      FROM emp_exp

PR_FREE_STAFF	PROCEDURE	57	                     WHERE exp_tn = a.tn AND emp_tn <> exp_tn AND full = 0)

PR_FREE_STAFF	PROCEDURE	58	         LOOP

PR_FREE_STAFF	PROCEDURE	59	            SELECT fn_empexpdel (a2.emp_tn, a2.exp_tn) INTO r FROM DUAL;

PR_FREE_STAFF	PROCEDURE	60	         END LOOP;

PR_FREE_STAFF	PROCEDURE	61	

PR_FREE_STAFF	PROCEDURE	62	         UPDATE p_prob_inst

PR_FREE_STAFF	PROCEDURE	63	            SET inst_tn = a.tn_new

PR_FREE_STAFF	PROCEDURE	64	          WHERE inst_tn = a.tn;

PR_FREE_STAFF	PROCEDURE	65	

PR_FREE_STAFF	PROCEDURE	66	         UPDATE p_prob_inst

PR_FREE_STAFF	PROCEDURE	67	            SET chief_tn = a.tn_new

PR_FREE_STAFF	PROCEDURE	68	          WHERE chief_tn = a.tn;

PR_FREE_STAFF	PROCEDURE	69	

PR_FREE_STAFF	PROCEDURE	70	         UPDATE p_prob_inst

PR_FREE_STAFF	PROCEDURE	71	            SET dir_tn = a.tn_new

PR_FREE_STAFF	PROCEDURE	72	          WHERE dir_tn = a.tn;

PR_FREE_STAFF	PROCEDURE	73	      END IF;

PR_FREE_STAFF	PROCEDURE	74	

PR_FREE_STAFF	PROCEDURE	75	      DELETE FROM assist

PR_FREE_STAFF	PROCEDURE	76	            WHERE a.tn IN (child, parent);

PR_FREE_STAFF	PROCEDURE	77	

PR_FREE_STAFF	PROCEDURE	78	      COMMIT;

PR_FREE_STAFF	PROCEDURE	79	   END LOOP;

PR_FREE_STAFF	PROCEDURE	80	END;
PR_FILL_SPR_USERS_ETA	PROCEDURE	1	PROCEDURE        "PR_FILL_SPR_USERS_ETA"

PR_FILL_SPR_USERS_ETA	PROCEDURE	2	IS

PR_FILL_SPR_USERS_ETA	PROCEDURE	3	   i        INTEGER;

PR_FILL_SPR_USERS_ETA	PROCEDURE	4	   login_   VARCHAR2 (255);

PR_FILL_SPR_USERS_ETA	PROCEDURE	5	BEGIN

PR_FILL_SPR_USERS_ETA	PROCEDURE	6	   FOR a

PR_FILL_SPR_USERS_ETA	PROCEDURE	7	      IN (SELECT x.*

PR_FILL_SPR_USERS_ETA	PROCEDURE	8	            FROM (  SELECT r.eta, r.h_eta, r.dpt_id

PR_FILL_SPR_USERS_ETA	PROCEDURE	9	                      FROM routes r

PR_FILL_SPR_USERS_ETA	PROCEDURE	10	                     WHERE r.tab_number <> 0 AND dpt_id IS NOT NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	11	                  GROUP BY r.h_eta,

PR_FILL_SPR_USERS_ETA	PROCEDURE	12	                           r.eta,

PR_FILL_SPR_USERS_ETA	PROCEDURE	13	                           r.dpt_id,

PR_FILL_SPR_USERS_ETA	PROCEDURE	14	                           r.country) x,

PR_FILL_SPR_USERS_ETA	PROCEDURE	15	                 spr_users_eta s

PR_FILL_SPR_USERS_ETA	PROCEDURE	16	           WHERE     x.h_eta = s.h_eta(+)

PR_FILL_SPR_USERS_ETA	PROCEDURE	17	                 AND x.dpt_id = s.dpt_id(+)

PR_FILL_SPR_USERS_ETA	PROCEDURE	18	                 AND s.h_eta IS NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	19	                 AND s.dpt_id IS NULL)

PR_FILL_SPR_USERS_ETA	PROCEDURE	20	   LOOP

PR_FILL_SPR_USERS_ETA	PROCEDURE	21	      BEGIN

PR_FILL_SPR_USERS_ETA	PROCEDURE	22	         INSERT INTO spr_users_eta (eta, h_eta, dpt_id)

PR_FILL_SPR_USERS_ETA	PROCEDURE	23	              VALUES (a.eta, a.h_eta, a.dpt_id);

PR_FILL_SPR_USERS_ETA	PROCEDURE	24	

PR_FILL_SPR_USERS_ETA	PROCEDURE	25	         COMMIT;

PR_FILL_SPR_USERS_ETA	PROCEDURE	26	      EXCEPTION

PR_FILL_SPR_USERS_ETA	PROCEDURE	27	         WHEN OTHERS

PR_FILL_SPR_USERS_ETA	PROCEDURE	28	         THEN

PR_FILL_SPR_USERS_ETA	PROCEDURE	29	            ROLLBACK;

PR_FILL_SPR_USERS_ETA	PROCEDURE	30	      END;

PR_FILL_SPR_USERS_ETA	PROCEDURE	31	   END LOOP;

PR_FILL_SPR_USERS_ETA	PROCEDURE	32	

PR_FILL_SPR_USERS_ETA	PROCEDURE	33	

PR_FILL_SPR_USERS_ETA	PROCEDURE	34	

PR_FILL_SPR_USERS_ETA	PROCEDURE	35	   FOR a

PR_FILL_SPR_USERS_ETA	PROCEDURE	36	      IN (SELECT s.*

PR_FILL_SPR_USERS_ETA	PROCEDURE	37	            FROM (  SELECT r.eta, r.h_eta, r.dpt_id

PR_FILL_SPR_USERS_ETA	PROCEDURE	38	                      FROM routes r

PR_FILL_SPR_USERS_ETA	PROCEDURE	39	                     WHERE r.tab_number <> 0 AND dpt_id IS NOT NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	40	                  GROUP BY r.h_eta,

PR_FILL_SPR_USERS_ETA	PROCEDURE	41	                           r.eta,

PR_FILL_SPR_USERS_ETA	PROCEDURE	42	                           r.dpt_id,

PR_FILL_SPR_USERS_ETA	PROCEDURE	43	                           r.country) x,

PR_FILL_SPR_USERS_ETA	PROCEDURE	44	                 spr_users_eta s

PR_FILL_SPR_USERS_ETA	PROCEDURE	45	           WHERE     x.h_eta(+) = s.h_eta

PR_FILL_SPR_USERS_ETA	PROCEDURE	46	                 AND x.dpt_id(+) = s.dpt_id

PR_FILL_SPR_USERS_ETA	PROCEDURE	47	                 AND x.h_eta IS NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	48	                 AND x.dpt_id IS NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	49	                 AND s.datauvol IS NULL)

PR_FILL_SPR_USERS_ETA	PROCEDURE	50	   LOOP

PR_FILL_SPR_USERS_ETA	PROCEDURE	51	      /*DELETE FROM spr_users_eta

PR_FILL_SPR_USERS_ETA	PROCEDURE	52	            WHERE h_eta = a.h_eta AND dpt_id = a.dpt_id;*/

PR_FILL_SPR_USERS_ETA	PROCEDURE	53	      UPDATE spr_users_eta

PR_FILL_SPR_USERS_ETA	PROCEDURE	54	         SET datauvol = TRUNC (SYSDATE) - 1

PR_FILL_SPR_USERS_ETA	PROCEDURE	55	       WHERE h_eta = a.h_eta AND dpt_id = a.dpt_id;

PR_FILL_SPR_USERS_ETA	PROCEDURE	56	   END LOOP;

PR_FILL_SPR_USERS_ETA	PROCEDURE	57	

PR_FILL_SPR_USERS_ETA	PROCEDURE	58	   COMMIT;

PR_FILL_SPR_USERS_ETA	PROCEDURE	59	

PR_FILL_SPR_USERS_ETA	PROCEDURE	60	   FOR a

PR_FILL_SPR_USERS_ETA	PROCEDURE	61	      IN (SELECT s.*

PR_FILL_SPR_USERS_ETA	PROCEDURE	62	            FROM (  SELECT r.eta, r.h_eta, r.dpt_id

PR_FILL_SPR_USERS_ETA	PROCEDURE	63	                      FROM routes r

PR_FILL_SPR_USERS_ETA	PROCEDURE	64	                     WHERE r.tab_number <> 0 AND dpt_id IS NOT NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	65	                  GROUP BY r.h_eta,

PR_FILL_SPR_USERS_ETA	PROCEDURE	66	                           r.eta,

PR_FILL_SPR_USERS_ETA	PROCEDURE	67	                           r.dpt_id,

PR_FILL_SPR_USERS_ETA	PROCEDURE	68	                           r.country) x,

PR_FILL_SPR_USERS_ETA	PROCEDURE	69	                 spr_users_eta s

PR_FILL_SPR_USERS_ETA	PROCEDURE	70	           WHERE     x.h_eta = s.h_eta

PR_FILL_SPR_USERS_ETA	PROCEDURE	71	                 AND x.dpt_id = s.dpt_id

PR_FILL_SPR_USERS_ETA	PROCEDURE	72	                 AND s.datauvol IS NOT NULL)

PR_FILL_SPR_USERS_ETA	PROCEDURE	73	   LOOP

PR_FILL_SPR_USERS_ETA	PROCEDURE	74	      UPDATE spr_users_eta

PR_FILL_SPR_USERS_ETA	PROCEDURE	75	         SET datauvol = NULL

PR_FILL_SPR_USERS_ETA	PROCEDURE	76	       WHERE h_eta = a.h_eta AND dpt_id = a.dpt_id;

PR_FILL_SPR_USERS_ETA	PROCEDURE	77	   END LOOP;

PR_FILL_SPR_USERS_ETA	PROCEDURE	78	/*DELETE FROM spr_users

PR_FILL_SPR_USERS_ETA	PROCEDURE	79	      WHERE     login LIKE 'eta%'

PR_FILL_SPR_USERS_ETA	PROCEDURE	80	            AND login NOT IN (SELECT login FROM spr_users_eta);

PR_FILL_SPR_USERS_ETA	PROCEDURE	81	

PR_FILL_SPR_USERS_ETA	PROCEDURE	82	COMMIT;*/

PR_FILL_SPR_USERS_ETA	PROCEDURE	83	END;
PR_FAILED_JOBS_NOTIFY	PROCEDURE	1	PROCEDURE        pr_FAILED_JOBS_NOTIFY

PR_FAILED_JOBS_NOTIFY	PROCEDURE	2	IS

PR_FAILED_JOBS_NOTIFY	PROCEDURE	3	   address_list   VARCHAR2 (4000);

PR_FAILED_JOBS_NOTIFY	PROCEDURE	4	BEGIN

PR_FAILED_JOBS_NOTIFY	PROCEDURE	5	   SELECT wm_concat (e_mail)

PR_FAILED_JOBS_NOTIFY	PROCEDURE	6	     INTO address_list

PR_FAILED_JOBS_NOTIFY	PROCEDURE	7	     FROM user_list

PR_FAILED_JOBS_NOTIFY	PROCEDURE	8	    WHERE is_admin = 1 AND datauvol IS NULL;

PR_FAILED_JOBS_NOTIFY	PROCEDURE	9	

PR_FAILED_JOBS_NOTIFY	PROCEDURE	10	   FOR a

PR_FAILED_JOBS_NOTIFY	PROCEDURE	11	      IN (  SELECT j.job_name,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	12	                   j.last_start_date,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	13	                   j.last_run_duration,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	14	                   l.log_date,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	15	                   l.status,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	16	                   l.additional_info

PR_FAILED_JOBS_NOTIFY	PROCEDURE	17	              FROM USER_SCHEDULER_JOBS j,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	18	                   (SELECT t1.*

PR_FAILED_JOBS_NOTIFY	PROCEDURE	19	                      FROM USER_SCHEDULER_JOB_RUN_DETAILS t1,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	20	                           (  SELECT JOB_NAME, MAX (log_id) log_id

PR_FAILED_JOBS_NOTIFY	PROCEDURE	21	                                FROM USER_SCHEDULER_JOB_RUN_DETAILS

PR_FAILED_JOBS_NOTIFY	PROCEDURE	22	                            /*WHERE status <> 'SUCCEEDED'*/

PR_FAILED_JOBS_NOTIFY	PROCEDURE	23	                            GROUP BY JOB_NAME) t2

PR_FAILED_JOBS_NOTIFY	PROCEDURE	24	                     WHERE t1.JOB_NAME = t2.JOB_NAME AND t1.log_id = t2.log_id) l

PR_FAILED_JOBS_NOTIFY	PROCEDURE	25	             WHERE     j.state <> 'DISABLED'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	26	                   AND schedule_type <> 'ONCE'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	27	                   AND j.JOB_NAME = l.JOB_NAME(+)

PR_FAILED_JOBS_NOTIFY	PROCEDURE	28	                   AND l.status <> 'SUCCEEDED'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	29	                   AND j.job_name <> 'J_FAILED_JOBS_NOTIFY'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	30	          ORDER BY j.job_name)

PR_FAILED_JOBS_NOTIFY	PROCEDURE	31	   LOOP

PR_FAILED_JOBS_NOTIFY	PROCEDURE	32	      pr_sendmail (

PR_FAILED_JOBS_NOTIFY	PROCEDURE	33	         address_list,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	34	         'Oracle Job Failed: ' || a.job_name,

PR_FAILED_JOBS_NOTIFY	PROCEDURE	35	            'job_name: '

PR_FAILED_JOBS_NOTIFY	PROCEDURE	36	         || a.job_name

PR_FAILED_JOBS_NOTIFY	PROCEDURE	37	         || '<br>'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	38	         || 'last_start_date: '

PR_FAILED_JOBS_NOTIFY	PROCEDURE	39	         || a.last_start_date

PR_FAILED_JOBS_NOTIFY	PROCEDURE	40	         || '<br>'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	41	         || 'last_run_duration: '

PR_FAILED_JOBS_NOTIFY	PROCEDURE	42	         || a.last_run_duration

PR_FAILED_JOBS_NOTIFY	PROCEDURE	43	         || '<br>'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	44	         || 'log_date: '

PR_FAILED_JOBS_NOTIFY	PROCEDURE	45	         || a.log_date

PR_FAILED_JOBS_NOTIFY	PROCEDURE	46	         || '<br>'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	47	         || 'status: '

PR_FAILED_JOBS_NOTIFY	PROCEDURE	48	         || a.status

PR_FAILED_JOBS_NOTIFY	PROCEDURE	49	         || '<br>'

PR_FAILED_JOBS_NOTIFY	PROCEDURE	50	         || 'additional_info: '

PR_FAILED_JOBS_NOTIFY	PROCEDURE	51	         || a.additional_info);

PR_FAILED_JOBS_NOTIFY	PROCEDURE	52	   END LOOP;

PR_FAILED_JOBS_NOTIFY	PROCEDURE	53	END;
PR_CREATE_CALENDAR	PROCEDURE	1	PROCEDURE        "PR_CREATE_CALENDAR" (p_sd    DATE,

PR_CREATE_CALENDAR	PROCEDURE	2	                                                         p_ed    DATE)

PR_CREATE_CALENDAR	PROCEDURE	3	AS

PR_CREATE_CALENDAR	PROCEDURE	4	   i     INTEGER;

PR_CREATE_CALENDAR	PROCEDURE	5	   sd    DATE;

PR_CREATE_CALENDAR	PROCEDURE	6	   ed    DATE;

PR_CREATE_CALENDAR	PROCEDURE	7	   wd    INTEGER;

PR_CREATE_CALENDAR	PROCEDURE	8	   wm_   INTEGER;

PR_CREATE_CALENDAR	PROCEDURE	9	BEGIN

PR_CREATE_CALENDAR	PROCEDURE	10	   sd := p_sd;

PR_CREATE_CALENDAR	PROCEDURE	11	   ed := p_ed;

PR_CREATE_CALENDAR	PROCEDURE	12	   i := 1;

PR_CREATE_CALENDAR	PROCEDURE	13	

PR_CREATE_CALENDAR	PROCEDURE	14	   DELETE FROM calendar

PR_CREATE_CALENDAR	PROCEDURE	15	         WHERE data BETWEEN sd AND ed;

PR_CREATE_CALENDAR	PROCEDURE	16	

PR_CREATE_CALENDAR	PROCEDURE	17	   WHILE ed >= sd

PR_CREATE_CALENDAR	PROCEDURE	18	   LOOP

PR_CREATE_CALENDAR	PROCEDURE	19	      IF (TO_CHAR (sd, 'd') <= 5)

PR_CREATE_CALENDAR	PROCEDURE	20	      THEN

PR_CREATE_CALENDAR	PROCEDURE	21	         wd := 1;

PR_CREATE_CALENDAR	PROCEDURE	22	      ELSE

PR_CREATE_CALENDAR	PROCEDURE	23	         wd := 0;

PR_CREATE_CALENDAR	PROCEDURE	24	      END IF;

PR_CREATE_CALENDAR	PROCEDURE	25	

PR_CREATE_CALENDAR	PROCEDURE	26	      wm_ :=

PR_CREATE_CALENDAR	PROCEDURE	27	         ROUND (

PR_CREATE_CALENDAR	PROCEDURE	28	              (  TO_CHAR (sd, 'dd')

PR_CREATE_CALENDAR	PROCEDURE	29	               - TO_CHAR (sd, 'd')

PR_CREATE_CALENDAR	PROCEDURE	30	               + TO_CHAR (TRUNC (sd, 'mm'), 'd')

PR_CREATE_CALENDAR	PROCEDURE	31	               + 7

PR_CREATE_CALENDAR	PROCEDURE	32	               - 1)

PR_CREATE_CALENDAR	PROCEDURE	33	            / 7);

PR_CREATE_CALENDAR	PROCEDURE	34	

PR_CREATE_CALENDAR	PROCEDURE	35	      INSERT INTO calendar (DATA,

PR_CREATE_CALENDAR	PROCEDURE	36	                            y,

PR_CREATE_CALENDAR	PROCEDURE	37	                            q,

PR_CREATE_CALENDAR	PROCEDURE	38	                            my,

PR_CREATE_CALENDAR	PROCEDURE	39	                            wm,

PR_CREATE_CALENDAR	PROCEDURE	40	                            dy,

PR_CREATE_CALENDAR	PROCEDURE	41	                            dw,

PR_CREATE_CALENDAR	PROCEDURE	42	                            is_wd,

PR_CREATE_CALENDAR	PROCEDURE	43	                            mt,

PR_CREATE_CALENDAR	PROCEDURE	44	                            dwt,

PR_CREATE_CALENDAR	PROCEDURE	45	                            dm,

PR_CREATE_CALENDAR	PROCEDURE	46	                            wy,

PR_CREATE_CALENDAR	PROCEDURE	47	                            dwtc)

PR_CREATE_CALENDAR	PROCEDURE	48	           VALUES (sd,

PR_CREATE_CALENDAR	PROCEDURE	49	                   TO_CHAR (sd, 'yyyy'),

PR_CREATE_CALENDAR	PROCEDURE	50	                   TO_CHAR (sd, 'q'),

PR_CREATE_CALENDAR	PROCEDURE	51	                   TO_CHAR (sd, 'mm'),

PR_CREATE_CALENDAR	PROCEDURE	52	                   wm_,

PR_CREATE_CALENDAR	PROCEDURE	53	                   TO_CHAR (sd, 'ddd'),

PR_CREATE_CALENDAR	PROCEDURE	54	                   TO_CHAR (sd, 'd'),

PR_CREATE_CALENDAR	PROCEDURE	55	                   wd,

PR_CREATE_CALENDAR	PROCEDURE	56	                   TRIM (TO_CHAR (sd, 'month')),

PR_CREATE_CALENDAR	PROCEDURE	57	                   TO_CHAR (sd, 'day'),

PR_CREATE_CALENDAR	PROCEDURE	58	                   TO_NUMBER (TO_CHAR (sd, 'dd')),

PR_CREATE_CALENDAR	PROCEDURE	59	                   TO_CHAR (sd, 'iyyy.iw'),

PR_CREATE_CALENDAR	PROCEDURE	60	                   LOWER (TO_CHAR (sd, 'DY')));

PR_CREATE_CALENDAR	PROCEDURE	61	

PR_CREATE_CALENDAR	PROCEDURE	62	      sd := sd + 1;

PR_CREATE_CALENDAR	PROCEDURE	63	      i := i + 1;

PR_CREATE_CALENDAR	PROCEDURE	64	   END LOOP;

PR_CREATE_CALENDAR	PROCEDURE	65	

PR_CREATE_CALENDAR	PROCEDURE	66	   COMMIT;

PR_CREATE_CALENDAR	PROCEDURE	67	END;
PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	1	PROCEDURE        PR_BUD_REPLACE_DB_ACCEPT (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	2	   tn_from   IN INTEGER,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	3	   tn_to     IN INTEGER,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	4	   who       IN INTEGER := NULL)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	5	IS

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	6	   f_fio   VARCHAR2 (255);

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	7	   t_fio   VARCHAR2 (255);

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	8	   s       VARCHAR2 (1024);

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	9	   i       INTEGER;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	10	BEGIN

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	11	   SELECT fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	12	     INTO f_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	13	     FROM user_list

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	14	    WHERE tn = tn_from;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	15	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	16	   SELECT fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	17	     INTO t_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	18	     FROM user_list

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	19	    WHERE tn = tn_to;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	20	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	21	   FOR a IN (SELECT z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	22	               FROM bud_ru_zay z, bud_ru_zay_accept za

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	23	              WHERE     (SELECT accepted

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	24	                           FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	25	                          WHERE     z_id = z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	26	                                AND accept_order =

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	27	                                       DECODE (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	28	                                          NVL (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	29	                                             (SELECT MAX (accept_order)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	30	                                                FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	31	                                               WHERE     z_id = z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	32	                                                     AND accepted = 2),

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	33	                                             0),

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	34	                                          0, (SELECT MAX (accept_order)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	35	                                                FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	36	                                               WHERE z_id = z.id),

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	37	                                          (SELECT MAX (accept_order)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	38	                                             FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	39	                                            WHERE     z_id = z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	40	                                                  AND accepted = 2))) = 0

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	41	                    AND z.id = za.z_id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	42	                    AND za.accepted = 0

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	43	                    AND za.tn = tn_from

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	44	             UNION

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	45	             SELECT z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	46	               FROM bud_ru_zay z, bud_ru_zay_accept za

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	47	              WHERE     (SELECT rep_accepted

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	48	                           FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	49	                          WHERE     z_id = z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	50	                                AND INN_not_ReportMA (tn) = 0

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	51	                                AND accept_order =

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	52	                                       DECODE (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	53	                                          NVL (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	54	                                             (SELECT MAX (accept_order)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	55	                                                FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	56	                                               WHERE     z_id = z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	57	                                                     AND rep_accepted = 2

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	58	                                                     AND INN_not_ReportMA (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	59	                                                            tn) = 0),

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	60	                                             0),

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	61	                                          0, (SELECT MAX (accept_order)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	62	                                                FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	63	                                               WHERE z_id = z.id),

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	64	                                          (SELECT MAX (accept_order)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	65	                                             FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	66	                                            WHERE     z_id = z.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	67	                                                  AND rep_accepted = 2

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	68	                                                  AND INN_not_ReportMA (tn) =

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	69	                                                         0))) = 0

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	70	                    AND z.id = za.z_id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	71	                    AND za.rep_accepted = 0

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	72	                    AND INN_not_ReportMA (za.tn) = 0

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	73	                    AND za.tn = tn_from)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	74	   LOOP

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	75	      BEGIN

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	76	         SELECT COUNT (*)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	77	           INTO i

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	78	           FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	79	          WHERE z_id = a.id AND tn IN (tn_from, tn_to);

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	80	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	81	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	82	         IF i = 1

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	83	         THEN

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	84	            UPDATE bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	85	               SET tn = tn_to

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	86	             WHERE z_id = a.id AND tn = tn_from;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	87	         END IF;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	88	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	89	         IF i = 2

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	90	         THEN

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	91	            DELETE FROM bud_ru_zay_accept

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	92	                  WHERE z_id = a.id AND tn = tn_from;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	93	         END IF;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	94	      /*INSERT INTO full_log (tn, text, prg)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	95	           VALUES (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	96	                     who,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	97	                        'заменил согласователя в заявке №'

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	98	                     || a.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	99	                     || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	100	                     || f_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	101	                     || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	102	                     || tn_from

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	103	                     || ' на '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	104	                     || t_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	105	                     || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	106	                     || tn_to,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	107	                     'bud_replace_db');*/

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	108	      EXCEPTION

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	109	         WHEN OTHERS

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	110	         THEN

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	111	            INSERT INTO full_log (tn, text, prg)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	112	                    VALUES (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	113	                              who,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	114	                                 'ошибка при замене согласователя в заявке №'

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	115	                              || a.id

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	116	                              || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	117	                              || f_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	118	                              || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	119	                              || tn_from

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	120	                              || ' на '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	121	                              || t_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	122	                              || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	123	                              || tn_to

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	124	                              || ' запрос: '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	125	                              || s,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	126	                              'bud_replace_db');

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	127	      END;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	128	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	129	      COMMIT;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	130	   END LOOP;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	131	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	132	   INSERT INTO full_log (tn, text, prg)

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	133	           VALUES (

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	134	                     who,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	135	                        'заменил согласователя в заявках '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	136	                     || f_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	137	                     || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	138	                     || tn_from

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	139	                     || ' на '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	140	                     || t_fio

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	141	                     || ' '

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	142	                     || tn_to,

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	143	                     'bud_replace_db');

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	144	

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	145	   COMMIT;

PR_BUD_REPLACE_DB_ACCEPT	PROCEDURE	146	END;
PR_BUD_REPLACE_DB	PROCEDURE	1	PROCEDURE        PR_BUD_REPLACE_DB (

PR_BUD_REPLACE_DB	PROCEDURE	2	   tn_from    IN INTEGER,

PR_BUD_REPLACE_DB	PROCEDURE	3	   tn_to      IN INTEGER,

PR_BUD_REPLACE_DB	PROCEDURE	4	   fil_from   IN INTEGER := 0,

PR_BUD_REPLACE_DB	PROCEDURE	5	   who        IN INTEGER := NULL)

PR_BUD_REPLACE_DB	PROCEDURE	6	IS

PR_BUD_REPLACE_DB	PROCEDURE	7	   f_fio          VARCHAR2 (255);

PR_BUD_REPLACE_DB	PROCEDURE	8	   t_fio          VARCHAR2 (255);

PR_BUD_REPLACE_DB	PROCEDURE	9	   s              VARCHAR2 (1024);

PR_BUD_REPLACE_DB	PROCEDURE	10	   --where_fil        VARCHAR2 (1024) := NULL;

PR_BUD_REPLACE_DB	PROCEDURE	11	   log_fil        VARCHAR2 (1024) := '';

PR_BUD_REPLACE_DB	PROCEDURE	12	   i              INTEGER;

PR_BUD_REPLACE_DB	PROCEDURE	13	   --c1               SYS_REFCURSOR;

PR_BUD_REPLACE_DB	PROCEDURE	14	   --c2               SYS_REFCURSOR;

PR_BUD_REPLACE_DB	PROCEDURE	15	   --table_name       VARCHAR (255);

PR_BUD_REPLACE_DB	PROCEDURE	16	   --field_name       VARCHAR (255);

PR_BUD_REPLACE_DB	PROCEDURE	17	   --fil_field_name   VARCHAR (255);

PR_BUD_REPLACE_DB	PROCEDURE	18	   --key_field_val    VARCHAR (255);

PR_BUD_REPLACE_DB	PROCEDURE	19	   v_rec_count    NUMBER (15, 2);

PR_BUD_REPLACE_DB	PROCEDURE	20	   v_sum_bonus    NUMBER (15, 2);

PR_BUD_REPLACE_DB	PROCEDURE	21	   v_sum_files    NUMBER (15, 2);

PR_BUD_REPLACE_DB	PROCEDURE	22	   v_head_id_to   INTEGER;

PR_BUD_REPLACE_DB	PROCEDURE	23	   v_plan         NUMBER (38, 3);

PR_BUD_REPLACE_DB	PROCEDURE	24	   v_fakt         NUMBER (38, 3);

PR_BUD_REPLACE_DB	PROCEDURE	25	   v_text         VARCHAR2 (1000);

PR_BUD_REPLACE_DB	PROCEDURE	26	BEGIN

PR_BUD_REPLACE_DB	PROCEDURE	27	   IF fil_from <> 0

PR_BUD_REPLACE_DB	PROCEDURE	28	   THEN

PR_BUD_REPLACE_DB	PROCEDURE	29	      SELECT name

PR_BUD_REPLACE_DB	PROCEDURE	30	        INTO log_fil

PR_BUD_REPLACE_DB	PROCEDURE	31	        FROM bud_fil

PR_BUD_REPLACE_DB	PROCEDURE	32	       WHERE id = fil_from;

PR_BUD_REPLACE_DB	PROCEDURE	33	   END IF;

PR_BUD_REPLACE_DB	PROCEDURE	34	

PR_BUD_REPLACE_DB	PROCEDURE	35	   SELECT fio

PR_BUD_REPLACE_DB	PROCEDURE	36	     INTO f_fio

PR_BUD_REPLACE_DB	PROCEDURE	37	     FROM user_list

PR_BUD_REPLACE_DB	PROCEDURE	38	    WHERE tn = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	39	

PR_BUD_REPLACE_DB	PROCEDURE	40	   SELECT fio

PR_BUD_REPLACE_DB	PROCEDURE	41	     INTO t_fio

PR_BUD_REPLACE_DB	PROCEDURE	42	     FROM user_list

PR_BUD_REPLACE_DB	PROCEDURE	43	    WHERE tn = tn_to;

PR_BUD_REPLACE_DB	PROCEDURE	44	

PR_BUD_REPLACE_DB	PROCEDURE	45	   BEGIN

PR_BUD_REPLACE_DB	PROCEDURE	46	      UPDATE bud_ru_zay

PR_BUD_REPLACE_DB	PROCEDURE	47	         SET tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	48	       WHERE tn = tn_from AND (fil_from = 0 OR fil = fil_from);

PR_BUD_REPLACE_DB	PROCEDURE	49	

PR_BUD_REPLACE_DB	PROCEDURE	50	      UPDATE rep_spd_list

PR_BUD_REPLACE_DB	PROCEDURE	51	         SET ter_db = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	52	       WHERE ter_db = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	53	

PR_BUD_REPLACE_DB	PROCEDURE	54	      UPDATE distr_prot

PR_BUD_REPLACE_DB	PROCEDURE	55	         SET lu_tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	56	       WHERE lu_tn = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	57	

PR_BUD_REPLACE_DB	PROCEDURE	58	      UPDATE act_svod

PR_BUD_REPLACE_DB	PROCEDURE	59	         SET db_tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	60	       WHERE db_tn = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	61	

PR_BUD_REPLACE_DB	PROCEDURE	62	      UPDATE act_svodt

PR_BUD_REPLACE_DB	PROCEDURE	63	         SET db_tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	64	       WHERE db_tn = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	65	

PR_BUD_REPLACE_DB	PROCEDURE	66	      UPDATE act_svodn

PR_BUD_REPLACE_DB	PROCEDURE	67	         SET db_tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	68	       WHERE db_tn = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	69	

PR_BUD_REPLACE_DB	PROCEDURE	70	      UPDATE sc_svodn

PR_BUD_REPLACE_DB	PROCEDURE	71	         SET db = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	72	       WHERE db = tn_from;

PR_BUD_REPLACE_DB	PROCEDURE	73	

PR_BUD_REPLACE_DB	PROCEDURE	74	      FOR a IN (SELECT fil,

PR_BUD_REPLACE_DB	PROCEDURE	75	                       dt,

PR_BUD_REPLACE_DB	PROCEDURE	76	                       db,

PR_BUD_REPLACE_DB	PROCEDURE	77	                       ROWID rid,

PR_BUD_REPLACE_DB	PROCEDURE	78	                       id

PR_BUD_REPLACE_DB	PROCEDURE	79	                  FROM bud_ru_cash_in_head

PR_BUD_REPLACE_DB	PROCEDURE	80	                 WHERE db = tn_from AND (fil_from = 0 OR fil = fil_from))

PR_BUD_REPLACE_DB	PROCEDURE	81	      LOOP

PR_BUD_REPLACE_DB	PROCEDURE	82	         SELECT COUNT (*), MAX (id)

PR_BUD_REPLACE_DB	PROCEDURE	83	           INTO i, v_head_id_to

PR_BUD_REPLACE_DB	PROCEDURE	84	           FROM bud_ru_cash_in_head

PR_BUD_REPLACE_DB	PROCEDURE	85	          WHERE fil = a.fil AND dt = a.dt AND db = tn_to;

PR_BUD_REPLACE_DB	PROCEDURE	86	

PR_BUD_REPLACE_DB	PROCEDURE	87	         IF i = 0

PR_BUD_REPLACE_DB	PROCEDURE	88	         THEN

PR_BUD_REPLACE_DB	PROCEDURE	89	            UPDATE bud_ru_cash_in_head

PR_BUD_REPLACE_DB	PROCEDURE	90	               SET db = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	91	             WHERE ROWID = a.rid;

PR_BUD_REPLACE_DB	PROCEDURE	92	         ELSE

PR_BUD_REPLACE_DB	PROCEDURE	93	            FOR b IN (  SELECT st, COUNT (*) c

PR_BUD_REPLACE_DB	PROCEDURE	94	                          FROM bud_ru_cash_in_body

PR_BUD_REPLACE_DB	PROCEDURE	95	                         WHERE head_id IN (v_head_id_to, a.id)

PR_BUD_REPLACE_DB	PROCEDURE	96	                      GROUP BY st)

PR_BUD_REPLACE_DB	PROCEDURE	97	            LOOP

PR_BUD_REPLACE_DB	PROCEDURE	98	               IF b.c = 1

PR_BUD_REPLACE_DB	PROCEDURE	99	               THEN

PR_BUD_REPLACE_DB	PROCEDURE	100	                  UPDATE bud_ru_cash_in_body

PR_BUD_REPLACE_DB	PROCEDURE	101	                     SET head_id = v_head_id_to

PR_BUD_REPLACE_DB	PROCEDURE	102	                   WHERE head_id = a.id AND st = b.st;

PR_BUD_REPLACE_DB	PROCEDURE	103	               ELSE

PR_BUD_REPLACE_DB	PROCEDURE	104	                  SELECT SUM (plan), SUM (fakt), wm_concat (text)

PR_BUD_REPLACE_DB	PROCEDURE	105	                    INTO v_plan, v_fakt, v_text

PR_BUD_REPLACE_DB	PROCEDURE	106	                    FROM bud_ru_cash_in_body

PR_BUD_REPLACE_DB	PROCEDURE	107	                   WHERE head_id IN (v_head_id_to, a.id) AND st = b.st;

PR_BUD_REPLACE_DB	PROCEDURE	108	

PR_BUD_REPLACE_DB	PROCEDURE	109	                  UPDATE bud_ru_cash_in_body

PR_BUD_REPLACE_DB	PROCEDURE	110	                     SET plan = v_plan, fakt = v_fakt, text = v_text

PR_BUD_REPLACE_DB	PROCEDURE	111	                   WHERE head_id = v_head_id_to AND st = b.st;

PR_BUD_REPLACE_DB	PROCEDURE	112	

PR_BUD_REPLACE_DB	PROCEDURE	113	                  DELETE FROM bud_ru_cash_in_body

PR_BUD_REPLACE_DB	PROCEDURE	114	                        WHERE head_id = a.id AND st = b.st;

PR_BUD_REPLACE_DB	PROCEDURE	115	               END IF;

PR_BUD_REPLACE_DB	PROCEDURE	116	            END LOOP;

PR_BUD_REPLACE_DB	PROCEDURE	117	

PR_BUD_REPLACE_DB	PROCEDURE	118	            DELETE FROM bud_ru_cash_in_head

PR_BUD_REPLACE_DB	PROCEDURE	119	                  WHERE ROWID = a.rid;

PR_BUD_REPLACE_DB	PROCEDURE	120	         END IF;

PR_BUD_REPLACE_DB	PROCEDURE	121	      END LOOP;

PR_BUD_REPLACE_DB	PROCEDURE	122	

PR_BUD_REPLACE_DB	PROCEDURE	123	      FOR a IN (SELECT tn, bud_id, ROWID rid

PR_BUD_REPLACE_DB	PROCEDURE	124	                  FROM bud_tn_fil

PR_BUD_REPLACE_DB	PROCEDURE	125	                 WHERE tn = tn_from AND (fil_from = 0 OR bud_id = fil_from))

PR_BUD_REPLACE_DB	PROCEDURE	126	      LOOP

PR_BUD_REPLACE_DB	PROCEDURE	127	         SELECT COUNT (*)

PR_BUD_REPLACE_DB	PROCEDURE	128	           INTO i

PR_BUD_REPLACE_DB	PROCEDURE	129	           FROM bud_tn_fil

PR_BUD_REPLACE_DB	PROCEDURE	130	          WHERE bud_id = a.bud_id AND tn = tn_to;

PR_BUD_REPLACE_DB	PROCEDURE	131	

PR_BUD_REPLACE_DB	PROCEDURE	132	         IF i = 0

PR_BUD_REPLACE_DB	PROCEDURE	133	         THEN

PR_BUD_REPLACE_DB	PROCEDURE	134	            UPDATE bud_tn_fil

PR_BUD_REPLACE_DB	PROCEDURE	135	               SET tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	136	             WHERE ROWID = a.rid;

PR_BUD_REPLACE_DB	PROCEDURE	137	         ELSE

PR_BUD_REPLACE_DB	PROCEDURE	138	            DELETE FROM bud_tn_fil

PR_BUD_REPLACE_DB	PROCEDURE	139	                  WHERE ROWID = a.rid;

PR_BUD_REPLACE_DB	PROCEDURE	140	         END IF;

PR_BUD_REPLACE_DB	PROCEDURE	141	      END LOOP;

PR_BUD_REPLACE_DB	PROCEDURE	142	

PR_BUD_REPLACE_DB	PROCEDURE	143	      FOR a IN (SELECT act,

PR_BUD_REPLACE_DB	PROCEDURE	144	                       tn,

PR_BUD_REPLACE_DB	PROCEDURE	145	                       m,

PR_BUD_REPLACE_DB	PROCEDURE	146	                       fil,

PR_BUD_REPLACE_DB	PROCEDURE	147	                       ROWID rid

PR_BUD_REPLACE_DB	PROCEDURE	148	                  FROM act_ok

PR_BUD_REPLACE_DB	PROCEDURE	149	                 WHERE tn = tn_from AND (fil_from = 0 OR fil = fil_from))

PR_BUD_REPLACE_DB	PROCEDURE	150	      LOOP

PR_BUD_REPLACE_DB	PROCEDURE	151	         SELECT COUNT (*)

PR_BUD_REPLACE_DB	PROCEDURE	152	           INTO i

PR_BUD_REPLACE_DB	PROCEDURE	153	           FROM act_ok

PR_BUD_REPLACE_DB	PROCEDURE	154	          WHERE     act = a.act

PR_BUD_REPLACE_DB	PROCEDURE	155	                AND m = a.m

PR_BUD_REPLACE_DB	PROCEDURE	156	                AND NVL (fil, 0) = NVL (a.fil, 0)

PR_BUD_REPLACE_DB	PROCEDURE	157	                AND tn = tn_to;

PR_BUD_REPLACE_DB	PROCEDURE	158	

PR_BUD_REPLACE_DB	PROCEDURE	159	         IF i = 0

PR_BUD_REPLACE_DB	PROCEDURE	160	         THEN

PR_BUD_REPLACE_DB	PROCEDURE	161	            UPDATE act_ok

PR_BUD_REPLACE_DB	PROCEDURE	162	               SET tn = tn_to

PR_BUD_REPLACE_DB	PROCEDURE	163	             WHERE ROWID = a.rid;

PR_BUD_REPLACE_DB	PROCEDURE	164	         ELSE

PR_BUD_REPLACE_DB	PROCEDURE	165	            SELECT SUM (rec_count) rec_count,

PR_BUD_REPLACE_DB	PROCEDURE	166	                   SUM (sum_bonus) sum_bonus,

PR_BUD_REPLACE_DB	PROCEDURE	167	                   SUM (sum_files) sum_files

PR_BUD_REPLACE_DB	PROCEDURE	168	              INTO v_rec_count, v_sum_bonus, v_sum_files

PR_BUD_REPLACE_DB	PROCEDURE	169	              FROM act_ok

PR_BUD_REPLACE_DB	PROCEDURE	170	             WHERE     act = a.act

PR_BUD_REPLACE_DB	PROCEDURE	171	                   AND m = a.m

PR_BUD_REPLACE_DB	PROCEDURE	172	                   AND NVL (fil, 0) = NVL (a.fil, 0)

PR_BUD_REPLACE_DB	PROCEDURE	173	                   AND tn IN (tn_from, tn_to);

PR_BUD_REPLACE_DB	PROCEDURE	174	

PR_BUD_REPLACE_DB	PROCEDURE	175	            UPDATE act_ok

PR_BUD_REPLACE_DB	PROCEDURE	176	               SET rec_count = v_rec_count,

PR_BUD_REPLACE_DB	PROCEDURE	177	                   sum_bonus = v_sum_bonus,

PR_BUD_REPLACE_DB	PROCEDURE	178	                   sum_files = v_sum_files

PR_BUD_REPLACE_DB	PROCEDURE	179	             WHERE     act = a.act

PR_BUD_REPLACE_DB	PROCEDURE	180	                   AND m = a.m

PR_BUD_REPLACE_DB	PROCEDURE	181	                   AND NVL (fil, 0) = NVL (a.fil, 0)

PR_BUD_REPLACE_DB	PROCEDURE	182	                   AND tn = tn_to;

PR_BUD_REPLACE_DB	PROCEDURE	183	

PR_BUD_REPLACE_DB	PROCEDURE	184	            DELETE FROM act_ok

PR_BUD_REPLACE_DB	PROCEDURE	185	                  WHERE ROWID = a.rid;

PR_BUD_REPLACE_DB	PROCEDURE	186	         END IF;

PR_BUD_REPLACE_DB	PROCEDURE	187	      END LOOP;

PR_BUD_REPLACE_DB	PROCEDURE	188	

PR_BUD_REPLACE_DB	PROCEDURE	189	      COMMIT;

PR_BUD_REPLACE_DB	PROCEDURE	190	   EXCEPTION

PR_BUD_REPLACE_DB	PROCEDURE	191	      WHEN OTHERS

PR_BUD_REPLACE_DB	PROCEDURE	192	      THEN

PR_BUD_REPLACE_DB	PROCEDURE	193	         ROLLBACK;

PR_BUD_REPLACE_DB	PROCEDURE	194	

PR_BUD_REPLACE_DB	PROCEDURE	195	         INSERT INTO full_log (tn, text, prg)

PR_BUD_REPLACE_DB	PROCEDURE	196	                 VALUES (

PR_BUD_REPLACE_DB	PROCEDURE	197	                           who,

PR_BUD_REPLACE_DB	PROCEDURE	198	                              'ошибка при замене ДБ '

PR_BUD_REPLACE_DB	PROCEDURE	199	                           || f_fio

PR_BUD_REPLACE_DB	PROCEDURE	200	                           || ' '

PR_BUD_REPLACE_DB	PROCEDURE	201	                           || tn_from

PR_BUD_REPLACE_DB	PROCEDURE	202	                           || ' '

PR_BUD_REPLACE_DB	PROCEDURE	203	                           || log_fil

PR_BUD_REPLACE_DB	PROCEDURE	204	                           || ' на '

PR_BUD_REPLACE_DB	PROCEDURE	205	                           || t_fio

PR_BUD_REPLACE_DB	PROCEDURE	206	                           || ' '

PR_BUD_REPLACE_DB	PROCEDURE	207	                           || tn_to

PR_BUD_REPLACE_DB	PROCEDURE	208	                           || ' запрос: '

PR_BUD_REPLACE_DB	PROCEDURE	209	                           || s,

PR_BUD_REPLACE_DB	PROCEDURE	210	                           'bud_replace_db');

PR_BUD_REPLACE_DB	PROCEDURE	211	

PR_BUD_REPLACE_DB	PROCEDURE	212	         COMMIT;

PR_BUD_REPLACE_DB	PROCEDURE	213	   END;

PR_BUD_REPLACE_DB	PROCEDURE	214	

PR_BUD_REPLACE_DB	PROCEDURE	215	

PR_BUD_REPLACE_DB	PROCEDURE	216	

PR_BUD_REPLACE_DB	PROCEDURE	217	   /*

PR_BUD_REPLACE_DB	PROCEDURE	218	

PR_BUD_REPLACE_DB	PROCEDURE	219	      s :=

PR_BUD_REPLACE_DB	PROCEDURE	220	         'SELECT table_name, field_name, fil_field_name FROM bud_replace_db ORDER BY sort';

PR_BUD_REPLACE_DB	PROCEDURE	221	

PR_BUD_REPLACE_DB	PROCEDURE	222	      OPEN c1 FOR s;

PR_BUD_REPLACE_DB	PROCEDURE	223	

PR_BUD_REPLACE_DB	PROCEDURE	224	      LOOP

PR_BUD_REPLACE_DB	PROCEDURE	225	         FETCH c1

PR_BUD_REPLACE_DB	PROCEDURE	226	            INTO table_name, field_name, fil_field_name;

PR_BUD_REPLACE_DB	PROCEDURE	227	

PR_BUD_REPLACE_DB	PROCEDURE	228	         EXIT WHEN c1%NOTFOUND;

PR_BUD_REPLACE_DB	PROCEDURE	229	

PR_BUD_REPLACE_DB	PROCEDURE	230	         IF fil_from <> 0 AND fil_field_name IS NOT NULL

PR_BUD_REPLACE_DB	PROCEDURE	231	         THEN

PR_BUD_REPLACE_DB	PROCEDURE	232	            where_fil := ' and ' || fil_field_name || '=' || fil_from;

PR_BUD_REPLACE_DB	PROCEDURE	233	

PR_BUD_REPLACE_DB	PROCEDURE	234	            SELECT name

PR_BUD_REPLACE_DB	PROCEDURE	235	              INTO log_fil

PR_BUD_REPLACE_DB	PROCEDURE	236	              FROM bud_fil

PR_BUD_REPLACE_DB	PROCEDURE	237	             WHERE id = fil_from;

PR_BUD_REPLACE_DB	PROCEDURE	238	         ELSE

PR_BUD_REPLACE_DB	PROCEDURE	239	            where_fil := '';

PR_BUD_REPLACE_DB	PROCEDURE	240	            log_fil := '';

PR_BUD_REPLACE_DB	PROCEDURE	241	         END IF;

PR_BUD_REPLACE_DB	PROCEDURE	242	

PR_BUD_REPLACE_DB	PROCEDURE	243	         s :=

PR_BUD_REPLACE_DB	PROCEDURE	244	               'SELECT rowid FROM '

PR_BUD_REPLACE_DB	PROCEDURE	245	            || table_name

PR_BUD_REPLACE_DB	PROCEDURE	246	            || ' WHERE '

PR_BUD_REPLACE_DB	PROCEDURE	247	            || field_name

PR_BUD_REPLACE_DB	PROCEDURE	248	            || '='

PR_BUD_REPLACE_DB	PROCEDURE	249	            || tn_from

PR_BUD_REPLACE_DB	PROCEDURE	250	            || where_fil;

PR_BUD_REPLACE_DB	PROCEDURE	251	

PR_BUD_REPLACE_DB	PROCEDURE	252	         DBMS_OUTPUT.put_line (s);

PR_BUD_REPLACE_DB	PROCEDURE	253	

PR_BUD_REPLACE_DB	PROCEDURE	254	         OPEN c2 FOR s;

PR_BUD_REPLACE_DB	PROCEDURE	255	

PR_BUD_REPLACE_DB	PROCEDURE	256	         LOOP

PR_BUD_REPLACE_DB	PROCEDURE	257	            FETCH c2 INTO key_field_val;

PR_BUD_REPLACE_DB	PROCEDURE	258	

PR_BUD_REPLACE_DB	PROCEDURE	259	            EXIT WHEN c2%NOTFOUND;

PR_BUD_REPLACE_DB	PROCEDURE	260	

PR_BUD_REPLACE_DB	PROCEDURE	261	            s :=

PR_BUD_REPLACE_DB	PROCEDURE	262	                  'UPDATE '

PR_BUD_REPLACE_DB	PROCEDURE	263	               || table_name

PR_BUD_REPLACE_DB	PROCEDURE	264	               || ' SET '

PR_BUD_REPLACE_DB	PROCEDURE	265	               || field_name

PR_BUD_REPLACE_DB	PROCEDURE	266	               || ' = '

PR_BUD_REPLACE_DB	PROCEDURE	267	               || tn_to

PR_BUD_REPLACE_DB	PROCEDURE	268	               || ' WHERE rowid = '''

PR_BUD_REPLACE_DB	PROCEDURE	269	               || key_field_val

PR_BUD_REPLACE_DB	PROCEDURE	270	               || '''';

PR_BUD_REPLACE_DB	PROCEDURE	271	

PR_BUD_REPLACE_DB	PROCEDURE	272	            BEGIN

PR_BUD_REPLACE_DB	PROCEDURE	273	               EXECUTE IMMEDIATE s;

PR_BUD_REPLACE_DB	PROCEDURE	274	            EXCEPTION

PR_BUD_REPLACE_DB	PROCEDURE	275	               WHEN OTHERS

PR_BUD_REPLACE_DB	PROCEDURE	276	               THEN

PR_BUD_REPLACE_DB	PROCEDURE	277	                  INSERT INTO full_log (tn, text, prg)

PR_BUD_REPLACE_DB	PROCEDURE	278	                       VALUES (

PR_BUD_REPLACE_DB	PROCEDURE	279	                                 who,

PR_BUD_REPLACE_DB	PROCEDURE	280	                                    'ошибка при замене ДБ '

PR_BUD_REPLACE_DB	PROCEDURE	281	                                 || f_fio

PR_BUD_REPLACE_DB	PROCEDURE	282	                                 || ' '

PR_BUD_REPLACE_DB	PROCEDURE	283	                                 || tn_from

PR_BUD_REPLACE_DB	PROCEDURE	284	                                 || ' '

PR_BUD_REPLACE_DB	PROCEDURE	285	                                 || log_fil

PR_BUD_REPLACE_DB	PROCEDURE	286	                                 || ' на '

PR_BUD_REPLACE_DB	PROCEDURE	287	                                 || t_fio

PR_BUD_REPLACE_DB	PROCEDURE	288	                                 || ' '

PR_BUD_REPLACE_DB	PROCEDURE	289	                                 || tn_to

PR_BUD_REPLACE_DB	PROCEDURE	290	                                 || ' запрос: '

PR_BUD_REPLACE_DB	PROCEDURE	291	                                 || s,

PR_BUD_REPLACE_DB	PROCEDURE	292	                                 'bud_replace_db');

PR_BUD_REPLACE_DB	PROCEDURE	293	            END;

PR_BUD_REPLACE_DB	PROCEDURE	294	

PR_BUD_REPLACE_DB	PROCEDURE	295	            COMMIT;

PR_BUD_REPLACE_DB	PROCEDURE	296	         END LOOP;

PR_BUD_REPLACE_DB	PROCEDURE	297	

PR_BUD_REPLACE_DB	PROCEDURE	298	         CLOSE c2;

PR_BUD_REPLACE_DB	PROCEDURE	299	      END LOOP;

PR_BUD_REPLACE_DB	PROCEDURE	300	

PR_BUD_REPLACE_DB	PROCEDURE	301	      CLOSE c1;

PR_BUD_REPLACE_DB	PROCEDURE	302	   */

PR_BUD_REPLACE_DB	PROCEDURE	303	   INSERT INTO full_log (tn, text, prg)

PR_BUD_REPLACE_DB	PROCEDURE	304	           VALUES (

PR_BUD_REPLACE_DB	PROCEDURE	305	                     who,

PR_BUD_REPLACE_DB	PROCEDURE	306	                        'заменил ДБ '

PR_BUD_REPLACE_DB	PROCEDURE	307	                     || f_fio

PR_BUD_REPLACE_DB	PROCEDURE	308	                     || ' '

PR_BUD_REPLACE_DB	PROCEDURE	309	                     || tn_from

PR_BUD_REPLACE_DB	PROCEDURE	310	                     || ' '

PR_BUD_REPLACE_DB	PROCEDURE	311	                     || log_fil

PR_BUD_REPLACE_DB	PROCEDURE	312	                     || ' на '

PR_BUD_REPLACE_DB	PROCEDURE	313	                     || t_fio

PR_BUD_REPLACE_DB	PROCEDURE	314	                     || ' '

PR_BUD_REPLACE_DB	PROCEDURE	315	                     || tn_to,

PR_BUD_REPLACE_DB	PROCEDURE	316	                     'bud_replace_db');

PR_BUD_REPLACE_DB	PROCEDURE	317	

PR_BUD_REPLACE_DB	PROCEDURE	318	   COMMIT;

PR_BUD_REPLACE_DB	PROCEDURE	319	END;

PR_BONUS_SZ_OK	PROCEDURE	1	PROCEDURE        "PR_BONUS_SZ_OK" (p_sz_id IN INTEGER)

PR_BONUS_SZ_OK	PROCEDURE	2	AS

PR_BONUS_SZ_OK	PROCEDURE	3	   v_head                      VARCHAR2 (4000);

PR_BONUS_SZ_OK	PROCEDURE	4	   v_body                      VARCHAR2 (32767);

PR_BONUS_SZ_OK	PROCEDURE	5	   v_tn                        INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	6	   v_dpt_id                    INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	7	   i                           INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	8	   too_many_lines              INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	9	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_BONUS_SZ_OK	PROCEDURE	10	   v_bonus_type                INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	11	   v_bonus_subtype             INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	12	   v_bonus_type_name           VARCHAR (255);

PR_BONUS_SZ_OK	PROCEDURE	13	   v_bonus_subtype_name        VARCHAR (255);

PR_BONUS_SZ_OK	PROCEDURE	14	   v_bonus_id                  INTEGER;

PR_BONUS_SZ_OK	PROCEDURE	15	   v_text                      VARCHAR2 (1000);

PR_BONUS_SZ_OK	PROCEDURE	16	   v_creator_fio               VARCHAR (255);

PR_BONUS_SZ_OK	PROCEDURE	17	   v_creator_pos_name          VARCHAR (255);

PR_BONUS_SZ_OK	PROCEDURE	18	   v_creator_department_name   VARCHAR (255);

PR_BONUS_SZ_OK	PROCEDURE	19	   v_created                   VARCHAR (255);

PR_BONUS_SZ_OK	PROCEDURE	20	BEGIN

PR_BONUS_SZ_OK	PROCEDURE	21	   SELECT u1.fio,

PR_BONUS_SZ_OK	PROCEDURE	22	          u1.pos_name,

PR_BONUS_SZ_OK	PROCEDURE	23	          u1.department_name,

PR_BONUS_SZ_OK	PROCEDURE	24	          TO_CHAR (v.created, 'dd.mm.yyyy') created,

PR_BONUS_SZ_OK	PROCEDURE	25	          v.tn,

PR_BONUS_SZ_OK	PROCEDURE	26	          v.bonus_type,

PR_BONUS_SZ_OK	PROCEDURE	27	          v.bonus_subtype,

PR_BONUS_SZ_OK	PROCEDURE	28	          (SELECT name

PR_BONUS_SZ_OK	PROCEDURE	29	             FROM bonus_types

PR_BONUS_SZ_OK	PROCEDURE	30	            WHERE id = v.bonus_type)

PR_BONUS_SZ_OK	PROCEDURE	31	             bonus_type_name,

PR_BONUS_SZ_OK	PROCEDURE	32	          (SELECT name

PR_BONUS_SZ_OK	PROCEDURE	33	             FROM bonus_types

PR_BONUS_SZ_OK	PROCEDURE	34	            WHERE id = v.bonus_subtype)

PR_BONUS_SZ_OK	PROCEDURE	35	             bonus_subtype_name,

PR_BONUS_SZ_OK	PROCEDURE	36	          v.id,

PR_BONUS_SZ_OK	PROCEDURE	37	          v.dpt_id,

PR_BONUS_SZ_OK	PROCEDURE	38	          v.text

PR_BONUS_SZ_OK	PROCEDURE	39	     INTO v_creator_fio,

PR_BONUS_SZ_OK	PROCEDURE	40	          v_creator_pos_name,

PR_BONUS_SZ_OK	PROCEDURE	41	          v_creator_department_name,

PR_BONUS_SZ_OK	PROCEDURE	42	          v_created,

PR_BONUS_SZ_OK	PROCEDURE	43	          v_tn,

PR_BONUS_SZ_OK	PROCEDURE	44	          v_bonus_type,

PR_BONUS_SZ_OK	PROCEDURE	45	          v_bonus_subtype,

PR_BONUS_SZ_OK	PROCEDURE	46	          v_bonus_type_name,

PR_BONUS_SZ_OK	PROCEDURE	47	          v_bonus_subtype_name,

PR_BONUS_SZ_OK	PROCEDURE	48	          v_bonus_id,

PR_BONUS_SZ_OK	PROCEDURE	49	          v_dpt_id,

PR_BONUS_SZ_OK	PROCEDURE	50	          v_text

PR_BONUS_SZ_OK	PROCEDURE	51	     FROM BONUS_head v, user_list u1

PR_BONUS_SZ_OK	PROCEDURE	52	    WHERE v.sz_id = p_sz_id AND u1.tn(+) = v.tn;

PR_BONUS_SZ_OK	PROCEDURE	53	

PR_BONUS_SZ_OK	PROCEDURE	54	   v_head :=

PR_BONUS_SZ_OK	PROCEDURE	55	      'Заявка на применение административных мер согласована';

PR_BONUS_SZ_OK	PROCEDURE	56	   v_body :=

PR_BONUS_SZ_OK	PROCEDURE	57	         '№ заявки '

PR_BONUS_SZ_OK	PROCEDURE	58	      || v_bonus_id

PR_BONUS_SZ_OK	PROCEDURE	59	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	60	      || 'Дата заявки '

PR_BONUS_SZ_OK	PROCEDURE	61	      || v_created

PR_BONUS_SZ_OK	PROCEDURE	62	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	63	      || 'ФИО инициатора '

PR_BONUS_SZ_OK	PROCEDURE	64	      || v_creator_fio

PR_BONUS_SZ_OK	PROCEDURE	65	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	66	      || 'должность инициатора '

PR_BONUS_SZ_OK	PROCEDURE	67	      || v_creator_pos_name

PR_BONUS_SZ_OK	PROCEDURE	68	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	69	      || 'подразделение инициатора '

PR_BONUS_SZ_OK	PROCEDURE	70	      || v_creator_department_name

PR_BONUS_SZ_OK	PROCEDURE	71	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	72	      || 'Прошу применить следующую административную меру:<br>'

PR_BONUS_SZ_OK	PROCEDURE	73	      || v_bonus_type_name

PR_BONUS_SZ_OK	PROCEDURE	74	      || ' '

PR_BONUS_SZ_OK	PROCEDURE	75	      || v_bonus_subtype_name

PR_BONUS_SZ_OK	PROCEDURE	76	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	77	      || 'Детализация:<br>'

PR_BONUS_SZ_OK	PROCEDURE	78	      || v_text

PR_BONUS_SZ_OK	PROCEDURE	79	      || '<br>'

PR_BONUS_SZ_OK	PROCEDURE	80	      || 'Список сотрудников:<br>';

PR_BONUS_SZ_OK	PROCEDURE	81	   i := 1;

PR_BONUS_SZ_OK	PROCEDURE	82	

PR_BONUS_SZ_OK	PROCEDURE	83	   FOR a IN (  SELECT *

PR_BONUS_SZ_OK	PROCEDURE	84	                 FROM bonus_body t, calendar c

PR_BONUS_SZ_OK	PROCEDURE	85	                WHERE t.bonus_id = v_bonus_id AND t.mz = c.data

PR_BONUS_SZ_OK	PROCEDURE	86	             ORDER BY t.fio)

PR_BONUS_SZ_OK	PROCEDURE	87	   LOOP

PR_BONUS_SZ_OK	PROCEDURE	88	      IF NVL (LENGTH (v_body), 0) < 10000

PR_BONUS_SZ_OK	PROCEDURE	89	      THEN

PR_BONUS_SZ_OK	PROCEDURE	90	         v_body :=

PR_BONUS_SZ_OK	PROCEDURE	91	               v_body

PR_BONUS_SZ_OK	PROCEDURE	92	            || ''

PR_BONUS_SZ_OK	PROCEDURE	93	            || a.fio

PR_BONUS_SZ_OK	PROCEDURE	94	            || ', '

PR_BONUS_SZ_OK	PROCEDURE	95	            || a.pos_name

PR_BONUS_SZ_OK	PROCEDURE	96	            || ', сумма: '

PR_BONUS_SZ_OK	PROCEDURE	97	            || a.summa

PR_BONUS_SZ_OK	PROCEDURE	98	            || ' '

PR_BONUS_SZ_OK	PROCEDURE	99	            || a.cur_name

PR_BONUS_SZ_OK	PROCEDURE	100	            || ', месяц отнесения: '

PR_BONUS_SZ_OK	PROCEDURE	101	            || a.mt

PR_BONUS_SZ_OK	PROCEDURE	102	            || ' '

PR_BONUS_SZ_OK	PROCEDURE	103	            || a.y

PR_BONUS_SZ_OK	PROCEDURE	104	            || '<br>';

PR_BONUS_SZ_OK	PROCEDURE	105	         i := i + 1;

PR_BONUS_SZ_OK	PROCEDURE	106	         too_many_lines := 0;

PR_BONUS_SZ_OK	PROCEDURE	107	      ELSE

PR_BONUS_SZ_OK	PROCEDURE	108	         too_many_lines := 1;

PR_BONUS_SZ_OK	PROCEDURE	109	      END IF;

PR_BONUS_SZ_OK	PROCEDURE	110	   END LOOP;

PR_BONUS_SZ_OK	PROCEDURE	111	

PR_BONUS_SZ_OK	PROCEDURE	112	   IF too_many_lines = 1

PR_BONUS_SZ_OK	PROCEDURE	113	   THEN

PR_BONUS_SZ_OK	PROCEDURE	114	      v_body :=

PR_BONUS_SZ_OK	PROCEDURE	115	            v_body

PR_BONUS_SZ_OK	PROCEDURE	116	         || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

PR_BONUS_SZ_OK	PROCEDURE	117	   END IF;

PR_BONUS_SZ_OK	PROCEDURE	118	

PR_BONUS_SZ_OK	PROCEDURE	119	   v_body :=

PR_BONUS_SZ_OK	PROCEDURE	120	         v_body

PR_BONUS_SZ_OK	PROCEDURE	121	      || '<p><a href="https://ps.avk.ua/?action=sz_reestr&sz_id='

PR_BONUS_SZ_OK	PROCEDURE	122	      || p_sz_id

PR_BONUS_SZ_OK	PROCEDURE	123	      || '">ссылка на СЗ</a></p>';

PR_BONUS_SZ_OK	PROCEDURE	124	

PR_BONUS_SZ_OK	PROCEDURE	125	   FOR a

PR_BONUS_SZ_OK	PROCEDURE	126	      IN (SELECT val_string

PR_BONUS_SZ_OK	PROCEDURE	127	            FROM parameters

PR_BONUS_SZ_OK	PROCEDURE	128	           WHERE     dpt_id = v_dpt_id

PR_BONUS_SZ_OK	PROCEDURE	129	                 AND param_name IN ('pers1', 'pers2', 'accept1', 'accept2'))

PR_BONUS_SZ_OK	PROCEDURE	130	   LOOP

PR_BONUS_SZ_OK	PROCEDURE	131	      PR_SENDMAIL (a.val_string, v_head, v_body);

PR_BONUS_SZ_OK	PROCEDURE	132	   END LOOP;

PR_BONUS_SZ_OK	PROCEDURE	133	END;

PR_BONUS_NEW_OK	PROCEDURE	1	PROCEDURE        "PR_BONUS_NEW_OK" (p_sz_id IN INTEGER)

PR_BONUS_NEW_OK	PROCEDURE	2	AS

PR_BONUS_NEW_OK	PROCEDURE	3	   v_head                      VARCHAR2 (4000);

PR_BONUS_NEW_OK	PROCEDURE	4	   v_body                      VARCHAR2 (32767);

PR_BONUS_NEW_OK	PROCEDURE	5	   v_tn                        INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	6	   v_dpt_id                    INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	7	   i                           INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	8	   too_many_lines              INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	9	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_BONUS_NEW_OK	PROCEDURE	10	   v_bonus_type                INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	11	   v_bonus_subtype             INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	12	   v_bonus_type_name           VARCHAR (255);

PR_BONUS_NEW_OK	PROCEDURE	13	   v_bonus_subtype_name        VARCHAR (255);

PR_BONUS_NEW_OK	PROCEDURE	14	   v_bonus_id                  INTEGER;

PR_BONUS_NEW_OK	PROCEDURE	15	   v_text                      VARCHAR2 (1000);

PR_BONUS_NEW_OK	PROCEDURE	16	   v_creator_fio               VARCHAR (255);

PR_BONUS_NEW_OK	PROCEDURE	17	   v_creator_pos_name          VARCHAR (255);

PR_BONUS_NEW_OK	PROCEDURE	18	   v_creator_department_name   VARCHAR (255);

PR_BONUS_NEW_OK	PROCEDURE	19	   v_created                   VARCHAR (255);

PR_BONUS_NEW_OK	PROCEDURE	20	BEGIN

PR_BONUS_NEW_OK	PROCEDURE	21	   SELECT u1.fio,

PR_BONUS_NEW_OK	PROCEDURE	22	          u1.pos_name,

PR_BONUS_NEW_OK	PROCEDURE	23	          u1.department_name,

PR_BONUS_NEW_OK	PROCEDURE	24	          TO_CHAR (v.created, 'dd.mm.yyyy') created,

PR_BONUS_NEW_OK	PROCEDURE	25	          v.tn,

PR_BONUS_NEW_OK	PROCEDURE	26	          v.bonus_type,

PR_BONUS_NEW_OK	PROCEDURE	27	          v.bonus_subtype,

PR_BONUS_NEW_OK	PROCEDURE	28	          (SELECT name

PR_BONUS_NEW_OK	PROCEDURE	29	             FROM bonus_types

PR_BONUS_NEW_OK	PROCEDURE	30	            WHERE id = v.bonus_type)

PR_BONUS_NEW_OK	PROCEDURE	31	             bonus_type_name,

PR_BONUS_NEW_OK	PROCEDURE	32	          (SELECT name

PR_BONUS_NEW_OK	PROCEDURE	33	             FROM bonus_types

PR_BONUS_NEW_OK	PROCEDURE	34	            WHERE id = v.bonus_subtype)

PR_BONUS_NEW_OK	PROCEDURE	35	             bonus_subtype_name,

PR_BONUS_NEW_OK	PROCEDURE	36	          v.id,

PR_BONUS_NEW_OK	PROCEDURE	37	          v.dpt_id,

PR_BONUS_NEW_OK	PROCEDURE	38	          sz1.body

PR_BONUS_NEW_OK	PROCEDURE	39	     INTO v_creator_fio,

PR_BONUS_NEW_OK	PROCEDURE	40	          v_creator_pos_name,

PR_BONUS_NEW_OK	PROCEDURE	41	          v_creator_department_name,

PR_BONUS_NEW_OK	PROCEDURE	42	          v_created,

PR_BONUS_NEW_OK	PROCEDURE	43	          v_tn,

PR_BONUS_NEW_OK	PROCEDURE	44	          v_bonus_type,

PR_BONUS_NEW_OK	PROCEDURE	45	          v_bonus_subtype,

PR_BONUS_NEW_OK	PROCEDURE	46	          v_bonus_type_name,

PR_BONUS_NEW_OK	PROCEDURE	47	          v_bonus_subtype_name,

PR_BONUS_NEW_OK	PROCEDURE	48	          v_bonus_id,

PR_BONUS_NEW_OK	PROCEDURE	49	          v_dpt_id,

PR_BONUS_NEW_OK	PROCEDURE	50	          v_text

PR_BONUS_NEW_OK	PROCEDURE	51	     FROM BONUS_head v, user_list u1, sz sz1

PR_BONUS_NEW_OK	PROCEDURE	52	    WHERE v.sz_id = p_sz_id AND u1.tn(+) = v.tn AND sz1.ID(+) = v.sz_id;

PR_BONUS_NEW_OK	PROCEDURE	53	

PR_BONUS_NEW_OK	PROCEDURE	54	   v_head :=

PR_BONUS_NEW_OK	PROCEDURE	55	      'Заявка на применение административных мер согласована';

PR_BONUS_NEW_OK	PROCEDURE	56	   v_body :=

PR_BONUS_NEW_OK	PROCEDURE	57	         '№ заявки '

PR_BONUS_NEW_OK	PROCEDURE	58	      || v_bonus_id

PR_BONUS_NEW_OK	PROCEDURE	59	      || '<br>'

PR_BONUS_NEW_OK	PROCEDURE	60	      || 'Дата заявки '

PR_BONUS_NEW_OK	PROCEDURE	61	      || v_created

PR_BONUS_NEW_OK	PROCEDURE	62	      || '<br>'

PR_BONUS_NEW_OK	PROCEDURE	63	      || 'ФИО инициатора '

PR_BONUS_NEW_OK	PROCEDURE	64	      || v_creator_fio

PR_BONUS_NEW_OK	PROCEDURE	65	      || '<br>'

PR_BONUS_NEW_OK	PROCEDURE	66	      || 'должность инициатора '

PR_BONUS_NEW_OK	PROCEDURE	67	      || v_creator_pos_name

PR_BONUS_NEW_OK	PROCEDURE	68	      || '<br>'

PR_BONUS_NEW_OK	PROCEDURE	69	      || 'подразделение инициатора '

PR_BONUS_NEW_OK	PROCEDURE	70	      || v_creator_department_name

PR_BONUS_NEW_OK	PROCEDURE	71	      || '<br>'

PR_BONUS_NEW_OK	PROCEDURE	72	      || v_text;

PR_BONUS_NEW_OK	PROCEDURE	73	   i := 1;

PR_BONUS_NEW_OK	PROCEDURE	74	

PR_BONUS_NEW_OK	PROCEDURE	75	   FOR a IN (  SELECT *

PR_BONUS_NEW_OK	PROCEDURE	76	                 FROM bonus_body t, calendar c

PR_BONUS_NEW_OK	PROCEDURE	77	                WHERE t.bonus_id = v_bonus_id AND t.mz = c.data

PR_BONUS_NEW_OK	PROCEDURE	78	             ORDER BY t.fio)

PR_BONUS_NEW_OK	PROCEDURE	79	   LOOP

PR_BONUS_NEW_OK	PROCEDURE	80	      IF NVL (LENGTH (v_body), 0) < 10000

PR_BONUS_NEW_OK	PROCEDURE	81	      THEN

PR_BONUS_NEW_OK	PROCEDURE	82	         i := i + 1;

PR_BONUS_NEW_OK	PROCEDURE	83	         too_many_lines := 0;

PR_BONUS_NEW_OK	PROCEDURE	84	      ELSE

PR_BONUS_NEW_OK	PROCEDURE	85	         too_many_lines := 1;

PR_BONUS_NEW_OK	PROCEDURE	86	      END IF;

PR_BONUS_NEW_OK	PROCEDURE	87	   END LOOP;

PR_BONUS_NEW_OK	PROCEDURE	88	

PR_BONUS_NEW_OK	PROCEDURE	89	   IF too_many_lines = 1

PR_BONUS_NEW_OK	PROCEDURE	90	   THEN

PR_BONUS_NEW_OK	PROCEDURE	91	      v_body :=

PR_BONUS_NEW_OK	PROCEDURE	92	            v_body

PR_BONUS_NEW_OK	PROCEDURE	93	         || '<p>Отображен не весь список. Полный список вы можете увидеть непосредственно на портале</p>';

PR_BONUS_NEW_OK	PROCEDURE	94	   END IF;

PR_BONUS_NEW_OK	PROCEDURE	95	

PR_BONUS_NEW_OK	PROCEDURE	96	   v_body :=

PR_BONUS_NEW_OK	PROCEDURE	97	         v_body

PR_BONUS_NEW_OK	PROCEDURE	98	      || '<p><a href="https://ps.avk.ua/?action=sz_reestr&sz_id='

PR_BONUS_NEW_OK	PROCEDURE	99	      || p_sz_id

PR_BONUS_NEW_OK	PROCEDURE	100	      || '">ссылка на СЗ</a></p>';

PR_BONUS_NEW_OK	PROCEDURE	101	

PR_BONUS_NEW_OK	PROCEDURE	102	   FOR a

PR_BONUS_NEW_OK	PROCEDURE	103	      IN (SELECT val_string

PR_BONUS_NEW_OK	PROCEDURE	104	            FROM parameters

PR_BONUS_NEW_OK	PROCEDURE	105	           WHERE     dpt_id = v_dpt_id

PR_BONUS_NEW_OK	PROCEDURE	106	                 AND param_name IN ('pers1', 'pers2', 'accept1', 'accept2'))

PR_BONUS_NEW_OK	PROCEDURE	107	   LOOP

PR_BONUS_NEW_OK	PROCEDURE	108	      PR_SENDMAIL (a.val_string, v_head, v_body);

PR_BONUS_NEW_OK	PROCEDURE	109	   END LOOP;

PR_BONUS_NEW_OK	PROCEDURE	110	END;

PR_BONUS_SZ_CREATE	PROCEDURE	1	PROCEDURE        "PR_BONUS_SZ_CREATE" (

PR_BONUS_SZ_CREATE	PROCEDURE	2	   p_bonus_id IN INTEGER)

PR_BONUS_SZ_CREATE	PROCEDURE	3	AS

PR_BONUS_SZ_CREATE	PROCEDURE	4	   v_recipient               INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	5	   v_head                    VARCHAR2 (4000);

PR_BONUS_SZ_CREATE	PROCEDURE	6	   v_body                    VARCHAR2 (4000);

PR_BONUS_SZ_CREATE	PROCEDURE	7	   v_fio                     VARCHAR2 (1024);

PR_BONUS_SZ_CREATE	PROCEDURE	8	   v_sz_id                   INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	9	   v_tn                      INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	10	   i                         INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	11	   param_vacation_tn         INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	12	   param_vacation_order_tn   INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	13	   param_vacation            INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	14	   param_vacation_order      INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	15	   v_bonus_type              INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	16	   v_bonus_subtype           INTEGER;

PR_BONUS_SZ_CREATE	PROCEDURE	17	   v_bonus_type_name         VARCHAR (255);

PR_BONUS_SZ_CREATE	PROCEDURE	18	   v_bonus_subtype_name      VARCHAR (255);

PR_BONUS_SZ_CREATE	PROCEDURE	19	   v_text                    VARCHAR2 (1000);

PR_BONUS_SZ_CREATE	PROCEDURE	20	   PRAGMA AUTONOMOUS_TRANSACTION;

PR_BONUS_SZ_CREATE	PROCEDURE	21	BEGIN

PR_BONUS_SZ_CREATE	PROCEDURE	22	   SELECT v.tn,

PR_BONUS_SZ_CREATE	PROCEDURE	23	          v.bonus_type,

PR_BONUS_SZ_CREATE	PROCEDURE	24	          v.bonus_subtype,

PR_BONUS_SZ_CREATE	PROCEDURE	25	          (SELECT name

PR_BONUS_SZ_CREATE	PROCEDURE	26	             FROM bonus_types

PR_BONUS_SZ_CREATE	PROCEDURE	27	            WHERE id = v.bonus_type)

PR_BONUS_SZ_CREATE	PROCEDURE	28	             bonus_type_name,

PR_BONUS_SZ_CREATE	PROCEDURE	29	          (SELECT name

PR_BONUS_SZ_CREATE	PROCEDURE	30	             FROM bonus_types

PR_BONUS_SZ_CREATE	PROCEDURE	31	            WHERE id = v.bonus_subtype)

PR_BONUS_SZ_CREATE	PROCEDURE	32	             bonus_subtype_name,

PR_BONUS_SZ_CREATE	PROCEDURE	33	          v.sz_id,

PR_BONUS_SZ_CREATE	PROCEDURE	34	          v.text

PR_BONUS_SZ_CREATE	PROCEDURE	35	     INTO v_tn,

PR_BONUS_SZ_CREATE	PROCEDURE	36	          v_bonus_type,

PR_BONUS_SZ_CREATE	PROCEDURE	37	          v_bonus_subtype,

PR_BONUS_SZ_CREATE	PROCEDURE	38	          v_bonus_type_name,

PR_BONUS_SZ_CREATE	PROCEDURE	39	          v_bonus_subtype_name,

PR_BONUS_SZ_CREATE	PROCEDURE	40	          v_sz_id,

PR_BONUS_SZ_CREATE	PROCEDURE	41	          v_text

PR_BONUS_SZ_CREATE	PROCEDURE	42	     FROM BONUS_head v

PR_BONUS_SZ_CREATE	PROCEDURE	43	    WHERE v.id = p_bonus_id;

PR_BONUS_SZ_CREATE	PROCEDURE	44	

PR_BONUS_SZ_CREATE	PROCEDURE	45	   DELETE FROM sz

PR_BONUS_SZ_CREATE	PROCEDURE	46	         WHERE id = v_sz_id;

PR_BONUS_SZ_CREATE	PROCEDURE	47	

PR_BONUS_SZ_CREATE	PROCEDURE	48	   COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	49	

PR_BONUS_SZ_CREATE	PROCEDURE	50	   SELECT master

PR_BONUS_SZ_CREATE	PROCEDURE	51	     INTO v_recipient

PR_BONUS_SZ_CREATE	PROCEDURE	52	     FROM (    SELECT LEVEL, f.*

PR_BONUS_SZ_CREATE	PROCEDURE	53	                 FROM (SELECT *

PR_BONUS_SZ_CREATE	PROCEDURE	54	                         FROM full

PR_BONUS_SZ_CREATE	PROCEDURE	55	                        WHERE full = 1) f,

PR_BONUS_SZ_CREATE	PROCEDURE	56	                      user_list u

PR_BONUS_SZ_CREATE	PROCEDURE	57	                WHERE f.MASTER = u.tn AND u.datauvol IS NULL

PR_BONUS_SZ_CREATE	PROCEDURE	58	           CONNECT BY PRIOR f.master = f.slave

PR_BONUS_SZ_CREATE	PROCEDURE	59	           START WITH f.slave = v_tn

PR_BONUS_SZ_CREATE	PROCEDURE	60	             ORDER BY LEVEL DESC)

PR_BONUS_SZ_CREATE	PROCEDURE	61	    WHERE ROWNUM = 1;

PR_BONUS_SZ_CREATE	PROCEDURE	62	

PR_BONUS_SZ_CREATE	PROCEDURE	63	   SELECT fio

PR_BONUS_SZ_CREATE	PROCEDURE	64	     INTO v_fio

PR_BONUS_SZ_CREATE	PROCEDURE	65	     FROM user_list

PR_BONUS_SZ_CREATE	PROCEDURE	66	    WHERE tn = v_tn;

PR_BONUS_SZ_CREATE	PROCEDURE	67	

PR_BONUS_SZ_CREATE	PROCEDURE	68	   v_head :=

PR_BONUS_SZ_CREATE	PROCEDURE	69	      'Заявка на применение административных мер';

PR_BONUS_SZ_CREATE	PROCEDURE	70	   v_body :=

PR_BONUS_SZ_CREATE	PROCEDURE	71	         'Прошу применить следующую административную меру:<br>'

PR_BONUS_SZ_CREATE	PROCEDURE	72	      || v_bonus_type_name

PR_BONUS_SZ_CREATE	PROCEDURE	73	      || ' '

PR_BONUS_SZ_CREATE	PROCEDURE	74	      || v_bonus_subtype_name

PR_BONUS_SZ_CREATE	PROCEDURE	75	      || '<br>'

PR_BONUS_SZ_CREATE	PROCEDURE	76	      || 'Детализация:<br>'

PR_BONUS_SZ_CREATE	PROCEDURE	77	      || v_text

PR_BONUS_SZ_CREATE	PROCEDURE	78	      || '<br>'

PR_BONUS_SZ_CREATE	PROCEDURE	79	      || 'Список сотрудников:<br>';

PR_BONUS_SZ_CREATE	PROCEDURE	80	

PR_BONUS_SZ_CREATE	PROCEDURE	81	   FOR a IN (  SELECT *

PR_BONUS_SZ_CREATE	PROCEDURE	82	                 FROM bonus_body t, calendar c

PR_BONUS_SZ_CREATE	PROCEDURE	83	                WHERE t.bonus_id = p_bonus_id AND t.mz = c.data

PR_BONUS_SZ_CREATE	PROCEDURE	84	             ORDER BY t.fio)

PR_BONUS_SZ_CREATE	PROCEDURE	85	   LOOP

PR_BONUS_SZ_CREATE	PROCEDURE	86	      v_body :=

PR_BONUS_SZ_CREATE	PROCEDURE	87	            v_body

PR_BONUS_SZ_CREATE	PROCEDURE	88	         || ''

PR_BONUS_SZ_CREATE	PROCEDURE	89	         || a.fio

PR_BONUS_SZ_CREATE	PROCEDURE	90	         || ', '

PR_BONUS_SZ_CREATE	PROCEDURE	91	         || a.pos_name

PR_BONUS_SZ_CREATE	PROCEDURE	92	         || ', сумма: '

PR_BONUS_SZ_CREATE	PROCEDURE	93	         || a.summa

PR_BONUS_SZ_CREATE	PROCEDURE	94	         || ' '

PR_BONUS_SZ_CREATE	PROCEDURE	95	         || a.cur_name

PR_BONUS_SZ_CREATE	PROCEDURE	96	         || ', месяц отнесения: '

PR_BONUS_SZ_CREATE	PROCEDURE	97	         || a.mt

PR_BONUS_SZ_CREATE	PROCEDURE	98	         || ' '

PR_BONUS_SZ_CREATE	PROCEDURE	99	         || a.y

PR_BONUS_SZ_CREATE	PROCEDURE	100	         || '<br>';

PR_BONUS_SZ_CREATE	PROCEDURE	101	   END LOOP;

PR_BONUS_SZ_CREATE	PROCEDURE	102	

PR_BONUS_SZ_CREATE	PROCEDURE	103	   SELECT seq_all.NEXTVAL INTO v_sz_id FROM DUAL;

PR_BONUS_SZ_CREATE	PROCEDURE	104	

PR_BONUS_SZ_CREATE	PROCEDURE	105	   UPDATE bonus_head

PR_BONUS_SZ_CREATE	PROCEDURE	106	      SET sz_id = v_sz_id

PR_BONUS_SZ_CREATE	PROCEDURE	107	    WHERE id = p_bonus_id;

PR_BONUS_SZ_CREATE	PROCEDURE	108	

PR_BONUS_SZ_CREATE	PROCEDURE	109	   COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	110	

PR_BONUS_SZ_CREATE	PROCEDURE	111	   INSERT INTO sz (id,

PR_BONUS_SZ_CREATE	PROCEDURE	112	                   tn,

PR_BONUS_SZ_CREATE	PROCEDURE	113	                   recipient,

PR_BONUS_SZ_CREATE	PROCEDURE	114	                   head,

PR_BONUS_SZ_CREATE	PROCEDURE	115	                   body,

PR_BONUS_SZ_CREATE	PROCEDURE	116	                   cat)

PR_BONUS_SZ_CREATE	PROCEDURE	117	        VALUES (v_sz_id,

PR_BONUS_SZ_CREATE	PROCEDURE	118	                v_tn,

PR_BONUS_SZ_CREATE	PROCEDURE	119	                v_recipient,

PR_BONUS_SZ_CREATE	PROCEDURE	120	                v_head,

PR_BONUS_SZ_CREATE	PROCEDURE	121	                v_body,

PR_BONUS_SZ_CREATE	PROCEDURE	122	                927672);

PR_BONUS_SZ_CREATE	PROCEDURE	123	

PR_BONUS_SZ_CREATE	PROCEDURE	124	   COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	125	

PR_BONUS_SZ_CREATE	PROCEDURE	126	   INSERT INTO sz_files (sz_id, fn)

PR_BONUS_SZ_CREATE	PROCEDURE	127	      SELECT v_sz_id, fn

PR_BONUS_SZ_CREATE	PROCEDURE	128	        FROM bonus_files

PR_BONUS_SZ_CREATE	PROCEDURE	129	       WHERE bonus_id = p_bonus_id;

PR_BONUS_SZ_CREATE	PROCEDURE	130	

PR_BONUS_SZ_CREATE	PROCEDURE	131	   COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	132	

PR_BONUS_SZ_CREATE	PROCEDURE	133	       -- считаем общее количество согласователей в цепочке

PR_BONUS_SZ_CREATE	PROCEDURE	134	       SELECT MAX (LEVEL)

PR_BONUS_SZ_CREATE	PROCEDURE	135	         INTO i

PR_BONUS_SZ_CREATE	PROCEDURE	136	         FROM (SELECT *

PR_BONUS_SZ_CREATE	PROCEDURE	137	                 FROM FULL

PR_BONUS_SZ_CREATE	PROCEDURE	138	                WHERE FULL = 1) f,

PR_BONUS_SZ_CREATE	PROCEDURE	139	              user_list u

PR_BONUS_SZ_CREATE	PROCEDURE	140	        WHERE f.MASTER = u.tn AND u.datauvol IS NULL

PR_BONUS_SZ_CREATE	PROCEDURE	141	   CONNECT BY PRIOR f.master = f.slave

PR_BONUS_SZ_CREATE	PROCEDURE	142	   START WITH f.slave = v_tn;

PR_BONUS_SZ_CREATE	PROCEDURE	143	

PR_BONUS_SZ_CREATE	PROCEDURE	144	   -- считаем, существует ли переменная vacation

PR_BONUS_SZ_CREATE	PROCEDURE	145	   SELECT COUNT (*)

PR_BONUS_SZ_CREATE	PROCEDURE	146	     INTO param_vacation

PR_BONUS_SZ_CREATE	PROCEDURE	147	     FROM parameters

PR_BONUS_SZ_CREATE	PROCEDURE	148	    WHERE     param_name = 'vacation'

PR_BONUS_SZ_CREATE	PROCEDURE	149	          AND dpt_id = (SELECT dpt_id

PR_BONUS_SZ_CREATE	PROCEDURE	150	                          FROM user_list

PR_BONUS_SZ_CREATE	PROCEDURE	151	                         WHERE tn = v_tn);

PR_BONUS_SZ_CREATE	PROCEDURE	152	

PR_BONUS_SZ_CREATE	PROCEDURE	153	   -- и запоминаем ее значение

PR_BONUS_SZ_CREATE	PROCEDURE	154	   IF param_vacation = 1

PR_BONUS_SZ_CREATE	PROCEDURE	155	   THEN

PR_BONUS_SZ_CREATE	PROCEDURE	156	      SELECT val_number

PR_BONUS_SZ_CREATE	PROCEDURE	157	        INTO param_vacation_tn

PR_BONUS_SZ_CREATE	PROCEDURE	158	        FROM parameters

PR_BONUS_SZ_CREATE	PROCEDURE	159	       WHERE     param_name = 'vacation'

PR_BONUS_SZ_CREATE	PROCEDURE	160	             AND dpt_id = (SELECT dpt_id

PR_BONUS_SZ_CREATE	PROCEDURE	161	                             FROM user_list

PR_BONUS_SZ_CREATE	PROCEDURE	162	                            WHERE tn = v_tn);

PR_BONUS_SZ_CREATE	PROCEDURE	163	   ELSE

PR_BONUS_SZ_CREATE	PROCEDURE	164	      param_vacation_tn := 0;

PR_BONUS_SZ_CREATE	PROCEDURE	165	   END IF;

PR_BONUS_SZ_CREATE	PROCEDURE	166	

PR_BONUS_SZ_CREATE	PROCEDURE	167	   -- считаем, существует ли переменная vacation_order

PR_BONUS_SZ_CREATE	PROCEDURE	168	   SELECT COUNT (*)

PR_BONUS_SZ_CREATE	PROCEDURE	169	     INTO param_vacation_order

PR_BONUS_SZ_CREATE	PROCEDURE	170	     FROM parameters

PR_BONUS_SZ_CREATE	PROCEDURE	171	    WHERE     param_name = 'vacation_order'

PR_BONUS_SZ_CREATE	PROCEDURE	172	          AND dpt_id = (SELECT dpt_id

PR_BONUS_SZ_CREATE	PROCEDURE	173	                          FROM user_list

PR_BONUS_SZ_CREATE	PROCEDURE	174	                         WHERE tn = v_tn);

PR_BONUS_SZ_CREATE	PROCEDURE	175	

PR_BONUS_SZ_CREATE	PROCEDURE	176	   -- и запоминаем ее значение

PR_BONUS_SZ_CREATE	PROCEDURE	177	   IF param_vacation_order = 1

PR_BONUS_SZ_CREATE	PROCEDURE	178	   THEN

PR_BONUS_SZ_CREATE	PROCEDURE	179	      SELECT val_number

PR_BONUS_SZ_CREATE	PROCEDURE	180	        INTO param_vacation_order_tn

PR_BONUS_SZ_CREATE	PROCEDURE	181	        FROM parameters

PR_BONUS_SZ_CREATE	PROCEDURE	182	       WHERE     param_name = 'vacation_order'

PR_BONUS_SZ_CREATE	PROCEDURE	183	             AND dpt_id = (SELECT dpt_id

PR_BONUS_SZ_CREATE	PROCEDURE	184	                             FROM user_list

PR_BONUS_SZ_CREATE	PROCEDURE	185	                            WHERE tn = v_tn);

PR_BONUS_SZ_CREATE	PROCEDURE	186	   ELSE

PR_BONUS_SZ_CREATE	PROCEDURE	187	      param_vacation_order_tn := 0;

PR_BONUS_SZ_CREATE	PROCEDURE	188	   END IF;

PR_BONUS_SZ_CREATE	PROCEDURE	189	

PR_BONUS_SZ_CREATE	PROCEDURE	190	   -- пробегаемся по цепочке согласователей

PR_BONUS_SZ_CREATE	PROCEDURE	191	   -- цепочка согласования: прямой руководитель - прямой руководитель прямого руководителя - ... - Бабец Р.

PR_BONUS_SZ_CREATE	PROCEDURE	192	   FOR A IN (    SELECT f.MASTER, LEVEL

PR_BONUS_SZ_CREATE	PROCEDURE	193	                   FROM (SELECT *

PR_BONUS_SZ_CREATE	PROCEDURE	194	                           FROM FULL

PR_BONUS_SZ_CREATE	PROCEDURE	195	                          WHERE FULL = 1) f,

PR_BONUS_SZ_CREATE	PROCEDURE	196	                        user_list u

PR_BONUS_SZ_CREATE	PROCEDURE	197	                  WHERE f.MASTER = u.tn AND u.datauvol IS NULL

PR_BONUS_SZ_CREATE	PROCEDURE	198	             CONNECT BY PRIOR f.master = f.slave

PR_BONUS_SZ_CREATE	PROCEDURE	199	             START WITH f.slave = v_tn)

PR_BONUS_SZ_CREATE	PROCEDURE	200	   LOOP

PR_BONUS_SZ_CREATE	PROCEDURE	201	      -- если для страны задана переменная среды vacation_order

PR_BONUS_SZ_CREATE	PROCEDURE	202	      -- и ее значение содержит ИНН добавляемого участника согласования отпуска,

PR_BONUS_SZ_CREATE	PROCEDURE	203	      -- или переменная не задана и мы добавляем последнего согласователя

PR_BONUS_SZ_CREATE	PROCEDURE	204	      -- то непрямые руководители (или сотрудник из переменной vacation, если она задана) добавляются ПЕРЕД текущим согласователем

PR_BONUS_SZ_CREATE	PROCEDURE	205	      IF    (a.master = param_vacation_order_tn AND param_vacation_order = 1)

PR_BONUS_SZ_CREATE	PROCEDURE	206	         OR (a.LEVEL = i AND param_vacation_order = 0)

PR_BONUS_SZ_CREATE	PROCEDURE	207	      THEN

PR_BONUS_SZ_CREATE	PROCEDURE	208	         -- перед тем, как собираемся добавить последнего согласователся

PR_BONUS_SZ_CREATE	PROCEDURE	209	         -- проверяем, существует ли переменная vacation в данной стране

PR_BONUS_SZ_CREATE	PROCEDURE	210	         IF param_vacation = 0

PR_BONUS_SZ_CREATE	PROCEDURE	211	         THEN

PR_BONUS_SZ_CREATE	PROCEDURE	212	            -- если для указанной страны не задана переменная среды vacation,

PR_BONUS_SZ_CREATE	PROCEDURE	213	            -- то вместо сотрудника из данной переменной среды добавляются

PR_BONUS_SZ_CREATE	PROCEDURE	214	            -- все НЕПРЯМЫЕ РУКОВОДИТЕЛИ (статус "руководитель" = "нет"),

PR_BONUS_SZ_CREATE	PROCEDURE	215	            -- которые привязаны к отпускунику на форме "эксперт-оцениваемый",

PR_BONUS_SZ_CREATE	PROCEDURE	216	            -- но которых еще НЕТ В СПИСКЕ СОГЛАСОВАТЕЛЕЙ.

PR_BONUS_SZ_CREATE	PROCEDURE	217	            FOR b

PR_BONUS_SZ_CREATE	PROCEDURE	218	               IN (SELECT e.*

PR_BONUS_SZ_CREATE	PROCEDURE	219	                     FROM emp_exp e, user_list u

PR_BONUS_SZ_CREATE	PROCEDURE	220	                    WHERE     e.emp_tn = v_tn

PR_BONUS_SZ_CREATE	PROCEDURE	221	                          AND e.exp_tn <> e.emp_tn

PR_BONUS_SZ_CREATE	PROCEDURE	222	                          AND u.tn = e.exp_tn

PR_BONUS_SZ_CREATE	PROCEDURE	223	                          AND u.datauvol IS NULL)

PR_BONUS_SZ_CREATE	PROCEDURE	224	            LOOP

PR_BONUS_SZ_CREATE	PROCEDURE	225	               BEGIN

PR_BONUS_SZ_CREATE	PROCEDURE	226	                  INSERT INTO sz_accept (sz_id, tn)

PR_BONUS_SZ_CREATE	PROCEDURE	227	                       VALUES (v_sz_id, b.exp_tn);

PR_BONUS_SZ_CREATE	PROCEDURE	228	

PR_BONUS_SZ_CREATE	PROCEDURE	229	                  COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	230	               EXCEPTION

PR_BONUS_SZ_CREATE	PROCEDURE	231	                  WHEN OTHERS

PR_BONUS_SZ_CREATE	PROCEDURE	232	                  THEN

PR_BONUS_SZ_CREATE	PROCEDURE	233	                     NULL;

PR_BONUS_SZ_CREATE	PROCEDURE	234	               END;

PR_BONUS_SZ_CREATE	PROCEDURE	235	            END LOOP;

PR_BONUS_SZ_CREATE	PROCEDURE	236	         ELSE

PR_BONUS_SZ_CREATE	PROCEDURE	237	            -- если переменная vacation задана

PR_BONUS_SZ_CREATE	PROCEDURE	238	            -- добавляется сотрудник, ИНН которого указан в данной переменной

PR_BONUS_SZ_CREATE	PROCEDURE	239	            -- и которого еще НЕТ В СПИСКЕ СОГЛАСОВАТЕЛЕЙ.

PR_BONUS_SZ_CREATE	PROCEDURE	240	

PR_BONUS_SZ_CREATE	PROCEDURE	241	            BEGIN

PR_BONUS_SZ_CREATE	PROCEDURE	242	               INSERT INTO sz_accept (sz_id, tn)

PR_BONUS_SZ_CREATE	PROCEDURE	243	                    VALUES (v_sz_id, param_vacation_tn);

PR_BONUS_SZ_CREATE	PROCEDURE	244	

PR_BONUS_SZ_CREATE	PROCEDURE	245	               COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	246	            EXCEPTION

PR_BONUS_SZ_CREATE	PROCEDURE	247	               WHEN OTHERS

PR_BONUS_SZ_CREATE	PROCEDURE	248	               THEN

PR_BONUS_SZ_CREATE	PROCEDURE	249	                  NULL;

PR_BONUS_SZ_CREATE	PROCEDURE	250	            END;

PR_BONUS_SZ_CREATE	PROCEDURE	251	         END IF;

PR_BONUS_SZ_CREATE	PROCEDURE	252	      END IF;

PR_BONUS_SZ_CREATE	PROCEDURE	253	

PR_BONUS_SZ_CREATE	PROCEDURE	254	      BEGIN

PR_BONUS_SZ_CREATE	PROCEDURE	255	         INSERT INTO sz_accept (sz_id, tn)

PR_BONUS_SZ_CREATE	PROCEDURE	256	              VALUES (v_sz_id, a.master);

PR_BONUS_SZ_CREATE	PROCEDURE	257	

PR_BONUS_SZ_CREATE	PROCEDURE	258	         COMMIT;

PR_BONUS_SZ_CREATE	PROCEDURE	259	      EXCEPTION

PR_BONUS_SZ_CREATE	PROCEDURE	260	         WHEN OTHERS

PR_BONUS_SZ_CREATE	PROCEDURE	261	         THEN

PR_BONUS_SZ_CREATE	PROCEDURE	262	            NULL;

PR_BONUS_SZ_CREATE	PROCEDURE	263	      END;

PR_BONUS_SZ_CREATE	PROCEDURE	264	   END LOOP;

PR_BONUS_SZ_CREATE	PROCEDURE	265	END;
PROMO_TM_OK_TM	TRIGGER	1	TRIGGER PERSIK.PROMO_TM_ok_tm

PROMO_TM_OK_TM	TRIGGER	2	   BEFORE UPDATE OF ok_tm

PROMO_TM_OK_TM	TRIGGER	3	   ON persik.promo_tm

PROMO_TM_OK_TM	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_TM_OK_TM	TRIGGER	5	   FOR EACH ROW

PROMO_TM_OK_TM	TRIGGER	6	BEGIN

PROMO_TM_OK_TM	TRIGGER	7	   :NEW.ok_tm_LU := SYSDATE;

PROMO_TM_OK_TM	TRIGGER	8	END;
PROMO_TM_OK_NM	TRIGGER	1	TRIGGER PERSIK.PROMO_TM_ok_nm

PROMO_TM_OK_NM	TRIGGER	2	   BEFORE UPDATE OF ok_nm

PROMO_TM_OK_NM	TRIGGER	3	   ON persik.promo_tm

PROMO_TM_OK_NM	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_TM_OK_NM	TRIGGER	5	   FOR EACH ROW

PROMO_TM_OK_NM	TRIGGER	6	BEGIN

PROMO_TM_OK_NM	TRIGGER	7	   :NEW.ok_nm_LU := SYSDATE;

PROMO_TM_OK_NM	TRIGGER	8	END;
PROMO_TM_OK_FM	TRIGGER	1	TRIGGER PERSIK.PROMO_TM_ok_fm

PROMO_TM_OK_FM	TRIGGER	2	   BEFORE UPDATE OF ok_fm

PROMO_TM_OK_FM	TRIGGER	3	   ON persik.promo_tm

PROMO_TM_OK_FM	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_TM_OK_FM	TRIGGER	5	   FOR EACH ROW

PROMO_TM_OK_FM	TRIGGER	6	BEGIN

PROMO_TM_OK_FM	TRIGGER	7	   :NEW.ok_fm_LU := SYSDATE;

PROMO_TM_OK_FM	TRIGGER	8	END;
PROMO_TM_LU	TRIGGER	1	TRIGGER PERSIK.promo_tm_lu

PROMO_TM_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

PROMO_TM_LU	TRIGGER	3	   ON persik.promo_tm

PROMO_TM_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_TM_LU	TRIGGER	5	   FOR EACH ROW

PROMO_TM_LU	TRIGGER	6	BEGIN

PROMO_TM_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

PROMO_TM_LU	TRIGGER	8	END;
PROMO_STOCK_LU	TRIGGER	1	TRIGGER PERSIK.PROMO_stock_LU

PROMO_STOCK_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

PROMO_STOCK_LU	TRIGGER	3	   ON persik.PROMO_stock

PROMO_STOCK_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_STOCK_LU	TRIGGER	5	   FOR EACH ROW

PROMO_STOCK_LU	TRIGGER	6	BEGIN

PROMO_STOCK_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

PROMO_STOCK_LU	TRIGGER	8	END;
PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	1	TRIGGER PROMO_PLAN_HEAD_UPD_OK_TRAID

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_traid

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	3	   ON BUD_FUNDS_LIMITS_H

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	5	   FOR EACH ROW

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	6	BEGIN

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	7	   IF :new.ok_traid = 1

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	8	   THEN

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	9	      :new.ok_traid_lu := SYSDATE;

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	10	   ELSE

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	11	      :new.ok_traid := NULL;

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	12	      :new.ok_traid_lu := NULL;

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	13	      :new.ok_traid_fio := NULL;

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	14	   END IF;

PROMO_PLAN_HEAD_UPD_OK_TRAID	TRIGGER	15	END;
PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	1	TRIGGER PERSIK.PROMO_PLAN_HEAD_UPD_OK_DPU

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_dpu

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	3	   ON PERSIK.BUD_FUNDS_LIMITS_H

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	5	   FOR EACH ROW

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	6	DECLARE

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	7	   d   VARCHAR2 (255);

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	8	BEGIN

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	9	   IF :new.ok_dpu = 1

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	10	   THEN

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	11	      :new.ok_dpu_lu := SYSDATE;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	12	

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	13	      SELECT mt || ' ' || y

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	14	        INTO d

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	15	        FROM calendar

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	16	       WHERE data = :new.dt;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	17	

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	18	

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	19	      FOR a

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	20	         IN (SELECT u.e_mail, u.fio

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	21	               FROM user_list u

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	22	              WHERE     DECODE (:new.kk, 0, is_traid, is_traid_kk) = 1

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	23	                    AND dpt_id = :new.dpt_id)

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	24	      LOOP

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	25	         PR_SENDMAIL (

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	26	            a.e_mail,

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	27	               'План по фондам на '

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	28	            || d

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	29	            || ' подтвержден',

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	30	               'План по фондам на '

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	31	            || d

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	32	            || ' подтвержден');

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	33	      END LOOP;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	34	   ELSE

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	35	      :new.ok_dpu := NULL;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	36	      :new.ok_dpu_lu := NULL;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	37	      :new.ok_dpu_fio := NULL;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	38	

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	39	      DELETE FROM BUD_FUNDS_LIMITS_FT

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	40	            WHERE dt = :new.dt AND dpt_id = :new.dpt_id AND kk = :new.kk;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	41	   END IF;

PROMO_PLAN_HEAD_UPD_OK_DPU	TRIGGER	42	END;
PROMO_PLAN_HEAD_UPD	TRIGGER	1	TRIGGER PROMO_PLAN_HEAD_UPD

PROMO_PLAN_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

PROMO_PLAN_HEAD_UPD	TRIGGER	3	   ON BUD_FUNDS_LIMITS_H

PROMO_PLAN_HEAD_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_PLAN_HEAD_UPD	TRIGGER	5	   FOR EACH ROW

PROMO_PLAN_HEAD_UPD	TRIGGER	6	BEGIN

PROMO_PLAN_HEAD_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

PROMO_PLAN_HEAD_UPD	TRIGGER	8	END;
PROMO_NM_OKNM_NMLU	TRIGGER	1	TRIGGER PERSIK.PROMO_NM_OKNM_NMLU

PROMO_NM_OKNM_NMLU	TRIGGER	2	   BEFORE INSERT OR UPDATE of oknm_nm

PROMO_NM_OKNM_NMLU	TRIGGER	3	   ON persik.promo_nm

PROMO_NM_OKNM_NMLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_NM_OKNM_NMLU	TRIGGER	5	   FOR EACH ROW

PROMO_NM_OKNM_NMLU	TRIGGER	6	BEGIN

PROMO_NM_OKNM_NMLU	TRIGGER	7	   :NEW.oknm_nmlu := SYSDATE;

PROMO_NM_OKNM_NMLU	TRIGGER	8	END;
PROMO_NM_OKNM_FMLU	TRIGGER	1	TRIGGER PERSIK.PROMO_NM_OKNM_FMLU

PROMO_NM_OKNM_FMLU	TRIGGER	2	   BEFORE INSERT OR UPDATE of oknm_fm

PROMO_NM_OKNM_FMLU	TRIGGER	3	   ON persik.promo_nm

PROMO_NM_OKNM_FMLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_NM_OKNM_FMLU	TRIGGER	5	   FOR EACH ROW

PROMO_NM_OKNM_FMLU	TRIGGER	6	BEGIN

PROMO_NM_OKNM_FMLU	TRIGGER	7	   :NEW.oknm_fmlu := SYSDATE;

PROMO_NM_OKNM_FMLU	TRIGGER	8	END;
PROMO_NM_LU	TRIGGER	1	TRIGGER PERSIK.PROMO_NM_LU

PROMO_NM_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

PROMO_NM_LU	TRIGGER	3	   ON persik.promo_nm

PROMO_NM_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PROMO_NM_LU	TRIGGER	5	   FOR EACH ROW

PROMO_NM_LU	TRIGGER	6	BEGIN

PROMO_NM_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

PROMO_NM_LU	TRIGGER	8	END;
PROBTESTCOPY	FUNCTION	1	FUNCTION ProbTestCopy (old_parent_id   IN INTEGER,

PROBTESTCOPY	FUNCTION	2	                                         new_parent_id   IN INTEGER := 0)

PROBTESTCOPY	FUNCTION	3	   RETURN NUMBER

PROBTESTCOPY	FUNCTION	4	IS

PROBTESTCOPY	FUNCTION	5	   new_id   INTEGER;

PROBTESTCOPY	FUNCTION	6	   i        INTEGER;

PROBTESTCOPY	FUNCTION	7	   PRAGMA AUTONOMOUS_TRANSACTION;

PROBTESTCOPY	FUNCTION	8	BEGIN

PROBTESTCOPY	FUNCTION	9	   new_id := 0;

PROBTESTCOPY	FUNCTION	10	

PROBTESTCOPY	FUNCTION	11	   FOR a

PROBTESTCOPY	FUNCTION	12	      IN (  SELECT *

PROBTESTCOPY	FUNCTION	13	              FROM prob_test z

PROBTESTCOPY	FUNCTION	14	             WHERE    (id = old_parent_id AND new_parent_id = 0)

PROBTESTCOPY	FUNCTION	15	                   OR (parent = old_parent_id AND new_parent_id <> 0)

PROBTESTCOPY	FUNCTION	16	          ORDER BY name)

PROBTESTCOPY	FUNCTION	17	   LOOP

PROBTESTCOPY	FUNCTION	18	      new_id := seq_all.NEXTVAL;

PROBTESTCOPY	FUNCTION	19	      DBMS_OUTPUT.put_line (

PROBTESTCOPY	FUNCTION	20	            old_parent_id

PROBTESTCOPY	FUNCTION	21	         || ':'

PROBTESTCOPY	FUNCTION	22	         || new_parent_id

PROBTESTCOPY	FUNCTION	23	         || ':'

PROBTESTCOPY	FUNCTION	24	         || a.id

PROBTESTCOPY	FUNCTION	25	         || ':'

PROBTESTCOPY	FUNCTION	26	         || new_id);

PROBTESTCOPY	FUNCTION	27	

PROBTESTCOPY	FUNCTION	28	      INSERT INTO prob_test (id,

PROBTESTCOPY	FUNCTION	29	                             name,

PROBTESTCOPY	FUNCTION	30	                             test_len,

PROBTESTCOPY	FUNCTION	31	                             q_sort,

PROBTESTCOPY	FUNCTION	32	                             a_ok,

PROBTESTCOPY	FUNCTION	33	                             parent,

PROBTESTCOPY	FUNCTION	34	                             pict,

PROBTESTCOPY	FUNCTION	35	                             comm)

PROBTESTCOPY	FUNCTION	36	           VALUES (

PROBTESTCOPY	FUNCTION	37	                     new_id,

PROBTESTCOPY	FUNCTION	38	                     DECODE (

PROBTESTCOPY	FUNCTION	39	                        new_parent_id,

PROBTESTCOPY	FUNCTION	40	                        0,    a.name

PROBTESTCOPY	FUNCTION	41	                           || ' (копия от '

PROBTESTCOPY	FUNCTION	42	                           || TO_CHAR (SYSDATE, 'dd.mm.yyyy hh24:mi:ss')

PROBTESTCOPY	FUNCTION	43	                           || ')',

PROBTESTCOPY	FUNCTION	44	                        a.name),

PROBTESTCOPY	FUNCTION	45	                     a.test_len,

PROBTESTCOPY	FUNCTION	46	                     a.q_sort,

PROBTESTCOPY	FUNCTION	47	                     a.a_ok,

PROBTESTCOPY	FUNCTION	48	                     new_parent_id,

PROBTESTCOPY	FUNCTION	49	                     a.pict,

PROBTESTCOPY	FUNCTION	50	                     a.comm);

PROBTESTCOPY	FUNCTION	51	

PROBTESTCOPY	FUNCTION	52	      i := ProbTestCopy (a.id, new_id);

PROBTESTCOPY	FUNCTION	53	   END LOOP;

PROBTESTCOPY	FUNCTION	54	

PROBTESTCOPY	FUNCTION	55	   COMMIT;

PROBTESTCOPY	FUNCTION	56	   RETURN (new_id);

PROBTESTCOPY	FUNCTION	57	END;
POS_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.POS_MV_Q_ADD

POS_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

POS_MV_Q_ADD	TRIGGER	3	   ON PERSIK.POS

POS_MV_Q_ADD	TRIGGER	4	BEGIN

POS_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

POS_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

POS_MV_Q_ADD	TRIGGER	7	END;
POS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."POS_LAST_UPDATE" 

POS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

POS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.pos

POS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

POS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

POS_LAST_UPDATE	TRIGGER	6	BEGIN

POS_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

POS_LAST_UPDATE	TRIGGER	8	END pos_last_update;

POS_LAST_UPDATE	TRIGGER	9	

POS_LAST_UPDATE	TRIGGER	10	

POS_LAST_UPDATE	TRIGGER	11	

POS_KK_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.POS_KK_MV_Q_ADD

POS_KK_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

POS_KK_MV_Q_ADD	TRIGGER	3	   ON PERSIK.POS_KK

POS_KK_MV_Q_ADD	TRIGGER	4	BEGIN

POS_KK_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

POS_KK_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

POS_KK_MV_Q_ADD	TRIGGER	7	END;
PLAN_STATUS_NEW	TRIGGER	1	TRIGGER "PERSIK"."PLAN_STATUS_NEW" 

PLAN_STATUS_NEW	TRIGGER	2	BEFORE INSERT

PLAN_STATUS_NEW	TRIGGER	3	ON PLAN_STATUS 

PLAN_STATUS_NEW	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

PLAN_STATUS_NEW	TRIGGER	5	FOR EACH ROW

PLAN_STATUS_NEW	TRIGGER	6	/* Formatted on 2008/10/30 09:49 (Formatter Plus v4.8.8) */

PLAN_STATUS_NEW	TRIGGER	7	DECLARE

PLAN_STATUS_NEW	TRIGGER	8	BEGIN

PLAN_STATUS_NEW	TRIGGER	9	   SELECT NVL (MAX (ID), 0) + 1 newid

PLAN_STATUS_NEW	TRIGGER	10	     INTO :NEW.ID

PLAN_STATUS_NEW	TRIGGER	11	     FROM plan_status;

PLAN_STATUS_NEW	TRIGGER	12	END plan_status_new; 

PLAN_STATUS_NEW	TRIGGER	13	

PLAN_STATUS_NEW	TRIGGER	14	

PLAN_STATUS_NEW	TRIGGER	15	

PLAN_STATUS_NEW	TRIGGER	16	

PLAN_STATUS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."PLAN_STATUS_LAST_UPDATE" 

PLAN_STATUS_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

PLAN_STATUS_LAST_UPDATE	TRIGGER	3	ON PLAN_STATUS 

PLAN_STATUS_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

PLAN_STATUS_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

PLAN_STATUS_LAST_UPDATE	TRIGGER	6	DECLARE

PLAN_STATUS_LAST_UPDATE	TRIGGER	7	BEGIN

PLAN_STATUS_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

PLAN_STATUS_LAST_UPDATE	TRIGGER	9	END PLAN_STATUS_last_update; 

PLAN_STATUS_LAST_UPDATE	TRIGGER	10	

PLAN_STATUS_LAST_UPDATE	TRIGGER	11	

PLAN_STATUS_LAST_UPDATE	TRIGGER	12	

PLAN_STATUS_LAST_UPDATE	TRIGGER	13	

PERECH_NEW	TRIGGER	1	TRIGGER "PERSIK"."PERECH_NEW" 

PERECH_NEW	TRIGGER	2	   BEFORE INSERT

PERECH_NEW	TRIGGER	3	   ON PERSIK.perech

PERECH_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PERECH_NEW	TRIGGER	5	   FOR EACH ROW

PERECH_NEW	TRIGGER	6	BEGIN

PERECH_NEW	TRIGGER	7	   :NEW.id := seq_all.NEXTVAL;

PERECH_NEW	TRIGGER	8	END perech_new;

PERECH_NEW	TRIGGER	9	

PERECH_NEW	TRIGGER	10	

PERECH_NEW	TRIGGER	11	

PERECH_LU	TRIGGER	1	TRIGGER "PERSIK"."PERECH_LU" 

PERECH_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

PERECH_LU	TRIGGER	3	   ON PERSIK.perech

PERECH_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

PERECH_LU	TRIGGER	5	   FOR EACH ROW

PERECH_LU	TRIGGER	6	BEGIN

PERECH_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

PERECH_LU	TRIGGER	8	END perech_lu;

PERECH_LU	TRIGGER	9	

PERECH_LU	TRIGGER	10	

PERECH_LU	TRIGGER	11	

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."PAYMENT_TYPE_LAST_UPDATE" 

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	3	   ON PERSIK.PAYMENT_TYPE

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	6	DECLARE

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	7	BEGIN

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	9	END PAYMENT_TYPE_LAST_UPDATE;

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	10	

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	11	

PAYMENT_TYPE_LAST_UPDATE	TRIGGER	12	

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."PAYMENT_FORMAT_LAST_UPDATE" 

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	3	   ON PERSIK.PAYMENT_FORMAT

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	6	DECLARE

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	7	BEGIN

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	9	END PAYMENT_FORMAT_LAST_UPDATE;

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	10	

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	11	

PAYMENT_FORMAT_LAST_UPDATE	TRIGGER	12	

PATCH_MS_DATA1	PROCEDURE	1	PROCEDURE        "PATCH_MS_DATA1"

PATCH_MS_DATA1	PROCEDURE	2	IS

PATCH_MS_DATA1	PROCEDURE	3	   c      INTEGER;

PATCH_MS_DATA1	PROCEDURE	4	   cnt    INTEGER;

PATCH_MS_DATA1	PROCEDURE	5	

PATCH_MS_DATA1	PROCEDURE	6	   TYPE recType IS RECORD

PATCH_MS_DATA1	PROCEDURE	7	   (

PATCH_MS_DATA1	PROCEDURE	8	      spec_id   INTEGER:= 0,

PATCH_MS_DATA1	PROCEDURE	9	      dt        DATE:= TRUNC (SYSDATE)

PATCH_MS_DATA1	PROCEDURE	10	   );

PATCH_MS_DATA1	PROCEDURE	11	

PATCH_MS_DATA1	PROCEDURE	12	   TYPE recList IS TABLE OF recType;

PATCH_MS_DATA1	PROCEDURE	13	

PATCH_MS_DATA1	PROCEDURE	14	   recs   recList := recList ();

PATCH_MS_DATA1	PROCEDURE	15	BEGIN

PATCH_MS_DATA1	PROCEDURE	16	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	17	        VALUES ('start', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	18	

PATCH_MS_DATA1	PROCEDURE	19	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	20	

PATCH_MS_DATA1	PROCEDURE	21	   refresh_mv ('MS_REP_HBR_DT');

PATCH_MS_DATA1	PROCEDURE	22	

PATCH_MS_DATA1	PROCEDURE	23	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	24	

PATCH_MS_DATA1	PROCEDURE	25	

PATCH_MS_DATA1	PROCEDURE	26	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	27	        VALUES ('MS_REP_HBR_DT updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	28	

PATCH_MS_DATA1	PROCEDURE	29	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	30	

PATCH_MS_DATA1	PROCEDURE	31	

PATCH_MS_DATA1	PROCEDURE	32	   /*SELECT COUNT (*)

PATCH_MS_DATA1	PROCEDURE	33	     INTO c

PATCH_MS_DATA1	PROCEDURE	34	     FROM routes_body1 rb

PATCH_MS_DATA1	PROCEDURE	35	    WHERE NVL (rb.day_enabled_mr, 0) = 0;

PATCH_MS_DATA1	PROCEDURE	36	

PATCH_MS_DATA1	PROCEDURE	37	   BEGIN

PATCH_MS_DATA1	PROCEDURE	38	      DELETE FROM routes_body1 rb

PATCH_MS_DATA1	PROCEDURE	39	            WHERE NVL (rb.day_enabled_mr, 0) = 0;

PATCH_MS_DATA1	PROCEDURE	40	   EXCEPTION

PATCH_MS_DATA1	PROCEDURE	41	      WHEN OTHERS

PATCH_MS_DATA1	PROCEDURE	42	      THEN

PATCH_MS_DATA1	PROCEDURE	43	         NULL;

PATCH_MS_DATA1	PROCEDURE	44	   END;

PATCH_MS_DATA1	PROCEDURE	45	

PATCH_MS_DATA1	PROCEDURE	46	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	47	

PATCH_MS_DATA1	PROCEDURE	48	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	49	           VALUES (

PATCH_MS_DATA1	PROCEDURE	50	                     'deleted ' || c || ' records from routes_body1',

PATCH_MS_DATA1	PROCEDURE	51	                     'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	52	

PATCH_MS_DATA1	PROCEDURE	53	   COMMIT;*/

PATCH_MS_DATA1	PROCEDURE	54	

PATCH_MS_DATA1	PROCEDURE	55	   /*fill reports only before sysdate*/

PATCH_MS_DATA1	PROCEDURE	56	   INSERT INTO merch_report (rb_id, dt)

PATCH_MS_DATA1	PROCEDURE	57	      SELECT z.*

PATCH_MS_DATA1	PROCEDURE	58	        FROM (SELECT b.id, c.data

PATCH_MS_DATA1	PROCEDURE	59	                FROM routes_head h, routes_body1 b, calendar c

PATCH_MS_DATA1	PROCEDURE	60	               WHERE     h.id = b.head_id

PATCH_MS_DATA1	PROCEDURE	61	                     AND TRUNC (c.data, 'mm') = h.data

PATCH_MS_DATA1	PROCEDURE	62	                     AND b.day_num = c.dm

PATCH_MS_DATA1	PROCEDURE	63	                     AND c.data <= TRUNC (SYSDATE)) z,

PATCH_MS_DATA1	PROCEDURE	64	             merch_report mr

PATCH_MS_DATA1	PROCEDURE	65	       WHERE z.id = mr.rb_id(+) AND mr.dt(+) = z.data AND mr.rb_id IS NULL;

PATCH_MS_DATA1	PROCEDURE	66	

PATCH_MS_DATA1	PROCEDURE	67	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	68	

PATCH_MS_DATA1	PROCEDURE	69	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	70	        VALUES ('merch_report updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	71	

PATCH_MS_DATA1	PROCEDURE	72	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	73	

PATCH_MS_DATA1	PROCEDURE	74	

PATCH_MS_DATA1	PROCEDURE	75	   /*FOR a IN (  SELECT DISTINCT c.data

PATCH_MS_DATA1	PROCEDURE	76	                 FROM routes_head h, calendar c

PATCH_MS_DATA1	PROCEDURE	77	                WHERE h.data = TRUNC (c.data, 'mm') AND c.data <= TRUNC (SYSDATE)

PATCH_MS_DATA1	PROCEDURE	78	             ORDER BY c.data)

PATCH_MS_DATA1	PROCEDURE	79	   LOOP

PATCH_MS_DATA1	PROCEDURE	80	      FOR b IN (SELECT DISTINCT msh.id spec_id

PATCH_MS_DATA1	PROCEDURE	81	                  FROM merch_report mr,

PATCH_MS_DATA1	PROCEDURE	82	                       routes_body1 rb,

PATCH_MS_DATA1	PROCEDURE	83	                       routes_head rh,

PATCH_MS_DATA1	PROCEDURE	84	                       routes_head_agents rha,

PATCH_MS_DATA1	PROCEDURE	85	                       routes_agents ra,

PATCH_MS_DATA1	PROCEDURE	86	                       routes_tp rt,

PATCH_MS_DATA1	PROCEDURE	87	                       cpp cpp1,

PATCH_MS_DATA1	PROCEDURE	88	                       svms_oblast s,

PATCH_MS_DATA1	PROCEDURE	89	                       ms_nets n,

PATCH_MS_DATA1	PROCEDURE	90	                       (SELECT DISTINCT data, dm FROM calendar) c,

PATCH_MS_DATA1	PROCEDURE	91	                       MS_REP_HBR_DT msh

PATCH_MS_DATA1	PROCEDURE	92	                 WHERE     mr.dt = a.data

PATCH_MS_DATA1	PROCEDURE	93	                       AND mr.dt = c.data

PATCH_MS_DATA1	PROCEDURE	94	                       AND msh.kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	95	                       AND msh.ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	96	                       AND msh.id_net = n.id_net

PATCH_MS_DATA1	PROCEDURE	97	                       AND msh.data = c.data

PATCH_MS_DATA1	PROCEDURE	98	                       AND rb.id = mr.rb_id

PATCH_MS_DATA1	PROCEDURE	99	                       AND rh.id = rb.head_id

PATCH_MS_DATA1	PROCEDURE	100	                       AND rh.id = rha.head_id

PATCH_MS_DATA1	PROCEDURE	101	                       AND ra.id = rha.ag_id

PATCH_MS_DATA1	PROCEDURE	102	                       AND ra.id = rb.ag_id

PATCH_MS_DATA1	PROCEDURE	103	                       AND rh.id = rt.head_id

PATCH_MS_DATA1	PROCEDURE	104	                       AND rb.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	105	                       AND rh.tn = s.tn

PATCH_MS_DATA1	PROCEDURE	106	                       AND rb.vv = rha.vv

PATCH_MS_DATA1	PROCEDURE	107	                       AND rha.vv = rt.vv

PATCH_MS_DATA1	PROCEDURE	108	                       AND cpp1.tz_oblast = s.oblast

PATCH_MS_DATA1	PROCEDURE	109	                       AND cpp1.kodtp = rb.kodtp

PATCH_MS_DATA1	PROCEDURE	110	                       AND cpp1.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	111	                       AND n.id_net = cpp1.id_net

PATCH_MS_DATA1	PROCEDURE	112	                       AND (  NVL (

PATCH_MS_DATA1	PROCEDURE	113	                                 (SELECT id

PATCH_MS_DATA1	PROCEDURE	114	                                    FROM merch_report_vv

PATCH_MS_DATA1	PROCEDURE	115	                                   WHERE     head_id = rh.id

PATCH_MS_DATA1	PROCEDURE	116	                                         AND ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	117	                                         AND kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	118	                                         AND dt = mr.dt),

PATCH_MS_DATA1	PROCEDURE	119	                                 0)

PATCH_MS_DATA1	PROCEDURE	120	                            + rb.vv <> 1)

PATCH_MS_DATA1	PROCEDURE	121	                       AND c.dm = rb.day_num

PATCH_MS_DATA1	PROCEDURE	122	                       AND rb.DAY_enabled_MR = 1

PATCH_MS_DATA1	PROCEDURE	123	                       AND msh.id IS NOT NULL)

PATCH_MS_DATA1	PROCEDURE	124	      LOOP

PATCH_MS_DATA1	PROCEDURE	125	         SELECT COUNT (*)

PATCH_MS_DATA1	PROCEDURE	126	           INTO cnt

PATCH_MS_DATA1	PROCEDURE	127	           FROM merch_spec_body msb, merch_spec_report msr

PATCH_MS_DATA1	PROCEDURE	128	          WHERE     msb.head_id = b.spec_id

PATCH_MS_DATA1	PROCEDURE	129	                AND msb.id = msr.spec_id

PATCH_MS_DATA1	PROCEDURE	130	                AND msr.dt = a.data;

PATCH_MS_DATA1	PROCEDURE	131	

PATCH_MS_DATA1	PROCEDURE	132	         IF cnt = 0

PATCH_MS_DATA1	PROCEDURE	133	         THEN

PATCH_MS_DATA1	PROCEDURE	134	            BEGIN

PATCH_MS_DATA1	PROCEDURE	135	               INSERT INTO merch_spec_report (spec_id, dt)

PATCH_MS_DATA1	PROCEDURE	136	                    SELECT msb.id, a.data

PATCH_MS_DATA1	PROCEDURE	137	                      FROM merch_spec_body msb

PATCH_MS_DATA1	PROCEDURE	138	                     WHERE     msb.head_id = b.spec_id

PATCH_MS_DATA1	PROCEDURE	139	                           AND NOT EXISTS

PATCH_MS_DATA1	PROCEDURE	140	                                      (SELECT *

PATCH_MS_DATA1	PROCEDURE	141	                                         FROM merch_spec_body msb,

PATCH_MS_DATA1	PROCEDURE	142	                                              merch_spec_report msr

PATCH_MS_DATA1	PROCEDURE	143	                                        WHERE     msb.head_id = b.spec_id

PATCH_MS_DATA1	PROCEDURE	144	                                              AND msb.id = msr.spec_id

PATCH_MS_DATA1	PROCEDURE	145	                                              AND msr.dt = a.data)

PATCH_MS_DATA1	PROCEDURE	146	                  ORDER BY msb.sort;

PATCH_MS_DATA1	PROCEDURE	147	            EXCEPTION

PATCH_MS_DATA1	PROCEDURE	148	               WHEN OTHERS

PATCH_MS_DATA1	PROCEDURE	149	               THEN

PATCH_MS_DATA1	PROCEDURE	150	                  NULL;

PATCH_MS_DATA1	PROCEDURE	151	            END;

PATCH_MS_DATA1	PROCEDURE	152	

PATCH_MS_DATA1	PROCEDURE	153	            COMMIT;

PATCH_MS_DATA1	PROCEDURE	154	         END IF;

PATCH_MS_DATA1	PROCEDURE	155	      END LOOP;

PATCH_MS_DATA1	PROCEDURE	156	   END LOOP;*/

PATCH_MS_DATA1	PROCEDURE	157	

PATCH_MS_DATA1	PROCEDURE	158	   /*SELECT q1.*

PATCH_MS_DATA1	PROCEDURE	159	     BULK COLLECT INTO recs

PATCH_MS_DATA1	PROCEDURE	160	     FROM (  SELECT DISTINCT msh.id spec_id, mr.dt

PATCH_MS_DATA1	PROCEDURE	161	               FROM merch_report mr,

PATCH_MS_DATA1	PROCEDURE	162	                    routes_body1 rb,

PATCH_MS_DATA1	PROCEDURE	163	                    routes_head rh,

PATCH_MS_DATA1	PROCEDURE	164	                    routes_head_agents rha,

PATCH_MS_DATA1	PROCEDURE	165	                    routes_agents ra,

PATCH_MS_DATA1	PROCEDURE	166	                    routes_tp rt,

PATCH_MS_DATA1	PROCEDURE	167	                    cpp cpp1,

PATCH_MS_DATA1	PROCEDURE	168	                    svms_oblast s,

PATCH_MS_DATA1	PROCEDURE	169	                    ms_nets n,

PATCH_MS_DATA1	PROCEDURE	170	                    (SELECT DISTINCT data, dm FROM calendar) c,

PATCH_MS_DATA1	PROCEDURE	171	                    MS_REP_HBR_DT msh

PATCH_MS_DATA1	PROCEDURE	172	              WHERE     mr.dt = c.data

PATCH_MS_DATA1	PROCEDURE	173	                    AND msh.kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	174	                    AND msh.ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	175	                    AND msh.id_net = n.id_net

PATCH_MS_DATA1	PROCEDURE	176	                    AND msh.data = c.data

PATCH_MS_DATA1	PROCEDURE	177	                    AND rb.id = mr.rb_id

PATCH_MS_DATA1	PROCEDURE	178	                    AND rh.id = rb.head_id

PATCH_MS_DATA1	PROCEDURE	179	                    AND rh.id = rha.head_id

PATCH_MS_DATA1	PROCEDURE	180	                    AND ra.id = rha.ag_id

PATCH_MS_DATA1	PROCEDURE	181	                    AND ra.id = rb.ag_id

PATCH_MS_DATA1	PROCEDURE	182	                    AND rh.id = rt.head_id

PATCH_MS_DATA1	PROCEDURE	183	                    AND rb.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	184	                    AND rh.tn = s.tn

PATCH_MS_DATA1	PROCEDURE	185	                    AND rb.vv = rha.vv

PATCH_MS_DATA1	PROCEDURE	186	                    AND rha.vv = rt.vv

PATCH_MS_DATA1	PROCEDURE	187	                    AND cpp1.tz_oblast = s.oblast

PATCH_MS_DATA1	PROCEDURE	188	                    AND cpp1.kodtp = rb.kodtp

PATCH_MS_DATA1	PROCEDURE	189	                    AND cpp1.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	190	                    AND n.id_net = cpp1.id_net

PATCH_MS_DATA1	PROCEDURE	191	                    AND (  NVL (

PATCH_MS_DATA1	PROCEDURE	192	                              (SELECT id

PATCH_MS_DATA1	PROCEDURE	193	                                 FROM merch_report_vv

PATCH_MS_DATA1	PROCEDURE	194	                                WHERE     head_id = rh.id

PATCH_MS_DATA1	PROCEDURE	195	                                      AND ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	196	                                      AND kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	197	                                      AND dt = mr.dt),

PATCH_MS_DATA1	PROCEDURE	198	                              0)

PATCH_MS_DATA1	PROCEDURE	199	                         + rb.vv <> 1)

PATCH_MS_DATA1	PROCEDURE	200	                    AND c.dm = rb.day_num

PATCH_MS_DATA1	PROCEDURE	201	                    AND rb.DAY_enabled_MR = 1

PATCH_MS_DATA1	PROCEDURE	202	                    AND msh.id IS NOT NULL

PATCH_MS_DATA1	PROCEDURE	203	           ORDER BY spec_id, dt) q1,

PATCH_MS_DATA1	PROCEDURE	204	          (SELECT msb.head_id, msr.dt

PATCH_MS_DATA1	PROCEDURE	205	             FROM merch_spec_body msb, merch_spec_report msr

PATCH_MS_DATA1	PROCEDURE	206	            WHERE msb.id = msr.spec_id) q2

PATCH_MS_DATA1	PROCEDURE	207	    WHERE     q1.spec_id = q2.head_id(+)

PATCH_MS_DATA1	PROCEDURE	208	          AND q1.dt = q2.dt(+)

PATCH_MS_DATA1	PROCEDURE	209	          AND q2.head_id IS NULL

PATCH_MS_DATA1	PROCEDURE	210	          AND q1.dt <= TRUNC (SYSDATE);

PATCH_MS_DATA1	PROCEDURE	211	

PATCH_MS_DATA1	PROCEDURE	212	   IF recs.COUNT > 0

PATCH_MS_DATA1	PROCEDURE	213	   THEN

PATCH_MS_DATA1	PROCEDURE	214	      c := 0;

PATCH_MS_DATA1	PROCEDURE	215	

PATCH_MS_DATA1	PROCEDURE	216	      FOR i IN recs.FIRST .. recs.LAST

PATCH_MS_DATA1	PROCEDURE	217	      LOOP

PATCH_MS_DATA1	PROCEDURE	218	         BEGIN

PATCH_MS_DATA1	PROCEDURE	219	            INSERT INTO merch_spec_report (spec_id, dt)

PATCH_MS_DATA1	PROCEDURE	220	               SELECT msb.id, recs (i).dt

PATCH_MS_DATA1	PROCEDURE	221	                 FROM merch_spec_body msb

PATCH_MS_DATA1	PROCEDURE	222	                WHERE msb.head_id = recs (i).spec_id;

PATCH_MS_DATA1	PROCEDURE	223	

PATCH_MS_DATA1	PROCEDURE	224	            c := c + 1;

PATCH_MS_DATA1	PROCEDURE	225	         EXCEPTION

PATCH_MS_DATA1	PROCEDURE	226	            WHEN OTHERS

PATCH_MS_DATA1	PROCEDURE	227	            THEN

PATCH_MS_DATA1	PROCEDURE	228	               NULL;

PATCH_MS_DATA1	PROCEDURE	229	         END;

PATCH_MS_DATA1	PROCEDURE	230	      END LOOP;

PATCH_MS_DATA1	PROCEDURE	231	

PATCH_MS_DATA1	PROCEDURE	232	      INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	233	              VALUES (

PATCH_MS_DATA1	PROCEDURE	234	                        'merch_spec_report inserted records: ' || c,

PATCH_MS_DATA1	PROCEDURE	235	                        'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	236	

PATCH_MS_DATA1	PROCEDURE	237	      COMMIT;

PATCH_MS_DATA1	PROCEDURE	238	   END IF;*/

PATCH_MS_DATA1	PROCEDURE	239	

PATCH_MS_DATA1	PROCEDURE	240	   /*INSERT INTO merch_spec_report (spec_id, dt)

PATCH_MS_DATA1	PROCEDURE	241	      SELECT msb.id, q1.dt

PATCH_MS_DATA1	PROCEDURE	242	        FROM (  SELECT DISTINCT msh.id spec_id, mr.dt

PATCH_MS_DATA1	PROCEDURE	243	                  FROM merch_report mr,

PATCH_MS_DATA1	PROCEDURE	244	                       routes_body1 rb,

PATCH_MS_DATA1	PROCEDURE	245	                       routes_head rh,

PATCH_MS_DATA1	PROCEDURE	246	                       routes_head_agents rha,

PATCH_MS_DATA1	PROCEDURE	247	                       routes_agents ra,

PATCH_MS_DATA1	PROCEDURE	248	                       routes_tp rt,

PATCH_MS_DATA1	PROCEDURE	249	                       cpp cpp1,

PATCH_MS_DATA1	PROCEDURE	250	                       svms_oblast s,

PATCH_MS_DATA1	PROCEDURE	251	                       ms_nets n,

PATCH_MS_DATA1	PROCEDURE	252	                       (SELECT DISTINCT data, dm FROM calendar) c,

PATCH_MS_DATA1	PROCEDURE	253	                       MS_REP_HBR_DT msh

PATCH_MS_DATA1	PROCEDURE	254	                 WHERE     mr.dt = c.data

PATCH_MS_DATA1	PROCEDURE	255	                       AND msh.kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	256	                       AND msh.ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	257	                       AND msh.id_net = n.id_net

PATCH_MS_DATA1	PROCEDURE	258	                       AND msh.data = c.data

PATCH_MS_DATA1	PROCEDURE	259	                       AND rb.id = mr.rb_id

PATCH_MS_DATA1	PROCEDURE	260	                       AND rh.id = rb.head_id

PATCH_MS_DATA1	PROCEDURE	261	                       AND rh.id = rha.head_id

PATCH_MS_DATA1	PROCEDURE	262	                       AND ra.id = rha.ag_id

PATCH_MS_DATA1	PROCEDURE	263	                       AND ra.id = rb.ag_id

PATCH_MS_DATA1	PROCEDURE	264	                       AND rh.id = rt.head_id

PATCH_MS_DATA1	PROCEDURE	265	                       AND rb.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	266	                       AND rh.tn = s.tn

PATCH_MS_DATA1	PROCEDURE	267	                       AND rb.vv = rha.vv

PATCH_MS_DATA1	PROCEDURE	268	                       AND rha.vv = rt.vv

PATCH_MS_DATA1	PROCEDURE	269	                       AND cpp1.tz_oblast = s.oblast

PATCH_MS_DATA1	PROCEDURE	270	                       AND cpp1.kodtp = rb.kodtp

PATCH_MS_DATA1	PROCEDURE	271	                       AND cpp1.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	272	                       AND n.id_net = cpp1.id_net

PATCH_MS_DATA1	PROCEDURE	273	                       AND (  NVL (

PATCH_MS_DATA1	PROCEDURE	274	                                 (SELECT id

PATCH_MS_DATA1	PROCEDURE	275	                                    FROM merch_report_vv

PATCH_MS_DATA1	PROCEDURE	276	                                   WHERE     head_id = rh.id

PATCH_MS_DATA1	PROCEDURE	277	                                         AND ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	278	                                         AND kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	279	                                         AND dt = mr.dt),

PATCH_MS_DATA1	PROCEDURE	280	                                 0)

PATCH_MS_DATA1	PROCEDURE	281	                            + rb.vv <> 1)

PATCH_MS_DATA1	PROCEDURE	282	                       AND c.dm = rb.day_num

PATCH_MS_DATA1	PROCEDURE	283	                       AND rb.DAY_enabled_MR = 1

PATCH_MS_DATA1	PROCEDURE	284	                       AND msh.id IS NOT NULL

PATCH_MS_DATA1	PROCEDURE	285	                       AND mr.dt <= TRUNC (SYSDATE)

PATCH_MS_DATA1	PROCEDURE	286	              ORDER BY spec_id, dt) q1,

PATCH_MS_DATA1	PROCEDURE	287	             (SELECT msb.head_id, msr.dt

PATCH_MS_DATA1	PROCEDURE	288	                FROM merch_spec_body msb, merch_spec_report msr

PATCH_MS_DATA1	PROCEDURE	289	               WHERE msb.id = msr.spec_id) q2,

PATCH_MS_DATA1	PROCEDURE	290	             merch_spec_body msb

PATCH_MS_DATA1	PROCEDURE	291	       WHERE     q1.spec_id = q2.head_id(+)

PATCH_MS_DATA1	PROCEDURE	292	             AND q1.dt = q2.dt(+)

PATCH_MS_DATA1	PROCEDURE	293	             AND q2.head_id IS NULL

PATCH_MS_DATA1	PROCEDURE	294	             AND msb.head_id = q1.spec_id;*/

PATCH_MS_DATA1	PROCEDURE	295	

PATCH_MS_DATA1	PROCEDURE	296	

PATCH_MS_DATA1	PROCEDURE	297	

PATCH_MS_DATA1	PROCEDURE	298	   SELECT msb.id, q1.dt

PATCH_MS_DATA1	PROCEDURE	299	     BULK COLLECT INTO recs

PATCH_MS_DATA1	PROCEDURE	300	     FROM (  SELECT DISTINCT msh.id spec_id, mr.dt

PATCH_MS_DATA1	PROCEDURE	301	               FROM merch_report mr,

PATCH_MS_DATA1	PROCEDURE	302	                    routes_body1 rb,

PATCH_MS_DATA1	PROCEDURE	303	                    routes_head rh,

PATCH_MS_DATA1	PROCEDURE	304	                    routes_head_agents rha,

PATCH_MS_DATA1	PROCEDURE	305	                    routes_agents ra,

PATCH_MS_DATA1	PROCEDURE	306	                    routes_tp rt,

PATCH_MS_DATA1	PROCEDURE	307	                    cpp cpp1,

PATCH_MS_DATA1	PROCEDURE	308	                    svms_oblast s,

PATCH_MS_DATA1	PROCEDURE	309	                    ms_nets n,

PATCH_MS_DATA1	PROCEDURE	310	                    (SELECT DISTINCT data, dm FROM calendar) c,

PATCH_MS_DATA1	PROCEDURE	311	                    MS_REP_HBR_DT msh

PATCH_MS_DATA1	PROCEDURE	312	              WHERE     mr.dt = c.data

PATCH_MS_DATA1	PROCEDURE	313	                    AND msh.kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	314	                    AND msh.ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	315	                    AND msh.id_net = n.id_net

PATCH_MS_DATA1	PROCEDURE	316	                    AND msh.data = c.data

PATCH_MS_DATA1	PROCEDURE	317	                    AND rb.id = mr.rb_id

PATCH_MS_DATA1	PROCEDURE	318	                    AND rh.id = rb.head_id

PATCH_MS_DATA1	PROCEDURE	319	                    AND rh.id = rha.head_id

PATCH_MS_DATA1	PROCEDURE	320	                    AND ra.id = rha.ag_id

PATCH_MS_DATA1	PROCEDURE	321	                    AND ra.id = rb.ag_id

PATCH_MS_DATA1	PROCEDURE	322	                    AND rh.id = rt.head_id

PATCH_MS_DATA1	PROCEDURE	323	                    AND rb.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	324	                    AND rh.tn = s.tn

PATCH_MS_DATA1	PROCEDURE	325	                    AND rb.vv = rha.vv

PATCH_MS_DATA1	PROCEDURE	326	                    AND rha.vv = rt.vv

PATCH_MS_DATA1	PROCEDURE	327	                    AND cpp1.tz_oblast = s.oblast

PATCH_MS_DATA1	PROCEDURE	328	                    AND cpp1.kodtp = rb.kodtp

PATCH_MS_DATA1	PROCEDURE	329	                    AND cpp1.kodtp = rt.kodtp

PATCH_MS_DATA1	PROCEDURE	330	                    AND n.id_net = cpp1.id_net

PATCH_MS_DATA1	PROCEDURE	331	                    AND (  NVL (

PATCH_MS_DATA1	PROCEDURE	332	                              (SELECT id

PATCH_MS_DATA1	PROCEDURE	333	                                 FROM merch_report_vv

PATCH_MS_DATA1	PROCEDURE	334	                                WHERE     head_id = rh.id

PATCH_MS_DATA1	PROCEDURE	335	                                      AND ag_id = ra.id

PATCH_MS_DATA1	PROCEDURE	336	                                      AND kod_tp = cpp1.kodtp

PATCH_MS_DATA1	PROCEDURE	337	                                      AND dt = mr.dt),

PATCH_MS_DATA1	PROCEDURE	338	                              0)

PATCH_MS_DATA1	PROCEDURE	339	                         + rb.vv <> 1)

PATCH_MS_DATA1	PROCEDURE	340	                    AND c.dm = rb.day_num

PATCH_MS_DATA1	PROCEDURE	341	                    AND rb.DAY_enabled_MR = 1

PATCH_MS_DATA1	PROCEDURE	342	                    AND msh.id IS NOT NULL

PATCH_MS_DATA1	PROCEDURE	343	                    AND mr.dt <= TRUNC (SYSDATE)

PATCH_MS_DATA1	PROCEDURE	344	           ORDER BY spec_id, dt) q1,

PATCH_MS_DATA1	PROCEDURE	345	          (SELECT msb.head_id, msr.dt

PATCH_MS_DATA1	PROCEDURE	346	             FROM merch_spec_body msb, merch_spec_report msr

PATCH_MS_DATA1	PROCEDURE	347	            WHERE msb.id = msr.spec_id) q2,

PATCH_MS_DATA1	PROCEDURE	348	          merch_spec_body msb

PATCH_MS_DATA1	PROCEDURE	349	    WHERE     q1.spec_id = q2.head_id(+)

PATCH_MS_DATA1	PROCEDURE	350	          AND q1.dt = q2.dt(+)

PATCH_MS_DATA1	PROCEDURE	351	          AND q2.head_id IS NULL

PATCH_MS_DATA1	PROCEDURE	352	          AND msb.head_id = q1.spec_id;

PATCH_MS_DATA1	PROCEDURE	353	

PATCH_MS_DATA1	PROCEDURE	354	

PATCH_MS_DATA1	PROCEDURE	355	

PATCH_MS_DATA1	PROCEDURE	356	   IF recs.COUNT > 0

PATCH_MS_DATA1	PROCEDURE	357	   THEN

PATCH_MS_DATA1	PROCEDURE	358	      c := 0;

PATCH_MS_DATA1	PROCEDURE	359	

PATCH_MS_DATA1	PROCEDURE	360	      FOR i IN recs.FIRST .. recs.LAST

PATCH_MS_DATA1	PROCEDURE	361	      LOOP

PATCH_MS_DATA1	PROCEDURE	362	         BEGIN

PATCH_MS_DATA1	PROCEDURE	363	            INSERT INTO merch_spec_report (spec_id, dt)

PATCH_MS_DATA1	PROCEDURE	364	                 VALUES (recs (i).spec_id, recs (i).dt);

PATCH_MS_DATA1	PROCEDURE	365	

PATCH_MS_DATA1	PROCEDURE	366	            c := c + 1;

PATCH_MS_DATA1	PROCEDURE	367	         EXCEPTION

PATCH_MS_DATA1	PROCEDURE	368	            WHEN OTHERS

PATCH_MS_DATA1	PROCEDURE	369	            THEN

PATCH_MS_DATA1	PROCEDURE	370	               NULL;

PATCH_MS_DATA1	PROCEDURE	371	         END;

PATCH_MS_DATA1	PROCEDURE	372	      END LOOP;

PATCH_MS_DATA1	PROCEDURE	373	

PATCH_MS_DATA1	PROCEDURE	374	      INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	375	              VALUES (

PATCH_MS_DATA1	PROCEDURE	376	                        'merch_spec_report inserted records: ' || c,

PATCH_MS_DATA1	PROCEDURE	377	                        'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	378	

PATCH_MS_DATA1	PROCEDURE	379	      COMMIT;

PATCH_MS_DATA1	PROCEDURE	380	   END IF;

PATCH_MS_DATA1	PROCEDURE	381	

PATCH_MS_DATA1	PROCEDURE	382	

PATCH_MS_DATA1	PROCEDURE	383	

PATCH_MS_DATA1	PROCEDURE	384	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	385	        VALUES ('merch_spec_report updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	386	

PATCH_MS_DATA1	PROCEDURE	387	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	388	

PATCH_MS_DATA1	PROCEDURE	389	   REFRESH_MS_REP_HBR;

PATCH_MS_DATA1	PROCEDURE	390	

PATCH_MS_DATA1	PROCEDURE	391	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	392	        VALUES ('MS_REP_HBR updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	393	

PATCH_MS_DATA1	PROCEDURE	394	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	395	

PATCH_MS_DATA1	PROCEDURE	396	   REFRESH_MS_REP_HBR_MAX_DT;

PATCH_MS_DATA1	PROCEDURE	397	

PATCH_MS_DATA1	PROCEDURE	398	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	399	        VALUES ('MS_REP_HBR_MAX_DT updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	400	

PATCH_MS_DATA1	PROCEDURE	401	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	402	

PATCH_MS_DATA1	PROCEDURE	403	   refresh_mv ('MS_REP_ROUTES1');

PATCH_MS_DATA1	PROCEDURE	404	

PATCH_MS_DATA1	PROCEDURE	405	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	406	        VALUES ('MS_REP_ROUTES1 updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	407	

PATCH_MS_DATA1	PROCEDURE	408	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	409	

PATCH_MS_DATA1	PROCEDURE	410	   refresh_MS_REP_SPEC_FACTS;

PATCH_MS_DATA1	PROCEDURE	411	

PATCH_MS_DATA1	PROCEDURE	412	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	413	        VALUES ('MS_REP_SPEC_FACTS updated', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	414	

PATCH_MS_DATA1	PROCEDURE	415	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	416	

PATCH_MS_DATA1	PROCEDURE	417	   INSERT INTO full_log (text, prg)

PATCH_MS_DATA1	PROCEDURE	418	        VALUES ('end', 'PATCH_MS_DATA1');

PATCH_MS_DATA1	PROCEDURE	419	

PATCH_MS_DATA1	PROCEDURE	420	   COMMIT;

PATCH_MS_DATA1	PROCEDURE	421	END;
OCENKA_COPY_CRITERIA	PROCEDURE	1	PROCEDURE          "OCENKA_COPY_CRITERIA" (

OCENKA_COPY_CRITERIA	PROCEDURE	2	   y_from   IN INTEGER,

OCENKA_COPY_CRITERIA	PROCEDURE	3	   y_to     IN INTEGER)

OCENKA_COPY_CRITERIA	PROCEDURE	4	/*

OCENKA_COPY_CRITERIA	PROCEDURE	5	копирует критерии из предпоследнего евента в последний, если последний открыт для редактирования (disabled=0)

OCENKA_COPY_CRITERIA	PROCEDURE	6	*/

OCENKA_COPY_CRITERIA	PROCEDURE	7	IS

OCENKA_COPY_CRITERIA	PROCEDURE	8	   new_event   INTEGER;

OCENKA_COPY_CRITERIA	PROCEDURE	9	   disabled_   INTEGER;

OCENKA_COPY_CRITERIA	PROCEDURE	10	BEGIN

OCENKA_COPY_CRITERIA	PROCEDURE	11	   SELECT year, disabled

OCENKA_COPY_CRITERIA	PROCEDURE	12	     INTO new_event, disabled_

OCENKA_COPY_CRITERIA	PROCEDURE	13	     FROM ocenka_events

OCENKA_COPY_CRITERIA	PROCEDURE	14	    WHERE year = y_to;

OCENKA_COPY_CRITERIA	PROCEDURE	15	

OCENKA_COPY_CRITERIA	PROCEDURE	16	   IF disabled_ = 0

OCENKA_COPY_CRITERIA	PROCEDURE	17	   THEN

OCENKA_COPY_CRITERIA	PROCEDURE	18	      DELETE FROM ocenka_CRITERIA

OCENKA_COPY_CRITERIA	PROCEDURE	19	            WHERE event = y_to;

OCENKA_COPY_CRITERIA	PROCEDURE	20	

OCENKA_COPY_CRITERIA	PROCEDURE	21	      COMMIT;

OCENKA_COPY_CRITERIA	PROCEDURE	22	

OCENKA_COPY_CRITERIA	PROCEDURE	23	      FOR a IN (SELECT ROWID, z.*

OCENKA_COPY_CRITERIA	PROCEDURE	24	                  FROM ocenka_CRITERIA z

OCENKA_COPY_CRITERIA	PROCEDURE	25	                 WHERE event = y_from AND z.TYPE IN (4, 5))

OCENKA_COPY_CRITERIA	PROCEDURE	26	      LOOP

OCENKA_COPY_CRITERIA	PROCEDURE	27	         INSERT INTO ocenka_CRITERIA (TYPE,

OCENKA_COPY_CRITERIA	PROCEDURE	28	                                      name,

OCENKA_COPY_CRITERIA	PROCEDURE	29	                                      weight,

OCENKA_COPY_CRITERIA	PROCEDURE	30	                                      description,

OCENKA_COPY_CRITERIA	PROCEDURE	31	                                      num,

OCENKA_COPY_CRITERIA	PROCEDURE	32	                                      otdel,

OCENKA_COPY_CRITERIA	PROCEDURE	33	                                      event,

OCENKA_COPY_CRITERIA	PROCEDURE	34	                                      pos,

OCENKA_COPY_CRITERIA	PROCEDURE	35	                                      parent)

OCENKA_COPY_CRITERIA	PROCEDURE	36	              VALUES (a.TYPE,

OCENKA_COPY_CRITERIA	PROCEDURE	37	                      a.name,

OCENKA_COPY_CRITERIA	PROCEDURE	38	                      a.weight,

OCENKA_COPY_CRITERIA	PROCEDURE	39	                      a.description,

OCENKA_COPY_CRITERIA	PROCEDURE	40	                      a.num,

OCENKA_COPY_CRITERIA	PROCEDURE	41	                      a.otdel,

OCENKA_COPY_CRITERIA	PROCEDURE	42	                      new_event,

OCENKA_COPY_CRITERIA	PROCEDURE	43	                      a.pos,

OCENKA_COPY_CRITERIA	PROCEDURE	44	                      a.id_num);

OCENKA_COPY_CRITERIA	PROCEDURE	45	

OCENKA_COPY_CRITERIA	PROCEDURE	46	         COMMIT;

OCENKA_COPY_CRITERIA	PROCEDURE	47	      END LOOP;

OCENKA_COPY_CRITERIA	PROCEDURE	48	

OCENKA_COPY_CRITERIA	PROCEDURE	49	      FOR a IN (SELECT z.*,

OCENKA_COPY_CRITERIA	PROCEDURE	50	                       (SELECT id_num

OCENKA_COPY_CRITERIA	PROCEDURE	51	                          FROM ocenka_CRITERIA

OCENKA_COPY_CRITERIA	PROCEDURE	52	                         WHERE event = new_event AND parent = z.parent)

OCENKA_COPY_CRITERIA	PROCEDURE	53	                          parent_new

OCENKA_COPY_CRITERIA	PROCEDURE	54	                  FROM ocenka_CRITERIA z

OCENKA_COPY_CRITERIA	PROCEDURE	55	                 WHERE z.event = y_from AND z.TYPE = 6)

OCENKA_COPY_CRITERIA	PROCEDURE	56	      LOOP

OCENKA_COPY_CRITERIA	PROCEDURE	57	         INSERT INTO ocenka_CRITERIA (TYPE,

OCENKA_COPY_CRITERIA	PROCEDURE	58	                                      name,

OCENKA_COPY_CRITERIA	PROCEDURE	59	                                      weight,

OCENKA_COPY_CRITERIA	PROCEDURE	60	                                      description,

OCENKA_COPY_CRITERIA	PROCEDURE	61	                                      num,

OCENKA_COPY_CRITERIA	PROCEDURE	62	                                      otdel,

OCENKA_COPY_CRITERIA	PROCEDURE	63	                                      event,

OCENKA_COPY_CRITERIA	PROCEDURE	64	                                      pos,

OCENKA_COPY_CRITERIA	PROCEDURE	65	                                      parent)

OCENKA_COPY_CRITERIA	PROCEDURE	66	              VALUES (a.TYPE,

OCENKA_COPY_CRITERIA	PROCEDURE	67	                      a.name,

OCENKA_COPY_CRITERIA	PROCEDURE	68	                      a.weight,

OCENKA_COPY_CRITERIA	PROCEDURE	69	                      a.description,

OCENKA_COPY_CRITERIA	PROCEDURE	70	                      a.num,

OCENKA_COPY_CRITERIA	PROCEDURE	71	                      a.otdel,

OCENKA_COPY_CRITERIA	PROCEDURE	72	                      new_event,

OCENKA_COPY_CRITERIA	PROCEDURE	73	                      a.pos,

OCENKA_COPY_CRITERIA	PROCEDURE	74	                      a.parent_new);

OCENKA_COPY_CRITERIA	PROCEDURE	75	

OCENKA_COPY_CRITERIA	PROCEDURE	76	         COMMIT;

OCENKA_COPY_CRITERIA	PROCEDURE	77	      END LOOP;

OCENKA_COPY_CRITERIA	PROCEDURE	78	

OCENKA_COPY_CRITERIA	PROCEDURE	79	

OCENKA_COPY_CRITERIA	PROCEDURE	80	      UPDATE ocenka_CRITERIA

OCENKA_COPY_CRITERIA	PROCEDURE	81	         SET parent = NULL

OCENKA_COPY_CRITERIA	PROCEDURE	82	       WHERE event = new_event AND TYPE IN (4, 5);

OCENKA_COPY_CRITERIA	PROCEDURE	83	

OCENKA_COPY_CRITERIA	PROCEDURE	84	      COMMIT;

OCENKA_COPY_CRITERIA	PROCEDURE	85	   END IF;

OCENKA_COPY_CRITERIA	PROCEDURE	86	END;

OCENKA_COPY_CRITERIA	PROCEDURE	87	 

OCENKA_COPY_CRITERIA	PROCEDURE	88	 
NEWS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."NEWS_LAST_UPDATE" 

NEWS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NEWS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.news

NEWS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NEWS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

NEWS_LAST_UPDATE	TRIGGER	6	BEGIN

NEWS_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

NEWS_LAST_UPDATE	TRIGGER	8	END news_last_update;

NEWS_LAST_UPDATE	TRIGGER	9	

NEWS_LAST_UPDATE	TRIGGER	10	

NEWS_LAST_UPDATE	TRIGGER	11	

NEWS_ETA_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."NEWS_ETA_LAST_UPDATE" 

NEWS_ETA_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NEWS_ETA_LAST_UPDATE	TRIGGER	3	   ON PERSIK.news_eta    REFERENCING NEW AS NEW OLD AS OLD

NEWS_ETA_LAST_UPDATE	TRIGGER	4	   FOR EACH ROW

NEWS_ETA_LAST_UPDATE	TRIGGER	5	BEGIN

NEWS_ETA_LAST_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

NEWS_ETA_LAST_UPDATE	TRIGGER	7	END news_eta_last_update;

NEWS_ETA_LAST_UPDATE	TRIGGER	8	

NEWS_ETA_LAST_UPDATE	TRIGGER	9	

NEWS_ETA_LAST_UPDATE	TRIGGER	10	

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."NETS_TERMS_YEAR_LAST_UPDATE" 

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	3	   ON persik.SDU_TERMS_YEAR

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	6	BEGIN

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	8	END nets_terms_year_last_update; 

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	9	

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	10	

NETS_TERMS_YEAR_LAST_UPDATE	TRIGGER	11	

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."NETS_PROPS_YEAR_LAST_UPDATE" 

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	3	   ON persik.nets_props_year

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	6	BEGIN

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	8	END nets_props_year_last_update; 

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	9	

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	10	

NETS_PROPS_YEAR_LAST_UPDATE	TRIGGER	11	

NETS_PLAN_YEAR_LU	TRIGGER	1	TRIGGER PERSIK.NETS_PLAN_YEAR_LU

NETS_PLAN_YEAR_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

NETS_PLAN_YEAR_LU	TRIGGER	3	   ON PERSIK.NETS_PLAN_YEAR

NETS_PLAN_YEAR_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NETS_PLAN_YEAR_LU	TRIGGER	5	   FOR EACH ROW

NETS_PLAN_YEAR_LU	TRIGGER	6	DECLARE

NETS_PLAN_YEAR_LU	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

NETS_PLAN_YEAR_LU	TRIGGER	8	   c   INTEGER;

NETS_PLAN_YEAR_LU	TRIGGER	9	BEGIN

NETS_PLAN_YEAR_LU	TRIGGER	10	   :NEW.lu := SYSDATE;

NETS_PLAN_YEAR_LU	TRIGGER	11	

NETS_PLAN_YEAR_LU	TRIGGER	12	   IF :NEW.pay_type = 1

NETS_PLAN_YEAR_LU	TRIGGER	13	   THEN

NETS_PLAN_YEAR_LU	TRIGGER	14	      :NEW.pay_detail := NULL;

NETS_PLAN_YEAR_LU	TRIGGER	15	   END IF;

NETS_PLAN_YEAR_LU	TRIGGER	16	

NETS_PLAN_YEAR_LU	TRIGGER	17	   IF :NEW.plan_type = 1

NETS_PLAN_YEAR_LU	TRIGGER	18	   THEN

NETS_PLAN_YEAR_LU	TRIGGER	19	      IF :NEW.du_complete = 0

NETS_PLAN_YEAR_LU	TRIGGER	20	      THEN

NETS_PLAN_YEAR_LU	TRIGGER	21	         :NEW.du_complete_date := NULL;

NETS_PLAN_YEAR_LU	TRIGGER	22	

NETS_PLAN_YEAR_LU	TRIGGER	23	         UPDATE persik.nets_plan_year

NETS_PLAN_YEAR_LU	TRIGGER	24	            SET du_complete = :NEW.du_complete

NETS_PLAN_YEAR_LU	TRIGGER	25	          WHERE id_net = :NEW.id_net AND YEAR = :NEW.YEAR AND plan_type = 2;

NETS_PLAN_YEAR_LU	TRIGGER	26	      END IF;

NETS_PLAN_YEAR_LU	TRIGGER	27	

NETS_PLAN_YEAR_LU	TRIGGER	28	      IF :NEW.du_complete = 1

NETS_PLAN_YEAR_LU	TRIGGER	29	      THEN

NETS_PLAN_YEAR_LU	TRIGGER	30	         SELECT COUNT (*)

NETS_PLAN_YEAR_LU	TRIGGER	31	           INTO c

NETS_PLAN_YEAR_LU	TRIGGER	32	           FROM persik.nets_plan_year

NETS_PLAN_YEAR_LU	TRIGGER	33	          WHERE id_net = :NEW.id_net AND YEAR = :NEW.YEAR AND plan_type = 2;

NETS_PLAN_YEAR_LU	TRIGGER	34	

NETS_PLAN_YEAR_LU	TRIGGER	35	         IF c = 0

NETS_PLAN_YEAR_LU	TRIGGER	36	         THEN

NETS_PLAN_YEAR_LU	TRIGGER	37	            INSERT INTO persik.nets_plan_year (id_net,

NETS_PLAN_YEAR_LU	TRIGGER	38	                                               YEAR,

NETS_PLAN_YEAR_LU	TRIGGER	39	                                               no_budget,

NETS_PLAN_YEAR_LU	TRIGGER	40	                                               tz,

NETS_PLAN_YEAR_LU	TRIGGER	41	                                               zal_prognoz,

NETS_PLAN_YEAR_LU	TRIGGER	42	                                               condition,

NETS_PLAN_YEAR_LU	TRIGGER	43	                                               specified_period,

NETS_PLAN_YEAR_LU	TRIGGER	44	                                               pay_type,

NETS_PLAN_YEAR_LU	TRIGGER	45	                                               pay_days,

NETS_PLAN_YEAR_LU	TRIGGER	46	                                               pay_detail,

NETS_PLAN_YEAR_LU	TRIGGER	47	                                               dus_type,

NETS_PLAN_YEAR_LU	TRIGGER	48	                                               du_complete,

NETS_PLAN_YEAR_LU	TRIGGER	49	                                               du_complete_date,

NETS_PLAN_YEAR_LU	TRIGGER	50	                                               plan_type,

NETS_PLAN_YEAR_LU	TRIGGER	51	                                               sales)

NETS_PLAN_YEAR_LU	TRIGGER	52	                 VALUES (:NEW.id_net,

NETS_PLAN_YEAR_LU	TRIGGER	53	                         :NEW.YEAR,

NETS_PLAN_YEAR_LU	TRIGGER	54	                         :NEW.no_budget,

NETS_PLAN_YEAR_LU	TRIGGER	55	                         :NEW.tz,

NETS_PLAN_YEAR_LU	TRIGGER	56	                         :NEW.zal_prognoz,

NETS_PLAN_YEAR_LU	TRIGGER	57	                         :NEW.condition,

NETS_PLAN_YEAR_LU	TRIGGER	58	                         :NEW.specified_period,

NETS_PLAN_YEAR_LU	TRIGGER	59	                         :NEW.pay_type,

NETS_PLAN_YEAR_LU	TRIGGER	60	                         :NEW.pay_days,

NETS_PLAN_YEAR_LU	TRIGGER	61	                         :NEW.pay_detail,

NETS_PLAN_YEAR_LU	TRIGGER	62	                         :NEW.dus_type,

NETS_PLAN_YEAR_LU	TRIGGER	63	                         :NEW.du_complete,

NETS_PLAN_YEAR_LU	TRIGGER	64	                         :NEW.du_complete_date,

NETS_PLAN_YEAR_LU	TRIGGER	65	                         2,

NETS_PLAN_YEAR_LU	TRIGGER	66	                         :NEW.sales);

NETS_PLAN_YEAR_LU	TRIGGER	67	         ELSE

NETS_PLAN_YEAR_LU	TRIGGER	68	            UPDATE persik.nets_plan_year

NETS_PLAN_YEAR_LU	TRIGGER	69	               SET no_budget = :NEW.no_budget,

NETS_PLAN_YEAR_LU	TRIGGER	70	                   tz = :NEW.tz,

NETS_PLAN_YEAR_LU	TRIGGER	71	                   zal_prognoz = :NEW.zal_prognoz,

NETS_PLAN_YEAR_LU	TRIGGER	72	                   condition = :NEW.condition,

NETS_PLAN_YEAR_LU	TRIGGER	73	                   specified_period = :NEW.specified_period,

NETS_PLAN_YEAR_LU	TRIGGER	74	                   pay_type = :NEW.pay_type,

NETS_PLAN_YEAR_LU	TRIGGER	75	                   pay_days = :NEW.pay_days,

NETS_PLAN_YEAR_LU	TRIGGER	76	                   pay_detail = :NEW.pay_detail,

NETS_PLAN_YEAR_LU	TRIGGER	77	                   dus_type = :NEW.dus_type,

NETS_PLAN_YEAR_LU	TRIGGER	78	                   du_complete = :NEW.du_complete,

NETS_PLAN_YEAR_LU	TRIGGER	79	                   du_complete_date = :NEW.du_complete_date,

NETS_PLAN_YEAR_LU	TRIGGER	80	                   sales = :NEW.sales

NETS_PLAN_YEAR_LU	TRIGGER	81	             WHERE id_net = :NEW.id_net AND YEAR = :NEW.YEAR AND plan_type = 2;

NETS_PLAN_YEAR_LU	TRIGGER	82	         END IF;

NETS_PLAN_YEAR_LU	TRIGGER	83	      END IF;

NETS_PLAN_YEAR_LU	TRIGGER	84	

NETS_PLAN_YEAR_LU	TRIGGER	85	      COMMIT;

NETS_PLAN_YEAR_LU	TRIGGER	86	   END IF;

NETS_PLAN_YEAR_LU	TRIGGER	87	

NETS_PLAN_YEAR_LU	TRIGGER	88	   UPDATE nets_plan_month

NETS_PLAN_YEAR_LU	TRIGGER	89	      SET payment_format = 1

NETS_PLAN_YEAR_LU	TRIGGER	90	    WHERE plan_type = :new.plan_type AND id_net = :new.id_net AND YEAR = :new.year AND payment_format = 1;

NETS_PLAN_YEAR_LU	TRIGGER	91	

NETS_PLAN_YEAR_LU	TRIGGER	92	   COMMIT;

NETS_PLAN_YEAR_LU	TRIGGER	93	END;
NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	1	PROCEDURE          "NETS_PLAN_MONTH_OK_UPDATE" (

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	2	   plan_type_ IN INTEGER,

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	3	   id_net_ IN INTEGER,

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	4	   year_ IN INTEGER,

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	5	   month_ IN INTEGER

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	6	)

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	7	IS

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	8	BEGIN

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	9	   IF plan_type_ = 4

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	10	   THEN

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	11	      FOR a IN (SELECT m.ID rid

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	12	                  FROM nets_plan_month m

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	13	                 WHERE     /*payment_format = 1

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	14	                       AND */ id_net = id_net_

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	15	                   AND plan_type = 4

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	16	                   AND MONTH = month_

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	17	                   AND YEAR = year_)

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	18	      LOOP

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	19	         UPDATE nets_plan_month

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	20	            SET date_confirmed = SYSDATE

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	21	          WHERE ID = a.rid;

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	22	

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	23	         COMMIT;

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	24	      END LOOP;

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	25	   END IF;

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	26	END; 

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	27	 

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	28	 

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	29	 

NETS_PLAN_MONTH_OK_UPDATE	PROCEDURE	30	 
NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."NETS_PLAN_MONTH_OK_LAST_UPDATE" 

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	3	   ON persik.nets_plan_month_ok

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	6	BEGIN

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	8	END nets_plan_month_ok_last_update; 

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	9	

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	10	

NETS_PLAN_MONTH_OK_LAST_UPDATE	TRIGGER	11	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.NETS_PLAN_MONTH_LAST_UPDATE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	3	   ON PERSIK.NETS_PLAN_MONTH

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	6	DECLARE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	7	   ss    FLOAT;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	8	   kk    FLOAT;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	9	   bb    INTEGER;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	10	   bs    NUMBER (10, 3);

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	11	   m     INTEGER;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	12	   PRAGMA AUTONOMOUS_TRANSACTION;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	13	   kat   INTEGER;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	14	BEGIN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	15	   :NEW.lu := SYSDATE;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	16	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	17	   IF :new.statya IS NOT NULL

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	18	   THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	19	      SELECT parent

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	20	        INTO kat

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	21	        FROM statya

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	22	       WHERE id = :new.statya;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	23	   END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	24	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	25	   IF :NEW.payment_format = 2

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	26	   THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	27	      :NEW.total := :NEW.price * :NEW.cnt;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	28	      :NEW.bonus := NULL;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	29	   END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	30	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	31	   IF :NEW.payment_format = 1

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	32	   THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	33	      IF :NEW.plan_type = 3

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	34	      THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	35	         SELECT NVL (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	36	                   SUM (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	37	                      DECODE (kat,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	38	                              42, plan_ng,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	39	                              96882041, plan_coffee,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	40	                              plan)),

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	41	                   0)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	42	           INTO ss

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	43	           FROM networkplanfact

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	44	          WHERE     id_net = (SELECT sw_kod

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	45	                                FROM nets

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	46	                               WHERE id_net = :NEW.id_net)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	47	                AND YEAR = :NEW.YEAR

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	48	                AND MONTH = :NEW.MONTH;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	49	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	50	         :NEW.total := ss / 100 * :NEW.bonus;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	51	      ELSE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	52	         IF kat = 42

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	53	         THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	54	            SELECT NVL (SUM (sales_ng), 0)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	55	              INTO ss

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	56	              FROM nets_plan_year

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	57	             WHERE     id_net = :NEW.id_net

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	58	                   AND plan_type = :NEW.plan_type

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	59	                   AND YEAR = :NEW.YEAR;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	60	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	61	            kk :=

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	62	               nets_plan_month_koeff (:NEW.YEAR,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	63	                                      :NEW.MONTH,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	64	                                      :NEW.id_net,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	65	                                      1);

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	66	         ELSE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	67	            IF kat = 96882041

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	68	            THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	69	               SELECT NVL (SUM (sales_coffee), 0)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	70	                 INTO ss

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	71	                 FROM nets_plan_year

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	72	                WHERE     id_net = :NEW.id_net

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	73	                      AND plan_type = :NEW.plan_type

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	74	                      AND YEAR = :NEW.YEAR;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	75	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	76	               kk :=

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	77	                  nets_plan_month_koeff (:NEW.YEAR,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	78	                                         :NEW.MONTH,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	79	                                         :NEW.id_net,

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	80	                                         2);

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	81	            ELSE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	82	               SELECT NVL (SUM (sales), 0)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	83	                 INTO ss

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	84	                 FROM nets_plan_year

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	85	                WHERE     id_net = :NEW.id_net

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	86	                      AND plan_type = :NEW.plan_type

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	87	                      AND YEAR = :NEW.YEAR;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	88	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	89	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	90	               kk :=

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	91	                  nets_plan_month_koeff (:NEW.YEAR, :NEW.MONTH, :NEW.id_net);

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	92	            END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	93	         END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	94	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	95	         :NEW.total := ss / 100 * kk / 100 * :NEW.bonus;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	96	      END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	97	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	98	      :NEW.price := NULL;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	99	   --:NEW.cnt := NULL;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	100	   END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	101	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	102	   IF :NEW.plan_type = 4

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	103	   THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	104	      IF :NEW.payment_format = 1

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	105	      THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	106	         SELECT NVL (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	107	                   SUM (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	108	                      CASE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	109	                         WHEN kat = 42 THEN bonus_base_ng

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	110	                         WHEN kat = 96882041 THEN bonus_base_coffee

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	111	                         ELSE bonus_base

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	112	                      END),

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	113	                   0),

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	114	                NVL (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	115	                   SUM (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	116	                      CASE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	117	                         WHEN kat = 42 THEN bonus_sum_ng

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	118	                         WHEN kat = 96882041 THEN bonus_sum_coffee

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	119	                         ELSE bonus_sum

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	120	                      END),

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	121	                   0)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	122	           INTO bb, bs

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	123	           FROM nets_plan_month_ok

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	124	          WHERE     id_net = :NEW.id_net

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	125	                AND plan_type = :NEW.plan_type

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	126	                AND MONTH = :NEW.MONTH

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	127	                AND YEAR = :NEW.YEAR;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	128	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	129	         IF bb = 1

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	130	         THEN

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	131	            :NEW.total := bs / 100 * :NEW.bonus;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	132	         ELSE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	133	            SELECT   NVL (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	134	                        SUM (

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	135	                           CASE

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	136	                              WHEN kat = 42 THEN fakt_ng

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	137	                              WHEN kat = 96882041 THEN fakt_coffee

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	138	                              ELSE fakt

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	139	                           END),

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	140	                        0)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	141	                   / 1000

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	142	              INTO ss

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	143	              FROM networkplanfact

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	144	             WHERE     id_net = (SELECT sw_kod

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	145	                                   FROM nets

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	146	                                  WHERE id_net = :NEW.id_net)

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	147	                   AND YEAR = :NEW.YEAR

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	148	                   AND MONTH = :NEW.MONTH;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	149	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	150	            :NEW.total := ss / 100 * :NEW.bonus;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	151	         END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	152	      END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	153	

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	154	      :NEW.date_confirmed := SYSDATE;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	155	   END IF;

NETS_PLAN_MONTH_LAST_UPDATE	TRIGGER	156	END nets_plan_month_last_update;
NETS_PLAN_MONTH_KOEFF	FUNCTION	1	FUNCTION        nets_plan_month_koeff (

NETS_PLAN_MONTH_KOEFF	FUNCTION	2	   p_year    IN INTEGER,

NETS_PLAN_MONTH_KOEFF	FUNCTION	3	   p_month   IN INTEGER,

NETS_PLAN_MONTH_KOEFF	FUNCTION	4	   p_net     IN INTEGER,

NETS_PLAN_MONTH_KOEFF	FUNCTION	5	   p_type    IN INTEGER := 0)

NETS_PLAN_MONTH_KOEFF	FUNCTION	6	   RETURN NUMBER

NETS_PLAN_MONTH_KOEFF	FUNCTION	7	IS

NETS_PLAN_MONTH_KOEFF	FUNCTION	8	   v_sum_koef          NUMBER;

NETS_PLAN_MONTH_KOEFF	FUNCTION	9	   v_sum_koef_ng       NUMBER;

NETS_PLAN_MONTH_KOEFF	FUNCTION	10	   v_sum_koef_coffee   NUMBER;

NETS_PLAN_MONTH_KOEFF	FUNCTION	11	   v_koef              NUMBER;

NETS_PLAN_MONTH_KOEFF	FUNCTION	12	   v_koef_ng           NUMBER;

NETS_PLAN_MONTH_KOEFF	FUNCTION	13	   v_koef_coffee       NUMBER;

NETS_PLAN_MONTH_KOEFF	FUNCTION	14	BEGIN

NETS_PLAN_MONTH_KOEFF	FUNCTION	15	   SELECT SUM (mk1.koeff), SUM (mk1.koeff_ng), SUM (mk1.koeff_coffee)

NETS_PLAN_MONTH_KOEFF	FUNCTION	16	     INTO v_sum_koef, v_sum_koef_ng, v_sum_koef_coffee

NETS_PLAN_MONTH_KOEFF	FUNCTION	17	     FROM month_koeff mk1, nets_plan_month_ok o1

NETS_PLAN_MONTH_KOEFF	FUNCTION	18	    WHERE     o1.YEAR(+) = p_year

NETS_PLAN_MONTH_KOEFF	FUNCTION	19	          AND o1.id_net(+) = p_net

NETS_PLAN_MONTH_KOEFF	FUNCTION	20	          AND o1.plan_type(+) = 1

NETS_PLAN_MONTH_KOEFF	FUNCTION	21	          AND mk1.MONTH = o1.MONTH(+)

NETS_PLAN_MONTH_KOEFF	FUNCTION	22	          AND NVL (o1.ok_rmkk_tmkk, 1) = 1;

NETS_PLAN_MONTH_KOEFF	FUNCTION	23	

NETS_PLAN_MONTH_KOEFF	FUNCTION	24	   SELECT DECODE (v_sum_koef,

NETS_PLAN_MONTH_KOEFF	FUNCTION	25	                  0, 0,

NETS_PLAN_MONTH_KOEFF	FUNCTION	26	                  koeff / v_sum_koef * 100 * NVL (o2.ok_rmkk_tmkk, 1)),

NETS_PLAN_MONTH_KOEFF	FUNCTION	27	          DECODE (v_sum_koef_ng,

NETS_PLAN_MONTH_KOEFF	FUNCTION	28	                  0, 0,

NETS_PLAN_MONTH_KOEFF	FUNCTION	29	                  koeff_ng / v_sum_koef_ng * 100 * NVL (o2.ok_rmkk_tmkk, 1)),

NETS_PLAN_MONTH_KOEFF	FUNCTION	30	          DECODE (

NETS_PLAN_MONTH_KOEFF	FUNCTION	31	             v_sum_koef_coffee,

NETS_PLAN_MONTH_KOEFF	FUNCTION	32	             0, 0,

NETS_PLAN_MONTH_KOEFF	FUNCTION	33	               koeff_coffee

NETS_PLAN_MONTH_KOEFF	FUNCTION	34	             / v_sum_koef_coffee

NETS_PLAN_MONTH_KOEFF	FUNCTION	35	             * 100

NETS_PLAN_MONTH_KOEFF	FUNCTION	36	             * NVL (o2.ok_rmkk_tmkk, 1))

NETS_PLAN_MONTH_KOEFF	FUNCTION	37	     INTO v_koef, v_koef_ng, v_koef_coffee

NETS_PLAN_MONTH_KOEFF	FUNCTION	38	     FROM month_koeff mk2, nets_plan_month_ok o2

NETS_PLAN_MONTH_KOEFF	FUNCTION	39	    WHERE     o2.YEAR(+) = p_year

NETS_PLAN_MONTH_KOEFF	FUNCTION	40	          AND o2.id_net(+) = p_net

NETS_PLAN_MONTH_KOEFF	FUNCTION	41	          AND o2.plan_type(+) = 1

NETS_PLAN_MONTH_KOEFF	FUNCTION	42	          AND mk2.MONTH = o2.MONTH(+)

NETS_PLAN_MONTH_KOEFF	FUNCTION	43	          AND mk2.month = p_month;

NETS_PLAN_MONTH_KOEFF	FUNCTION	44	

NETS_PLAN_MONTH_KOEFF	FUNCTION	45	   IF p_type = 2

NETS_PLAN_MONTH_KOEFF	FUNCTION	46	   THEN

NETS_PLAN_MONTH_KOEFF	FUNCTION	47	      RETURN v_koef_coffee;

NETS_PLAN_MONTH_KOEFF	FUNCTION	48	   ELSE

NETS_PLAN_MONTH_KOEFF	FUNCTION	49	      IF p_type = 1

NETS_PLAN_MONTH_KOEFF	FUNCTION	50	      THEN

NETS_PLAN_MONTH_KOEFF	FUNCTION	51	         RETURN v_koef_ng;

NETS_PLAN_MONTH_KOEFF	FUNCTION	52	      ELSE

NETS_PLAN_MONTH_KOEFF	FUNCTION	53	         RETURN v_koef;

NETS_PLAN_MONTH_KOEFF	FUNCTION	54	      END IF;

NETS_PLAN_MONTH_KOEFF	FUNCTION	55	   END IF;

NETS_PLAN_MONTH_KOEFF	FUNCTION	56	END;
NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."NETS_MEETINGS_YEAR_LAST_UPDATE" 

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	3	   ON persik.nets_meetings_year

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	6	BEGIN

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	8	END nets_meetings_year_last_update; 

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	9	

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	10	

NETS_MEETINGS_YEAR_LAST_UPDATE	TRIGGER	11	

MY2DATE	FUNCTION	1	FUNCTION          "MY2DATE" (p_str IN VARCHAR2)

MY2DATE	FUNCTION	2	   RETURN DATE

MY2DATE	FUNCTION	3	IS

MY2DATE	FUNCTION	4	   x   DATE;

MY2DATE	FUNCTION	5	BEGIN

MY2DATE	FUNCTION	6	   x := TO_DATE (p_str);

MY2DATE	FUNCTION	7	

MY2DATE	FUNCTION	8	   IF x < TO_DATE ('01012008', 'ddmmyyyy')

MY2DATE	FUNCTION	9	   THEN

MY2DATE	FUNCTION	10	      RETURN NULL;

MY2DATE	FUNCTION	11	   ELSE

MY2DATE	FUNCTION	12	      RETURN x;

MY2DATE	FUNCTION	13	   END IF;

MY2DATE	FUNCTION	14	EXCEPTION

MY2DATE	FUNCTION	15	   WHEN OTHERS

MY2DATE	FUNCTION	16	   THEN

MY2DATE	FUNCTION	17	      RETURN NULL;

MY2DATE	FUNCTION	18	END;

MY2DATE	FUNCTION	19	 

MY2DATE	FUNCTION	20	 
MV_QUEUE_GET	FUNCTION	1	FUNCTION        mv_queue_get (mv VARCHAR2)

MV_QUEUE_GET	FUNCTION	2	   RETURN INTEGER

MV_QUEUE_GET	FUNCTION	3	IS

MV_QUEUE_GET	FUNCTION	4	   PRAGMA AUTONOMOUS_TRANSACTION;

MV_QUEUE_GET	FUNCTION	5	   i   INTEGER;

MV_QUEUE_GET	FUNCTION	6	BEGIN

MV_QUEUE_GET	FUNCTION	7	   SELECT NVL (MAX (cnt), 0)

MV_QUEUE_GET	FUNCTION	8	     INTO i

MV_QUEUE_GET	FUNCTION	9	     FROM refresh_mv_queue

MV_QUEUE_GET	FUNCTION	10	    WHERE mv_name = mv;

MV_QUEUE_GET	FUNCTION	11	

MV_QUEUE_GET	FUNCTION	12	   RETURN i;

MV_QUEUE_GET	FUNCTION	13	END;
MV_QUEUE_DEL	PROCEDURE	1	PROCEDURE        mv_queue_del (mv VARCHAR2)

MV_QUEUE_DEL	PROCEDURE	2	IS

MV_QUEUE_DEL	PROCEDURE	3	   PRAGMA AUTONOMOUS_TRANSACTION;

MV_QUEUE_DEL	PROCEDURE	4	BEGIN

MV_QUEUE_DEL	PROCEDURE	5	   DELETE FROM refresh_mv_queue

MV_QUEUE_DEL	PROCEDURE	6	         WHERE mv_name = mv;

MV_QUEUE_DEL	PROCEDURE	7	

MV_QUEUE_DEL	PROCEDURE	8	   COMMIT;

MV_QUEUE_DEL	PROCEDURE	9	END;
MV_QUEUE_ADD	PROCEDURE	1	PROCEDURE        mv_queue_add (mv VARCHAR2)

MV_QUEUE_ADD	PROCEDURE	2	IS

MV_QUEUE_ADD	PROCEDURE	3	   PRAGMA AUTONOMOUS_TRANSACTION;

MV_QUEUE_ADD	PROCEDURE	4	   i   INTEGER;

MV_QUEUE_ADD	PROCEDURE	5	BEGIN

MV_QUEUE_ADD	PROCEDURE	6	   i := mv_queue_get (mv);

MV_QUEUE_ADD	PROCEDURE	7	

MV_QUEUE_ADD	PROCEDURE	8	   IF i = 0

MV_QUEUE_ADD	PROCEDURE	9	   THEN

MV_QUEUE_ADD	PROCEDURE	10	      INSERT INTO refresh_mv_queue (mv_name, cnt)

MV_QUEUE_ADD	PROCEDURE	11	           VALUES (mv, 1);

MV_QUEUE_ADD	PROCEDURE	12	   ELSE

MV_QUEUE_ADD	PROCEDURE	13	      UPDATE refresh_mv_queue

MV_QUEUE_ADD	PROCEDURE	14	         SET cnt = cnt + 1

MV_QUEUE_ADD	PROCEDURE	15	       WHERE mv_name = mv;

MV_QUEUE_ADD	PROCEDURE	16	   END IF;

MV_QUEUE_ADD	PROCEDURE	17	

MV_QUEUE_ADD	PROCEDURE	18	

MV_QUEUE_ADD	PROCEDURE	19	   COMMIT;

MV_QUEUE_ADD	PROCEDURE	20	END;
MS_VAC_REMOVER	TRIGGER	1	TRIGGER PERSIK.MS_VAC_remover

MS_VAC_REMOVER	TRIGGER	2	   BEFORE UPDATE OF remover

MS_VAC_REMOVER	TRIGGER	3	   ON PERSIK.ms_vac

MS_VAC_REMOVER	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

MS_VAC_REMOVER	TRIGGER	5	   FOR EACH ROW

MS_VAC_REMOVER	TRIGGER	6	BEGIN

MS_VAC_REMOVER	TRIGGER	7	   IF :new.remover IS NULL

MS_VAC_REMOVER	TRIGGER	8	   THEN

MS_VAC_REMOVER	TRIGGER	9	      :NEW.removed := NULL;

MS_VAC_REMOVER	TRIGGER	10	   ELSE

MS_VAC_REMOVER	TRIGGER	11	      :NEW.removed := SYSDATE;

MS_VAC_REMOVER	TRIGGER	12	   END IF;

MS_VAC_REMOVER	TRIGGER	13	END;
MS_VAC_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.MS_VAC_LAST_UPDATE

MS_VAC_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

MS_VAC_LAST_UPDATE	TRIGGER	3	   ON PERSIK.ms_vac

MS_VAC_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

MS_VAC_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

MS_VAC_LAST_UPDATE	TRIGGER	6	DECLARE

MS_VAC_LAST_UPDATE	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

MS_VAC_LAST_UPDATE	TRIGGER	8	   days_available   INTEGER;

MS_VAC_LAST_UPDATE	TRIGGER	9	BEGIN

MS_VAC_LAST_UPDATE	TRIGGER	10	   :NEW.lu := SYSDATE;

MS_VAC_LAST_UPDATE	TRIGGER	11	

MS_VAC_LAST_UPDATE	TRIGGER	12	   IF INSERTING

MS_VAC_LAST_UPDATE	TRIGGER	13	   THEN

MS_VAC_LAST_UPDATE	TRIGGER	14	      :NEW.created := SYSDATE;

MS_VAC_LAST_UPDATE	TRIGGER	15	      :NEW.ID := NVL (:new.id, seq_all.NEXTVAL);

MS_VAC_LAST_UPDATE	TRIGGER	16	

MS_VAC_LAST_UPDATE	TRIGGER	17	

MS_VAC_LAST_UPDATE	TRIGGER	18	

MS_VAC_LAST_UPDATE	TRIGGER	19	      SELECT DECODE (

MS_VAC_LAST_UPDATE	TRIGGER	20	                SIGN (

MS_VAC_LAST_UPDATE	TRIGGER	21	                   ADD_MONTHS (TRUNC (SYSDATE), -12) - s.START_company + 1),

MS_VAC_LAST_UPDATE	TRIGGER	22	                1,   14

MS_VAC_LAST_UPDATE	TRIGGER	23	                   - NVL (

MS_VAC_LAST_UPDATE	TRIGGER	24	                        (SELECT SUM (days)

MS_VAC_LAST_UPDATE	TRIGGER	25	                           FROM ms_vac

MS_VAC_LAST_UPDATE	TRIGGER	26	                          WHERE     login = s.login

MS_VAC_LAST_UPDATE	TRIGGER	27	                                AND TRUNC (vac_start, 'yyyy') =

MS_VAC_LAST_UPDATE	TRIGGER	28	                                       TRUNC (SYSDATE, 'yyyy')

MS_VAC_LAST_UPDATE	TRIGGER	29	                                AND removed IS NULL),

MS_VAC_LAST_UPDATE	TRIGGER	30	                        0),

MS_VAC_LAST_UPDATE	TRIGGER	31	                0)

MS_VAC_LAST_UPDATE	TRIGGER	32	        INTO days_available

MS_VAC_LAST_UPDATE	TRIGGER	33	        FROM spr_users_ms s

MS_VAC_LAST_UPDATE	TRIGGER	34	       WHERE s.login = :new.login;

MS_VAC_LAST_UPDATE	TRIGGER	35	

MS_VAC_LAST_UPDATE	TRIGGER	36	      IF days_available < :new.days

MS_VAC_LAST_UPDATE	TRIGGER	37	      THEN

MS_VAC_LAST_UPDATE	TRIGGER	38	         raise_application_error (-20001,

MS_VAC_LAST_UPDATE	TRIGGER	39	                                  'not enough days to create vacation.');

MS_VAC_LAST_UPDATE	TRIGGER	40	      END IF;

MS_VAC_LAST_UPDATE	TRIGGER	41	   END IF;

MS_VAC_LAST_UPDATE	TRIGGER	42	END;
MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.ms_faq_SECTIONS_LAST_UPDATE

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.ms_faq_SECTIONS

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	6	BEGIN

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

MS_FAQ_SECTIONS_LAST_UPDATE	TRIGGER	8	END ms_faq_sections_last_update;
MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	1	TRIGGER PERSIK.ms_faq_SECTIONS_DEL_SECTION

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	2	   BEFORE DELETE

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	3	   ON PERSIK.ms_faq_SECTIONS

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	5	   FOR EACH ROW

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	6	BEGIN

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	7	   UPDATE ms_faq

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	8	      SET section = 0

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	9	    WHERE section = :old.id;

MS_FAQ_SECTIONS_DEL_SECTION	TRIGGER	10	END ms_faq_sections_del_section;
MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.ms_faq_RIGHTS_LAST_UPDATE

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.ms_faq_RIGHTS

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	6	BEGIN

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

MS_FAQ_RIGHTS_LAST_UPDATE	TRIGGER	8	END ms_faq_rights_last_update;
MS_FAQ_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.ms_faq_LAST_UPDATE

MS_FAQ_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

MS_FAQ_LAST_UPDATE	TRIGGER	3	   ON PERSIK.ms_faq

MS_FAQ_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

MS_FAQ_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

MS_FAQ_LAST_UPDATE	TRIGGER	6	BEGIN

MS_FAQ_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

MS_FAQ_LAST_UPDATE	TRIGGER	8	END ms_faq_last_update;
MS_CLOSE_OLD_TASKS	PROCEDURE	1	PROCEDURE ms_close_old_tasks

MS_CLOSE_OLD_TASKS	PROCEDURE	2	AS

MS_CLOSE_OLD_TASKS	PROCEDURE	3	BEGIN

MS_CLOSE_OLD_TASKS	PROCEDURE	4	   FOR a

MS_CLOSE_OLD_TASKS	PROCEDURE	5	      IN (  SELECT x.*

MS_CLOSE_OLD_TASKS	PROCEDURE	6	              FROM (SELECT dt,

MS_CLOSE_OLD_TASKS	PROCEDURE	7	                           ag_id,

MS_CLOSE_OLD_TASKS	PROCEDURE	8	                           kod_tp,

MS_CLOSE_OLD_TASKS	PROCEDURE	9	                           'fn' task_type

MS_CLOSE_OLD_TASKS	PROCEDURE	10	                      FROM merch_spec_report_files

MS_CLOSE_OLD_TASKS	PROCEDURE	11	                     WHERE     NVL (chat_closed, 0) = 0

MS_CLOSE_OLD_TASKS	PROCEDURE	12	                           AND FN_GET_msrfc_cnt (id) > 0

MS_CLOSE_OLD_TASKS	PROCEDURE	13	                           AND dt < TRUNC (SYSDATE) - 62

MS_CLOSE_OLD_TASKS	PROCEDURE	14	                    UNION

MS_CLOSE_OLD_TASKS	PROCEDURE	15	                    SELECT dt,

MS_CLOSE_OLD_TASKS	PROCEDURE	16	                           ag_id,

MS_CLOSE_OLD_TASKS	PROCEDURE	17	                           kod_tp,

MS_CLOSE_OLD_TASKS	PROCEDURE	18	                           'tp' task_type

MS_CLOSE_OLD_TASKS	PROCEDURE	19	                      FROM merch_chat

MS_CLOSE_OLD_TASKS	PROCEDURE	20	                     WHERE     FN_GET_mc_closed (dt, ag_id, kod_tp) = 0

MS_CLOSE_OLD_TASKS	PROCEDURE	21	                           AND FN_GET_mc_cnt (dt, ag_id, kod_tp) > 0

MS_CLOSE_OLD_TASKS	PROCEDURE	22	                           AND dt < TRUNC (SYSDATE) - 62) x

MS_CLOSE_OLD_TASKS	PROCEDURE	23	          ORDER BY dt, ag_id, kod_tp)

MS_CLOSE_OLD_TASKS	PROCEDURE	24	   LOOP

MS_CLOSE_OLD_TASKS	PROCEDURE	25	      IF a.task_type = 'tp'

MS_CLOSE_OLD_TASKS	PROCEDURE	26	      THEN

MS_CLOSE_OLD_TASKS	PROCEDURE	27	         INSERT INTO merch_chat_closed (dt, ag_id, kod_tp)

MS_CLOSE_OLD_TASKS	PROCEDURE	28	              VALUES (a.dt, a.ag_id, a.kod_tp);

MS_CLOSE_OLD_TASKS	PROCEDURE	29	

MS_CLOSE_OLD_TASKS	PROCEDURE	30	         COMMIT;

MS_CLOSE_OLD_TASKS	PROCEDURE	31	      END IF;

MS_CLOSE_OLD_TASKS	PROCEDURE	32	

MS_CLOSE_OLD_TASKS	PROCEDURE	33	      IF a.task_type = 'fn'

MS_CLOSE_OLD_TASKS	PROCEDURE	34	      THEN

MS_CLOSE_OLD_TASKS	PROCEDURE	35	         UPDATE merch_spec_report_files

MS_CLOSE_OLD_TASKS	PROCEDURE	36	            SET chat_closed = 1

MS_CLOSE_OLD_TASKS	PROCEDURE	37	          WHERE dt = a.dt AND ag_id = a.ag_id AND kod_tp = a.kod_tp;

MS_CLOSE_OLD_TASKS	PROCEDURE	38	

MS_CLOSE_OLD_TASKS	PROCEDURE	39	         COMMIT;

MS_CLOSE_OLD_TASKS	PROCEDURE	40	      END IF;

MS_CLOSE_OLD_TASKS	PROCEDURE	41	   END LOOP;

MS_CLOSE_OLD_TASKS	PROCEDURE	42	END;
MR_ZP_COPY_PINS	PROCEDURE	1	PROCEDURE        mr_zp_copy_pins (p_dt IN DATE)

MR_ZP_COPY_PINS	PROCEDURE	2	AS

MR_ZP_COPY_PINS	PROCEDURE	3	BEGIN

MR_ZP_COPY_PINS	PROCEDURE	4	   FOR A

MR_ZP_COPY_PINS	PROCEDURE	5	      IN (SELECT prev.pin, cur.id

MR_ZP_COPY_PINS	PROCEDURE	6	            FROM (SELECT z.*

MR_ZP_COPY_PINS	PROCEDURE	7	                    FROM routes_head h, mr_zp z

MR_ZP_COPY_PINS	PROCEDURE	8	                   WHERE h.id = z.head_id AND data = ADD_MONTHS (p_dt, -1))

MR_ZP_COPY_PINS	PROCEDURE	9	                 prev,

MR_ZP_COPY_PINS	PROCEDURE	10	                 (SELECT z.*, h.parent

MR_ZP_COPY_PINS	PROCEDURE	11	                    FROM routes_head h, mr_zp z

MR_ZP_COPY_PINS	PROCEDURE	12	                   WHERE h.id = z.head_id AND data = p_dt) cur

MR_ZP_COPY_PINS	PROCEDURE	13	           WHERE     prev.h_fio_otv = cur.h_fio_otv

MR_ZP_COPY_PINS	PROCEDURE	14	                 AND prev.pin IS NOT NULL

MR_ZP_COPY_PINS	PROCEDURE	15	                 AND cur.parent = prev.head_id)

MR_ZP_COPY_PINS	PROCEDURE	16	   LOOP

MR_ZP_COPY_PINS	PROCEDURE	17	      UPDATE mr_zp

MR_ZP_COPY_PINS	PROCEDURE	18	         SET pin = a.pin

MR_ZP_COPY_PINS	PROCEDURE	19	       WHERE id = a.id;

MR_ZP_COPY_PINS	PROCEDURE	20	   END LOOP;

MR_ZP_COPY_PINS	PROCEDURE	21	

MR_ZP_COPY_PINS	PROCEDURE	22	   COMMIT;

MR_ZP_COPY_PINS	PROCEDURE	23	END;
MONTH_KOEFF_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."MONTH_KOEFF_LAST_UPDATE" 

MONTH_KOEFF_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

MONTH_KOEFF_LAST_UPDATE	TRIGGER	3	   ON PERSIK.MONTH_KOEFF

MONTH_KOEFF_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS New OLD AS Old

MONTH_KOEFF_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

MONTH_KOEFF_LAST_UPDATE	TRIGGER	6	DECLARE

MONTH_KOEFF_LAST_UPDATE	TRIGGER	7	BEGIN

MONTH_KOEFF_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

MONTH_KOEFF_LAST_UPDATE	TRIGGER	9	END MONTH_KOEFF_LAST_UPDATE;

MONTH_KOEFF_LAST_UPDATE	TRIGGER	10	

MONTH_KOEFF_LAST_UPDATE	TRIGGER	11	

MONTH_KOEFF_LAST_UPDATE	TRIGGER	12	

MD5HASH	FUNCTION	1	FUNCTION          "MD5HASH" (str IN VARCHAR2)

MD5HASH	FUNCTION	2	   RETURN VARCHAR2

MD5HASH	FUNCTION	3	IS

MD5HASH	FUNCTION	4	   v_checksum   VARCHAR2 (32);

MD5HASH	FUNCTION	5	BEGIN

MD5HASH	FUNCTION	6	   v_checksum := LOWER (RAWTOHEX (UTL_RAW.CAST_TO_RAW (sys.DBMS_OBFUSCATION_TOOLKIT.md5 (input_string => str))));

MD5HASH	FUNCTION	7	   RETURN v_checksum;

MD5HASH	FUNCTION	8	EXCEPTION

MD5HASH	FUNCTION	9	   WHEN OTHERS

MD5HASH	FUNCTION	10	   THEN

MD5HASH	FUNCTION	11	      RETURN ('');

MD5HASH	FUNCTION	12	END md5hash;

MD5HASH	FUNCTION	13	 

MD5HASH	FUNCTION	14	 

MD5HASH	FUNCTION	15	 

MD5HASH	FUNCTION	16	 
MAIL_PKG	PACKAGE BODY	1	PACKAGE BODY MAIL_PKG

MAIL_PKG	PACKAGE BODY	2	IS

MAIL_PKG	PACKAGE BODY	3	

MAIL_PKG	PACKAGE BODY	4	 mailserver VARCHAR2(30):='mailhub.avk.company';

MAIL_PKG	PACKAGE BODY	5	 mailport INTEGER:=25;

MAIL_PKG	PACKAGE BODY	6	 auth_user VARCHAR2(50);

MAIL_PKG	PACKAGE BODY	7	 auth_pass VARCHAR2(50);

MAIL_PKG	PACKAGE BODY	8	 crlf         VARCHAR2(2)  := utl_tcp.CRLF; -- chr(13)||chr(10);

MAIL_PKG	PACKAGE BODY	9	 protocol VARCHAR2(4) := SMTP;

MAIL_PKG	PACKAGE BODY	10	

MAIL_PKG	PACKAGE BODY	11	 imap_cntr number;

MAIL_PKG	PACKAGE BODY	12	

MAIL_PKG	PACKAGE BODY	13	 c  utl_tcp.connection;  -- TCP/IP connection to the Web server (for pop3)

MAIL_PKG	PACKAGE BODY	14	

MAIL_PKG	PACKAGE BODY	15	 type attach_row is record ( dirname varchar2(255)

MAIL_PKG	PACKAGE BODY	16	                           , filename  varchar2(255)

MAIL_PKG	PACKAGE BODY	17	                           , name  varchar2(255)

MAIL_PKG	PACKAGE BODY	18	                           , mimetype varchar2(30)

MAIL_PKG	PACKAGE BODY	19	                           , blobloc blob

MAIL_PKG	PACKAGE BODY	20	                           , clobloc clob

MAIL_PKG	PACKAGE BODY	21	                           , attachtype varchar2(30)

MAIL_PKG	PACKAGE BODY	22	                           , contentid varchar2(32)

MAIL_PKG	PACKAGE BODY	23	                           , disposition varchar2(25) default 'attachment'

MAIL_PKG	PACKAGE BODY	24	                           );

MAIL_PKG	PACKAGE BODY	25	 type attach_list is table of attach_row;

MAIL_PKG	PACKAGE BODY	26	 attachments attach_list := attach_list();

MAIL_PKG	PACKAGE BODY	27	

MAIL_PKG	PACKAGE BODY	28	 type rcpt_row is record ( rcptname varchar2(100)

MAIL_PKG	PACKAGE BODY	29	                     , rcptmail varchar2(50)

MAIL_PKG	PACKAGE BODY	30	                     );

MAIL_PKG	PACKAGE BODY	31	 type rcpt_list is table of rcpt_row;

MAIL_PKG	PACKAGE BODY	32	

MAIL_PKG	PACKAGE BODY	33	 PROCEDURE SET_MAILSERVER ( mailserver varchar2

MAIL_PKG	PACKAGE BODY	34	                          , mailport number default 25

MAIL_PKG	PACKAGE BODY	35	                          ) IS

MAIL_PKG	PACKAGE BODY	36	 BEGIN

MAIL_PKG	PACKAGE BODY	37	  MAIL_PKG.mailserver := mailserver;

MAIL_PKG	PACKAGE BODY	38	  MAIL_PKG.mailport := mailport;

MAIL_PKG	PACKAGE BODY	39	 END;

MAIL_PKG	PACKAGE BODY	40	

MAIL_PKG	PACKAGE BODY	41	 PROCEDURE SET_AUTH (  auth_user varchar2 default null

MAIL_PKG	PACKAGE BODY	42	                     , auth_pass varchar2 default null

MAIL_PKG	PACKAGE BODY	43	                          ) IS

MAIL_PKG	PACKAGE BODY	44	 BEGIN

MAIL_PKG	PACKAGE BODY	45	   MAIL_PKG.auth_user := auth_user;

MAIL_PKG	PACKAGE BODY	46	   MAIL_PKG.auth_pass := auth_pass;

MAIL_PKG	PACKAGE BODY	47	 END;

MAIL_PKG	PACKAGE BODY	48	

MAIL_PKG	PACKAGE BODY	49	 FUNCTION ENCODE(str IN VARCHAR2, tp IN VARCHAR2 DEFAULT 'Q') RETURN VARCHAR2 IS

MAIL_PKG	PACKAGE BODY	50	 BEGIN

MAIL_PKG	PACKAGE BODY	51	   -- ToDo: UTL_ENCODE.QUOTED_PRINTABLE | UTL_ENCODE.BASE64

MAIL_PKG	PACKAGE BODY	52	   IF tp='B' THEN

MAIL_PKG	PACKAGE BODY	53	     RETURN '=?utf-8?b?'|| UTL_RAW.cast_to_varchar2(UTL_ENCODE.base64_encode(UTL_RAW.cast_to_raw (CONVERT (SUBSTR(str,1,24), 'UTF8'))))|| '?='

MAIL_PKG	PACKAGE BODY	54	         || CASE WHEN SUBSTR(str,25) IS NOT NULL THEN crlf || ' '|| ENCODE(SUBSTR(str,25),tp) END;

MAIL_PKG	PACKAGE BODY	55	   ELSIF tp='Q' THEN

MAIL_PKG	PACKAGE BODY	56	     RETURN '=?utf-8?q?' || UTL_RAW.cast_to_varchar2(utl_encode.QUOTED_PRINTABLE_ENCODE(utl_raw.cast_to_raw(CONVERT (SUBSTR(str,1,8), 'UTF8') ))) || '?='

MAIL_PKG	PACKAGE BODY	57	         || CASE WHEN SUBSTR(str,9) IS NOT NULL THEN crlf || ' '|| ENCODE(SUBSTR(str,9),tp) END;

MAIL_PKG	PACKAGE BODY	58	   ELSE

MAIL_PKG	PACKAGE BODY	59	     RETURN str;

MAIL_PKG	PACKAGE BODY	60	   END IF;

MAIL_PKG	PACKAGE BODY	61	 END;

MAIL_PKG	PACKAGE BODY	62	

MAIL_PKG	PACKAGE BODY	63	 FUNCTION DECODE_CHARSET (str IN VARCHAR2, charset varchar2) RETURN VARCHAR2 IS

MAIL_PKG	PACKAGE BODY	64	 BEGIN

MAIL_PKG	PACKAGE BODY	65	   return CONVERT(str,SUBSTR(USERENV ('language'),INSTR(USERENV ('language'),'.')+1)

MAIL_PKG	PACKAGE BODY	66	                   , CASE lower(charset) WHEN 'koi8-r' THEN 'CL8KOI8R'

MAIL_PKG	PACKAGE BODY	67	                                  WHEN 'utf-8' THEN 'UTF8'

MAIL_PKG	PACKAGE BODY	68	                     ELSE SUBSTR(USERENV ('language'),INSTR(USERENV ('language'),'.')+1)

MAIL_PKG	PACKAGE BODY	69	                     END

MAIL_PKG	PACKAGE BODY	70	                   );

MAIL_PKG	PACKAGE BODY	71	 END;

MAIL_PKG	PACKAGE BODY	72	

MAIL_PKG	PACKAGE BODY	73	 FUNCTION MIME_DECODE(str IN VARCHAR2) RETURN VARCHAR2 IS

MAIL_PKG	PACKAGE BODY	74	    strout VARCHAR2(32717);

MAIL_PKG	PACKAGE BODY	75	    buff varchar2(32717);

MAIL_PKG	PACKAGE BODY	76	    text varchar2(32717);

MAIL_PKG	PACKAGE BODY	77	    encode_method varchar2(1);

MAIL_PKG	PACKAGE BODY	78	    charset varchar2(25);

MAIL_PKG	PACKAGE BODY	79	 BEGIN

MAIL_PKG	PACKAGE BODY	80	  strout := str;

MAIL_PKG	PACKAGE BODY	81	  LOOP

MAIL_PKG	PACKAGE BODY	82	    IF instr(strout,'=?')>0 and instr(strout,'?=')>0 and instr(strout,'?=') > instr(strout,'=?') then

MAIL_PKG	PACKAGE BODY	83	      buff := substr(substr(strout,instr(strout,'=?')),1,1+instr(substr(strout,instr(strout,'=?')),'?=',instr(substr(strout,instr(strout,'=?')),'?',1,3)+1 ));

MAIL_PKG	PACKAGE BODY	84	      charset := lower(substr(buff,3, instr(substr(buff,3),'?')-1));

MAIL_PKG	PACKAGE BODY	85	      encode_method := substr(buff, 4+length(charset),1);

MAIL_PKG	PACKAGE BODY	86	      text := substr(buff,instr(buff,'?',1,3)+1, instr(buff,'?',1,4)-instr(buff,'?',1,3)-1);

MAIL_PKG	PACKAGE BODY	87	      IF  encode_method = 'B' THEN

MAIL_PKG	PACKAGE BODY	88	       text := UTL_RAW.cast_to_varchar2(UTL_ENCODE.base64_decode(UTL_RAW.cast_to_raw(text)));

MAIL_PKG	PACKAGE BODY	89	      ELSE

MAIL_PKG	PACKAGE BODY	90	       text := UTL_RAW.cast_to_varchar2(utl_encode.quoted_printable_decode(UTL_RAW.cast_to_raw(replace(text,'_',' '))));

MAIL_PKG	PACKAGE BODY	91	      END IF;

MAIL_PKG	PACKAGE BODY	92	      text := DECODE_CHARSET(text,charset);

MAIL_PKG	PACKAGE BODY	93	      strout:=REPLACE(strout,buff,text);

MAIL_PKG	PACKAGE BODY	94	    ELSE

MAIL_PKG	PACKAGE BODY	95	       EXIT;

MAIL_PKG	PACKAGE BODY	96	    END IF;

MAIL_PKG	PACKAGE BODY	97	  END LOOP;

MAIL_PKG	PACKAGE BODY	98	    RETURN strout;

MAIL_PKG	PACKAGE BODY	99	 END;

MAIL_PKG	PACKAGE BODY	100	

MAIL_PKG	PACKAGE BODY	101	 PROCEDURE extract_value(val IN OUT varchar2, str IN VARCHAR2,entity IN VARCHAR2)

MAIL_PKG	PACKAGE BODY	102	 IS

MAIL_PKG	PACKAGE BODY	103	  buff varchar2(255);

MAIL_PKG	PACKAGE BODY	104	  returnval varchar2(255);

MAIL_PKG	PACKAGE BODY	105	 BEGIN

MAIL_PKG	PACKAGE BODY	106	    if instr(str,entity)=0

MAIL_PKG	PACKAGE BODY	107	    then

MAIL_PKG	PACKAGE BODY	108	     return;

MAIL_PKG	PACKAGE BODY	109	    else

MAIL_PKG	PACKAGE BODY	110	     val := replace(substr(str,length(entity)+1+instr(str,entity||'='), instr(substr(str||';',length(entity)+1+instr(str,entity||'=')),';')-1),'"','');

MAIL_PKG	PACKAGE BODY	111	    end if;

MAIL_PKG	PACKAGE BODY	112	 END;

MAIL_PKG	PACKAGE BODY	113	

MAIL_PKG	PACKAGE BODY	114	 FUNCTION extract_value(str IN VARCHAR2,entity IN VARCHAR2) RETURN VARCHAR2 IS

MAIL_PKG	PACKAGE BODY	115	  p_val varchar2(32717):='';

MAIL_PKG	PACKAGE BODY	116	 BEGIN

MAIL_PKG	PACKAGE BODY	117	   mail_pkg.extract_value(p_val ,str ,entity );

MAIL_PKG	PACKAGE BODY	118	   return p_val;

MAIL_PKG	PACKAGE BODY	119	 END;

MAIL_PKG	PACKAGE BODY	120	

MAIL_PKG	PACKAGE BODY	121	

MAIL_PKG	PACKAGE BODY	122	 PROCEDURE PREPARE

MAIL_PKG	PACKAGE BODY	123	 IS

MAIL_PKG	PACKAGE BODY	124	 BEGIN

MAIL_PKG	PACKAGE BODY	125	   MAIL_PKG.attachments:=MAIL_PKG.attach_list();

MAIL_PKG	PACKAGE BODY	126	 END;

MAIL_PKG	PACKAGE BODY	127	

MAIL_PKG	PACKAGE BODY	128	 PROCEDURE ADD_RCPT( str IN OUT VARCHAR2

MAIL_PKG	PACKAGE BODY	129	                   , rcptmail IN VARCHAR2

MAIL_PKG	PACKAGE BODY	130	                   , rcptname IN VARCHAR2 DEFAULT NULL) IS

MAIL_PKG	PACKAGE BODY	131	  rcpt varchar2(255);

MAIL_PKG	PACKAGE BODY	132	 BEGIN

MAIL_PKG	PACKAGE BODY	133	  rcpt:=CASE WHEN rcptname is null THEN

MAIL_PKG	PACKAGE BODY	134	          ' <'|| rcptmail ||'>' --rcptmail

MAIL_PKG	PACKAGE BODY	135	        ELSE

MAIL_PKG	PACKAGE BODY	136	          trim(replace(replace(rcptname,',',' '),';',' '))||' <'|| rcptmail ||'>'

MAIL_PKG	PACKAGE BODY	137	        END;

MAIL_PKG	PACKAGE BODY	138	  IF trim(str) is NULL THEN

MAIL_PKG	PACKAGE BODY	139	     str :=  trim(rcpt);

MAIL_PKG	PACKAGE BODY	140	  ELSE

MAIL_PKG	PACKAGE BODY	141	     str := str||', '||trim(rcpt);

MAIL_PKG	PACKAGE BODY	142	  END IF;

MAIL_PKG	PACKAGE BODY	143	 END;

MAIL_PKG	PACKAGE BODY	144	

MAIL_PKG	PACKAGE BODY	145	 FUNCTION GENERATE_CONTENT_ID(n number) RETURN VARCHAR2 IS

MAIL_PKG	PACKAGE BODY	146	 BEGIN

MAIL_PKG	PACKAGE BODY	147	   RETURN 'mailpkg'||n||'_'||TO_CHAR(sysdate,'YYMMDD')||'.'||TO_CHAR(dbms_utility.get_time);

MAIL_PKG	PACKAGE BODY	148	 END;

MAIL_PKG	PACKAGE BODY	149	

MAIL_PKG	PACKAGE BODY	150	 PROCEDURE ADD_ATTACHMENT ( dirname IN varchar2

MAIL_PKG	PACKAGE BODY	151	                          , filename IN varchar2

MAIL_PKG	PACKAGE BODY	152	                          , mimetype IN varchar2 DEFAULT 'text/plain'

MAIL_PKG	PACKAGE BODY	153	                          , name IN varchar2 DEFAULT NULL

MAIL_PKG	PACKAGE BODY	154	                          , disposition IN varchar2 DEFAULT DISPOSITION_ATTACHMENT

MAIL_PKG	PACKAGE BODY	155	                           )

MAIL_PKG	PACKAGE BODY	156	 IS

MAIL_PKG	PACKAGE BODY	157	  v_fl BFILE :=BFILENAME(dirname,filename);

MAIL_PKG	PACKAGE BODY	158	 BEGIN

MAIL_PKG	PACKAGE BODY	159	   IF DBMS_LOB.FILEEXISTS (v_fl)=1 THEN

MAIL_PKG	PACKAGE BODY	160	      MAIL_PKG.attachments.extend;

MAIL_PKG	PACKAGE BODY	161	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).dirname:=dirname;

MAIL_PKG	PACKAGE BODY	162	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).filename:=filename;

MAIL_PKG	PACKAGE BODY	163	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).name:=nvl(name,filename);

MAIL_PKG	PACKAGE BODY	164	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).mimetype:=mimetype;

MAIL_PKG	PACKAGE BODY	165	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).attachtype:='FILE';

MAIL_PKG	PACKAGE BODY	166	      LAST_ATTACHMENT_ID := GENERATE_CONTENT_ID(MAIL_PKG.attachments.count);

MAIL_PKG	PACKAGE BODY	167	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).ContentId := LAST_ATTACHMENT_ID;

MAIL_PKG	PACKAGE BODY	168	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).disposition := disposition;

MAIL_PKG	PACKAGE BODY	169	   ELSE

MAIL_PKG	PACKAGE BODY	170	      RAISE_APPLICATION_ERROR(-20001, 'File is not exists');

MAIL_PKG	PACKAGE BODY	171	   END IF;

MAIL_PKG	PACKAGE BODY	172	 END;

MAIL_PKG	PACKAGE BODY	173	

MAIL_PKG	PACKAGE BODY	174	 PROCEDURE ADD_ATTACHMENT ( blobloc IN blob

MAIL_PKG	PACKAGE BODY	175	                          , filename IN varchar2

MAIL_PKG	PACKAGE BODY	176	                          , mimetype IN varchar2 DEFAULT 'text/html'

MAIL_PKG	PACKAGE BODY	177	                          , disposition IN varchar2 DEFAULT DISPOSITION_ATTACHMENT

MAIL_PKG	PACKAGE BODY	178	                           )

MAIL_PKG	PACKAGE BODY	179	 IS

MAIL_PKG	PACKAGE BODY	180	 BEGIN

MAIL_PKG	PACKAGE BODY	181	      MAIL_PKG.attachments.extend;

MAIL_PKG	PACKAGE BODY	182	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).name:=filename;

MAIL_PKG	PACKAGE BODY	183	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).mimetype:=mimetype;

MAIL_PKG	PACKAGE BODY	184	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).blobloc:=blobloc;

MAIL_PKG	PACKAGE BODY	185	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).attachtype:='BLOB';

MAIL_PKG	PACKAGE BODY	186	      LAST_ATTACHMENT_ID := GENERATE_CONTENT_ID(MAIL_PKG.attachments.count);

MAIL_PKG	PACKAGE BODY	187	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).ContentId := LAST_ATTACHMENT_ID;

MAIL_PKG	PACKAGE BODY	188	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).disposition := disposition;

MAIL_PKG	PACKAGE BODY	189	

MAIL_PKG	PACKAGE BODY	190	 END;

MAIL_PKG	PACKAGE BODY	191	

MAIL_PKG	PACKAGE BODY	192	 PROCEDURE ADD_ATTACHMENT ( clobloc    IN CLOB

MAIL_PKG	PACKAGE BODY	193	                          , filename   IN VARCHAR2

MAIL_PKG	PACKAGE BODY	194	                          , mimetype   IN VARCHAR2 DEFAULT 'text/html'

MAIL_PKG	PACKAGE BODY	195	                          , disposition IN varchar2 DEFAULT DISPOSITION_ATTACHMENT

MAIL_PKG	PACKAGE BODY	196	                          )

MAIL_PKG	PACKAGE BODY	197	 IS

MAIL_PKG	PACKAGE BODY	198	 BEGIN

MAIL_PKG	PACKAGE BODY	199	      MAIL_PKG.attachments.extend;

MAIL_PKG	PACKAGE BODY	200	      MAIL_PKG.attachments (MAIL_PKG.attachments.count).name := filename;

MAIL_PKG	PACKAGE BODY	201	      MAIL_PKG.attachments (MAIL_PKG.attachments.count).mimetype := mimetype;

MAIL_PKG	PACKAGE BODY	202	      MAIL_PKG.attachments (MAIL_PKG.attachments.count).clobloc := clobloc;

MAIL_PKG	PACKAGE BODY	203	      MAIL_PKG.attachments (MAIL_PKG.attachments.count).attachtype := 'CLOB';

MAIL_PKG	PACKAGE BODY	204	      LAST_ATTACHMENT_ID := GENERATE_CONTENT_ID(MAIL_PKG.attachments.count);

MAIL_PKG	PACKAGE BODY	205	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).ContentId := LAST_ATTACHMENT_ID;

MAIL_PKG	PACKAGE BODY	206	      MAIL_PKG.attachments(MAIL_PKG.attachments.count).disposition := disposition;

MAIL_PKG	PACKAGE BODY	207	 END;

MAIL_PKG	PACKAGE BODY	208	

MAIL_PKG	PACKAGE BODY	209	 FUNCTION CREATE_RCPT_LIST(mailto IN VARCHAR2) RETURN MAIL_PKG.rcpt_list IS

MAIL_PKG	PACKAGE BODY	210	  v_mailto VARCHAR2(4096) := replace(mailto,';',',')||',';

MAIL_PKG	PACKAGE BODY	211	  pntr INTEGER;

MAIL_PKG	PACKAGE BODY	212	  buf VARCHAR2(255);

MAIL_PKG	PACKAGE BODY	213	  rcptmail VARCHAR2(255);

MAIL_PKG	PACKAGE BODY	214	  rcptlist MAIL_PKG.rcpt_list:=MAIL_PKG.rcpt_list();

MAIL_PKG	PACKAGE BODY	215	 BEGIN

MAIL_PKG	PACKAGE BODY	216	  FOR maxrcptnts IN 1..50

MAIL_PKG	PACKAGE BODY	217	  LOOP

MAIL_PKG	PACKAGE BODY	218	     pntr:=INSTR(v_mailto,','); buf := substr(v_mailto,1,pntr-1);

MAIL_PKG	PACKAGE BODY	219	     IF pntr>0 THEN

MAIL_PKG	PACKAGE BODY	220	       IF INSTR(buf,'<')>0 AND INSTR(buf,'>')>0 THEN

MAIL_PKG	PACKAGE BODY	221	         rcptmail:= SUBSTR(buf,INSTR(buf,'<')+1,INSTR(SUBSTR(buf,INSTR(buf,'<')+1),'>')-1);

MAIL_PKG	PACKAGE BODY	222	         IF rcptmail IS NOT NULL THEN

MAIL_PKG	PACKAGE BODY	223	            rcptlist.extend;

MAIL_PKG	PACKAGE BODY	224	            rcptlist(rcptlist.count).rcptmail := TRIM(rcptmail);

MAIL_PKG	PACKAGE BODY	225	            rcptlist(rcptlist.count).rcptname := TRIM(SUBSTR(buf,1,INSTR(buf,'<')-1));

MAIL_PKG	PACKAGE BODY	226	         END IF;

MAIL_PKG	PACKAGE BODY	227	       ELSE

MAIL_PKG	PACKAGE BODY	228	         rcptmail := TRIM(buf);

MAIL_PKG	PACKAGE BODY	229	         IF rcptmail IS NOT NULL THEN

MAIL_PKG	PACKAGE BODY	230	           rcptlist.extend;

MAIL_PKG	PACKAGE BODY	231	           rcptlist(rcptlist.count).rcptmail:= TRIM(rcptmail);

MAIL_PKG	PACKAGE BODY	232	         END IF;

MAIL_PKG	PACKAGE BODY	233	       END IF;

MAIL_PKG	PACKAGE BODY	234	     ELSE

MAIL_PKG	PACKAGE BODY	235	       EXIT;

MAIL_PKG	PACKAGE BODY	236	     END IF;

MAIL_PKG	PACKAGE BODY	237	     v_mailto := substr(v_mailto,pntr+1);

MAIL_PKG	PACKAGE BODY	238	   END LOOP;

MAIL_PKG	PACKAGE BODY	239	   RETURN rcptlist;

MAIL_PKG	PACKAGE BODY	240	 END;

MAIL_PKG	PACKAGE BODY	241	

MAIL_PKG	PACKAGE BODY	242	 PROCEDURE SEND ( mailto IN VARCHAR2

MAIL_PKG	PACKAGE BODY	243	                , subject IN VARCHAR2

MAIL_PKG	PACKAGE BODY	244	                , message IN CLOB

MAIL_PKG	PACKAGE BODY	245	                , mailfrom IN VARCHAR2 DEFAULT NULL

MAIL_PKG	PACKAGE BODY	246	                , mimetype IN VARCHAR2 DEFAULT 'text/plain'

MAIL_PKG	PACKAGE BODY	247	                , priority IN NUMBER DEFAULT NULL

MAIL_PKG	PACKAGE BODY	248	                , cc       IN VARCHAR2 DEFAULT NULL

MAIL_PKG	PACKAGE BODY	249	                )

MAIL_PKG	PACKAGE BODY	250	 IS

MAIL_PKG	PACKAGE BODY	251	   v_Mail_Conn  utl_smtp.Connection;

MAIL_PKG	PACKAGE BODY	252	   boundary VARCHAR2(50) := '-----7D81B75CCC90DFRW4F7A1CBD';

MAIL_PKG	PACKAGE BODY	253	   vFile BFILE;

MAIL_PKG	PACKAGE BODY	254	   vRAW RAW(32767);

MAIL_PKG	PACKAGE BODY	255	   vBuf VARCHAR2(32767);

MAIL_PKG	PACKAGE BODY	256	   amt CONSTANT BINARY_INTEGER := 13440; -- 48bytes binary convert to 128bytes of base64. (32767/2 max for raw convert)

MAIL_PKG	PACKAGE BODY	257	   v_amt BINARY_INTEGER;

MAIL_PKG	PACKAGE BODY	258	   ps BINARY_INTEGER := 1;

MAIL_PKG	PACKAGE BODY	259	   message_part varchar2(32767);

MAIL_PKG	PACKAGE BODY	260	   v_mime VARCHAR2(30);

MAIL_PKG	PACKAGE BODY	261	   reply UTL_SMTP.REPLY;

MAIL_PKG	PACKAGE BODY	262	   replies UTL_SMTP.REPLIES;

MAIL_PKG	PACKAGE BODY	263	   rcptlist MAIL_PKG.rcpt_list;

MAIL_PKG	PACKAGE BODY	264	   cclist MAIL_PKG.rcpt_list;

MAIL_PKG	PACKAGE BODY	265	   sndr MAIL_PKG.rcpt_row;

MAIL_PKG	PACKAGE BODY	266	 BEGIN

MAIL_PKG	PACKAGE BODY	267	    rcptlist:=create_rcpt_list(mailto);

MAIL_PKG	PACKAGE BODY	268	    cclist := create_rcpt_list(cc);

MAIL_PKG	PACKAGE BODY	269	    IF rcptlist.count=0 THEN

MAIL_PKG	PACKAGE BODY	270	      RAISE_APPLICATION_ERROR(-20001, 'Recipients requered');

MAIL_PKG	PACKAGE BODY	271	    END IF;

MAIL_PKG	PACKAGE BODY	272	    IF mimetype<>'text/html' and mimetype<>'text/plain' THEN

MAIL_PKG	PACKAGE BODY	273	      RAISE_APPLICATION_ERROR(-20001, 'MimeType must be "text/html" or "text/plain"');

MAIL_PKG	PACKAGE BODY	274	    ELSE

MAIL_PKG	PACKAGE BODY	275	      v_mime:=mimetype;

MAIL_PKG	PACKAGE BODY	276	    END IF;

MAIL_PKG	PACKAGE BODY	277	    v_Mail_Conn := utl_smtp.Open_Connection(MAIL_PKG.mailserver, MAIL_PKG.mailport);

MAIL_PKG	PACKAGE BODY	278	    replies:=utl_smtp.Ehlo(v_Mail_Conn,MAIL_PKG.mailserver);

MAIL_PKG	PACKAGE BODY	279	    if create_rcpt_list(mailfrom).count>0 then

MAIL_PKG	PACKAGE BODY	280	      sndr := create_rcpt_list(mailfrom)(1);

MAIL_PKG	PACKAGE BODY	281	    else

MAIL_PKG	PACKAGE BODY	282	      --sndr := create_rcpt_list( 'mail@' || UTL_INADDR.GET_HOST_NAME )(1); -- host from oracle-server

MAIL_PKG	PACKAGE BODY	283	      sndr := create_rcpt_list( 'robot@avk.ua' )(1);

MAIL_PKG	PACKAGE BODY	284	      -- sndr := create_rcpt_list( 'mail@' || substr(replies(1).text,1,instr(replies(1).text,' ')-1))(1); -- Addr from ehlo answer

MAIL_PKG	PACKAGE BODY	285	    end if;

MAIL_PKG	PACKAGE BODY	286	

MAIL_PKG	PACKAGE BODY	287	    if mail_pkg.auth_user is not null then

MAIL_PKG	PACKAGE BODY	288	       for x IN 1 .. replies.count loop

MAIL_PKG	PACKAGE BODY	289	          IF INSTR(replies(x).text,'AUTH')>0 then -- If server supply authorization

MAIL_PKG	PACKAGE BODY	290	            utl_smtp.command(v_Mail_Conn, 'AUTH LOGIN');

MAIL_PKG	PACKAGE BODY	291	            utl_smtp.command(v_Mail_Conn,utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(auth_user))));

MAIL_PKG	PACKAGE BODY	292	            utl_smtp.command(v_Mail_Conn,utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(auth_pass))));

MAIL_PKG	PACKAGE BODY	293	            exit;

MAIL_PKG	PACKAGE BODY	294	         END IF;

MAIL_PKG	PACKAGE BODY	295	       end loop;

MAIL_PKG	PACKAGE BODY	296	    end if;

MAIL_PKG	PACKAGE BODY	297	

MAIL_PKG	PACKAGE BODY	298	    utl_smtp.Mail(v_Mail_Conn, sndr.rcptmail);

MAIL_PKG	PACKAGE BODY	299	    FOR rcpts IN 1 .. rcptlist.count

MAIL_PKG	PACKAGE BODY	300	    LOOP

MAIL_PKG	PACKAGE BODY	301	      utl_smtp.Rcpt(v_Mail_Conn, rcptlist(rcpts).rcptmail);

MAIL_PKG	PACKAGE BODY	302	    END LOOP;

MAIL_PKG	PACKAGE BODY	303	    FOR rcpts IN 1 .. cclist.count

MAIL_PKG	PACKAGE BODY	304	    LOOP

MAIL_PKG	PACKAGE BODY	305	      utl_smtp.Rcpt(v_Mail_Conn, cclist(rcpts).rcptmail);

MAIL_PKG	PACKAGE BODY	306	    END LOOP;

MAIL_PKG	PACKAGE BODY	307	

MAIL_PKG	PACKAGE BODY	308	    utl_smtp.open_data(v_Mail_Conn); -- open data sheet

MAIL_PKG	PACKAGE BODY	309	    utl_smtp.write_data(v_Mail_Conn, 'Date: ' || TO_CHAR(SYSTIMESTAMP,'Dy, DD Mon YYYY HH24:MI:SS TZHTZM','NLS_DATE_LANGUAGE = ''american''') || crlf);

MAIL_PKG	PACKAGE BODY	310	    utl_smtp.write_data(v_Mail_Conn, 'From: ');

MAIL_PKG	PACKAGE BODY	311	    if sndr.rcptname is not null then

MAIL_PKG	PACKAGE BODY	312	        utl_smtp.write_data(v_Mail_Conn, MAIL_PKG.ENCODE(sndr.rcptname) ||' <'|| sndr.rcptmail || '>');

MAIL_PKG	PACKAGE BODY	313	    else

MAIL_PKG	PACKAGE BODY	314	        utl_smtp.write_data(v_Mail_Conn, sndr.rcptmail);

MAIL_PKG	PACKAGE BODY	315	    end if;

MAIL_PKG	PACKAGE BODY	316	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	317	    utl_smtp.write_data(v_Mail_Conn, 'Subject: '|| MAIL_PKG.ENCODE(subject) || crlf );

MAIL_PKG	PACKAGE BODY	318	    utl_smtp.write_data(v_Mail_Conn, 'To: ');

MAIL_PKG	PACKAGE BODY	319	    FOR rcpts IN 1 .. rcptlist.count

MAIL_PKG	PACKAGE BODY	320	    LOOP

MAIL_PKG	PACKAGE BODY	321	      if rcpts>1 then

MAIL_PKG	PACKAGE BODY	322	       utl_smtp.write_data(v_Mail_Conn, ',');

MAIL_PKG	PACKAGE BODY	323	      end if;

MAIL_PKG	PACKAGE BODY	324	      if rcptlist(rcpts).rcptname is not null then

MAIL_PKG	PACKAGE BODY	325	        utl_smtp.write_data(v_Mail_Conn, MAIL_PKG.ENCODE(rcptlist(rcpts).rcptname) ||' <'|| rcptlist(rcpts).rcptmail || '>');

MAIL_PKG	PACKAGE BODY	326	      else

MAIL_PKG	PACKAGE BODY	327	        utl_smtp.write_data(v_Mail_Conn, rcptlist(rcpts).rcptmail);

MAIL_PKG	PACKAGE BODY	328	      end if;

MAIL_PKG	PACKAGE BODY	329	    END LOOP;

MAIL_PKG	PACKAGE BODY	330	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	331	

MAIL_PKG	PACKAGE BODY	332	    IF cclist.count>0 THEN

MAIL_PKG	PACKAGE BODY	333	    utl_smtp.write_data(v_Mail_Conn, 'CC: ');

MAIL_PKG	PACKAGE BODY	334	    FOR rcpts IN 1 .. cclist.count

MAIL_PKG	PACKAGE BODY	335	    LOOP

MAIL_PKG	PACKAGE BODY	336	      if rcpts>1 then

MAIL_PKG	PACKAGE BODY	337	       utl_smtp.write_data(v_Mail_Conn, ',');

MAIL_PKG	PACKAGE BODY	338	      end if;

MAIL_PKG	PACKAGE BODY	339	      if cclist(rcpts).rcptname is not null then

MAIL_PKG	PACKAGE BODY	340	        utl_smtp.write_data(v_Mail_Conn, MAIL_PKG.ENCODE(cclist(rcpts).rcptname) ||' <'|| cclist(rcpts).rcptmail || '>');

MAIL_PKG	PACKAGE BODY	341	      else

MAIL_PKG	PACKAGE BODY	342	        utl_smtp.write_data(v_Mail_Conn, cclist(rcpts).rcptmail);

MAIL_PKG	PACKAGE BODY	343	      end if;

MAIL_PKG	PACKAGE BODY	344	    END LOOP;

MAIL_PKG	PACKAGE BODY	345	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	346	    END IF;

MAIL_PKG	PACKAGE BODY	347	

MAIL_PKG	PACKAGE BODY	348	    IF priority IS NOT NULL and priority BETWEEN 1 AND 5 THEN

MAIL_PKG	PACKAGE BODY	349	      utl_smtp.write_data(v_Mail_Conn, 'X-Priority: ' || priority || crlf );

MAIL_PKG	PACKAGE BODY	350	    END IF;

MAIL_PKG	PACKAGE BODY	351	    utl_smtp.write_data(v_Mail_Conn, 'MIME-version: 1.0' || crlf );

MAIL_PKG	PACKAGE BODY	352	    utl_smtp.write_data(v_Mail_Conn, 'Content-Type: multipart/mixed;'|| crlf );

MAIL_PKG	PACKAGE BODY	353	    utl_smtp.write_data(v_Mail_Conn, ' boundary="'||boundary||'"'|| crlf );

MAIL_PKG	PACKAGE BODY	354	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	355	

MAIL_PKG	PACKAGE BODY	356	    --Message

MAIL_PKG	PACKAGE BODY	357	    IF message IS NOT NULL THEN

MAIL_PKG	PACKAGE BODY	358	    utl_smtp.write_data(v_Mail_Conn, '--'|| boundary || crlf );

MAIL_PKG	PACKAGE BODY	359	    utl_smtp.write_data(v_Mail_Conn, 'Content-Type: '||v_mime||'; charset="utf-8"'|| crlf );

MAIL_PKG	PACKAGE BODY	360	    utl_smtp.write_data(v_Mail_Conn, 'Content-Transfer-Encoding: base64'|| crlf );

MAIL_PKG	PACKAGE BODY	361	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	362	    ps := 1; v_amt := amt;

MAIL_PKG	PACKAGE BODY	363	    LOOP

MAIL_PKG	PACKAGE BODY	364	      BEGIN

MAIL_PKG	PACKAGE BODY	365	        dbms_lob.read(message, v_amt, ps, vBuf);

MAIL_PKG	PACKAGE BODY	366	        ps := ps + v_amt;

MAIL_PKG	PACKAGE BODY	367	        utl_smtp.write_raw_data (v_Mail_Conn,utl_encode.base64_encode ( utl_raw.cast_to_raw(convert(vBuf,'UTF8'))));

MAIL_PKG	PACKAGE BODY	368	      EXCEPTION

MAIL_PKG	PACKAGE BODY	369	        WHEN no_data_found THEN

MAIL_PKG	PACKAGE BODY	370	            EXIT;

MAIL_PKG	PACKAGE BODY	371	      END;

MAIL_PKG	PACKAGE BODY	372	    END LOOP;

MAIL_PKG	PACKAGE BODY	373	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	374	    utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	375	    END IF;

MAIL_PKG	PACKAGE BODY	376	

MAIL_PKG	PACKAGE BODY	377	    --Attachments

MAIL_PKG	PACKAGE BODY	378	    IF MAIL_PKG.attachments.count>0 THEN

MAIL_PKG	PACKAGE BODY	379	      FOR x IN 1 .. MAIL_PKG.attachments.count LOOP

MAIL_PKG	PACKAGE BODY	380	            utl_smtp.write_data(v_Mail_Conn, '--'|| boundary || crlf );

MAIL_PKG	PACKAGE BODY	381	

MAIL_PKG	PACKAGE BODY	382	            utl_smtp.write_data(v_Mail_Conn, 'Content-Type: '||MAIL_PKG.attachments(x).mimetype||';'|| crlf );

MAIL_PKG	PACKAGE BODY	383	            utl_smtp.write_data(v_Mail_Conn, ' name="');

MAIL_PKG	PACKAGE BODY	384	            utl_smtp.write_raw_data(v_Mail_Conn,utl_raw.cast_to_raw(MAIL_PKG.attachments(x).name));

MAIL_PKG	PACKAGE BODY	385	            utl_smtp.write_data(v_Mail_Conn, '"' || crlf);

MAIL_PKG	PACKAGE BODY	386	            utl_smtp.write_data(v_Mail_Conn, 'Content-Transfer-Encoding: base64'|| crlf );

MAIL_PKG	PACKAGE BODY	387	            utl_smtp.write_data(v_Mail_Conn, 'Content-ID: '|| MAIL_PKG.attachments(x).contentid || crlf );

MAIL_PKG	PACKAGE BODY	388	            IF MAIL_PKG.attachments(x).disposition in (DISPOSITION_ATTACHMENT, DISPOSITION_INLINE) THEN

MAIL_PKG	PACKAGE BODY	389	              utl_smtp.write_data(v_Mail_Conn, 'Content-Disposition: '||MAIL_PKG.attachments(x).disposition||';'|| crlf );

MAIL_PKG	PACKAGE BODY	390	              utl_smtp.write_data(v_Mail_Conn, ' filename="' || MAIL_PKG.ENCODE(MAIL_PKG.attachments(x).name) || '"' || crlf);

MAIL_PKG	PACKAGE BODY	391	            END IF;

MAIL_PKG	PACKAGE BODY	392	            utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	393	

MAIL_PKG	PACKAGE BODY	394	          IF MAIL_PKG.attachments(x).attachtype = 'FILE' THEN

MAIL_PKG	PACKAGE BODY	395	             vFile := BFILENAME(MAIL_PKG.attachments(x).dirname,MAIL_PKG.attachments(x).filename);

MAIL_PKG	PACKAGE BODY	396	             dbms_lob.fileopen(vFile, dbms_lob.file_readonly);

MAIL_PKG	PACKAGE BODY	397	             ps:=1; v_amt:=amt;

MAIL_PKG	PACKAGE BODY	398	             LOOP

MAIL_PKG	PACKAGE BODY	399	               BEGIN

MAIL_PKG	PACKAGE BODY	400	                 dbms_lob.read (vFile, v_amt, ps, vRAW);

MAIL_PKG	PACKAGE BODY	401	                 ps := ps + v_amt;

MAIL_PKG	PACKAGE BODY	402	                 utl_smtp.write_raw_data(v_Mail_Conn, UTL_ENCODE.base64_encode(vRAW));

MAIL_PKG	PACKAGE BODY	403	               EXCEPTION

MAIL_PKG	PACKAGE BODY	404	                 WHEN no_data_found THEN

MAIL_PKG	PACKAGE BODY	405	                   EXIT;

MAIL_PKG	PACKAGE BODY	406	               END;

MAIL_PKG	PACKAGE BODY	407	             END LOOP;

MAIL_PKG	PACKAGE BODY	408	             dbms_lob.fileclose(vFile);

MAIL_PKG	PACKAGE BODY	409	          ELSIF MAIL_PKG.attachments(x).attachtype = 'BLOB' THEN

MAIL_PKG	PACKAGE BODY	410	               dbms_lob.open(MAIL_PKG.attachments(x).blobloc, dbms_lob.file_readonly);

MAIL_PKG	PACKAGE BODY	411	             ps:=1; v_amt:=amt;

MAIL_PKG	PACKAGE BODY	412	             LOOP

MAIL_PKG	PACKAGE BODY	413	               BEGIN

MAIL_PKG	PACKAGE BODY	414	                 dbms_lob.read (MAIL_PKG.attachments(x).blobloc, v_amt, ps, vRAW);

MAIL_PKG	PACKAGE BODY	415	                 ps := ps + v_amt;

MAIL_PKG	PACKAGE BODY	416	                 utl_smtp.write_raw_data(v_Mail_Conn, UTL_ENCODE.base64_encode(vRAW));

MAIL_PKG	PACKAGE BODY	417	               EXCEPTION

MAIL_PKG	PACKAGE BODY	418	                 WHEN no_data_found THEN

MAIL_PKG	PACKAGE BODY	419	                   EXIT;

MAIL_PKG	PACKAGE BODY	420	               END;

MAIL_PKG	PACKAGE BODY	421	             END LOOP;

MAIL_PKG	PACKAGE BODY	422	             dbms_lob.close(MAIL_PKG.attachments(x).blobloc);

MAIL_PKG	PACKAGE BODY	423	          ELSIF MAIL_PKG.attachments (x).attachtype = 'CLOB' THEN

MAIL_PKG	PACKAGE BODY	424	             DBMS_LOB.open (MAIL_PKG.attachments (x).clobloc,DBMS_LOB.file_readonly);

MAIL_PKG	PACKAGE BODY	425	             ps := 1; v_amt := amt;

MAIL_PKG	PACKAGE BODY	426	             LOOP

MAIL_PKG	PACKAGE BODY	427	               BEGIN

MAIL_PKG	PACKAGE BODY	428	                 DBMS_LOB.read (MAIL_PKG.attachments (x).clobloc, v_amt, ps, vBuf);

MAIL_PKG	PACKAGE BODY	429	                 ps := ps + v_amt;

MAIL_PKG	PACKAGE BODY	430	                 UTL_SMTP.write_raw_data (v_Mail_Conn,UTL_ENCODE.base64_encode ( UTL_RAW.CAST_TO_RAW(vBuf)));

MAIL_PKG	PACKAGE BODY	431	               EXCEPTION

MAIL_PKG	PACKAGE BODY	432	                 WHEN NO_DATA_FOUND THEN

MAIL_PKG	PACKAGE BODY	433	                    EXIT;

MAIL_PKG	PACKAGE BODY	434	               END;

MAIL_PKG	PACKAGE BODY	435	             END LOOP;

MAIL_PKG	PACKAGE BODY	436	             DBMS_LOB.close (MAIL_PKG.attachments (x).clobloc);

MAIL_PKG	PACKAGE BODY	437	          END IF;

MAIL_PKG	PACKAGE BODY	438	

MAIL_PKG	PACKAGE BODY	439	          utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	440	          utl_smtp.write_data(v_Mail_Conn, crlf );

MAIL_PKG	PACKAGE BODY	441	      END LOOP;

MAIL_PKG	PACKAGE BODY	442	    END IF;

MAIL_PKG	PACKAGE BODY	443	

MAIL_PKG	PACKAGE BODY	444	    -- Final Boundary

MAIL_PKG	PACKAGE BODY	445	    utl_smtp.write_data(v_Mail_Conn, '--' || boundary || '--');

MAIL_PKG	PACKAGE BODY	446	

MAIL_PKG	PACKAGE BODY	447	    utl_smtp.close_data(v_Mail_Conn);

MAIL_PKG	PACKAGE BODY	448	    utl_smtp.quit(v_Mail_Conn);

MAIL_PKG	PACKAGE BODY	449	

MAIL_PKG	PACKAGE BODY	450	    -- Clear attachments

MAIL_PKG	PACKAGE BODY	451	    MAIL_PKG.attachments:=MAIL_PKG.attach_list();

MAIL_PKG	PACKAGE BODY	452	

MAIL_PKG	PACKAGE BODY	453	 EXCEPTION

MAIL_PKG	PACKAGE BODY	454	    WHEN OTHERS THEN

MAIL_PKG	PACKAGE BODY	455	       BEGIN

MAIL_PKG	PACKAGE BODY	456	         MAIL_PKG.attachments:=MAIL_PKG.attach_list();

MAIL_PKG	PACKAGE BODY	457	         utl_smtp.rset(v_Mail_Conn);

MAIL_PKG	PACKAGE BODY	458	         utl_smtp.quit(v_Mail_Conn);

MAIL_PKG	PACKAGE BODY	459	       EXCEPTION WHEN OTHERS THEN NULL;

MAIL_PKG	PACKAGE BODY	460	       END;

MAIL_PKG	PACKAGE BODY	461	    RAISE;

MAIL_PKG	PACKAGE BODY	462	 END;

MAIL_PKG	PACKAGE BODY	463	

MAIL_PKG	PACKAGE BODY	464	 PROCEDURE PDEBUG(mess IN varchar2, plevel IN NUMBER DEFAULT 0) IS

MAIL_PKG	PACKAGE BODY	465	 BEGIN

MAIL_PKG	PACKAGE BODY	466	   IF MAIL_PKG.DEBUG AND plevel>=MAIL_PKG.DEBUG_LEVEL THEN

MAIL_PKG	PACKAGE BODY	467	     dbms_output.put_line(substr(mess,1,255));

MAIL_PKG	PACKAGE BODY	468	   END IF;

MAIL_PKG	PACKAGE BODY	469	 END;

MAIL_PKG	PACKAGE BODY	470	

MAIL_PKG	PACKAGE BODY	471	

MAIL_PKG	PACKAGE BODY	472	 PROCEDURE CMD(c in out utl_tcp.connection, command in varchar2,status out varchar2, answer out varchar2) is

MAIL_PKG	PACKAGE BODY	473	   ret_val pls_integer;

MAIL_PKG	PACKAGE BODY	474	   answr varchar2(32767);

MAIL_PKG	PACKAGE BODY	475	

MAIL_PKG	PACKAGE BODY	476	   PROCEDURE POP3_CMD IS

MAIL_PKG	PACKAGE BODY	477	   BEGIN

MAIL_PKG	PACKAGE BODY	478	     ret_val := utl_tcp.write_line(c,command);

MAIL_PKG	PACKAGE BODY	479	     answr := utl_tcp.get_line(c, TRUE);

MAIL_PKG	PACKAGE BODY	480	     status := trim(substr(answr,1,instr(answr,' ')));

MAIL_PKG	PACKAGE BODY	481	     answer := substr(answr,instr(answr,' ')+1);

MAIL_PKG	PACKAGE BODY	482	

MAIL_PKG	PACKAGE BODY	483	     if mail_pkg.debug then

MAIL_PKG	PACKAGE BODY	484	      PDEBUG('S:'||answr);

MAIL_PKG	PACKAGE BODY	485	      PDEBUG('DEBUG:'||status||' '||answer,mail_pkg.debug_messages);

MAIL_PKG	PACKAGE BODY	486	     end if;

MAIL_PKG	PACKAGE BODY	487	

MAIL_PKG	PACKAGE BODY	488	     if status = '-ERR' then

MAIL_PKG	PACKAGE BODY	489	       raise_application_error (-20000,answr);

MAIL_PKG	PACKAGE BODY	490	     end if;

MAIL_PKG	PACKAGE BODY	491	

MAIL_PKG	PACKAGE BODY	492	   END;

MAIL_PKG	PACKAGE BODY	493	

MAIL_PKG	PACKAGE BODY	494	   PROCEDURE IMAP_CMD IS

MAIL_PKG	PACKAGE BODY	495	   BEGIN

MAIL_PKG	PACKAGE BODY	496	     imap_cntr := imap_cntr + 1;

MAIL_PKG	PACKAGE BODY	497	     ret_val := utl_tcp.write_line(c, 'A'||lpad(imap_cntr,3,'0')||' '||command);

MAIL_PKG	PACKAGE BODY	498	     answr := utl_tcp.get_line(c, TRUE);

MAIL_PKG	PACKAGE BODY	499	     status := trim(substr(answr,instr(answr,' '),instr(substr(answr,1+instr(answr,' ')),' ')  ));

MAIL_PKG	PACKAGE BODY	500	     answer := substr(answr,instr(answr,' ',1,1)+1);

MAIL_PKG	PACKAGE BODY	501	

MAIL_PKG	PACKAGE BODY	502	     if mail_pkg.debug then

MAIL_PKG	PACKAGE BODY	503	      PDEBUG('S:'||answr);

MAIL_PKG	PACKAGE BODY	504	      PDEBUG('DEBUG:'||status||' '||answer,mail_pkg.debug_messages);

MAIL_PKG	PACKAGE BODY	505	     end if;

MAIL_PKG	PACKAGE BODY	506	

MAIL_PKG	PACKAGE BODY	507	     if status in ('BAD','NO') then

MAIL_PKG	PACKAGE BODY	508	      raise_application_error (-20000,answr);

MAIL_PKG	PACKAGE BODY	509	     end if;

MAIL_PKG	PACKAGE BODY	510	

MAIL_PKG	PACKAGE BODY	511	   END;

MAIL_PKG	PACKAGE BODY	512	

MAIL_PKG	PACKAGE BODY	513	 begin

MAIL_PKG	PACKAGE BODY	514	   PDEBUG('C:'||command);

MAIL_PKG	PACKAGE BODY	515	   CASE MAIL_PKG.protocol

MAIL_PKG	PACKAGE BODY	516	     WHEN MAIL_PKG.POP3 THEN POP3_CMD;

MAIL_PKG	PACKAGE BODY	517	     WHEN MAIL_PKG.IMAP THEN IMAP_CMD;

MAIL_PKG	PACKAGE BODY	518	   END CASE;

MAIL_PKG	PACKAGE BODY	519	 end;

MAIL_PKG	PACKAGE BODY	520	

MAIL_PKG	PACKAGE BODY	521	

MAIL_PKG	PACKAGE BODY	522	 FUNCTION PARSE_LINE (line varchar2, ContentTransferEncoding varchar2, charset varchar2 default null) RETURN varchar2 IS

MAIL_PKG	PACKAGE BODY	523	  decoding_line varchar2(255);

MAIL_PKG	PACKAGE BODY	524	 BEGIN

MAIL_PKG	PACKAGE BODY	525	   decoding_line := line;

MAIL_PKG	PACKAGE BODY	526	   IF decoding_line is null then return null; END IF;

MAIL_PKG	PACKAGE BODY	527	   IF ContentTransferEncoding = 'base64' then

MAIL_PKG	PACKAGE BODY	528	      decoding_line := UTL_RAW.cast_to_varchar2(UTL_ENCODE.base64_decode(UTL_RAW.cast_to_raw(decoding_line)));

MAIL_PKG	PACKAGE BODY	529	   ELSIF ContentTransferEncoding = 'quoted-printable' then

MAIL_PKG	PACKAGE BODY	530	      decoding_line := UTL_RAW.cast_to_varchar2(UTL_ENCODE.quoted_printable_decode(UTL_RAW.cast_to_raw(decoding_line)));

MAIL_PKG	PACKAGE BODY	531	   END IF;

MAIL_PKG	PACKAGE BODY	532	   decoding_line := DECODE_CHARSET(decoding_line,charset);

MAIL_PKG	PACKAGE BODY	533	

MAIL_PKG	PACKAGE BODY	534	   RETURN decoding_line;

MAIL_PKG	PACKAGE BODY	535	 EXCEPTION WHEN OTHERS THEN

MAIL_PKG	PACKAGE BODY	536	   PDEBUG('ERR: PARSE:' || ContentTransferEncoding || ' ' || charset || ',' || line || ' > '||decoding_line, mail_pkg.debug_errors);

MAIL_PKG	PACKAGE BODY	537	   RETURN NULL;

MAIL_PKG	PACKAGE BODY	538	 END;

MAIL_PKG	PACKAGE BODY	539	

MAIL_PKG	PACKAGE BODY	540	

MAIL_PKG	PACKAGE BODY	541	 PROCEDURE MAIL_CONNECT(protocol varchar2 default POP3) IS

MAIL_PKG	PACKAGE BODY	542	  p_ip varchar2(25);

MAIL_PKG	PACKAGE BODY	543	  answer varchar2(32767);

MAIL_PKG	PACKAGE BODY	544	  status varchar2(25);

MAIL_PKG	PACKAGE BODY	545	  cnt number;

MAIL_PKG	PACKAGE BODY	546	  bytes number;

MAIL_PKG	PACKAGE BODY	547	

MAIL_PKG	PACKAGE BODY	548	  PROCEDURE POP3_CONNECT IS

MAIL_PKG	PACKAGE BODY	549	  BEGIN

MAIL_PKG	PACKAGE BODY	550	    c := utl_tcp.open_connection(remote_host => p_ip,

MAIL_PKG	PACKAGE BODY	551	                                 remote_port =>  110,

MAIL_PKG	PACKAGE BODY	552	                                 charset     => 'US7ASCII',

MAIL_PKG	PACKAGE BODY	553	                                 tx_timeout => 10);

MAIL_PKG	PACKAGE BODY	554	    answer := utl_tcp.get_line(c, TRUE);

MAIL_PKG	PACKAGE BODY	555	    PDEBUG(answer,mail_pkg.debug_messages);

MAIL_PKG	PACKAGE BODY	556	

MAIL_PKG	PACKAGE BODY	557	    CMD(c,'USER '||MAIL_PKG.auth_user,status,answer);

MAIL_PKG	PACKAGE BODY	558	    CMD(c,'PASS '||MAIL_PKG.auth_pass,status,answer);

MAIL_PKG	PACKAGE BODY	559	

MAIL_PKG	PACKAGE BODY	560	    CMD(c,'STAT',status,answer);

MAIL_PKG	PACKAGE BODY	561	    cnt := to_number(trim(substr(answer,1,instr(answer,' '))));

MAIL_PKG	PACKAGE BODY	562	    bytes := to_number(trim(substr(answer,instr(answer,' '))));

MAIL_PKG	PACKAGE BODY	563	

MAIL_PKG	PACKAGE BODY	564	  END;

MAIL_PKG	PACKAGE BODY	565	

MAIL_PKG	PACKAGE BODY	566	  PROCEDURE IMAP_CONNECT IS

MAIL_PKG	PACKAGE BODY	567	  BEGIN

MAIL_PKG	PACKAGE BODY	568	    imap_cntr := 0;

MAIL_PKG	PACKAGE BODY	569	    c := utl_tcp.open_connection(remote_host => p_ip,

MAIL_PKG	PACKAGE BODY	570	                                 remote_port =>  143,

MAIL_PKG	PACKAGE BODY	571	                                 charset     => 'US7ASCII',

MAIL_PKG	PACKAGE BODY	572	                                 tx_timeout => 10);

MAIL_PKG	PACKAGE BODY	573	    answer := utl_tcp.get_line(c, TRUE);

MAIL_PKG	PACKAGE BODY	574	    PDEBUG(answer,mail_pkg.debug_messages);

MAIL_PKG	PACKAGE BODY	575	

MAIL_PKG	PACKAGE BODY	576	    CMD(c,'LOGIN '||MAIL_PKG.auth_user||' '||MAIL_PKG.auth_pass,status,answer);

MAIL_PKG	PACKAGE BODY	577	    CMD(c,'SELECT INBOX',status,answer);

MAIL_PKG	PACKAGE BODY	578	    cnt := to_number(trim(substr(answer,1,instr(answer,' '))));

MAIL_PKG	PACKAGE BODY	579	    bytes := 0;

MAIL_PKG	PACKAGE BODY	580	    CMD(c,'STATUS INBOX (UIDNEXT MESSAGES)',status,answer);

MAIL_PKG	PACKAGE BODY	581	  END;

MAIL_PKG	PACKAGE BODY	582	

MAIL_PKG	PACKAGE BODY	583	 BEGIN

MAIL_PKG	PACKAGE BODY	584	  MAIL_PKG.protocol := protocol;

MAIL_PKG	PACKAGE BODY	585	  IF MAIL_PKG.protocol NOT IN (MAIL_PKG.POP3, MAIL_PKG.IMAP) THEN

MAIL_PKG	PACKAGE BODY	586	    RAISE_APPLICATION_ERROR(-20001,'Protocol '||protocol||' is not supported');

MAIL_PKG	PACKAGE BODY	587	  END IF;

MAIL_PKG	PACKAGE BODY	588	

MAIL_PKG	PACKAGE BODY	589	  p_ip := UTL_INADDR.GET_HOST_ADDRESS(mailserver);

MAIL_PKG	PACKAGE BODY	590	

MAIL_PKG	PACKAGE BODY	591	  CASE MAIL_PKG.protocol

MAIL_PKG	PACKAGE BODY	592	    WHEN MAIL_PKG.POP3 THEN POP3_CONNECT;

MAIL_PKG	PACKAGE BODY	593	    WHEN MAIL_PKG.IMAP THEN IMAP_CONNECT;

MAIL_PKG	PACKAGE BODY	594	  END CASE;

MAIL_PKG	PACKAGE BODY	595	

MAIL_PKG	PACKAGE BODY	596	  MAILBOX.DELETE;

MAIL_PKG	PACKAGE BODY	597	  FOR mail_id IN 1 .. cnt

MAIL_PKG	PACKAGE BODY	598	  LOOP

MAIL_PKG	PACKAGE BODY	599	       MAILBOX(mail_id).bytes := 0;

MAIL_PKG	PACKAGE BODY	600	  END LOOP;

MAIL_PKG	PACKAGE BODY	601	

MAIL_PKG	PACKAGE BODY	602	 END;

MAIL_PKG	PACKAGE BODY	603	

MAIL_PKG	PACKAGE BODY	604	  PROCEDURE MAIL_DISCONNECT IS

MAIL_PKG	PACKAGE BODY	605	  answer varchar2(32767);

MAIL_PKG	PACKAGE BODY	606	  status varchar2(25);

MAIL_PKG	PACKAGE BODY	607	 BEGIN

MAIL_PKG	PACKAGE BODY	608	   CASE MAIL_PKG.protocol

MAIL_PKG	PACKAGE BODY	609	   WHEN MAIL_PKG.POP3 THEN

MAIL_PKG	PACKAGE BODY	610	     CMD(c,'QUIT',status,answer);

MAIL_PKG	PACKAGE BODY	611	   WHEN MAIL_PKG.IMAP THEN

MAIL_PKG	PACKAGE BODY	612	     CMD(c,'LOGOUT',status,answer);

MAIL_PKG	PACKAGE BODY	613	   END CASE;

MAIL_PKG	PACKAGE BODY	614	   utl_tcp.close_connection(c);

MAIL_PKG	PACKAGE BODY	615	 EXCEPTION WHEN OTHERS THEN

MAIL_PKG	PACKAGE BODY	616	   BEGIN

MAIL_PKG	PACKAGE BODY	617	     utl_tcp.close_connection(c);

MAIL_PKG	PACKAGE BODY	618	   EXCEPTION WHEN OTHERS THEN NULL;

MAIL_PKG	PACKAGE BODY	619	   END;

MAIL_PKG	PACKAGE BODY	620	   RAISE;

MAIL_PKG	PACKAGE BODY	621	 END;

MAIL_PKG	PACKAGE BODY	622	

MAIL_PKG	PACKAGE BODY	623	 PROCEDURE GET_HEADERS IS

MAIL_PKG	PACKAGE BODY	624	  answer varchar2(32767);

MAIL_PKG	PACKAGE BODY	625	  status varchar2(25);

MAIL_PKG	PACKAGE BODY	626	  cnt number;

MAIL_PKG	PACKAGE BODY	627	  bytes number;

MAIL_PKG	PACKAGE BODY	628	 BEGIN

MAIL_PKG	PACKAGE BODY	629	

MAIL_PKG	PACKAGE BODY	630	  CASE MAIL_PKG.protocol

MAIL_PKG	PACKAGE BODY	631	    WHEN MAIL_PKG.POP3 THEN

MAIL_PKG	PACKAGE BODY	632	        CMD(c,'STAT',status,answer);

MAIL_PKG	PACKAGE BODY	633	        cnt := to_number(trim(substr(answer,1,instr(answer,' '))));

MAIL_PKG	PACKAGE BODY	634	        --bytes := to_number(trim(substr(answer,instr(answer,' '))));

MAIL_PKG	PACKAGE BODY	635	        FOR mail_id IN 1 .. cnt

MAIL_PKG	PACKAGE BODY	636	        LOOP

MAIL_PKG	PACKAGE BODY	637	            GET_MAIL(mail_id,0);

MAIL_PKG	PACKAGE BODY	638	        END LOOP;

MAIL_PKG	PACKAGE BODY	639	    --WHEN MAIL_PKG.IMAP THEN

MAIL_PKG	PACKAGE BODY	640	     --   NULL;

MAIL_PKG	PACKAGE BODY	641	        -- ToDo

MAIL_PKG	PACKAGE BODY	642	    ELSE

MAIL_PKG	PACKAGE BODY	643	      RAISE_APPLICATION_ERROR(-20000,'This feauture is not realised yet in proto '||MAIL_PKG.protocol);

MAIL_PKG	PACKAGE BODY	644	  END CASE;

MAIL_PKG	PACKAGE BODY	645	 END;

MAIL_PKG	PACKAGE BODY	646	

MAIL_PKG	PACKAGE BODY	647	

MAIL_PKG	PACKAGE BODY	648	 PROCEDURE GET_MAIL(mail_id number,lines number default null) IS

MAIL_PKG	PACKAGE BODY	649	  answer varchar2(32767);

MAIL_PKG	PACKAGE BODY	650	  cnt number;

MAIL_PKG	PACKAGE BODY	651	  bytes number;

MAIL_PKG	PACKAGE BODY	652	  status varchar2(25);

MAIL_PKG	PACKAGE BODY	653	  message_body clob;

MAIL_PKG	PACKAGE BODY	654	  hdr_flag boolean;

MAIL_PKG	PACKAGE BODY	655	  hdr_entity varchar2(255);

MAIL_PKG	PACKAGE BODY	656	  hdr_entity_value varchar2(32717);

MAIL_PKG	PACKAGE BODY	657	  boundary varchar2(128);

MAIL_PKG	PACKAGE BODY	658	  part_header_flag boolean:=false;

MAIL_PKG	PACKAGE BODY	659	  any_boundary_found boolean:=false;

MAIL_PKG	PACKAGE BODY	660	  any_boundary_found_close boolean:=false;

MAIL_PKG	PACKAGE BODY	661	 BEGIN

MAIL_PKG	PACKAGE BODY	662	       IF MAIL_PKG.protocol != MAIL_PKG.POP3 THEN

MAIL_PKG	PACKAGE BODY	663	        RAISE_APPLICATION_ERROR(-20000,'This feauture is not realised yet in proto '||MAIL_PKG.protocol);

MAIL_PKG	PACKAGE BODY	664	       END IF;

MAIL_PKG	PACKAGE BODY	665	

MAIL_PKG	PACKAGE BODY	666	       CMD(c,'LIST '||mail_id,status,answer); -- get message size

MAIL_PKG	PACKAGE BODY	667	       MAILBOX(mail_id).bytes:=to_number(trim(substr(answer,instr(answer,' '))));

MAIL_PKG	PACKAGE BODY	668	

MAIL_PKG	PACKAGE BODY	669	       IF  MAILBOX(mail_id).bytes >= 1048576 THEN

MAIL_PKG	PACKAGE BODY	670	           PDEBUG('BUG: Message '|| mail_id ||' over 1Mb, ' ||  MAILBOX(mail_id).bytes || ' bytes' ,mail_pkg.debug_errors);

MAIL_PKG	PACKAGE BODY	671	       END IF;

MAIL_PKG	PACKAGE BODY	672	

MAIL_PKG	PACKAGE BODY	673	       CMD(c,CASE WHEN lines is NULL THEN 'RETR '||mail_id ELSE 'TOP '||mail_id||' 10' END,status,answer); -- read message headers

MAIL_PKG	PACKAGE BODY	674	       BEGIN

MAIL_PKG	PACKAGE BODY	675	         hdr_entity:='';hdr_entity_value:='';

MAIL_PKG	PACKAGE BODY	676	         hdr_flag := true;

MAIL_PKG	PACKAGE BODY	677	         if lines<>0 or lines is null then

MAIL_PKG	PACKAGE BODY	678	            MAILBOX(mail_id).message:='';

MAIL_PKG	PACKAGE BODY	679	            MAILBOX(mail_id).attachments := t_attachments();

MAIL_PKG	PACKAGE BODY	680	         end if;

MAIL_PKG	PACKAGE BODY	681	         dbms_lob.createtemporary(lob_loc => MAILBOX(mail_id).message, cache => true, dur => dbms_lob.call);

MAIL_PKG	PACKAGE BODY	682	         LOOP

MAIL_PKG	PACKAGE BODY	683	             answer :=utl_tcp.get_line(c, TRUE);  -- read result

MAIL_PKG	PACKAGE BODY	684	             EXIT WHEN answer = '.';

MAIL_PKG	PACKAGE BODY	685	             IF answer IS NULL THEN hdr_flag := false; END IF;

MAIL_PKG	PACKAGE BODY	686	             IF hdr_flag THEN

MAIL_PKG	PACKAGE BODY	687	                 IF ascii(substr(answer,0,1)) NOT IN (9,32) THEN

MAIL_PKG	PACKAGE BODY	688	                   hdr_entity := substr(answer,1,instr(answer,':')-1);

MAIL_PKG	PACKAGE BODY	689	                   MAILBOX(mail_id).HDR(hdr_entity):='';

MAIL_PKG	PACKAGE BODY	690	                   hdr_entity_value := substr(answer,instr(answer,':')+2);

MAIL_PKG	PACKAGE BODY	691	                 ELSE

MAIL_PKG	PACKAGE BODY	692	                   hdr_entity_value := substr(answer,2);

MAIL_PKG	PACKAGE BODY	693	                 END IF;

MAIL_PKG	PACKAGE BODY	694	

MAIL_PKG	PACKAGE BODY	695	                 PDEBUG('HDR:'|| answer);

MAIL_PKG	PACKAGE BODY	696	                 MAILBOX(mail_id).HDR(hdr_entity):= MAILBOX(mail_id).HDR(hdr_entity)

MAIL_PKG	PACKAGE BODY	697	                                                 || MIME_DECODE(hdr_entity_value);

MAIL_PKG	PACKAGE BODY	698	                 IF hdr_entity = 'Content-Type' THEN

MAIL_PKG	PACKAGE BODY	699	                   if instr(answer,'boundary="')>0 then

MAIL_PKG	PACKAGE BODY	700	                      extract_value(boundary,answer,'boundary');

MAIL_PKG	PACKAGE BODY	701	                   end if;

MAIL_PKG	PACKAGE BODY	702	                 END IF;

MAIL_PKG	PACKAGE BODY	703	             ELSE

MAIL_PKG	PACKAGE BODY	704	                 any_boundary_found := false;

MAIL_PKG	PACKAGE BODY	705	                 any_boundary_found_close := false;

MAIL_PKG	PACKAGE BODY	706	                 IF MAILBOX(mail_id).attachments.count>0 THEN

MAIL_PKG	PACKAGE BODY	707	                 FOR incls IN MAILBOX(mail_id).attachments.first .. MAILBOX(mail_id).attachments.last

MAIL_PKG	PACKAGE BODY	708	                 LOOP

MAIL_PKG	PACKAGE BODY	709	                   if answer = '--' || MAILBOX(mail_id).attachments(incls).boundary then

MAIL_PKG	PACKAGE BODY	710	                     any_boundary_found := true;

MAIL_PKG	PACKAGE BODY	711	                   end if;

MAIL_PKG	PACKAGE BODY	712	                   if answer = '--' || MAILBOX(mail_id).attachments(incls).boundary || '--' then

MAIL_PKG	PACKAGE BODY	713	                     any_boundary_found_close := true;

MAIL_PKG	PACKAGE BODY	714	                   end if;

MAIL_PKG	PACKAGE BODY	715	                 END LOOP;

MAIL_PKG	PACKAGE BODY	716	                 END IF;

MAIL_PKG	PACKAGE BODY	717	

MAIL_PKG	PACKAGE BODY	718	                 if boundary is not null and

MAIL_PKG	PACKAGE BODY	719	                    ( answer = '--' || boundary

MAIL_PKG	PACKAGE BODY	720	                      or

MAIL_PKG	PACKAGE BODY	721	                      any_boundary_found

MAIL_PKG	PACKAGE BODY	722	                    )

MAIL_PKG	PACKAGE BODY	723	                     then

MAIL_PKG	PACKAGE BODY	724	                    part_header_flag:=true;

MAIL_PKG	PACKAGE BODY	725	                    MAILBOX(mail_id).attachments.extend();

MAIL_PKG	PACKAGE BODY	726	                    dbms_lob.createtemporary(lob_loc => MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).content, cache => true, dur => dbms_lob.call);

MAIL_PKG	PACKAGE BODY	727	                 elsif boundary is not null and

MAIL_PKG	PACKAGE BODY	728	                   (  answer = '--' || boundary || '--'

MAIL_PKG	PACKAGE BODY	729	                     or

MAIL_PKG	PACKAGE BODY	730	                     any_boundary_found_close

MAIL_PKG	PACKAGE BODY	731	                   )

MAIL_PKG	PACKAGE BODY	732	                     then

MAIL_PKG	PACKAGE BODY	733	                       null;

MAIL_PKG	PACKAGE BODY	734	                 elsif part_header_flag and answer is null then

MAIL_PKG	PACKAGE BODY	735	                    part_header_flag:=false;

MAIL_PKG	PACKAGE BODY	736	                 else

MAIL_PKG	PACKAGE BODY	737	                    IF part_header_flag THEN

MAIL_PKG	PACKAGE BODY	738	                       IF ascii(substr(answer,0,1)) NOT IN (9,32) THEN

MAIL_PKG	PACKAGE BODY	739	                          hdr_entity := substr(answer,1,instr(answer,':')-1);

MAIL_PKG	PACKAGE BODY	740	                          MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).HDR(hdr_entity):='';

MAIL_PKG	PACKAGE BODY	741	                          hdr_entity_value := substr(answer,instr(answer,':')+2);

MAIL_PKG	PACKAGE BODY	742	                       ELSE

MAIL_PKG	PACKAGE BODY	743	                          hdr_entity_value := substr(answer,2);

MAIL_PKG	PACKAGE BODY	744	                       END IF;

MAIL_PKG	PACKAGE BODY	745	                       MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).HDR(hdr_entity):=

MAIL_PKG	PACKAGE BODY	746	                              MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).HDR(hdr_entity)

MAIL_PKG	PACKAGE BODY	747	                           || MIME_DECODE(hdr_entity_value);

MAIL_PKG	PACKAGE BODY	748	

MAIL_PKG	PACKAGE BODY	749	                       IF hdr_entity = 'Content-Type' THEN

MAIL_PKG	PACKAGE BODY	750	                          extract_value(MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).boundary,answer,'boundary');

MAIL_PKG	PACKAGE BODY	751	                          extract_value(MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).charset,answer,'charset');

MAIL_PKG	PACKAGE BODY	752	--                            PDEBUG(MAILBOX(mail_id).includes(MAILBOX(mail_id).includes.last).charset,mail_pkg.debug_messages);

MAIL_PKG	PACKAGE BODY	753	                       ELSIF hdr_entity = 'Content-Transfer-Encoding' THEN

MAIL_PKG	PACKAGE BODY	754	                            MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).ContentTransferEncoding := hdr_entity_value;

MAIL_PKG	PACKAGE BODY	755	                       END IF;

MAIL_PKG	PACKAGE BODY	756	

MAIL_PKG	PACKAGE BODY	757	                    ELSE

MAIL_PKG	PACKAGE BODY	758	

MAIL_PKG	PACKAGE BODY	759	                       -- BUG: BIG messages is very slow and prc can get "[SYS/PERM] Fatal error: Lost connection to input stream"

MAIL_PKG	PACKAGE BODY	760	                       IF MAILBOX(mail_id).bytes < 1048576 THEN

MAIL_PKG	PACKAGE BODY	761	                         IF MAILBOX(mail_id).attachments.count>0 THEN

MAIL_PKG	PACKAGE BODY	762	                            IF length(answer)>0 THEN

MAIL_PKG	PACKAGE BODY	763	                              DBMS_LOB.APPEND ( MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).content

MAIL_PKG	PACKAGE BODY	764	                              , PARSE_LINE( answer

MAIL_PKG	PACKAGE BODY	765	                                           ,MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).ContentTransferEncoding

MAIL_PKG	PACKAGE BODY	766	                                           ,MAILBOX(mail_id).attachments(MAILBOX(mail_id).attachments.last).charset)

MAIL_PKG	PACKAGE BODY	767	                              );

MAIL_PKG	PACKAGE BODY	768	                            END IF;

MAIL_PKG	PACKAGE BODY	769	                         ELSE

MAIL_PKG	PACKAGE BODY	770	                            IF length(answer)>0 THEN

MAIL_PKG	PACKAGE BODY	771	                              DBMS_LOB.APPEND ( MAILBOX(mail_id).message

MAIL_PKG	PACKAGE BODY	772	                              , --PARSE_LINE(

MAIL_PKG	PACKAGE BODY	773	                                            answer

MAIL_PKG	PACKAGE BODY	774	                                  --         ,ContentTransferEncoding

MAIL_PKG	PACKAGE BODY	775	                                    --       ,charset)

MAIL_PKG	PACKAGE BODY	776	                              );

MAIL_PKG	PACKAGE BODY	777	                            END IF;

MAIL_PKG	PACKAGE BODY	778	                         END IF;

MAIL_PKG	PACKAGE BODY	779	                       END IF;

MAIL_PKG	PACKAGE BODY	780	

MAIL_PKG	PACKAGE BODY	781	                    END IF;

MAIL_PKG	PACKAGE BODY	782	                    PDEBUG(CASE part_header_flag WHEN TRUE THEN 'H' ELSE 'B' END || '-BODY:'||answer);

MAIL_PKG	PACKAGE BODY	783	                 end if;

MAIL_PKG	PACKAGE BODY	784	             END IF;

MAIL_PKG	PACKAGE BODY	785	

MAIL_PKG	PACKAGE BODY	786	         END LOOP;

MAIL_PKG	PACKAGE BODY	787	       EXCEPTION

MAIL_PKG	PACKAGE BODY	788	         WHEN OTHERS THEN

MAIL_PKG	PACKAGE BODY	789	         PDEBUG('ERR: GET MESSAGE ' ||mail_id || ' ERROR ',mail_pkg.debug_errors);

MAIL_PKG	PACKAGE BODY	790	         RAISE;

MAIL_PKG	PACKAGE BODY	791	       END;

MAIL_PKG	PACKAGE BODY	792	       IF MAILBOX(mail_id).HDR.EXISTS('From') THEN

MAIL_PKG	PACKAGE BODY	793	          MAILBOX(mail_id).MailFrom := MAILBOX(mail_id).HDR('From');

MAIL_PKG	PACKAGE BODY	794	       END IF;

MAIL_PKG	PACKAGE BODY	795	       IF MAILBOX(mail_id).HDR.EXISTS('MailTo') THEN

MAIL_PKG	PACKAGE BODY	796	          MAILBOX(mail_id).MailTo := MAILBOX(mail_id).HDR('To');

MAIL_PKG	PACKAGE BODY	797	       END IF;

MAIL_PKG	PACKAGE BODY	798	       IF MAILBOX(mail_id).HDR.EXISTS('Return-Path') THEN

MAIL_PKG	PACKAGE BODY	799	          MAILBOX(mail_id).ReturnPath := MAILBOX(mail_id).HDR('Return-Path');

MAIL_PKG	PACKAGE BODY	800	       END IF;

MAIL_PKG	PACKAGE BODY	801	       IF MAILBOX(mail_id).HDR.EXISTS('Subject') THEN

MAIL_PKG	PACKAGE BODY	802	          MAILBOX(mail_id).Subject := MAILBOX(mail_id).HDR('Subject');

MAIL_PKG	PACKAGE BODY	803	       END IF;

MAIL_PKG	PACKAGE BODY	804	       IF MAILBOX(mail_id).HDR.EXISTS('Date') THEN

MAIL_PKG	PACKAGE BODY	805	          BEGIN

MAIL_PKG	PACKAGE BODY	806	            MAILBOX(mail_id).MailDate := TO_TIMESTAMP_TZ(MAILBOX(mail_id).HDR('Date'),'Dy, DD Mon YYYY HH24:MI:SS TZHTZM','NLS_DATE_LANGUAGE = ''american''');

MAIL_PKG	PACKAGE BODY	807	          EXCEPTION WHEN OTHERS THEN NULL; END;

MAIL_PKG	PACKAGE BODY	808	       END IF;

MAIL_PKG	PACKAGE BODY	809	 END;

MAIL_PKG	PACKAGE BODY	810	

MAIL_PKG	PACKAGE BODY	811	 PROCEDURE DELETE_MAIL(mail_id number) IS

MAIL_PKG	PACKAGE BODY	812	  answer varchar2(32767);

MAIL_PKG	PACKAGE BODY	813	  status varchar2(25);

MAIL_PKG	PACKAGE BODY	814	 BEGIN

MAIL_PKG	PACKAGE BODY	815	

MAIL_PKG	PACKAGE BODY	816	   CASE MAIL_PKG.protocol

MAIL_PKG	PACKAGE BODY	817	     WHEN MAIL_PKG.POP3 THEN

MAIL_PKG	PACKAGE BODY	818	       CMD(c,'DELE '||mail_id,status,answer);

MAIL_PKG	PACKAGE BODY	819	   ELSE

MAIL_PKG	PACKAGE BODY	820	       RAISE_APPLICATION_ERROR(-20000,'This feauture is not realised yet in proto '||MAIL_PKG.protocol);

MAIL_PKG	PACKAGE BODY	821	   END CASE;

MAIL_PKG	PACKAGE BODY	822	 END;

MAIL_PKG	PACKAGE BODY	823	

MAIL_PKG	PACKAGE BODY	824	BEGIN

MAIL_PKG	PACKAGE BODY	825	  MAIL_PKG.attachments:=MAIL_PKG.attach_list();

MAIL_PKG	PACKAGE BODY	826	END;
MAIL_PKG	PACKAGE	1	PACKAGE MAIL_PKG IS

MAIL_PKG	PACKAGE	2	-- --------------------------------------------------------------------------

MAIL_PKG	PACKAGE	3	-- Name         : MAIL_PKG

MAIL_PKG	PACKAGE	4	-- Author       : Nekrasov Alexander

MAIL_PKG	PACKAGE	5	-- Description  : Mail package, send email with attachments

MAIL_PKG	PACKAGE	6	-- Url          : https://github.com/chameleon82/oracle-scripts

MAIL_PKG	PACKAGE	7	-- Forum        : http://www.sql.ru/forum/actualthread.aspx?tid=729238

MAIL_PKG	PACKAGE	8	-- Ammedments   :

MAIL_PKG	PACKAGE	9	--   When         Who         What

MAIL_PKG	PACKAGE	10	--   ===========  ==========  =================================================

MAIL_PKG	PACKAGE	11	--   22-JAN-2010  Nekrasov A.  Initial Creation

MAIL_PKG	PACKAGE	12	--   11-OCT-2010  Nekrasov A.  Add Blob attachments

MAIL_PKG	PACKAGE	13	--   17-SEP-2012  Nekrasov A.  Add Receive Emails

MAIL_PKG	PACKAGE	14	--   22-JAN-2013  Nekrasov A.  Add Clob attachments

MAIL_PKG	PACKAGE	15	--   13-JUN-2013  Nekrasov A.  Add Disposition and Cid to attachments

MAIL_PKG	PACKAGE	16	-- --------------------------------------------------------------------------

MAIL_PKG	PACKAGE	17	

MAIL_PKG	PACKAGE	18	/* EXAMPLE:

MAIL_PKG	PACKAGE	19	

MAIL_PKG	PACKAGE	20	 1) Short text email

MAIL_PKG	PACKAGE	21	    BEGIN

MAIL_PKG	PACKAGE	22	      MAIL_PKG.SEND( 'a.ivanov@yourcomany.ru','Test subject', 'Some message!');

MAIL_PKG	PACKAGE	23	  END;

MAIL_PKG	PACKAGE	24	

MAIL_PKG	PACKAGE	25	 2) Send mail with text message over 32kbytes formed with CLOB

MAIL_PKG	PACKAGE	26	    DECLARE

MAIL_PKG	PACKAGE	27	      v clob:='Some text message over 32kb'||chr(10)||chr(13);

MAIL_PKG	PACKAGE	28	      t varchar2(255):=' The quick brown fox jumps over the lazy dog. '

MAIL_PKG	PACKAGE	29	                     ||' The quick brown fox jumps over the lazy dog. '

MAIL_PKG	PACKAGE	30	                     ||' The quick brown fox jumps over the lazy dog. '||chr(10)||chr(13);

MAIL_PKG	PACKAGE	31	    BEGIN

MAIL_PKG	PACKAGE	32	      for x in 1..300 loop

MAIL_PKG	PACKAGE	33	        v:=v||to_char(x)||' '||t;

MAIL_PKG	PACKAGE	34	      end loop;

MAIL_PKG	PACKAGE	35	      MAIL_PKG.SEND( 'a.ivanov@yourcompany.ru','Test subject', v);

MAIL_PKG	PACKAGE	36	    END ;

MAIL_PKG	PACKAGE	37	

MAIL_PKG	PACKAGE	38	 3) Send mail with message over 32kbytes formed with BLOB

MAIL_PKG	PACKAGE	39	    DECLARE

MAIL_PKG	PACKAGE	40	      vBlob BLOB;

MAIL_PKG	PACKAGE	41	      BEGIN

MAIL_PKG	PACKAGE	42	     SELECT file_data INTO vBlob FROM FND_LOBS WHERE FILE_ID = 161005;

MAIL_PKG	PACKAGE	43	     MAIL_PKG.ADD_ATTACHMENT( vBlob

MAIL_PKG	PACKAGE	44	                             ,'MessageOver32kb.htm'

MAIL_PKG	PACKAGE	45	                             ,'text/html'

MAIL_PKG	PACKAGE	46	                            );

MAIL_PKG	PACKAGE	47	      MAIL_PKG.SEND( 'a.ivanov@yourcomany.ru','Big message', NULL);

MAIL_PKG	PACKAGE	48	    END;

MAIL_PKG	PACKAGE	49	

MAIL_PKG	PACKAGE	50	 4) Extension Email with attacments

MAIL_PKG	PACKAGE	51	    DECLARE

MAIL_PKG	PACKAGE	52	      vBlob BLOB;

MAIL_PKG	PACKAGE	53	      vClob CLOB;

MAIL_PKG	PACKAGE	54	    BEGIN

MAIL_PKG	PACKAGE	55	     MAIL_PKG.SET_MAILSERVER ('localhost',25);

MAIL_PKG	PACKAGE	56	     MAIL_PKG.SET_AUTH ('a.nekrasov','password');

MAIL_PKG	PACKAGE	57	

MAIL_PKG	PACKAGE	58	     -- Add attachment from file

MAIL_PKG	PACKAGE	59	     MAIL_PKG.ADD_ATTACHMENT( 'ODPDIR'

MAIL_PKG	PACKAGE	60	                             ,'girl3d.jpeg'

MAIL_PKG	PACKAGE	61	                             ,'image/jpeg'

MAIL_PKG	PACKAGE	62	                            );

MAIL_PKG	PACKAGE	63	

MAIL_PKG	PACKAGE	64	     -- Add attachment from BLOB

MAIL_PKG	PACKAGE	65	     SELECT file_data INTO vBlob FROM FND_LOBS WHERE FILE_ID = 161005;

MAIL_PKG	PACKAGE	66	     MAIL_PKG.ADD_ATTACHMENT( vBlob

MAIL_PKG	PACKAGE	67	                             ,'ReportResult.htm'

MAIL_PKG	PACKAGE	68	                             ,'text/html'

MAIL_PKG	PACKAGE	69	                            );

MAIL_PKG	PACKAGE	70	

MAIL_PKG	PACKAGE	71	     -- Add attachment from CLOB

MAIL_PKG	PACKAGE	72	     vClob := '<HTML><TITLE>Clob Attachment Example</TITLE><BODY><b>This</b> is clob attachment example</BODY></HTML>';

MAIL_PKG	PACKAGE	73	     MAIL_PKG.ADD_ATTACHMENT( vClob

MAIL_PKG	PACKAGE	74	                             ,'ClobResult.htm'

MAIL_PKG	PACKAGE	75	                             ,'text/html'

MAIL_PKG	PACKAGE	76	                            );

MAIL_PKG	PACKAGE	77	

MAIL_PKG	PACKAGE	78	     MAIL_PKG.SEND( mailto => 'A. Ivanov <a.ivanov@yourcomany.ru>, O.Petrov <o.petrov@yourcompany.ru>'

MAIL_PKG	PACKAGE	79	                  , subject => 'Test subject'

MAIL_PKG	PACKAGE	80	                  , message => 'Some <b>bold</b> message!'

MAIL_PKG	PACKAGE	81	                  , mailfrom => 'Oracle Notify <no-reply@yourcompany.ru>'

MAIL_PKG	PACKAGE	82	                  , mimetype => 'text/html'

MAIL_PKG	PACKAGE	83	                  , priority => 1

MAIL_PKG	PACKAGE	84	                  );

MAIL_PKG	PACKAGE	85	    END;

MAIL_PKG	PACKAGE	86	

MAIL_PKG	PACKAGE	87	 5) Receive emails example:

MAIL_PKG	PACKAGE	88	

MAIL_PKG	PACKAGE	89	    BEGIN

MAIL_PKG	PACKAGE	90	       MAIL_PKG.DEBUG := TRUE;

MAIL_PKG	PACKAGE	91	       MAIL_PKG.SET_MAILSERVER ('yourmailserver.com');

MAIL_PKG	PACKAGE	92	       MAIL_PKG.SET_AUTH ('a.ivanov','mypass');

MAIL_PKG	PACKAGE	93	       MAIL_PKG.MAIL_CONNECT;

MAIL_PKG	PACKAGE	94	       DBMS_OUTPUT.PUT_LINE('Total mails count:'||mail_pkg.mailbox.count);

MAIL_PKG	PACKAGE	95	       --  MAIL_PKG.GET_HEADERS; -- Get headers for all mails

MAIL_PKG	PACKAGE	96	

MAIL_PKG	PACKAGE	97	       FOR i IN 1..LEAST(10,mail_pkg.mailbox.count) LOOP -- GET FIRST 10 mails

MAIL_PKG	PACKAGE	98	         MAIL_PKG.GET_MAIL(i,0); -- GET MAIL HEADER

MAIL_PKG	PACKAGE	99	         DBMS_OUTPUT.PUT_LINE('MAIL:'||i || ' (' ||trunc(mail_pkg.mailbox(i).bytes/1024) || 'Kbytes) From:'||mail_pkg.mailbox(i).MailFrom

MAIL_PKG	PACKAGE	100	                              ||' Subject:'||mail_pkg.mailbox(i).Subject

MAIL_PKG	PACKAGE	101	                              );

MAIL_PKG	PACKAGE	102	

MAIL_PKG	PACKAGE	103	         IF mail_pkg.mailbox(i).bytes>1000000 THEN

MAIL_PKG	PACKAGE	104	           -- Delete mails over 1Mb

MAIL_PKG	PACKAGE	105	           MAIL_PKG.DELETE_MAIL(i);

MAIL_PKG	PACKAGE	106	         ELSE

MAIL_PKG	PACKAGE	107	           MAIL_PKG.GET_MAIL(i);

MAIL_PKG	PACKAGE	108	           DBMS_OUTPUT.PUT_LINE(substr('    Text:' ||mail_pkg.mailbox(i).message,1,255) );

MAIL_PKG	PACKAGE	109	           DBMS_OUTPUT.PUT_LINE('    Attachments:' ||mail_pkg.mailbox(i).attachments.count);

MAIL_PKG	PACKAGE	110	

MAIL_PKG	PACKAGE	111	           IF mail_pkg.mailbox(i).attachments.count>0 THEN

MAIL_PKG	PACKAGE	112	             FOR att IN 1..mail_pkg.mailbox(i).attachments.count LOOP

MAIL_PKG	PACKAGE	113	               -- Real Attachments

MAIL_PKG	PACKAGE	114	               IF mail_pkg.mailbox(i).attachments(att).hdr.exists('Content-Disposition')

MAIL_PKG	PACKAGE	115	                 AND INSTR(mail_pkg.mailbox(i).attachments(att).hdr('Content-Disposition'),'attachment')>0

MAIL_PKG	PACKAGE	116	               THEN

MAIL_PKG	PACKAGE	117	                 DBMS_OUTPUT.PUT_LINE('    filename: '

MAIL_PKG	PACKAGE	118	                    ||mail_pkg.extract_value(mail_pkg.mailbox(i).attachments(att).hdr('Content-Disposition'),'filename')

MAIL_PKG	PACKAGE	119	                    ||', about '||trunc(dbms_lob.getlength(mail_pkg.mailbox(i).attachments(att).content)/1024) ||'Kbytes'

MAIL_PKG	PACKAGE	120	                   );

MAIL_PKG	PACKAGE	121	                 -- You can convert this CLOB into BLOB ans save it into database or as file

MAIL_PKG	PACKAGE	122	                 -- mail_pkg.mailbox(i).attachments(att).content

MAIL_PKG	PACKAGE	123	

MAIL_PKG	PACKAGE	124	               END IF;

MAIL_PKG	PACKAGE	125	               -- Preview includes and text-attachments

MAIL_PKG	PACKAGE	126	               IF  mail_pkg.mailbox(i).attachments(att).hdr.exists('Content-Type') THEN

MAIL_PKG	PACKAGE	127	                 IF  INSTR(mail_pkg.mailbox(i).attachments(att).hdr('Content-Type'),'text')>0 THEN

MAIL_PKG	PACKAGE	128	                   DBMS_OUTPUT.PUT_LINE(substr('    PreviewAttachmentText:' ||mail_pkg.mailbox(i).attachments(att).content,1,255) );

MAIL_PKG	PACKAGE	129	                 END IF;

MAIL_PKG	PACKAGE	130	               END IF;

MAIL_PKG	PACKAGE	131	             END LOOP;

MAIL_PKG	PACKAGE	132	           END IF;

MAIL_PKG	PACKAGE	133	         END IF;

MAIL_PKG	PACKAGE	134	       END LOOP;

MAIL_PKG	PACKAGE	135	

MAIL_PKG	PACKAGE	136	       MAIL_PKG.MAIL_DISCONNECT;

MAIL_PKG	PACKAGE	137	    EXCEPTION WHEN OTHERS THEN

MAIL_PKG	PACKAGE	138	      -- ANYCASE YOU MUST CLOSE CONNECTION

MAIL_PKG	PACKAGE	139	      MAIL_PKG.MAIL_DISCONNECT;

MAIL_PKG	PACKAGE	140	    END;

MAIL_PKG	PACKAGE	141	*/

MAIL_PKG	PACKAGE	142	

MAIL_PKG	PACKAGE	143	 POP3 CONSTANT VARCHAR2(4):='POP3';

MAIL_PKG	PACKAGE	144	 SMTP CONSTANT VARCHAR2(4):='SMTP';

MAIL_PKG	PACKAGE	145	 IMAP CONSTANT VARCHAR2(4):='IMAP';

MAIL_PKG	PACKAGE	146	

MAIL_PKG	PACKAGE	147	 DEBUG_ALL CONSTANT INT := 0;

MAIL_PKG	PACKAGE	148	 DEBUG_MESSAGES CONSTANT INT := 1;

MAIL_PKG	PACKAGE	149	 DEBUG_WARNINGS CONSTANT INT := 2;

MAIL_PKG	PACKAGE	150	 DEBUG_ERRORS CONSTANT INT := 3;

MAIL_PKG	PACKAGE	151	

MAIL_PKG	PACKAGE	152	

MAIL_PKG	PACKAGE	153	 DISPOSITION_ATTACHMENT CONSTANT VARCHAR2(10) := 'attachment';

MAIL_PKG	PACKAGE	154	 DISPOSITION_INLINE     CONSTANT VARCHAR2(10) := 'inline';

MAIL_PKG	PACKAGE	155	

MAIL_PKG	PACKAGE	156	 MIME_PLAIN CONSTANT VARCHAR2(10) := 'text/plain';

MAIL_PKG	PACKAGE	157	 MIME_HTML  CONSTANT VARCHAR2(10) := 'text/html';

MAIL_PKG	PACKAGE	158	

MAIL_PKG	PACKAGE	159	 DEBUG BOOLEAN := FALSE;

MAIL_PKG	PACKAGE	160	 DEBUG_LEVEL NUMBER := DEBUG_WARNINGS;

MAIL_PKG	PACKAGE	161	 LAST_ATTACHMENT_ID VARCHAR2(32) := NULL;

MAIL_PKG	PACKAGE	162	

MAIL_PKG	PACKAGE	163	 -- SET_MAILSERVER:

MAIL_PKG	PACKAGE	164	 --  Set up mail server for send emails. Default Localhost

MAIL_PKG	PACKAGE	165	 -- IN

MAIL_PKG	PACKAGE	166	 -- MAILSERVER is ip or url of mail server

MAIL_PKG	PACKAGE	167	 -- MAILPORT is port for mail server. Default 25

MAIL_PKG	PACKAGE	168	 PROCEDURE SET_MAILSERVER ( mailserver varchar2

MAIL_PKG	PACKAGE	169	                          , mailport number default 25

MAIL_PKG	PACKAGE	170	                          );

MAIL_PKG	PACKAGE	171	

MAIL_PKG	PACKAGE	172	 -- SET_AUTH

MAIL_PKG	PACKAGE	173	 --  Set authorization on smtp server

MAIL_PKG	PACKAGE	174	 -- IN

MAIL_PKG	PACKAGE	175	 -- AUTH_USER is authorization user

MAIL_PKG	PACKAGE	176	 -- AUTH_PASS is password for AUTH_USER

MAIL_PKG	PACKAGE	177	 --

MAIL_PKG	PACKAGE	178	 -- Execute SET_AUTH(); -- for disable authorization

MAIL_PKG	PACKAGE	179	 PROCEDURE SET_AUTH (  auth_user varchar2 default null

MAIL_PKG	PACKAGE	180	                     , auth_pass varchar2 default null

MAIL_PKG	PACKAGE	181	                          );

MAIL_PKG	PACKAGE	182	

MAIL_PKG	PACKAGE	183	 -- ENCODE:

MAIL_PKG	PACKAGE	184	 --  Encodes string to email compatible view

MAIL_PKG	PACKAGE	185	 -- IN

MAIL_PKG	PACKAGE	186	 -- STR is string to convert

MAIL_PKG	PACKAGE	187	 -- TP is type of convert:

MAIL_PKG	PACKAGE	188	 --    B - is base64 encoding

MAIL_PKG	PACKAGE	189	 FUNCTION ENCODE( str IN VARCHAR2

MAIL_PKG	PACKAGE	190	                , tp IN VARCHAR2 DEFAULT 'Q') RETURN VARCHAR2;

MAIL_PKG	PACKAGE	191	

MAIL_PKG	PACKAGE	192	 -- PREPARE

MAIL_PKG	PACKAGE	193	 --  Prepare configs for email.

MAIL_PKG	PACKAGE	194	 PROCEDURE PREPARE;

MAIL_PKG	PACKAGE	195	

MAIL_PKG	PACKAGE	196	 -- ADD_RCPT

MAIL_PKG	PACKAGE	197	 --  Add recipient to recipients list exploded by  ','

MAIL_PKG	PACKAGE	198	 -- STR is variable with recipients

MAIL_PKG	PACKAGE	199	 -- RCPTMAIL is recipient mail added to STR

MAIL_PKG	PACKAGE	200	 -- RCPTNAME is recipient name added to STR

MAIL_PKG	PACKAGE	201	 -- Example: str='user1@domain.ru' rcptmail='user2@domain.ru'

MAIL_PKG	PACKAGE	202	 --  after => str='user1@domain.ru, user2@domain.ru'

MAIL_PKG	PACKAGE	203	 PROCEDURE ADD_RCPT( str IN OUT VARCHAR2

MAIL_PKG	PACKAGE	204	                   , rcptmail IN VARCHAR2

MAIL_PKG	PACKAGE	205	                   , rcptname IN VARCHAR2 DEFAULT NULL);

MAIL_PKG	PACKAGE	206	

MAIL_PKG	PACKAGE	207	 -- ADD_ATTACHMENT

MAIL_PKG	PACKAGE	208	 --  Add file-attachment to attachments list to email

MAIL_PKG	PACKAGE	209	 -- IN

MAIL_PKG	PACKAGE	210	 -- DIRNAME is logical link to access physical directories of server. See DBA_DIRECTORIES table

MAIL_PKG	PACKAGE	211	 -- FILENAME is name of file to attach

MAIL_PKG	PACKAGE	212	 -- MIMETYPE is mime-type for sended file

MAIL_PKG	PACKAGE	213	 -- NAME is name for attached file for email. Default eq FILENAME

MAIL_PKG	PACKAGE	214	 PROCEDURE ADD_ATTACHMENT ( dirname IN varchar2

MAIL_PKG	PACKAGE	215	                          , filename IN varchar2

MAIL_PKG	PACKAGE	216	                          , mimetype IN varchar2 DEFAULT 'text/plain'

MAIL_PKG	PACKAGE	217	                          , name IN varchar2 DEFAULT NULL

MAIL_PKG	PACKAGE	218	                          , disposition IN varchar2 DEFAULT DISPOSITION_ATTACHMENT

MAIL_PKG	PACKAGE	219	                           );

MAIL_PKG	PACKAGE	220	

MAIL_PKG	PACKAGE	221	 -- ADD_ATTACHMENT

MAIL_PKG	PACKAGE	222	 --  Add blob-attachment to attachments list to email

MAIL_PKG	PACKAGE	223	 -- IN

MAIL_PKG	PACKAGE	224	 -- BLOBLOC - Blob locator for attached blob

MAIL_PKG	PACKAGE	225	 -- FILENAME is name of file to attach

MAIL_PKG	PACKAGE	226	 -- MIMETYPE is mime-type for sended file

MAIL_PKG	PACKAGE	227	 PROCEDURE ADD_ATTACHMENT ( blobloc IN blob

MAIL_PKG	PACKAGE	228	                          , filename IN varchar2

MAIL_PKG	PACKAGE	229	                          , mimetype IN varchar2 DEFAULT 'text/html'

MAIL_PKG	PACKAGE	230	                          , disposition IN varchar2 DEFAULT DISPOSITION_ATTACHMENT

MAIL_PKG	PACKAGE	231	                           );

MAIL_PKG	PACKAGE	232	

MAIL_PKG	PACKAGE	233	 -- ADD_ATTACHMENT

MAIL_PKG	PACKAGE	234	 --  Add clob-attachment to attachments list to email

MAIL_PKG	PACKAGE	235	 -- IN

MAIL_PKG	PACKAGE	236	 -- CLOBLOC - Clob locator for attached clob

MAIL_PKG	PACKAGE	237	 -- FILENAME is name of file to attach

MAIL_PKG	PACKAGE	238	 -- MIMETYPE is mime-type for sended file

MAIL_PKG	PACKAGE	239	 PROCEDURE ADD_ATTACHMENT ( clobloc IN clob

MAIL_PKG	PACKAGE	240	                          , filename IN varchar2

MAIL_PKG	PACKAGE	241	                          , mimetype IN varchar2 DEFAULT 'text/html'

MAIL_PKG	PACKAGE	242	                          , disposition IN varchar2 DEFAULT DISPOSITION_ATTACHMENT

MAIL_PKG	PACKAGE	243	                           );

MAIL_PKG	PACKAGE	244	 -- SEND

MAIL_PKG	PACKAGE	245	 --  Send email with attachments to recipient

MAIL_PKG	PACKAGE	246	 -- IN

MAIL_PKG	PACKAGE	247	 -- MAILTO is name and email addresses of recipients ( ex. "user@domain.com"

MAIL_PKG	PACKAGE	248	 --       , "User Name <user@domain.com>", "User1 <user1@domain>, User2 <user2@domain>")

MAIL_PKG	PACKAGE	249	 -- SUBJECT is subject of email

MAIL_PKG	PACKAGE	250	 -- MESSAGE is message of email

MAIL_PKG	PACKAGE	251	 -- MAILFROM is name and email of sender. (ex. "no-reply@domain", "Notify system <no-reply@domain>")

MAIL_PKG	PACKAGE	252	 -- MIMETYPE is mime-type of message. Available values is 'text/plain' and 'text/html'

MAIL_PKG	PACKAGE	253	 -- PRIORITY is priority of mail (1 - High, 2 - Highest, 3 - Normal, 4 - Lowest, 5 - Low)

MAIL_PKG	PACKAGE	254	 PROCEDURE SEND ( mailto IN VARCHAR2

MAIL_PKG	PACKAGE	255	                , subject IN VARCHAR2

MAIL_PKG	PACKAGE	256	                , message IN CLOB

MAIL_PKG	PACKAGE	257	                , mailfrom IN VARCHAR2 DEFAULT NULL

MAIL_PKG	PACKAGE	258	                , mimetype IN VARCHAR2 DEFAULT 'text/plain'

MAIL_PKG	PACKAGE	259	                , priority IN NUMBER DEFAULT NULL

MAIL_PKG	PACKAGE	260	                , cc       IN VARCHAR2 DEFAULT NULL

MAIL_PKG	PACKAGE	261	                );

MAIL_PKG	PACKAGE	262	

MAIL_PKG	PACKAGE	263	 FUNCTION DECODE_CHARSET (str IN VARCHAR2, charset varchar2) RETURN VARCHAR2;

MAIL_PKG	PACKAGE	264	

MAIL_PKG	PACKAGE	265	 FUNCTION MIME_DECODE(str IN VARCHAR2) RETURN VARCHAR2;

MAIL_PKG	PACKAGE	266	

MAIL_PKG	PACKAGE	267	 FUNCTION extract_value(str IN VARCHAR2,entity IN VARCHAR2) RETURN VARCHAR2;

MAIL_PKG	PACKAGE	268	

MAIL_PKG	PACKAGE	269	 TYPE T_HDR IS TABLE OF VARCHAR2(32717) INDEX BY VARCHAR2(2555);

MAIL_PKG	PACKAGE	270	

MAIL_PKG	PACKAGE	271	 TYPE T_ATTACHMENT IS RECORD ( boundary varchar2(255)

MAIL_PKG	PACKAGE	272	                          , ContentTransferEncoding varchar2(25)

MAIL_PKG	PACKAGE	273	                          , charset varchar2(25)

MAIL_PKG	PACKAGE	274	                          , hdr t_hdr

MAIL_PKG	PACKAGE	275	                          , content clob

MAIL_PKG	PACKAGE	276	                           );

MAIL_PKG	PACKAGE	277	

MAIL_PKG	PACKAGE	278	 TYPE T_ATTACHMENTS IS TABLE OF T_ATTACHMENT;

MAIL_PKG	PACKAGE	279	

MAIL_PKG	PACKAGE	280	 TYPE MESSAGE IS RECORD( hdr              t_hdr

MAIL_PKG	PACKAGE	281	                        ,MailFrom         varchar2(32717)

MAIL_PKG	PACKAGE	282	                        ,MailTo           varchar2(32717)

MAIL_PKG	PACKAGE	283	                        ,ReturnPath       varchar2(32717)

MAIL_PKG	PACKAGE	284	                        ,Subject          varchar2(32717)

MAIL_PKG	PACKAGE	285	                        ,MailDate         DATE

MAIL_PKG	PACKAGE	286	                        ,message          CLOB

MAIL_PKG	PACKAGE	287	                        ,bytes            number

MAIL_PKG	PACKAGE	288	                        ,ContentTransferEncoding varchar2(25)

MAIL_PKG	PACKAGE	289	                        ,charset          varchar2(25)

MAIL_PKG	PACKAGE	290	                        ,attachments         t_attachments := t_attachments()

MAIL_PKG	PACKAGE	291	                       );

MAIL_PKG	PACKAGE	292	

MAIL_PKG	PACKAGE	293	 TYPE MAILBOXT IS TABLE OF MESSAGE INDEX BY PLS_INTEGER;

MAIL_PKG	PACKAGE	294	 MAILBOX MAILBOXT;

MAIL_PKG	PACKAGE	295	

MAIL_PKG	PACKAGE	296	 FUNCTION PARSE_LINE (line varchar2, ContentTransferEncoding varchar2, charset varchar2 default null) RETURN varchar2;

MAIL_PKG	PACKAGE	297	

MAIL_PKG	PACKAGE	298	 PROCEDURE MAIL_CONNECT(protocol varchar2 default POP3);

MAIL_PKG	PACKAGE	299	

MAIL_PKG	PACKAGE	300	 PROCEDURE MAIL_DISCONNECT;

MAIL_PKG	PACKAGE	301	

MAIL_PKG	PACKAGE	302	 PROCEDURE GET_HEADERS;

MAIL_PKG	PACKAGE	303	

MAIL_PKG	PACKAGE	304	 PROCEDURE GET_MAIL(mail_id number,lines number default null);

MAIL_PKG	PACKAGE	305	

MAIL_PKG	PACKAGE	306	 PROCEDURE DELETE_MAIL(mail_id number);

MAIL_PKG	PACKAGE	307	

MAIL_PKG	PACKAGE	308	END MAIL_PKG;
MAGIC_TP_SELECT_LU	TRIGGER	1	TRIGGER "PERSIK"."MAGIC_TP_SELECT_LU" 

MAGIC_TP_SELECT_LU	TRIGGER	2	BEFORE INSERT OR UPDATE

MAGIC_TP_SELECT_LU	TRIGGER	3	ON magic_TP_SELECT REFERENCING NEW AS NEW OLD AS OLD

MAGIC_TP_SELECT_LU	TRIGGER	4	FOR EACH ROW

MAGIC_TP_SELECT_LU	TRIGGER	5	BEGIN

MAGIC_TP_SELECT_LU	TRIGGER	6	   :NEW.lu := SYSDATE;

MAGIC_TP_SELECT_LU	TRIGGER	7	END magic_TP_SELECT_LU; 

MAGIC_TP_SELECT_LU	TRIGGER	8	

MAGIC_TP_SELECT_LU	TRIGGER	9	

MAGIC_TP_SELECT_LU	TRIGGER	10	

MAGIC_TP_SELECT_GU	TRIGGER	1	TRIGGER "PERSIK"."MAGIC_TP_SELECT_GU" 

MAGIC_TP_SELECT_GU	TRIGGER	2	BEFORE UPDATE

MAGIC_TP_SELECT_GU	TRIGGER	3	ON PERSIK.MAGIC_TP_SELECT

MAGIC_TP_SELECT_GU	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

MAGIC_TP_SELECT_GU	TRIGGER	5	FOR EACH ROW

MAGIC_TP_SELECT_GU	TRIGGER	6	BEGIN

MAGIC_TP_SELECT_GU	TRIGGER	7	   IF :NEW.ok_ts_exp_not_full = 0

MAGIC_TP_SELECT_GU	TRIGGER	8	   THEN

MAGIC_TP_SELECT_GU	TRIGGER	9	      :NEW.ok_ts_exp_not_full_date := NULL;

MAGIC_TP_SELECT_GU	TRIGGER	10	      :NEW.ok_ts_exp_not_full_tn := NULL;

MAGIC_TP_SELECT_GU	TRIGGER	11	   END IF;

MAGIC_TP_SELECT_GU	TRIGGER	12	

MAGIC_TP_SELECT_GU	TRIGGER	13	   IF :NEW.ok_super = 0

MAGIC_TP_SELECT_GU	TRIGGER	14	   THEN

MAGIC_TP_SELECT_GU	TRIGGER	15	      :NEW.ok_super_date := NULL;

MAGIC_TP_SELECT_GU	TRIGGER	16	      :NEW.ok_super_tn := NULL;

MAGIC_TP_SELECT_GU	TRIGGER	17	   END IF;

MAGIC_TP_SELECT_GU	TRIGGER	18	END MAGIC_TP_SELECT_GU; 

MAGIC_TP_SELECT_GU	TRIGGER	19	

MAGIC_TP_SELECT_GU	TRIGGER	20	

MAGIC_TP_SELECT_GU	TRIGGER	21	

MAGIC_OK	TRIGGER	1	TRIGGER "PERSIK"."MAGIC_OK" 

MAGIC_OK	TRIGGER	2	   BEFORE UPDATE

MAGIC_OK	TRIGGER	3	   ON magic_TP_SELECT    REFERENCING NEW AS NEW OLD AS OLD

MAGIC_OK	TRIGGER	4	   FOR EACH ROW

MAGIC_OK	TRIGGER	5	BEGIN

MAGIC_OK	TRIGGER	6	   IF :NEW.ok_ts = 0

MAGIC_OK	TRIGGER	7	   THEN

MAGIC_OK	TRIGGER	8	      :NEW.ok_ts_date := NULL;

MAGIC_OK	TRIGGER	9	   END IF;

MAGIC_OK	TRIGGER	10	END magic_ok; 

MAGIC_OK	TRIGGER	11	

MAGIC_OK	TRIGGER	12	

MAGIC_OK	TRIGGER	13	

LANG_NEW	TRIGGER	1	TRIGGER lang_new

LANG_NEW	TRIGGER	2	   BEFORE INSERT

LANG_NEW	TRIGGER	3	   ON lang

LANG_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

LANG_NEW	TRIGGER	5	   FOR EACH ROW

LANG_NEW	TRIGGER	6	BEGIN

LANG_NEW	TRIGGER	7	   :NEW.id := NVL (:NEW.id, seq_all.NEXTVAL);

LANG_NEW	TRIGGER	8	END;
LANG_LU	TRIGGER	1	TRIGGER lang_lu

LANG_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

LANG_LU	TRIGGER	3	   ON lang

LANG_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

LANG_LU	TRIGGER	5	   FOR EACH ROW

LANG_LU	TRIGGER	6	BEGIN

LANG_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

LANG_LU	TRIGGER	8	END;
KK_FLT_NETS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."KK_FLT_NETS_LAST_UPDATE" 

KK_FLT_NETS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

KK_FLT_NETS_LAST_UPDATE	TRIGGER	3	   ON PERSIK.KK_FLT_NETS    REFERENCING NEW AS NEW OLD AS OLD

KK_FLT_NETS_LAST_UPDATE	TRIGGER	4	   FOR EACH ROW

KK_FLT_NETS_LAST_UPDATE	TRIGGER	5	BEGIN

KK_FLT_NETS_LAST_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

KK_FLT_NETS_LAST_UPDATE	TRIGGER	7	END kk_flt_nets_last_update;

KK_FLT_NETS_LAST_UPDATE	TRIGGER	8	

KK_FLT_NETS_LAST_UPDATE	TRIGGER	9	

KK_FLT_NETS_LAST_UPDATE	TRIGGER	10	

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."KK_FLT_NETS_DETAIL_LAST_UPDATE" 

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	3	   ON PERSIK.KK_FLT_NETS_DETAIL

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	6	BEGIN

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	8	END KK_FLT_NETS_DETAIL_last_update;

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	9	

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	10	

KK_FLT_NETS_DETAIL_LAST_UPDATE	TRIGGER	11	

IS_NUMBER	FUNCTION	1	FUNCTION is_number (p_string IN VARCHAR2)

IS_NUMBER	FUNCTION	2	   RETURN INT

IS_NUMBER	FUNCTION	3	IS

IS_NUMBER	FUNCTION	4	   v_num   NUMBER;

IS_NUMBER	FUNCTION	5	BEGIN

IS_NUMBER	FUNCTION	6	   v_num := TO_NUMBER (p_string);

IS_NUMBER	FUNCTION	7	   RETURN 1;

IS_NUMBER	FUNCTION	8	EXCEPTION

IS_NUMBER	FUNCTION	9	   WHEN VALUE_ERROR

IS_NUMBER	FUNCTION	10	   THEN

IS_NUMBER	FUNCTION	11	      RETURN 0;

IS_NUMBER	FUNCTION	12	END;
INN_NOT_REPORTMA	FUNCTION	1	FUNCTION        INN_not_ReportMA (p_tn IN INTEGER)

INN_NOT_REPORTMA	FUNCTION	2	   RETURN INTEGER

INN_NOT_REPORTMA	FUNCTION	3	IS

INN_NOT_REPORTMA	FUNCTION	4	   param    VARCHAR2 (4000);

INN_NOT_REPORTMA	FUNCTION	5	   result   INTEGER;

INN_NOT_REPORTMA	FUNCTION	6	BEGIN

INN_NOT_REPORTMA	FUNCTION	7	   SELECT val_string

INN_NOT_REPORTMA	FUNCTION	8	     INTO param

INN_NOT_REPORTMA	FUNCTION	9	     FROM parameters

INN_NOT_REPORTMA	FUNCTION	10	    WHERE param_name = 'INN_not_ReportMA' AND dpt_id = 1;

INN_NOT_REPORTMA	FUNCTION	11	

INN_NOT_REPORTMA	FUNCTION	12	   IF INSTR (param, p_tn) = 0

INN_NOT_REPORTMA	FUNCTION	13	   THEN

INN_NOT_REPORTMA	FUNCTION	14	      result := 0;

INN_NOT_REPORTMA	FUNCTION	15	   ELSE

INN_NOT_REPORTMA	FUNCTION	16	      result := 1;

INN_NOT_REPORTMA	FUNCTION	17	   END IF;

INN_NOT_REPORTMA	FUNCTION	18	

INN_NOT_REPORTMA	FUNCTION	19	   RETURN result;

INN_NOT_REPORTMA	FUNCTION	20	END;
INFORM_RASSILKA	PROCEDURE	1	PROCEDURE          "INFORM_RASSILKA" 

INFORM_RASSILKA	PROCEDURE	2	IS

INFORM_RASSILKA	PROCEDURE	3	BEGIN

INFORM_RASSILKA	PROCEDURE	4	   FOR a

INFORM_RASSILKA	PROCEDURE	5	      IN (  SELECT DISTINCT

INFORM_RASSILKA	PROCEDURE	6	                   ul.pos_id,

INFORM_RASSILKA	PROCEDURE	7	                   ul.pos_name,

INFORM_RASSILKA	PROCEDURE	8	                   ul.e_mail,

INFORM_RASSILKA	PROCEDURE	9	                   ul.fio,

INFORM_RASSILKA	PROCEDURE	10	                      'Здравствуйте, '

INFORM_RASSILKA	PROCEDURE	11	                   || ul.fio

INFORM_RASSILKA	PROCEDURE	12	                   || '<br>. Информируем Вас о сроках подачи отчетности на '

INFORM_RASSILKA	PROCEDURE	13	                   || TO_CHAR (ADD_MONTHS (TRUNC (SYSDATE, 'mm'), 1), 'month')

INFORM_RASSILKA	PROCEDURE	14	                   || '<br>'

INFORM_RASSILKA	PROCEDURE	15	                   || pm.pos_msg

INFORM_RASSILKA	PROCEDURE	16	                      pos_msg

INFORM_RASSILKA	PROCEDURE	17	              FROM user_list ul, pos_msg pm

INFORM_RASSILKA	PROCEDURE	18	             WHERE     ul.access_ocenka = 1

INFORM_RASSILKA	PROCEDURE	19	                   AND ul.pos_id = pm.pos_id(+)

INFORM_RASSILKA	PROCEDURE	20	                   AND pm.pos_msg IS NOT NULL

INFORM_RASSILKA	PROCEDURE	21	                   AND ul.e_mail IS NOT NULL

INFORM_RASSILKA	PROCEDURE	22	          ORDER BY ul.pos_name)

INFORM_RASSILKA	PROCEDURE	23	   LOOP

INFORM_RASSILKA	PROCEDURE	24	      PR_SENDMAIL (a.e_mail,

INFORM_RASSILKA	PROCEDURE	25	                   'Сроки подачи отчетности',

INFORM_RASSILKA	PROCEDURE	26	                   a.pos_msg);

INFORM_RASSILKA	PROCEDURE	27	   END LOOP;

INFORM_RASSILKA	PROCEDURE	28	END;

INFORM_RASSILKA	PROCEDURE	29	 

INFORM_RASSILKA	PROCEDURE	30	 

INFORM_RASSILKA	PROCEDURE	31	 
GUVIKI_FIO_ETA	TRIGGER	1	TRIGGER "PERSIK"."GUVIKI_FIO_ETA" 

GUVIKI_FIO_ETA	TRIGGER	2	   BEFORE INSERT OR UPDATE OF fio_eta

GUVIKI_FIO_ETA	TRIGGER	3	   ON PERSIK.GUVIKI    REFERENCING NEW AS NEW OLD AS OLD

GUVIKI_FIO_ETA	TRIGGER	4	   FOR EACH ROW

GUVIKI_FIO_ETA	TRIGGER	5	BEGIN

GUVIKI_FIO_ETA	TRIGGER	6	   :NEW.fio_eta := REPLACE (:new.fio_eta, ' ', '_');

GUVIKI_FIO_ETA	TRIGGER	7	END;

GUVIKI_FIO_ETA	TRIGGER	8	

GUVIKI_FIO_ETA	TRIGGER	9	

GUVIKI_FIO_ETA	TRIGGER	10	

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	1	TRIGGER PERSIK.GIVE_RIGHTS_ON_NEW_OBJECTS

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	2	   AFTER CREATE

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	3	   ON SCHEMA

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	4	DECLARE

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	5	   l_jobno   PLS_INTEGER;

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	6	BEGIN

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	7	   IF SYS.DICTIONARY_OBJ_TYPE IN ('TABLE', 'VIEW')

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	8	   THEN

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	9	      DBMS_JOB.submit (

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	10	         l_jobno,

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	11	         'BEGIN give_rights( ''' || ora_dict_obj_name || ''' ); END;',

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	12	         SYSDATE + INTERVAL '1' SECOND);

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	13	   END IF;

GIVE_RIGHTS_ON_NEW_OBJECTS	TRIGGER	14	END;
GIVE_RIGHTS	PROCEDURE	1	PROCEDURE give_rights (ora_dict_obj_name IN VARCHAR2)

GIVE_RIGHTS	PROCEDURE	2	AS

GIVE_RIGHTS	PROCEDURE	3	BEGIN

GIVE_RIGHTS	PROCEDURE	4	   EXECUTE IMMEDIATE

GIVE_RIGHTS	PROCEDURE	5	         'GRANT SELECT,REFERENCES ON '

GIVE_RIGHTS	PROCEDURE	6	      || ora_dict_obj_name

GIVE_RIGHTS	PROCEDURE	7	      || ' TO APP0,PERSIK_RO';

GIVE_RIGHTS	PROCEDURE	8	END;
GET_VAC_REPL	FUNCTION	1	FUNCTION        GET_VAC_REPL (p_tn         IN INTEGER,

GET_VAC_REPL	FUNCTION	2	                                                table_name   IN VARCHAR)

GET_VAC_REPL	FUNCTION	3	   RETURN INTEGER

GET_VAC_REPL	FUNCTION	4	IS

GET_VAC_REPL	FUNCTION	5	   v_tn            INTEGER;

GET_VAC_REPL	FUNCTION	6	   c               INTEGER;

GET_VAC_REPL	FUNCTION	7	   v_replacement   INTEGER;

GET_VAC_REPL	FUNCTION	8	BEGIN

GET_VAC_REPL	FUNCTION	9	   SELECT NVL (MAX (tn), 0), NVL (MAX (replacement), 0)

GET_VAC_REPL	FUNCTION	10	     INTO v_tn, v_replacement

GET_VAC_REPL	FUNCTION	11	     FROM (SELECT DISTINCT

GET_VAC_REPL	FUNCTION	12	                  v.tn,

GET_VAC_REPL	FUNCTION	13	                  v.replacement,

GET_VAC_REPL	FUNCTION	14	                  v.v_from,

GET_VAC_REPL	FUNCTION	15	                  v.v_to,

GET_VAC_REPL	FUNCTION	16	                  (SELECT accepted

GET_VAC_REPL	FUNCTION	17	                     FROM sz_accept

GET_VAC_REPL	FUNCTION	18	                    WHERE     sz_id = v.sz_id

GET_VAC_REPL	FUNCTION	19	                          AND accept_order =

GET_VAC_REPL	FUNCTION	20	                                 DECODE (

GET_VAC_REPL	FUNCTION	21	                                    NVL (

GET_VAC_REPL	FUNCTION	22	                                       (SELECT accept_order

GET_VAC_REPL	FUNCTION	23	                                          FROM sz_accept

GET_VAC_REPL	FUNCTION	24	                                         WHERE     sz_id = v.sz_id

GET_VAC_REPL	FUNCTION	25	                                               AND accepted = 2),

GET_VAC_REPL	FUNCTION	26	                                       0),

GET_VAC_REPL	FUNCTION	27	                                    0, (SELECT MAX (accept_order)

GET_VAC_REPL	FUNCTION	28	                                          FROM sz_accept

GET_VAC_REPL	FUNCTION	29	                                         WHERE sz_id = v.sz_id),

GET_VAC_REPL	FUNCTION	30	                                    (SELECT accept_order

GET_VAC_REPL	FUNCTION	31	                                       FROM sz_accept

GET_VAC_REPL	FUNCTION	32	                                      WHERE sz_id = v.sz_id AND accepted = 2)))

GET_VAC_REPL	FUNCTION	33	                     sz_status

GET_VAC_REPL	FUNCTION	34	             FROM vacation v

GET_VAC_REPL	FUNCTION	35	            WHERE     v.replacement IS NOT NULL

GET_VAC_REPL	FUNCTION	36	                  AND v.tn = p_tn

GET_VAC_REPL	FUNCTION	37	                  AND DECODE (table_name,  'sz', auto_sz,  'tma', auto_tma) =

GET_VAC_REPL	FUNCTION	38	                         1)

GET_VAC_REPL	FUNCTION	39	    WHERE sz_status = 1 /*

GET_VAC_REPL	FUNCTION	40	                             СЗ подтверждена

GET_VAC_REPL	FUNCTION	41	                             */

GET_VAC_REPL	FUNCTION	42	                       AND TRUNC (SYSDATE) BETWEEN v_from AND v_to; /*

GET_VAC_REPL	FUNCTION	43	                                                                    отпуск в процессе

GET_VAC_REPL	FUNCTION	44	                                                                    */

GET_VAC_REPL	FUNCTION	45	

GET_VAC_REPL	FUNCTION	46	   IF v_replacement = 0

GET_VAC_REPL	FUNCTION	47	   THEN

GET_VAC_REPL	FUNCTION	48	      RETURN (p_tn);

GET_VAC_REPL	FUNCTION	49	   ELSE

GET_VAC_REPL	FUNCTION	50	      RETURN (v_replacement);

GET_VAC_REPL	FUNCTION	51	   END IF;

GET_VAC_REPL	FUNCTION	52	END;
GET_SZ_FAILURE	FUNCTION	1	FUNCTION        get_sz_failure (sz_id_ IN NUMBER)

GET_SZ_FAILURE	FUNCTION	2	   RETURN VARCHAR2

GET_SZ_FAILURE	FUNCTION	3	IS

GET_SZ_FAILURE	FUNCTION	4	   res   VARCHAR2(4000);

GET_SZ_FAILURE	FUNCTION	5	BEGIN

GET_SZ_FAILURE	FUNCTION	6	   SELECT failure

GET_SZ_FAILURE	FUNCTION	7	     INTO res

GET_SZ_FAILURE	FUNCTION	8	     FROM sz_accept

GET_SZ_FAILURE	FUNCTION	9	    WHERE     sz_id = sz_id_

GET_SZ_FAILURE	FUNCTION	10	          AND accept_order =

GET_SZ_FAILURE	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_SZ_FAILURE	FUNCTION	12	                                  FROM sz_accept

GET_SZ_FAILURE	FUNCTION	13	                                 WHERE sz_id = sz_id_ AND accepted = 2),

GET_SZ_FAILURE	FUNCTION	14	                              0),

GET_SZ_FAILURE	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_SZ_FAILURE	FUNCTION	16	                               FROM sz_accept

GET_SZ_FAILURE	FUNCTION	17	                              WHERE sz_id = sz_id_ /* AND accepted <> 0*/

GET_SZ_FAILURE	FUNCTION	18	                                                  ),

GET_SZ_FAILURE	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_SZ_FAILURE	FUNCTION	20	                            FROM sz_accept

GET_SZ_FAILURE	FUNCTION	21	                           WHERE sz_id = sz_id_ AND accepted = 2));

GET_SZ_FAILURE	FUNCTION	22	

GET_SZ_FAILURE	FUNCTION	23	   RETURN NVL (res, 0);

GET_SZ_FAILURE	FUNCTION	24	END;
GET_SZ_CURRENT_STATUS_NAME	FUNCTION	1	FUNCTION        get_sz_current_status_name (sz_id_ IN NUMBER)

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	2	   RETURN VARCHAR2

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	3	IS

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	4	   res   VARCHAR2(255);

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	5	BEGIN

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	6	   SELECT accept_types.name1

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	7	     INTO res

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	8	     FROM sz_accept, accept_types

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	9	    WHERE     sz_id = sz_id_

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	10	          AND accepted = accept_types.id(+)

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	11	          AND accept_order =

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	12	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	13	                                  FROM sz_accept

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	14	                                 WHERE sz_id = sz_id_ AND accepted = 2),

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	15	                              0),

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	16	                         0, (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	17	                               FROM sz_accept

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	18	                              WHERE sz_id = sz_id_ /* AND accepted <> 0*/

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	19	                                                  ),

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	20	                         (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	21	                            FROM sz_accept

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	22	                           WHERE sz_id = sz_id_ AND accepted = 2));

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	23	

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	24	   RETURN res;

GET_SZ_CURRENT_STATUS_NAME	FUNCTION	25	END;
GET_SZ_CURRENT_STATUS_LU	FUNCTION	1	FUNCTION        get_sz_current_status_lu (sz_id_ IN NUMBER)

GET_SZ_CURRENT_STATUS_LU	FUNCTION	2	   RETURN DATE

GET_SZ_CURRENT_STATUS_LU	FUNCTION	3	IS

GET_SZ_CURRENT_STATUS_LU	FUNCTION	4	   res   DATE;

GET_SZ_CURRENT_STATUS_LU	FUNCTION	5	BEGIN

GET_SZ_CURRENT_STATUS_LU	FUNCTION	6	   SELECT lu

GET_SZ_CURRENT_STATUS_LU	FUNCTION	7	     INTO res

GET_SZ_CURRENT_STATUS_LU	FUNCTION	8	     FROM sz_accept

GET_SZ_CURRENT_STATUS_LU	FUNCTION	9	    WHERE     sz_id = sz_id_

GET_SZ_CURRENT_STATUS_LU	FUNCTION	10	          AND accept_order =

GET_SZ_CURRENT_STATUS_LU	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS_LU	FUNCTION	12	                                  FROM sz_accept

GET_SZ_CURRENT_STATUS_LU	FUNCTION	13	                                 WHERE sz_id = sz_id_ AND accepted = 2),

GET_SZ_CURRENT_STATUS_LU	FUNCTION	14	                              0),

GET_SZ_CURRENT_STATUS_LU	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS_LU	FUNCTION	16	                               FROM sz_accept

GET_SZ_CURRENT_STATUS_LU	FUNCTION	17	                              WHERE sz_id = sz_id_ /* AND accepted <> 0*/

GET_SZ_CURRENT_STATUS_LU	FUNCTION	18	                                                  ),

GET_SZ_CURRENT_STATUS_LU	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS_LU	FUNCTION	20	                            FROM sz_accept

GET_SZ_CURRENT_STATUS_LU	FUNCTION	21	                           WHERE sz_id = sz_id_ AND accepted = 2));

GET_SZ_CURRENT_STATUS_LU	FUNCTION	22	

GET_SZ_CURRENT_STATUS_LU	FUNCTION	23	   RETURN res;

GET_SZ_CURRENT_STATUS_LU	FUNCTION	24	END;
GET_SZ_CURRENT_STATUS	FUNCTION	1	FUNCTION        get_sz_current_status (sz_id_ IN NUMBER)

GET_SZ_CURRENT_STATUS	FUNCTION	2	   RETURN NUMBER

GET_SZ_CURRENT_STATUS	FUNCTION	3	IS

GET_SZ_CURRENT_STATUS	FUNCTION	4	   res   NUMBER;

GET_SZ_CURRENT_STATUS	FUNCTION	5	BEGIN

GET_SZ_CURRENT_STATUS	FUNCTION	6	   SELECT accepted

GET_SZ_CURRENT_STATUS	FUNCTION	7	     INTO res

GET_SZ_CURRENT_STATUS	FUNCTION	8	     FROM sz_accept

GET_SZ_CURRENT_STATUS	FUNCTION	9	    WHERE     sz_id = sz_id_

GET_SZ_CURRENT_STATUS	FUNCTION	10	          AND accept_order =

GET_SZ_CURRENT_STATUS	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS	FUNCTION	12	                                  FROM sz_accept

GET_SZ_CURRENT_STATUS	FUNCTION	13	                                 WHERE sz_id = sz_id_ AND accepted = 2),

GET_SZ_CURRENT_STATUS	FUNCTION	14	                              0),

GET_SZ_CURRENT_STATUS	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS	FUNCTION	16	                               FROM sz_accept

GET_SZ_CURRENT_STATUS	FUNCTION	17	                              WHERE sz_id = sz_id_ /* AND accepted <> 0*/

GET_SZ_CURRENT_STATUS	FUNCTION	18	                                                  ),

GET_SZ_CURRENT_STATUS	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_SZ_CURRENT_STATUS	FUNCTION	20	                            FROM sz_accept

GET_SZ_CURRENT_STATUS	FUNCTION	21	                           WHERE sz_id = sz_id_ AND accepted = 2));

GET_SZ_CURRENT_STATUS	FUNCTION	22	

GET_SZ_CURRENT_STATUS	FUNCTION	23	   RETURN NVL (res, 0);

GET_SZ_CURRENT_STATUS	FUNCTION	24	END;
GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	1	FUNCTION        get_sz_current_acceptor_tn (sz_id_ IN NUMBER)

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	2	   RETURN NUMBER

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	3	IS

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	4	   res   NUMBER;

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	5	BEGIN

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	6	   SELECT tn

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	7	     INTO res

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	8	     FROM sz_accept

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	9	    WHERE     sz_id = sz_id_

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	10	          AND accept_order = (SELECT MIN (accept_order)

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	11	                                FROM sz_accept

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	12	                               WHERE sz_id = sz_id_ AND accepted = 0);

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	13	

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	14	   RETURN res;

GET_SZ_CURRENT_ACCEPTOR_TN	FUNCTION	15	END;
GET_RANDOM_TASK	FUNCTION	1	FUNCTION get_random_task (urls IN INTEGER)

GET_RANDOM_TASK	FUNCTION	2	   RETURN VARCHAR2

GET_RANDOM_TASK	FUNCTION	3	IS

GET_RANDOM_TASK	FUNCTION	4	   PRAGMA AUTONOMOUS_TRANSACTION;

GET_RANDOM_TASK	FUNCTION	5	   v_task   VARCHAR2 (4000);

GET_RANDOM_TASK	FUNCTION	6	BEGIN

GET_RANDOM_TASK	FUNCTION	7	   --DBMS_RANDOM.initialize (17809465);

GET_RANDOM_TASK	FUNCTION	8	   --DBMS_RANDOM.seed (17809465);

GET_RANDOM_TASK	FUNCTION	9	

GET_RANDOM_TASK	FUNCTION	10	   IF urls = 0

GET_RANDOM_TASK	FUNCTION	11	   THEN

GET_RANDOM_TASK	FUNCTION	12	      SELECT tasks_assort

GET_RANDOM_TASK	FUNCTION	13	        INTO v_task

GET_RANDOM_TASK	FUNCTION	14	        FROM (  SELECT DISTINCT s.tasks_assort

GET_RANDOM_TASK	FUNCTION	15	                  FROM a14tost s

GET_RANDOM_TASK	FUNCTION	16	                 WHERE s.tasks_assort IS NOT NULL

GET_RANDOM_TASK	FUNCTION	17	              ORDER BY DBMS_RANDOM.VALUE)

GET_RANDOM_TASK	FUNCTION	18	       WHERE ROWNUM = 1;

GET_RANDOM_TASK	FUNCTION	19	   ELSE

GET_RANDOM_TASK	FUNCTION	20	      SELECT tasks_mr

GET_RANDOM_TASK	FUNCTION	21	        INTO v_task

GET_RANDOM_TASK	FUNCTION	22	        FROM (  SELECT DISTINCT s.tasks_mr

GET_RANDOM_TASK	FUNCTION	23	                  FROM a14tost s

GET_RANDOM_TASK	FUNCTION	24	                 WHERE s.tasks_mr IS NOT NULL

GET_RANDOM_TASK	FUNCTION	25	              ORDER BY DBMS_RANDOM.VALUE)

GET_RANDOM_TASK	FUNCTION	26	       WHERE ROWNUM = 1;

GET_RANDOM_TASK	FUNCTION	27	   END IF;

GET_RANDOM_TASK	FUNCTION	28	

GET_RANDOM_TASK	FUNCTION	29	   --DBMS_RANDOM.TERMINATE;

GET_RANDOM_TASK	FUNCTION	30	   RETURN v_task;

GET_RANDOM_TASK	FUNCTION	31	END;
GET_PRICE	FUNCTION	1	FUNCTION        GET_price (p_dt IN DATE, p_sku IN INTEGER)

GET_PRICE	FUNCTION	2	   RETURN NUMBER

GET_PRICE	FUNCTION	3	IS

GET_PRICE	FUNCTION	4	   v1   NUMBER;

GET_PRICE	FUNCTION	5	BEGIN

GET_PRICE	FUNCTION	6	   SELECT price_grn

GET_PRICE	FUNCTION	7	     INTO v1

GET_PRICE	FUNCTION	8	     FROM (  SELECT *

GET_PRICE	FUNCTION	9	               FROM tblpriceavk

GET_PRICE	FUNCTION	10	              WHERE country_id = 1 AND sku_id = p_sku AND dt <= p_dt

GET_PRICE	FUNCTION	11	           ORDER BY dt DESC)

GET_PRICE	FUNCTION	12	    WHERE ROWNUM = 1;

GET_PRICE	FUNCTION	13	

GET_PRICE	FUNCTION	14	   RETURN (v1);

GET_PRICE	FUNCTION	15	END;
GET_MS_TASK_SOURCE	FUNCTION	1	FUNCTION        get_ms_task_source (p_task_id IN NUMBER)

GET_MS_TASK_SOURCE	FUNCTION	2	   RETURN VARCHAR

GET_MS_TASK_SOURCE	FUNCTION	3	IS

GET_MS_TASK_SOURCE	FUNCTION	4	   tmpvar   VARCHAR (255);

GET_MS_TASK_SOURCE	FUNCTION	5	BEGIN

GET_MS_TASK_SOURCE	FUNCTION	6	   SELECT CASE

GET_MS_TASK_SOURCE	FUNCTION	7	             WHEN photo_id IS NOT NULL THEN 'ф'

GET_MS_TASK_SOURCE	FUNCTION	8	             WHEN visit_date IS NOT NULL THEN 'В'

GET_MS_TASK_SOURCE	FUNCTION	9	          END

GET_MS_TASK_SOURCE	FUNCTION	10	     INTO tmpvar

GET_MS_TASK_SOURCE	FUNCTION	11	     FROM ms_task

GET_MS_TASK_SOURCE	FUNCTION	12	    WHERE id = p_task_id;

GET_MS_TASK_SOURCE	FUNCTION	13	

GET_MS_TASK_SOURCE	FUNCTION	14	   RETURN (tmpvar);

GET_MS_TASK_SOURCE	FUNCTION	15	END;
GET_DZC_CURRENT_STATUS_LU	FUNCTION	1	FUNCTION        get_dzc_current_status_lu (dzc_id_ IN NUMBER)

GET_DZC_CURRENT_STATUS_LU	FUNCTION	2	   RETURN DATE

GET_DZC_CURRENT_STATUS_LU	FUNCTION	3	IS

GET_DZC_CURRENT_STATUS_LU	FUNCTION	4	   res   DATE;

GET_DZC_CURRENT_STATUS_LU	FUNCTION	5	BEGIN

GET_DZC_CURRENT_STATUS_LU	FUNCTION	6	   SELECT lu

GET_DZC_CURRENT_STATUS_LU	FUNCTION	7	     INTO res

GET_DZC_CURRENT_STATUS_LU	FUNCTION	8	     FROM dzc_accept

GET_DZC_CURRENT_STATUS_LU	FUNCTION	9	    WHERE     dzc_id = dzc_id_

GET_DZC_CURRENT_STATUS_LU	FUNCTION	10	          AND accept_order =

GET_DZC_CURRENT_STATUS_LU	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_DZC_CURRENT_STATUS_LU	FUNCTION	12	                                  FROM dzc_accept

GET_DZC_CURRENT_STATUS_LU	FUNCTION	13	                                 WHERE dzc_id = dzc_id_ AND accepted = 2),

GET_DZC_CURRENT_STATUS_LU	FUNCTION	14	                              0),

GET_DZC_CURRENT_STATUS_LU	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_DZC_CURRENT_STATUS_LU	FUNCTION	16	                               FROM dzc_accept

GET_DZC_CURRENT_STATUS_LU	FUNCTION	17	                              WHERE dzc_id = dzc_id_ /* AND accepted <> 0*/

GET_DZC_CURRENT_STATUS_LU	FUNCTION	18	                                                    ),

GET_DZC_CURRENT_STATUS_LU	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_DZC_CURRENT_STATUS_LU	FUNCTION	20	                            FROM dzc_accept

GET_DZC_CURRENT_STATUS_LU	FUNCTION	21	                           WHERE dzc_id = dzc_id_ AND accepted = 2));

GET_DZC_CURRENT_STATUS_LU	FUNCTION	22	

GET_DZC_CURRENT_STATUS_LU	FUNCTION	23	   RETURN res;

GET_DZC_CURRENT_STATUS_LU	FUNCTION	24	END;
GET_DZC_CURRENT_STATUS	FUNCTION	1	FUNCTION        get_dzc_current_status (dzc_id_ IN NUMBER)

GET_DZC_CURRENT_STATUS	FUNCTION	2	   RETURN NUMBER

GET_DZC_CURRENT_STATUS	FUNCTION	3	IS

GET_DZC_CURRENT_STATUS	FUNCTION	4	   res   NUMBER;

GET_DZC_CURRENT_STATUS	FUNCTION	5	BEGIN

GET_DZC_CURRENT_STATUS	FUNCTION	6	   SELECT accepted

GET_DZC_CURRENT_STATUS	FUNCTION	7	     INTO res

GET_DZC_CURRENT_STATUS	FUNCTION	8	     FROM dzc_accept

GET_DZC_CURRENT_STATUS	FUNCTION	9	    WHERE     dzc_id = dzc_id_

GET_DZC_CURRENT_STATUS	FUNCTION	10	          AND accept_order =

GET_DZC_CURRENT_STATUS	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_DZC_CURRENT_STATUS	FUNCTION	12	                                  FROM dzc_accept

GET_DZC_CURRENT_STATUS	FUNCTION	13	                                 WHERE dzc_id = dzc_id_ AND accepted = 2),

GET_DZC_CURRENT_STATUS	FUNCTION	14	                              0),

GET_DZC_CURRENT_STATUS	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_DZC_CURRENT_STATUS	FUNCTION	16	                               FROM dzc_accept

GET_DZC_CURRENT_STATUS	FUNCTION	17	                              WHERE dzc_id = dzc_id_ /* AND accepted <> 0*/

GET_DZC_CURRENT_STATUS	FUNCTION	18	                                                    ),

GET_DZC_CURRENT_STATUS	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_DZC_CURRENT_STATUS	FUNCTION	20	                            FROM dzc_accept

GET_DZC_CURRENT_STATUS	FUNCTION	21	                           WHERE dzc_id = dzc_id_ AND accepted = 2));

GET_DZC_CURRENT_STATUS	FUNCTION	22	

GET_DZC_CURRENT_STATUS	FUNCTION	23	   RETURN NVL (res, 0);

GET_DZC_CURRENT_STATUS	FUNCTION	24	END;
GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	1	FUNCTION        get_dzc_current_acceptor_tn (

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	2	   dzc_id_   IN NUMBER)

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	3	   RETURN NUMBER

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	4	IS

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	5	   res   NUMBER;

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	6	BEGIN

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	7	   SELECT tn

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	8	     INTO res

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	9	     FROM dzc_accept

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	10	    WHERE     dzc_id = dzc_id_

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	11	          AND accept_order = (SELECT MIN (accept_order)

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	12	                                FROM dzc_accept

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	13	                               WHERE dzc_id = dzc_id_ AND accepted = 0);

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	14	

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	15	   RETURN res;

GET_DZC_CURRENT_ACCEPTOR_TN	FUNCTION	16	END;
GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	1	FUNCTION        get_bud_ru_zay_cur_status_tu (

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	2	   bud_ru_zay_id_   IN NUMBER)

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	3	   RETURN NUMBER

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	4	IS

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	5	   res   NUMBER;

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	6	BEGIN

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	7	   SELECT rep_accepted

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	8	     INTO res

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	9	     FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	10	    WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	11	          AND INN_not_ReportMA (tn) = 0

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	12	          AND accept_order =

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	13	                 DECODE (

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	14	                    NVL (

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	15	                       (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	16	                          FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	17	                         WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	18	                               AND rep_accepted = 2

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	19	                               AND INN_not_ReportMA (tn) = 0),

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	20	                       0),

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	21	                    0, (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	22	                          FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	23	                         WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	24	                               AND rep_accepted IS NOT NULL

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	25	                               AND INN_not_ReportMA (tn) = 0),

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	26	                    (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	27	                       FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	28	                      WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	29	                            AND rep_accepted = 2

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	30	                            AND INN_not_ReportMA (tn) = 0));

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	31	

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	32	   RETURN NVL (res, 0);

GET_BUD_RU_ZAY_CUR_STATUS_TU	FUNCTION	33	END;
GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	1	FUNCTION        get_bud_ru_zay_cur_status_lu (

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	2	   bud_ru_zay_id_   IN NUMBER)

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	3	   RETURN DATE

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	4	IS

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	5	   res   DATE;

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	6	BEGIN

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	7	   SELECT lu

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	8	     INTO res

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	9	     FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	10	    WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	11	          AND accept_order =

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	12	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	13	                                  FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	14	                                 WHERE z_id = bud_ru_zay_id_ AND accepted = 2),

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	15	                              0),

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	16	                         0, (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	17	                               FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	18	                              WHERE z_id = bud_ru_zay_id_ /* AND accepted <> 0*/

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	19	                                                         ),

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	20	                         (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	21	                            FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	22	                           WHERE z_id = bud_ru_zay_id_ AND accepted = 2));

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	23	

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	24	   RETURN res;

GET_BUD_RU_ZAY_CUR_STATUS_LU	FUNCTION	25	END;
GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	1	FUNCTION        get_bud_ru_zay_cur_status (

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	2	   bud_ru_zay_id_   IN NUMBER)

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	3	   RETURN NUMBER

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	4	IS

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	5	   res   NUMBER;

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	6	BEGIN

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	7	   SELECT accepted

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	8	     INTO res

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	9	     FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	10	    WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	11	          AND accept_order =

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	12	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	13	                                  FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	14	                                 WHERE z_id = bud_ru_zay_id_ AND accepted = 2),

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	15	                              0),

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	16	                         0, (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	17	                               FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	18	                              WHERE z_id = bud_ru_zay_id_ /* AND accepted <> 0*/

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	19	                                                         ),

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	20	                         (SELECT MAX (accept_order)

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	21	                            FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	22	                           WHERE z_id = bud_ru_zay_id_ AND accepted = 2));

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	23	

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	24	   RETURN NVL (res, 0);

GET_BUD_RU_ZAY_CUR_STATUS	FUNCTION	25	END;
GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	1	FUNCTION        get_bud_ru_zay_cur_acceptor_tn (

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	2	   bud_ru_zay_id_   IN NUMBER)

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	3	   RETURN NUMBER

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	4	IS

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	5	   res   NUMBER;

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	6	BEGIN

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	7	   SELECT tn

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	8	     INTO res

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	9	     FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	10	    WHERE     z_id = bud_ru_zay_id_

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	11	          AND accept_order = (SELECT MIN (accept_order)

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	12	                                FROM bud_ru_zay_accept

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	13	                               WHERE z_id = bud_ru_zay_id_ AND accepted = 0);

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	14	

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	15	   RETURN res;

GET_BUD_RU_ZAY_CUR_ACCEPTOR_TN	FUNCTION	16	END;
GET_AC_CURRENT_STATUS_LU	FUNCTION	1	FUNCTION        get_ac_current_status_lu (ac_id_ IN NUMBER)

GET_AC_CURRENT_STATUS_LU	FUNCTION	2	   RETURN DATE

GET_AC_CURRENT_STATUS_LU	FUNCTION	3	IS

GET_AC_CURRENT_STATUS_LU	FUNCTION	4	   res   DATE;

GET_AC_CURRENT_STATUS_LU	FUNCTION	5	BEGIN

GET_AC_CURRENT_STATUS_LU	FUNCTION	6	   SELECT lu

GET_AC_CURRENT_STATUS_LU	FUNCTION	7	     INTO res

GET_AC_CURRENT_STATUS_LU	FUNCTION	8	     FROM ac_accept

GET_AC_CURRENT_STATUS_LU	FUNCTION	9	    WHERE     ac_id = ac_id_

GET_AC_CURRENT_STATUS_LU	FUNCTION	10	          AND accept_order =

GET_AC_CURRENT_STATUS_LU	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_AC_CURRENT_STATUS_LU	FUNCTION	12	                                  FROM ac_accept

GET_AC_CURRENT_STATUS_LU	FUNCTION	13	                                 WHERE ac_id = ac_id_ AND accepted = 2),

GET_AC_CURRENT_STATUS_LU	FUNCTION	14	                              0),

GET_AC_CURRENT_STATUS_LU	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_AC_CURRENT_STATUS_LU	FUNCTION	16	                               FROM ac_accept

GET_AC_CURRENT_STATUS_LU	FUNCTION	17	                              WHERE ac_id = ac_id_ /* AND accepted <> 0*/

GET_AC_CURRENT_STATUS_LU	FUNCTION	18	                                                  ),

GET_AC_CURRENT_STATUS_LU	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_AC_CURRENT_STATUS_LU	FUNCTION	20	                            FROM ac_accept

GET_AC_CURRENT_STATUS_LU	FUNCTION	21	                           WHERE ac_id = ac_id_ AND accepted = 2));

GET_AC_CURRENT_STATUS_LU	FUNCTION	22	

GET_AC_CURRENT_STATUS_LU	FUNCTION	23	   RETURN res;

GET_AC_CURRENT_STATUS_LU	FUNCTION	24	END;
GET_AC_CURRENT_STATUS	FUNCTION	1	FUNCTION        get_ac_current_status (ac_id_ IN NUMBER)

GET_AC_CURRENT_STATUS	FUNCTION	2	   RETURN NUMBER

GET_AC_CURRENT_STATUS	FUNCTION	3	IS

GET_AC_CURRENT_STATUS	FUNCTION	4	   res   NUMBER;

GET_AC_CURRENT_STATUS	FUNCTION	5	BEGIN

GET_AC_CURRENT_STATUS	FUNCTION	6	   SELECT accepted

GET_AC_CURRENT_STATUS	FUNCTION	7	     INTO res

GET_AC_CURRENT_STATUS	FUNCTION	8	     FROM ac_accept

GET_AC_CURRENT_STATUS	FUNCTION	9	    WHERE     ac_id = ac_id_

GET_AC_CURRENT_STATUS	FUNCTION	10	          AND accept_order =

GET_AC_CURRENT_STATUS	FUNCTION	11	                 DECODE (NVL ( (SELECT MAX (accept_order)

GET_AC_CURRENT_STATUS	FUNCTION	12	                                  FROM ac_accept

GET_AC_CURRENT_STATUS	FUNCTION	13	                                 WHERE ac_id = ac_id_ AND accepted = 2),

GET_AC_CURRENT_STATUS	FUNCTION	14	                              0),

GET_AC_CURRENT_STATUS	FUNCTION	15	                         0, (SELECT MAX (accept_order)

GET_AC_CURRENT_STATUS	FUNCTION	16	                               FROM ac_accept

GET_AC_CURRENT_STATUS	FUNCTION	17	                              WHERE ac_id = ac_id_ /* AND accepted <> 0*/

GET_AC_CURRENT_STATUS	FUNCTION	18	                                                  ),

GET_AC_CURRENT_STATUS	FUNCTION	19	                         (SELECT MAX (accept_order)

GET_AC_CURRENT_STATUS	FUNCTION	20	                            FROM ac_accept

GET_AC_CURRENT_STATUS	FUNCTION	21	                           WHERE ac_id = ac_id_ AND accepted = 2));

GET_AC_CURRENT_STATUS	FUNCTION	22	

GET_AC_CURRENT_STATUS	FUNCTION	23	   RETURN NVL (res, 0);

GET_AC_CURRENT_STATUS	FUNCTION	24	END;
GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	1	FUNCTION        get_ac_current_acceptor_tn (ac_id_ IN NUMBER)

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	2	   RETURN NUMBER

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	3	IS

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	4	   res   NUMBER;

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	5	BEGIN

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	6	   SELECT tn

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	7	     INTO res

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	8	     FROM ac_accept

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	9	    WHERE     ac_id = ac_id_

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	10	          AND accept_order = (SELECT MIN (accept_order)

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	11	                                FROM ac_accept

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	12	                               WHERE ac_id = ac_id_ AND accepted = 0);

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	13	

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	14	   RETURN res;

GET_AC_CURRENT_ACCEPTOR_TN	FUNCTION	15	END;
GETZAYSUM	FUNCTION	1	FUNCTION        getZaySum (pZayId     IN INTEGER,

GETZAYSUM	FUNCTION	2	                                             pFieldId   IN INTEGER := NULL)

GETZAYSUM	FUNCTION	3	   RETURN NUMBER

GETZAYSUM	FUNCTION	4	IS

GETZAYSUM	FUNCTION	5	   r   NUMBER;

GETZAYSUM	FUNCTION	6	BEGIN

GETZAYSUM	FUNCTION	7	   IF pZayId = 0

GETZAYSUM	FUNCTION	8	   THEN

GETZAYSUM	FUNCTION	9	      RETURN 0;

GETZAYSUM	FUNCTION	10	   END IF;

GETZAYSUM	FUNCTION	11	

GETZAYSUM	FUNCTION	12	   BEGIN

GETZAYSUM	FUNCTION	13	      SELECT NVL (m.summa, 0) + NVL (m.coffee, 0)

GETZAYSUM	FUNCTION	14	        INTO r

GETZAYSUM	FUNCTION	15	        FROM bud_ru_zay_ff ff, a14mega m

GETZAYSUM	FUNCTION	16	       WHERE     ff.ff_id =

GETZAYSUM	FUNCTION	17	                    (SELECT id

GETZAYSUM	FUNCTION	18	                       FROM bud_ru_ff

GETZAYSUM	FUNCTION	19	                      WHERE     admin_id = 4

GETZAYSUM	FUNCTION	20	                            AND dpt_id = (SELECT dpt_id

GETZAYSUM	FUNCTION	21	                                            FROM user_list

GETZAYSUM	FUNCTION	22	                                           WHERE tn = (SELECT tn

GETZAYSUM	FUNCTION	23	                                                         FROM bud_ru_zay

GETZAYSUM	FUNCTION	24	                                                        WHERE id = pZayId)))

GETZAYSUM	FUNCTION	25	             AND ff.z_id = pZayId

GETZAYSUM	FUNCTION	26	             AND m.tp_kod = ff.val_list

GETZAYSUM	FUNCTION	27	             AND m.dt = TRUNC ( (SELECT dt_start

GETZAYSUM	FUNCTION	28	                                   FROM bud_ru_zay

GETZAYSUM	FUNCTION	29	                                  WHERE id = pZayId),

GETZAYSUM	FUNCTION	30	                               'mm')

GETZAYSUM	FUNCTION	31	             AND m.dpt_id = (SELECT dpt_id

GETZAYSUM	FUNCTION	32	                               FROM user_list

GETZAYSUM	FUNCTION	33	                              WHERE tn = (SELECT tn

GETZAYSUM	FUNCTION	34	                                            FROM bud_ru_zay

GETZAYSUM	FUNCTION	35	                                           WHERE id = pZayId));

GETZAYSUM	FUNCTION	36	

GETZAYSUM	FUNCTION	37	      RETURN r;

GETZAYSUM	FUNCTION	38	   EXCEPTION

GETZAYSUM	FUNCTION	39	      WHEN OTHERS

GETZAYSUM	FUNCTION	40	      THEN

GETZAYSUM	FUNCTION	41	         RETURN 0;

GETZAYSUM	FUNCTION	42	   END;

GETZAYSUM	FUNCTION	43	END;
GETZAYIDFROMSCMOVEZAY	FUNCTION	1	FUNCTION        getZayIdFromSCMoveZay (scmzId IN INTEGER)

GETZAYIDFROMSCMOVEZAY	FUNCTION	2	   RETURN INTEGER

GETZAYIDFROMSCMOVEZAY	FUNCTION	3	IS

GETZAYIDFROMSCMOVEZAY	FUNCTION	4	   result   INTEGER;

GETZAYIDFROMSCMOVEZAY	FUNCTION	5	BEGIN

GETZAYIDFROMSCMOVEZAY	FUNCTION	6	   SELECT MAX (z.id) id

GETZAYIDFROMSCMOVEZAY	FUNCTION	7	     INTO result

GETZAYIDFROMSCMOVEZAY	FUNCTION	8	     FROM bud_ru_zay z, user_list u, scmovezay mz

GETZAYIDFROMSCMOVEZAY	FUNCTION	9	    WHERE     (SELECT NVL (tu, 0)

GETZAYIDFROMSCMOVEZAY	FUNCTION	10	                 FROM bud_ru_st_ras

GETZAYIDFROMSCMOVEZAY	FUNCTION	11	                WHERE id = z.kat) = 1

GETZAYIDFROMSCMOVEZAY	FUNCTION	12	          AND z.tn = u.tn

GETZAYIDFROMSCMOVEZAY	FUNCTION	13	          AND z.report_data IS NOT NULL

GETZAYIDFROMSCMOVEZAY	FUNCTION	14	          AND (SELECT rep_accepted

GETZAYIDFROMSCMOVEZAY	FUNCTION	15	                 FROM bud_ru_zay_accept

GETZAYIDFROMSCMOVEZAY	FUNCTION	16	                WHERE     z_id = z.id

GETZAYIDFROMSCMOVEZAY	FUNCTION	17	                      AND INN_not_ReportMA (tn) = 0

GETZAYIDFROMSCMOVEZAY	FUNCTION	18	                      AND accept_order =

GETZAYIDFROMSCMOVEZAY	FUNCTION	19	                             DECODE (

GETZAYIDFROMSCMOVEZAY	FUNCTION	20	                                NVL (

GETZAYIDFROMSCMOVEZAY	FUNCTION	21	                                   (SELECT MAX (accept_order)

GETZAYIDFROMSCMOVEZAY	FUNCTION	22	                                      FROM bud_ru_zay_accept

GETZAYIDFROMSCMOVEZAY	FUNCTION	23	                                     WHERE     z_id = z.id

GETZAYIDFROMSCMOVEZAY	FUNCTION	24	                                           AND rep_accepted = 2

GETZAYIDFROMSCMOVEZAY	FUNCTION	25	                                           AND INN_not_ReportMA (tn) = 0),

GETZAYIDFROMSCMOVEZAY	FUNCTION	26	                                   0),

GETZAYIDFROMSCMOVEZAY	FUNCTION	27	                                0, (SELECT MAX (accept_order)

GETZAYIDFROMSCMOVEZAY	FUNCTION	28	                                      FROM bud_ru_zay_accept

GETZAYIDFROMSCMOVEZAY	FUNCTION	29	                                     WHERE     z_id = z.id

GETZAYIDFROMSCMOVEZAY	FUNCTION	30	                                           AND rep_accepted IS NOT NULL

GETZAYIDFROMSCMOVEZAY	FUNCTION	31	                                           AND INN_not_ReportMA (tn) = 0),

GETZAYIDFROMSCMOVEZAY	FUNCTION	32	                                (SELECT MAX (accept_order)

GETZAYIDFROMSCMOVEZAY	FUNCTION	33	                                   FROM bud_ru_zay_accept

GETZAYIDFROMSCMOVEZAY	FUNCTION	34	                                  WHERE     z_id = z.id

GETZAYIDFROMSCMOVEZAY	FUNCTION	35	                                        AND rep_accepted = 2

GETZAYIDFROMSCMOVEZAY	FUNCTION	36	                                        AND INN_not_ReportMA (tn) = 0))) = 1

GETZAYIDFROMSCMOVEZAY	FUNCTION	37	          AND (   TO_NUMBER (getZayFieldVal (z.id, 'admin_id', 14)) =

GETZAYIDFROMSCMOVEZAY	FUNCTION	38	                     mz.netfrom

GETZAYIDFROMSCMOVEZAY	FUNCTION	39	               OR TO_NUMBER (getZayFieldVal (z.id, 'admin_id', 4)) =

GETZAYIDFROMSCMOVEZAY	FUNCTION	40	                     mz.tpfrom)

GETZAYIDFROMSCMOVEZAY	FUNCTION	41	          AND TRUNC (SYSDATE) BETWEEN z.dt_start AND z.dt_end

GETZAYIDFROMSCMOVEZAY	FUNCTION	42	          AND mz.id = scmzId;

GETZAYIDFROMSCMOVEZAY	FUNCTION	43	

GETZAYIDFROMSCMOVEZAY	FUNCTION	44	   RETURN (result);

GETZAYIDFROMSCMOVEZAY	FUNCTION	45	END;
GETZAYFIELDVAL	FUNCTION	1	FUNCTION        getZayFieldVal (

GETZAYFIELDVAL	FUNCTION	2	   p_zid                   IN INTEGER,

GETZAYFIELDVAL	FUNCTION	3	   p_type                  IN VARCHAR2,

GETZAYFIELDVAL	FUNCTION	4	   p_val                   IN VARCHAR2,

GETZAYFIELDVAL	FUNCTION	5	   p_get_list_string_val   IN INTEGER := 0)

GETZAYFIELDVAL	FUNCTION	6	   RETURN VARCHAR2

GETZAYFIELDVAL	FUNCTION	7	IS

GETZAYFIELDVAL	FUNCTION	8	   result   VARCHAR2 (4000);

GETZAYFIELDVAL	FUNCTION	9	BEGIN

GETZAYFIELDVAL	FUNCTION	10	   BEGIN

GETZAYFIELDVAL	FUNCTION	11	      SELECT CASE

GETZAYFIELDVAL	FUNCTION	12	                WHEN TYPE = 'textarea'

GETZAYFIELDVAL	FUNCTION	13	                THEN

GETZAYFIELDVAL	FUNCTION	14	                   DECODE (p_type,

GETZAYFIELDVAL	FUNCTION	15	                           'rep_var_name', rep_val_textarea,

GETZAYFIELDVAL	FUNCTION	16	                           val_textarea)

GETZAYFIELDVAL	FUNCTION	17	                WHEN TYPE = 'string'

GETZAYFIELDVAL	FUNCTION	18	                THEN

GETZAYFIELDVAL	FUNCTION	19	                   DECODE (p_type, 'rep_var_name', rep_val_string, val_string)

GETZAYFIELDVAL	FUNCTION	20	                WHEN TYPE = 'list'

GETZAYFIELDVAL	FUNCTION	21	                THEN

GETZAYFIELDVAL	FUNCTION	22	                   DECODE (

GETZAYFIELDVAL	FUNCTION	23	                      p_type,

GETZAYFIELDVAL	FUNCTION	24	                      'rep_var_name', DECODE (p_get_list_string_val,

GETZAYFIELDVAL	FUNCTION	25	                                              0, TO_CHAR (rep_val_list),

GETZAYFIELDVAL	FUNCTION	26	                                              rep_val_list_name),

GETZAYFIELDVAL	FUNCTION	27	                      DECODE (p_get_list_string_val,

GETZAYFIELDVAL	FUNCTION	28	                              0, TO_CHAR (val_list),

GETZAYFIELDVAL	FUNCTION	29	                              val_list_name))

GETZAYFIELDVAL	FUNCTION	30	                WHEN TYPE = 'number'

GETZAYFIELDVAL	FUNCTION	31	                THEN

GETZAYFIELDVAL	FUNCTION	32	                   DECODE (p_type,

GETZAYFIELDVAL	FUNCTION	33	                           'rep_var_name', TO_CHAR (rep_val_number),

GETZAYFIELDVAL	FUNCTION	34	                           TO_CHAR (val_number))

GETZAYFIELDVAL	FUNCTION	35	                WHEN TYPE = 'number_int'

GETZAYFIELDVAL	FUNCTION	36	                THEN

GETZAYFIELDVAL	FUNCTION	37	                   DECODE (p_type,

GETZAYFIELDVAL	FUNCTION	38	                           'rep_var_name', TO_CHAR (rep_val_number_int),

GETZAYFIELDVAL	FUNCTION	39	                           TO_CHAR (val_number_int))

GETZAYFIELDVAL	FUNCTION	40	                WHEN TYPE = 'formula'

GETZAYFIELDVAL	FUNCTION	41	                THEN

GETZAYFIELDVAL	FUNCTION	42	                   DECODE (p_type,

GETZAYFIELDVAL	FUNCTION	43	                           'rep_var_name', rep_val_formula,

GETZAYFIELDVAL	FUNCTION	44	                           val_formula)

GETZAYFIELDVAL	FUNCTION	45	                WHEN TYPE = 'bool'

GETZAYFIELDVAL	FUNCTION	46	                THEN

GETZAYFIELDVAL	FUNCTION	47	                   DECODE (p_type,

GETZAYFIELDVAL	FUNCTION	48	                           'rep_var_name', TO_CHAR (rep_val_bool),

GETZAYFIELDVAL	FUNCTION	49	                           TO_CHAR (val_bool))

GETZAYFIELDVAL	FUNCTION	50	                WHEN TYPE = 'file'

GETZAYFIELDVAL	FUNCTION	51	                THEN

GETZAYFIELDVAL	FUNCTION	52	                   DECODE (p_type, 'rep_var_name', rep_val_file, val_file)

GETZAYFIELDVAL	FUNCTION	53	             END

GETZAYFIELDVAL	FUNCTION	54	        INTO result

GETZAYFIELDVAL	FUNCTION	55	        FROM bud_ru_zay_ff zff, bud_ru_ff ff

GETZAYFIELDVAL	FUNCTION	56	       WHERE     zff.z_id = p_zid

GETZAYFIELDVAL	FUNCTION	57	             AND zff.ff_id = ff.id

GETZAYFIELDVAL	FUNCTION	58	             AND (   (ff.var1 = p_val AND p_type = 'var1')

GETZAYFIELDVAL	FUNCTION	59	                  OR (ff.admin_id = p_val AND p_type = 'admin_id')

GETZAYFIELDVAL	FUNCTION	60	                  OR (ff.var_name = p_val AND p_type = 'var_name')

GETZAYFIELDVAL	FUNCTION	61	                  OR (ff.rep_var_name = p_val AND p_type = 'rep_var_name'));

GETZAYFIELDVAL	FUNCTION	62	

GETZAYFIELDVAL	FUNCTION	63	      RETURN result;

GETZAYFIELDVAL	FUNCTION	64	   EXCEPTION

GETZAYFIELDVAL	FUNCTION	65	      WHEN OTHERS

GETZAYFIELDVAL	FUNCTION	66	      THEN

GETZAYFIELDVAL	FUNCTION	67	         RETURN NULL;

GETZAYFIELDVAL	FUNCTION	68	   END;

GETZAYFIELDVAL	FUNCTION	69	END;
GETZAYFIELDID	FUNCTION	1	FUNCTION        getZayFieldId (p_zid    IN INTEGER,

GETZAYFIELDID	FUNCTION	2	                                                 p_type   IN VARCHAR2,

GETZAYFIELDID	FUNCTION	3	                                                 p_val    IN VARCHAR2)

GETZAYFIELDID	FUNCTION	4	   RETURN VARCHAR2

GETZAYFIELDID	FUNCTION	5	IS

GETZAYFIELDID	FUNCTION	6	   result   VARCHAR2 (4000);

GETZAYFIELDID	FUNCTION	7	BEGIN

GETZAYFIELDID	FUNCTION	8	   BEGIN

GETZAYFIELDID	FUNCTION	9	      SELECT ff.id

GETZAYFIELDID	FUNCTION	10	        INTO result

GETZAYFIELDID	FUNCTION	11	        FROM bud_ru_zay_ff zff, bud_ru_ff ff

GETZAYFIELDID	FUNCTION	12	       WHERE     zff.z_id = p_zid

GETZAYFIELDID	FUNCTION	13	             AND zff.ff_id = ff.id

GETZAYFIELDID	FUNCTION	14	             AND (   (ff.var1 = p_val AND p_type = 'var1')

GETZAYFIELDID	FUNCTION	15	                  OR (ff.admin_id = p_val AND p_type = 'admin_id')

GETZAYFIELDID	FUNCTION	16	                  OR (ff.var_name = p_val AND p_type = 'var_name')

GETZAYFIELDID	FUNCTION	17	                  OR (ff.rep_var_name = p_val AND p_type = 'rep_var_name'));

GETZAYFIELDID	FUNCTION	18	

GETZAYFIELDID	FUNCTION	19	      RETURN result;

GETZAYFIELDID	FUNCTION	20	   EXCEPTION

GETZAYFIELDID	FUNCTION	21	      WHEN OTHERS

GETZAYFIELDID	FUNCTION	22	      THEN

GETZAYFIELDID	FUNCTION	23	         RETURN NULL;

GETZAYFIELDID	FUNCTION	24	   END;

GETZAYFIELDID	FUNCTION	25	END;
GETZAYDPTID	FUNCTION	1	FUNCTION        getZayDptId (p_zid IN INTEGER)

GETZAYDPTID	FUNCTION	2	   RETURN INTEGER

GETZAYDPTID	FUNCTION	3	IS

GETZAYDPTID	FUNCTION	4	   result   INTEGER;

GETZAYDPTID	FUNCTION	5	BEGIN

GETZAYDPTID	FUNCTION	6	   BEGIN

GETZAYDPTID	FUNCTION	7	      SELECT dpt_id

GETZAYDPTID	FUNCTION	8	        INTO result

GETZAYDPTID	FUNCTION	9	        FROM user_list

GETZAYDPTID	FUNCTION	10	       WHERE tn = (SELECT tn

GETZAYDPTID	FUNCTION	11	                     FROM bud_ru_zay

GETZAYDPTID	FUNCTION	12	                    WHERE id = p_zid);

GETZAYDPTID	FUNCTION	13	

GETZAYDPTID	FUNCTION	14	      RETURN result;

GETZAYDPTID	FUNCTION	15	   EXCEPTION

GETZAYDPTID	FUNCTION	16	      WHEN OTHERS

GETZAYDPTID	FUNCTION	17	      THEN

GETZAYDPTID	FUNCTION	18	         RETURN NULL;

GETZAYDPTID	FUNCTION	19	   END;

GETZAYDPTID	FUNCTION	20	END;
GETTPTYPE	FUNCTION	1	FUNCTION        getTPType (pZayId     IN INTEGER,

GETTPTYPE	FUNCTION	2	                                             pFieldId   IN INTEGER := NULL)

GETTPTYPE	FUNCTION	3	   RETURN VARCHAR2

GETTPTYPE	FUNCTION	4	IS

GETTPTYPE	FUNCTION	5	   r   VARCHAR2 (1024);

GETTPTYPE	FUNCTION	6	BEGIN

GETTPTYPE	FUNCTION	7	   IF pZayId = 0

GETTPTYPE	FUNCTION	8	   THEN

GETTPTYPE	FUNCTION	9	      RETURN 0;

GETTPTYPE	FUNCTION	10	   END IF;

GETTPTYPE	FUNCTION	11	

GETTPTYPE	FUNCTION	12	   BEGIN

GETTPTYPE	FUNCTION	13	      SELECT m.tp_type

GETTPTYPE	FUNCTION	14	        INTO r

GETTPTYPE	FUNCTION	15	        FROM bud_ru_zay_ff ff, a14mega m

GETTPTYPE	FUNCTION	16	       WHERE     ff.ff_id =

GETTPTYPE	FUNCTION	17	                    (SELECT id

GETTPTYPE	FUNCTION	18	                       FROM bud_ru_ff

GETTPTYPE	FUNCTION	19	                      WHERE     admin_id = 4

GETTPTYPE	FUNCTION	20	                            AND dpt_id = (SELECT dpt_id

GETTPTYPE	FUNCTION	21	                                            FROM user_list

GETTPTYPE	FUNCTION	22	                                           WHERE tn = (SELECT tn

GETTPTYPE	FUNCTION	23	                                                         FROM bud_ru_zay

GETTPTYPE	FUNCTION	24	                                                        WHERE id = pZayId)))

GETTPTYPE	FUNCTION	25	             AND ff.z_id = pZayId

GETTPTYPE	FUNCTION	26	             AND m.tp_kod = ff.val_list

GETTPTYPE	FUNCTION	27	             AND m.dt = TRUNC ( (SELECT created/*dt_start*/

GETTPTYPE	FUNCTION	28	                                   FROM bud_ru_zay

GETTPTYPE	FUNCTION	29	                                  WHERE id = pZayId),

GETTPTYPE	FUNCTION	30	                               'mm')

GETTPTYPE	FUNCTION	31	             AND m.dpt_id = (SELECT dpt_id

GETTPTYPE	FUNCTION	32	                               FROM user_list

GETTPTYPE	FUNCTION	33	                              WHERE tn = (SELECT tn

GETTPTYPE	FUNCTION	34	                                            FROM bud_ru_zay

GETTPTYPE	FUNCTION	35	                                           WHERE id = pZayId));

GETTPTYPE	FUNCTION	36	

GETTPTYPE	FUNCTION	37	      RETURN r;

GETTPTYPE	FUNCTION	38	   EXCEPTION

GETTPTYPE	FUNCTION	39	      WHEN OTHERS

GETTPTYPE	FUNCTION	40	      THEN

GETTPTYPE	FUNCTION	41	         RETURN 0;

GETTPTYPE	FUNCTION	42	   END;

GETTPTYPE	FUNCTION	43	END;
GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	1	FUNCTION        getMerchReportSvmsOkByRBandDT (p_rb_id IN INTEGER, p_dt IN DATE)

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	2	   RETURN INTEGER

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	3	IS

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	4	   r   INTEGER;

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	5	BEGIN

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	6	   SELECT SUM (NVL (o.svms_ok, 0))

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	7	     INTO r

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	8	     FROM (SELECT h.id, c.data

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	9	             FROM routes_head h, routes_body1 b, calendar c

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	10	            WHERE h.id = b.head_id AND b.id = p_rb_id AND h.data = TRUNC (c.data, 'mm') AND c.dm = b.day_num AND c.data = p_dt) t,

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	11	          merch_report_ok o

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	12	    WHERE t.id = o.head_id(+) AND t.data = o.dt(+);

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	13	

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	14	   RETURN r;

GETMERCHREPORTSVMSOKBYRBANDDT	FUNCTION	15	END;
GETMERCHREPORTSVMSOKBYID	FUNCTION	1	FUNCTION        getMerchReportSvmsOkById (p_id IN INTEGER)

GETMERCHREPORTSVMSOKBYID	FUNCTION	2	   RETURN INTEGER

GETMERCHREPORTSVMSOKBYID	FUNCTION	3	IS

GETMERCHREPORTSVMSOKBYID	FUNCTION	4	   r   INTEGER;

GETMERCHREPORTSVMSOKBYID	FUNCTION	5	BEGIN

GETMERCHREPORTSVMSOKBYID	FUNCTION	6	   SELECT SUM (NVL (o.svms_ok, 0))

GETMERCHREPORTSVMSOKBYID	FUNCTION	7	     INTO r

GETMERCHREPORTSVMSOKBYID	FUNCTION	8	     FROM (SELECT h.id, c.data

GETMERCHREPORTSVMSOKBYID	FUNCTION	9	             FROM routes_head h,

GETMERCHREPORTSVMSOKBYID	FUNCTION	10	                  routes_body1 b,

GETMERCHREPORTSVMSOKBYID	FUNCTION	11	                  calendar c,

GETMERCHREPORTSVMSOKBYID	FUNCTION	12	                  merch_report mr

GETMERCHREPORTSVMSOKBYID	FUNCTION	13	            WHERE h.id = b.head_id AND b.id = mr.rb_id AND h.data = TRUNC (c.data, 'mm') AND c.dm = b.day_num AND c.data = mr.dt AND mr.id = p_id) t,

GETMERCHREPORTSVMSOKBYID	FUNCTION	14	          merch_report_ok o

GETMERCHREPORTSVMSOKBYID	FUNCTION	15	    WHERE t.id = o.head_id(+) AND t.data = o.dt(+);

GETMERCHREPORTSVMSOKBYID	FUNCTION	16	

GETMERCHREPORTSVMSOKBYID	FUNCTION	17	

GETMERCHREPORTSVMSOKBYID	FUNCTION	18	   RETURN r;

GETMERCHREPORTSVMSOKBYID	FUNCTION	19	END;
FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."FREE_STAFF_SEAT_LAST_UPDATE" 

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	3	   ON PERSIK.free_staff_seat

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	6	BEGIN

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	8	END free_staff_seat_last_update;

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	9	

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	10	

FREE_STAFF_SEAT_LAST_UPDATE	TRIGGER	11	

FN_UM_SYSDATE	FUNCTION	1	FUNCTION          "FN_UM_SYSDATE" 

FN_UM_SYSDATE	FUNCTION	2	   RETURN DATE

FN_UM_SYSDATE	FUNCTION	3	IS

FN_UM_SYSDATE	FUNCTION	4	   r   DATE;

FN_UM_SYSDATE	FUNCTION	5	BEGIN

FN_UM_SYSDATE	FUNCTION	6	   SELECT CASE WHEN TO_NUMBER (TO_CHAR (SYSDATE, 'hh24')) >= 19 THEN SYSDATE + 1 ELSE SYSDATE END INTO r FROM DUAL;

FN_UM_SYSDATE	FUNCTION	7	

FN_UM_SYSDATE	FUNCTION	8	   RETURN (r);

FN_UM_SYSDATE	FUNCTION	9	END;

FN_UM_SYSDATE	FUNCTION	10	 

FN_UM_SYSDATE	FUNCTION	11	 

FN_UM_SYSDATE	FUNCTION	12	 

FN_UM_SYSDATE	FUNCTION	13	 
FN_QUERY2STR	FUNCTION	1	FUNCTION        "FN_QUERY2STR" (query_text   IN VARCHAR2,

FN_QUERY2STR	FUNCTION	2	                                                  separator    IN VARCHAR2)

FN_QUERY2STR	FUNCTION	3	   RETURN CLOB

FN_QUERY2STR	FUNCTION	4	IS

FN_QUERY2STR	FUNCTION	5	   std      VARCHAR2 (32000);

FN_QUERY2STR	FUNCTION	6	   c1       INTEGER;

FN_QUERY2STR	FUNCTION	7	   selstr   VARCHAR2 (4000);

FN_QUERY2STR	FUNCTION	8	   err      INT;

FN_QUERY2STR	FUNCTION	9	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_QUERY2STR	FUNCTION	10	   --r        VARCHAR (4000);

FN_QUERY2STR	FUNCTION	11	BEGIN

FN_QUERY2STR	FUNCTION	12	   BEGIN

FN_QUERY2STR	FUNCTION	13	      c1 := DBMS_SQL.open_cursor;

FN_QUERY2STR	FUNCTION	14	      DBMS_SQL.parse (c1, query_text, DBMS_SQL.native);

FN_QUERY2STR	FUNCTION	15	      DBMS_SQL.define_column (c1,

FN_QUERY2STR	FUNCTION	16	                              1,

FN_QUERY2STR	FUNCTION	17	                              selstr,

FN_QUERY2STR	FUNCTION	18	                              4000);

FN_QUERY2STR	FUNCTION	19	      err := DBMS_SQL.EXECUTE (c1);

FN_QUERY2STR	FUNCTION	20	

FN_QUERY2STR	FUNCTION	21	      LOOP

FN_QUERY2STR	FUNCTION	22	         IF DBMS_SQL.fetch_rows (c1) > 0

FN_QUERY2STR	FUNCTION	23	         THEN

FN_QUERY2STR	FUNCTION	24	            DBMS_SQL.COLUMN_VALUE (c1, 1, selstr);

FN_QUERY2STR	FUNCTION	25	            std := std || selstr || separator;

FN_QUERY2STR	FUNCTION	26	         ELSE

FN_QUERY2STR	FUNCTION	27	            EXIT;

FN_QUERY2STR	FUNCTION	28	         END IF;

FN_QUERY2STR	FUNCTION	29	      END LOOP;

FN_QUERY2STR	FUNCTION	30	

FN_QUERY2STR	FUNCTION	31	      DBMS_SQL.CLOSE_CURSOR (c1);

FN_QUERY2STR	FUNCTION	32	

FN_QUERY2STR	FUNCTION	33	      std := SUBSTR (std, 1, LENGTH (std) - LENGTH (separator));

FN_QUERY2STR	FUNCTION	34	   EXCEPTION

FN_QUERY2STR	FUNCTION	35	      WHEN OTHERS

FN_QUERY2STR	FUNCTION	36	      THEN

FN_QUERY2STR	FUNCTION	37	         std := NULL;

FN_QUERY2STR	FUNCTION	38	

FN_QUERY2STR	FUNCTION	39	         /*r := SQLERRM;

FN_QUERY2STR	FUNCTION	40	

FN_QUERY2STR	FUNCTION	41	         INSERT INTO full_log (prg, text)

FN_QUERY2STR	FUNCTION	42	                 VALUES (

FN_QUERY2STR	FUNCTION	43	                           'error',

FN_QUERY2STR	FUNCTION	44	                              'WARNING in FN_QUERY2STR, query text: '

FN_QUERY2STR	FUNCTION	45	                           || query_text

FN_QUERY2STR	FUNCTION	46	                           || ' WARNING: '

FN_QUERY2STR	FUNCTION	47	                           || r);

FN_QUERY2STR	FUNCTION	48	

FN_QUERY2STR	FUNCTION	49	         COMMIT;*/

FN_QUERY2STR	FUNCTION	50	   END;

FN_QUERY2STR	FUNCTION	51	

FN_QUERY2STR	FUNCTION	52	   COMMIT;

FN_QUERY2STR	FUNCTION	53	   RETURN (std);

FN_QUERY2STR	FUNCTION	54	END;
FN_IS_ASSIST	FUNCTION	1	FUNCTION        FN_IS_ASSIST (tn_ IN INTEGER)

FN_IS_ASSIST	FUNCTION	2	   RETURN NUMBER

FN_IS_ASSIST	FUNCTION	3	IS

FN_IS_ASSIST	FUNCTION	4	   v   NUMBER;

FN_IS_ASSIST	FUNCTION	5	BEGIN

FN_IS_ASSIST	FUNCTION	6	   SELECT DECODE (COUNT (*), 0, 0, 1)

FN_IS_ASSIST	FUNCTION	7	     INTO v

FN_IS_ASSIST	FUNCTION	8	     FROM assist

FN_IS_ASSIST	FUNCTION	9	    WHERE child = tn_;

FN_IS_ASSIST	FUNCTION	10	

FN_IS_ASSIST	FUNCTION	11	   RETURN (v);

FN_IS_ASSIST	FUNCTION	12	END;
FN_HAS_PARENT_DB	FUNCTION	1	FUNCTION        FN_HAS_PARENT_DB (tn_ IN INTEGER)

FN_HAS_PARENT_DB	FUNCTION	2	   RETURN NUMBER

FN_HAS_PARENT_DB	FUNCTION	3	IS

FN_HAS_PARENT_DB	FUNCTION	4	   v   NUMBER;

FN_HAS_PARENT_DB	FUNCTION	5	BEGIN

FN_HAS_PARENT_DB	FUNCTION	6	       SELECT DECODE (COUNT (*), 0, 0, DECODE (SUM (u.is_db), 0, 0, 1))

FN_HAS_PARENT_DB	FUNCTION	7	         INTO v

FN_HAS_PARENT_DB	FUNCTION	8	         FROM (SELECT *

FN_HAS_PARENT_DB	FUNCTION	9	                 FROM full

FN_HAS_PARENT_DB	FUNCTION	10	                WHERE full = 1) z,

FN_HAS_PARENT_DB	FUNCTION	11	              spdtree u

FN_HAS_PARENT_DB	FUNCTION	12	        WHERE u.svideninn = z.master

FN_HAS_PARENT_DB	FUNCTION	13	   START WITH (   slave IN (SELECT parent

FN_HAS_PARENT_DB	FUNCTION	14	                              FROM assist

FN_HAS_PARENT_DB	FUNCTION	15	                             WHERE child = tn_)

FN_HAS_PARENT_DB	FUNCTION	16	               OR slave = tn_)

FN_HAS_PARENT_DB	FUNCTION	17	   CONNECT BY PRIOR master = slave;

FN_HAS_PARENT_DB	FUNCTION	18	

FN_HAS_PARENT_DB	FUNCTION	19	   RETURN (v);

FN_HAS_PARENT_DB	FUNCTION	20	END;
FN_HAS_CHILD_DB	FUNCTION	1	FUNCTION        FN_has_CHILD_DB (tn_ IN INTEGER)

FN_HAS_CHILD_DB	FUNCTION	2	   RETURN NUMBER

FN_HAS_CHILD_DB	FUNCTION	3	IS

FN_HAS_CHILD_DB	FUNCTION	4	   v   NUMBER;

FN_HAS_CHILD_DB	FUNCTION	5	BEGIN

FN_HAS_CHILD_DB	FUNCTION	6	   SELECT DECODE (COUNT (*), 0, 0, DECODE (SUM (s.is_db), 0, 0, 1))

FN_HAS_CHILD_DB	FUNCTION	7	     INTO v

FN_HAS_CHILD_DB	FUNCTION	8	     FROM spdtree s, emp_exp e

FN_HAS_CHILD_DB	FUNCTION	9	    WHERE     (   e.exp_tn IN (SELECT parent

FN_HAS_CHILD_DB	FUNCTION	10	                                 FROM assist

FN_HAS_CHILD_DB	FUNCTION	11	                                WHERE child = tn_)

FN_HAS_CHILD_DB	FUNCTION	12	               OR e.exp_tn = tn_)

FN_HAS_CHILD_DB	FUNCTION	13	          AND e.full = 1

FN_HAS_CHILD_DB	FUNCTION	14	          AND s.svideninn = e.emp_tn;

FN_HAS_CHILD_DB	FUNCTION	15	

FN_HAS_CHILD_DB	FUNCTION	16	   RETURN (v);

FN_HAS_CHILD_DB	FUNCTION	17	END;
FN_GET_USER_PATH	FUNCTION	1	FUNCTION          "FN_GET_USER_PATH" (tn_ IN INTEGER)

FN_GET_USER_PATH	FUNCTION	2	   RETURN VARCHAR

FN_GET_USER_PATH	FUNCTION	3	IS

FN_GET_USER_PATH	FUNCTION	4	   r   VARCHAR (4000);

FN_GET_USER_PATH	FUNCTION	5	BEGIN

FN_GET_USER_PATH	FUNCTION	6	   SELECT wm_concat (fio)

FN_GET_USER_PATH	FUNCTION	7	     INTO r

FN_GET_USER_PATH	FUNCTION	8	     FROM (    SELECT u1.fio

FN_GET_USER_PATH	FUNCTION	9	                 FROM (SELECT *

FN_GET_USER_PATH	FUNCTION	10	                         FROM emp_exp

FN_GET_USER_PATH	FUNCTION	11	                        WHERE full = 1) z,

FN_GET_USER_PATH	FUNCTION	12	                      user_list u,

FN_GET_USER_PATH	FUNCTION	13	                      user_list u1

FN_GET_USER_PATH	FUNCTION	14	                WHERE u.tn = z.emp_tn AND u1.tn = z.exp_tn

FN_GET_USER_PATH	FUNCTION	15	           START WITH z.emp_tn = tn_

FN_GET_USER_PATH	FUNCTION	16	           CONNECT BY PRIOR z.exp_tn = z.emp_tn

FN_GET_USER_PATH	FUNCTION	17	             ORDER BY LEVEL DESC);

FN_GET_USER_PATH	FUNCTION	18	

FN_GET_USER_PATH	FUNCTION	19	   RETURN (r);

FN_GET_USER_PATH	FUNCTION	20	END;

FN_GET_USER_PATH	FUNCTION	21	 

FN_GET_USER_PATH	FUNCTION	22	 

FN_GET_USER_PATH	FUNCTION	23	 

FN_GET_USER_PATH	FUNCTION	24	 
FN_GET_SPEC_DT	FUNCTION	1	FUNCTION          "FN_GET_SPEC_DT" (id_net_   IN INTEGER,

FN_GET_SPEC_DT	FUNCTION	2	                                           ag_id_    IN INTEGER,

FN_GET_SPEC_DT	FUNCTION	3	                                           kod_tp_   IN INTEGER,

FN_GET_SPEC_DT	FUNCTION	4	                                           dt_       IN DATE)

FN_GET_SPEC_DT	FUNCTION	5	   RETURN DATE

FN_GET_SPEC_DT	FUNCTION	6	IS

FN_GET_SPEC_DT	FUNCTION	7	   v   DATE;

FN_GET_SPEC_DT	FUNCTION	8	BEGIN

FN_GET_SPEC_DT	FUNCTION	9	     SELECT MAX (sd) sd

FN_GET_SPEC_DT	FUNCTION	10	       INTO v

FN_GET_SPEC_DT	FUNCTION	11	       FROM merch_spec_head h, calendar c

FN_GET_SPEC_DT	FUNCTION	12	      WHERE     h.id_net = id_net_

FN_GET_SPEC_DT	FUNCTION	13	            AND h.ag_id = ag_id_

FN_GET_SPEC_DT	FUNCTION	14	            AND h.kod_tp = kod_tp_

FN_GET_SPEC_DT	FUNCTION	15	            AND h.sd <= c.data

FN_GET_SPEC_DT	FUNCTION	16	            AND c.data = dt_

FN_GET_SPEC_DT	FUNCTION	17	   GROUP BY h.id_net,

FN_GET_SPEC_DT	FUNCTION	18	            h.ag_id,

FN_GET_SPEC_DT	FUNCTION	19	            h.kod_tp,

FN_GET_SPEC_DT	FUNCTION	20	            c.data;

FN_GET_SPEC_DT	FUNCTION	21	

FN_GET_SPEC_DT	FUNCTION	22	   RETURN v;

FN_GET_SPEC_DT	FUNCTION	23	END;

FN_GET_SPEC_DT	FUNCTION	24	 

FN_GET_SPEC_DT	FUNCTION	25	 
FN_GET_SCORE_TN	FUNCTION	1	FUNCTION          "FN_GET_SCORE_TN" (tn_ IN NUMBER, p1_ IN VARCHAR, p_event IN NUMBER)

FN_GET_SCORE_TN	FUNCTION	2	   RETURN NUMBER

FN_GET_SCORE_TN	FUNCTION	3	IS

FN_GET_SCORE_TN	FUNCTION	4	   self_score_        NUMBER;

FN_GET_SCORE_TN	FUNCTION	5	   chief_score_       NUMBER;

FN_GET_SCORE_TN	FUNCTION	6	   exp_avg_score_     NUMBER;

FN_GET_SCORE_TN	FUNCTION	7	   self_score_t_      NUMBER;

FN_GET_SCORE_TN	FUNCTION	8	   chief_score_t_     NUMBER;

FN_GET_SCORE_TN	FUNCTION	9	   exp_avg_score_t_   NUMBER;

FN_GET_SCORE_TN	FUNCTION	10	   score_t_           NUMBER;

FN_GET_SCORE_TN	FUNCTION	11	   result_            NUMBER;

FN_GET_SCORE_TN	FUNCTION	12	BEGIN

FN_GET_SCORE_TN	FUNCTION	13	   SELECT SUM (self_score) self_score,

FN_GET_SCORE_TN	FUNCTION	14	          SUM (chief_score) chief_score,

FN_GET_SCORE_TN	FUNCTION	15	          SUM (exp_avg_score) exp_avg_score,

FN_GET_SCORE_TN	FUNCTION	16	          SUM (self_score * z.weight) self_score_t,

FN_GET_SCORE_TN	FUNCTION	17	          SUM (chief_score * z.weight) chief_score_t,

FN_GET_SCORE_TN	FUNCTION	18	          SUM (exp_avg_score * z.weight) exp_avg_score_t,

FN_GET_SCORE_TN	FUNCTION	19	          SUM (

FN_GET_SCORE_TN	FUNCTION	20	             CASE

FN_GET_SCORE_TN	FUNCTION	21	                WHEN chief_score IS NOT NULL AND exp_avg_score IS NOT NULL THEN (chief_score + exp_avg_score) / 2

FN_GET_SCORE_TN	FUNCTION	22	                WHEN chief_score IS NOT NULL AND exp_avg_score IS NULL THEN chief_score

FN_GET_SCORE_TN	FUNCTION	23	                WHEN chief_score IS NULL AND exp_avg_score IS NOT NULL THEN exp_avg_score

FN_GET_SCORE_TN	FUNCTION	24	                ELSE 0

FN_GET_SCORE_TN	FUNCTION	25	             END

FN_GET_SCORE_TN	FUNCTION	26	             * z.weight)

FN_GET_SCORE_TN	FUNCTION	27	             score_t

FN_GET_SCORE_TN	FUNCTION	28	     INTO self_score_,

FN_GET_SCORE_TN	FUNCTION	29	          chief_score_,

FN_GET_SCORE_TN	FUNCTION	30	          exp_avg_score_,

FN_GET_SCORE_TN	FUNCTION	31	          self_score_t_,

FN_GET_SCORE_TN	FUNCTION	32	          chief_score_t_,

FN_GET_SCORE_TN	FUNCTION	33	          exp_avg_score_t_,

FN_GET_SCORE_TN	FUNCTION	34	          score_t_

FN_GET_SCORE_TN	FUNCTION	35	     FROM (SELECT c.id_num,

FN_GET_SCORE_TN	FUNCTION	36	                  c.NAME,

FN_GET_SCORE_TN	FUNCTION	37	                  c.description,

FN_GET_SCORE_TN	FUNCTION	38	                  c.weight,

FN_GET_SCORE_TN	FUNCTION	39	                  (SELECT score

FN_GET_SCORE_TN	FUNCTION	40	                     FROM OCENKA_score

FN_GET_SCORE_TN	FUNCTION	41	                    WHERE criteria = c.id_num AND tn = tn_ AND exp_tn = tn_ AND event = c.event)

FN_GET_SCORE_TN	FUNCTION	42	                     self_score,

FN_GET_SCORE_TN	FUNCTION	43	                  (SELECT s.score

FN_GET_SCORE_TN	FUNCTION	44	                     FROM OCENKA_score s, emp_exp ee

FN_GET_SCORE_TN	FUNCTION	45	                    WHERE s.criteria = c.id_num AND s.tn = tn_ AND s.event = c.event AND s.tn = ee.emp_tn AND s.exp_tn = ee.exp_tn AND ee.FULL = 1)

FN_GET_SCORE_TN	FUNCTION	46	                     chief_score,

FN_GET_SCORE_TN	FUNCTION	47	                  (SELECT SUM (s.score) / COUNT (s.score)

FN_GET_SCORE_TN	FUNCTION	48	                     FROM OCENKA_score s, full ee

FN_GET_SCORE_TN	FUNCTION	49	                    WHERE s.criteria = c.id_num AND s.tn = tn_ AND s.event = c.event AND s.tn = ee.slave AND s.exp_tn = ee.master AND s.exp_tn <> tn_ AND ee.FULL >= 0)

FN_GET_SCORE_TN	FUNCTION	50	                     exp_avg_score

FN_GET_SCORE_TN	FUNCTION	51	             FROM OCENKA_criteria c

FN_GET_SCORE_TN	FUNCTION	52	            WHERE c.event = p_event

FN_GET_SCORE_TN	FUNCTION	53	                  AND c.pos = (SELECT pos_id

FN_GET_SCORE_TN	FUNCTION	54	                                 FROM spdtree

FN_GET_SCORE_TN	FUNCTION	55	                                WHERE svideninn = tn_)) z;

FN_GET_SCORE_TN	FUNCTION	56	

FN_GET_SCORE_TN	FUNCTION	57	   CASE p1_

FN_GET_SCORE_TN	FUNCTION	58	      WHEN 'self_score'

FN_GET_SCORE_TN	FUNCTION	59	      THEN

FN_GET_SCORE_TN	FUNCTION	60	         result_ := self_score_;

FN_GET_SCORE_TN	FUNCTION	61	      WHEN 'chief_score'

FN_GET_SCORE_TN	FUNCTION	62	      THEN

FN_GET_SCORE_TN	FUNCTION	63	         result_ := chief_score_;

FN_GET_SCORE_TN	FUNCTION	64	      WHEN 'exp_avg_score'

FN_GET_SCORE_TN	FUNCTION	65	      THEN

FN_GET_SCORE_TN	FUNCTION	66	         result_ := exp_avg_score_;

FN_GET_SCORE_TN	FUNCTION	67	      WHEN 'self_score_t'

FN_GET_SCORE_TN	FUNCTION	68	      THEN

FN_GET_SCORE_TN	FUNCTION	69	         result_ := self_score_t_;

FN_GET_SCORE_TN	FUNCTION	70	      WHEN 'chief_score_t'

FN_GET_SCORE_TN	FUNCTION	71	      THEN

FN_GET_SCORE_TN	FUNCTION	72	         result_ := chief_score_t_;

FN_GET_SCORE_TN	FUNCTION	73	      WHEN 'exp_avg_score_t'

FN_GET_SCORE_TN	FUNCTION	74	      THEN

FN_GET_SCORE_TN	FUNCTION	75	         result_ := exp_avg_score_t_;

FN_GET_SCORE_TN	FUNCTION	76	      WHEN 'score_t'

FN_GET_SCORE_TN	FUNCTION	77	      THEN

FN_GET_SCORE_TN	FUNCTION	78	         result_ := score_t_;

FN_GET_SCORE_TN	FUNCTION	79	   END CASE;

FN_GET_SCORE_TN	FUNCTION	80	

FN_GET_SCORE_TN	FUNCTION	81	   RETURN (result_);

FN_GET_SCORE_TN	FUNCTION	82	END fn_get_score_tn;

FN_GET_SCORE_TN	FUNCTION	83	 

FN_GET_SCORE_TN	FUNCTION	84	 

FN_GET_SCORE_TN	FUNCTION	85	 

FN_GET_SCORE_TN	FUNCTION	86	 
FN_GET_SCORE_POS	FUNCTION	1	FUNCTION          "FN_GET_SCORE_POS" (p_emp_tn IN NUMBER, p_exp_tn IN NUMBER, p_event IN NUMBER)

FN_GET_SCORE_POS	FUNCTION	2	   RETURN NUMBER

FN_GET_SCORE_POS	FUNCTION	3	IS

FN_GET_SCORE_POS	FUNCTION	4	   tmpvar   NUMBER;

FN_GET_SCORE_POS	FUNCTION	5	BEGIN

FN_GET_SCORE_POS	FUNCTION	6	   tmpvar := 0;

FN_GET_SCORE_POS	FUNCTION	7	

FN_GET_SCORE_POS	FUNCTION	8	   BEGIN

FN_GET_SCORE_POS	FUNCTION	9	      SELECT SUM (NVL ( (SELECT score

FN_GET_SCORE_POS	FUNCTION	10	                           FROM OCENKA_score

FN_GET_SCORE_POS	FUNCTION	11	                          WHERE tn = p_emp_tn AND exp_tn = p_exp_tn AND event = p_event AND criteria = cr.id_num)

FN_GET_SCORE_POS	FUNCTION	12	                       * cr.weight,

FN_GET_SCORE_POS	FUNCTION	13	                       0))

FN_GET_SCORE_POS	FUNCTION	14	        INTO tmpvar

FN_GET_SCORE_POS	FUNCTION	15	        FROM OCENKA_criteria cr

FN_GET_SCORE_POS	FUNCTION	16	       WHERE cr.event = p_event

FN_GET_SCORE_POS	FUNCTION	17	             AND (cr.TYPE = 4

FN_GET_SCORE_POS	FUNCTION	18	                  AND cr.pos = (SELECT pos_id

FN_GET_SCORE_POS	FUNCTION	19	                                  FROM spdtree

FN_GET_SCORE_POS	FUNCTION	20	                                 WHERE svideninn = p_emp_tn));

FN_GET_SCORE_POS	FUNCTION	21	   EXCEPTION

FN_GET_SCORE_POS	FUNCTION	22	      WHEN NO_DATA_FOUND

FN_GET_SCORE_POS	FUNCTION	23	      THEN

FN_GET_SCORE_POS	FUNCTION	24	         tmpvar := 0;

FN_GET_SCORE_POS	FUNCTION	25	   END;

FN_GET_SCORE_POS	FUNCTION	26	

FN_GET_SCORE_POS	FUNCTION	27	   RETURN (tmpvar);

FN_GET_SCORE_POS	FUNCTION	28	END fn_get_score_pos;

FN_GET_SCORE_POS	FUNCTION	29	 

FN_GET_SCORE_POS	FUNCTION	30	 

FN_GET_SCORE_POS	FUNCTION	31	 

FN_GET_SCORE_POS	FUNCTION	32	 
FN_GET_PRJ_NODE_GRANT	FUNCTION	1	FUNCTION          "FN_GET_PRJ_NODE_GRANT" (

FN_GET_PRJ_NODE_GRANT	FUNCTION	2	   id_    IN INTEGER,

FN_GET_PRJ_NODE_GRANT	FUNCTION	3	   tn_    IN INTEGER,

FN_GET_PRJ_NODE_GRANT	FUNCTION	4	   lvl_   IN INTEGER,

FN_GET_PRJ_NODE_GRANT	FUNCTION	5	   chk_   IN INTEGER := 0)

FN_GET_PRJ_NODE_GRANT	FUNCTION	6	   RETURN INTEGER

FN_GET_PRJ_NODE_GRANT	FUNCTION	7	IS

FN_GET_PRJ_NODE_GRANT	FUNCTION	8	   c_    INTEGER;

FN_GET_PRJ_NODE_GRANT	FUNCTION	9	   c1_   INTEGER;

FN_GET_PRJ_NODE_GRANT	FUNCTION	10	BEGIN

FN_GET_PRJ_NODE_GRANT	FUNCTION	11	   SELECT COUNT (p1.id), SUM (pg.chk * chk_)

FN_GET_PRJ_NODE_GRANT	FUNCTION	12	     INTO c_, c1_

FN_GET_PRJ_NODE_GRANT	FUNCTION	13	     FROM project p1,

FN_GET_PRJ_NODE_GRANT	FUNCTION	14	          project p2,

FN_GET_PRJ_NODE_GRANT	FUNCTION	15	          project p3,

FN_GET_PRJ_NODE_GRANT	FUNCTION	16	          project_grant pg,

FN_GET_PRJ_NODE_GRANT	FUNCTION	17	          user_list u

FN_GET_PRJ_NODE_GRANT	FUNCTION	18	    WHERE     p1.id = p2.parent

FN_GET_PRJ_NODE_GRANT	FUNCTION	19	          AND p2.id = p3.parent

FN_GET_PRJ_NODE_GRANT	FUNCTION	20	          AND p2.id = pg.prj_node_id

FN_GET_PRJ_NODE_GRANT	FUNCTION	21	          AND (pg.pos = u.pos_id OR pg.tn = u.tn)

FN_GET_PRJ_NODE_GRANT	FUNCTION	22	          /*AND u.dpt_id = p1.dpt_id*/

FN_GET_PRJ_NODE_GRANT	FUNCTION	23	          AND (pg.otv = 1 OR pg.chk * chk_ <> 0)

FN_GET_PRJ_NODE_GRANT	FUNCTION	24	          AND u.tn = tn_

FN_GET_PRJ_NODE_GRANT	FUNCTION	25	          AND u.datauvol IS NULL

FN_GET_PRJ_NODE_GRANT	FUNCTION	26	          --AND p3.id = id_

FN_GET_PRJ_NODE_GRANT	FUNCTION	27	          AND ( (p3.id = id_ AND lvl_ = 2) OR (p2.id = id_ AND lvl_ = 1));

FN_GET_PRJ_NODE_GRANT	FUNCTION	28	

FN_GET_PRJ_NODE_GRANT	FUNCTION	29	   IF c_ <> 0

FN_GET_PRJ_NODE_GRANT	FUNCTION	30	   THEN

FN_GET_PRJ_NODE_GRANT	FUNCTION	31	      IF c1_ <> 0

FN_GET_PRJ_NODE_GRANT	FUNCTION	32	      THEN

FN_GET_PRJ_NODE_GRANT	FUNCTION	33	         RETURN (2);

FN_GET_PRJ_NODE_GRANT	FUNCTION	34	      ELSE

FN_GET_PRJ_NODE_GRANT	FUNCTION	35	         RETURN (1);

FN_GET_PRJ_NODE_GRANT	FUNCTION	36	      END IF;

FN_GET_PRJ_NODE_GRANT	FUNCTION	37	   ELSE

FN_GET_PRJ_NODE_GRANT	FUNCTION	38	      RETURN (0);

FN_GET_PRJ_NODE_GRANT	FUNCTION	39	   END IF;

FN_GET_PRJ_NODE_GRANT	FUNCTION	40	END;

FN_GET_PRJ_NODE_GRANT	FUNCTION	41	 

FN_GET_PRJ_NODE_GRANT	FUNCTION	42	 

FN_GET_PRJ_NODE_GRANT	FUNCTION	43	 

FN_GET_PRJ_NODE_GRANT	FUNCTION	44	 
FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	1	FUNCTION          "FN_GET_PRJ_NODE_CNT_OK_CHIEF" (

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	2	   id_      IN INTEGER,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	3	   tn_      IN INTEGER,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	4	   lvl_     IN INTEGER,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	5	   chief_   IN INTEGER := 0)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	6	   RETURN NUMBER

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	7	IS

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	8	   ok_chief_perc_   NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	9	BEGIN

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	10	   SELECT   SUM (DECODE (ok_chief_dt, NULL, 0, 1))

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	11	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	12	          * 100

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	13	             ok_chief_perc

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	14	     INTO ok_chief_perc_

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	15	     FROM (SELECT p3.id, u.tn, p1.dt_end

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	16	             FROM project p1,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	17	                  project p2,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	18	                  project p3,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	19	                  project_grant pg,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	20	                  user_list u

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	21	            WHERE     p1.id = p2.parent

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	22	                  AND p2.id = p3.parent

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	23	                  AND p2.id = pg.prj_node_id

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	24	                  AND (pg.pos = u.pos_id OR pg.tn = u.tn)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	25	                  AND u.dpt_id = p1.dpt_id

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	26	                  AND u.datauvol IS NULL

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	27	                  AND (pg.otv = 1)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	28	                  AND (u.tn IN (SELECT slave

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	29	                                  FROM full

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	30	                                 WHERE master = tn_)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	31	                       OR fn_get_prj_node_grant (

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	32	                             DECODE (lvl_,  2, p3.id,  1, p2.id),

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	33	                             tn_,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	34	                             lvl_,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	35	                             1) = 2)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	36	                  AND (u.tn IN (SELECT slave

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	37	                                  FROM full

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	38	                                 WHERE master = chief_)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	39	                       OR chief_ = 0)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	40	                  AND ( (p3.id = id_ AND lvl_ = 2)

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	41	                       OR (p2.id = id_ AND lvl_ = 1))) u1,

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	42	          project_report pr

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	43	    WHERE u1.tn = pr.tn(+) AND u1.id = pr.prj_node_id(+);

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	44	

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	45	

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	46	   RETURN (ok_chief_perc_);

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	47	END;

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	48	 

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	49	 

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	50	 

FN_GET_PRJ_NODE_CNT_OK_CHIEF	FUNCTION	51	 
FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	1	FUNCTION          "FN_GET_PRJ_NODE_CNT_NO_COMPLET" (

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	2	   id_      IN INTEGER,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	3	   tn_      IN INTEGER,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	4	   lvl_     IN INTEGER,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	5	   chief_   IN INTEGER := 0)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	6	   RETURN NUMBER

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	7	IS

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	8	   no_completed_perc_   NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	9	BEGIN

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	10	   SELECT (COUNT (DISTINCT u1.tn) - SUM (DECODE (completed_dt, NULL, 0, 1)))

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	11	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	12	          * 100

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	13	             no_completed_perc

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	14	     INTO no_completed_perc_

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	15	     FROM (SELECT p3.id, u.tn, p1.dt_end

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	16	             FROM project p1,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	17	                  project p2,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	18	                  project p3,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	19	                  project_grant pg,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	20	                  user_list u

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	21	            WHERE     p1.id = p2.parent

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	22	                  AND p2.id = p3.parent

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	23	                  AND p2.id = pg.prj_node_id

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	24	                  AND (pg.pos = u.pos_id OR pg.tn = u.tn)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	25	                  AND u.dpt_id = p1.dpt_id

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	26	                  AND u.datauvol IS NULL

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	27	                  AND (pg.otv = 1)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	28	                  AND (u.tn IN (SELECT slave

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	29	                                  FROM full

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	30	                                 WHERE master = tn_)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	31	                       OR fn_get_prj_node_grant (

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	32	                             DECODE (lvl_,  2, p3.id,  1, p2.id),

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	33	                             tn_,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	34	                             lvl_,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	35	                             1) = 2)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	36	                  AND (u.tn IN (SELECT slave

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	37	                                  FROM full

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	38	                                 WHERE master = chief_)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	39	                       OR chief_ = 0)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	40	                  AND ( (p3.id = id_ AND lvl_ = 2)

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	41	                       OR (p2.id = id_ AND lvl_ = 1))) u1,

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	42	          project_report pr

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	43	    WHERE u1.tn = pr.tn(+) AND u1.id = pr.prj_node_id(+);

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	44	

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	45	

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	46	   RETURN (no_completed_perc_);

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	47	END;

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	48	 

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	49	 

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	50	 

FN_GET_PRJ_NODE_CNT_NO_COMPLET	FUNCTION	51	 
FN_GET_PRJ_NODE_CNT	FUNCTION	1	FUNCTION          "FN_GET_PRJ_NODE_CNT" (

FN_GET_PRJ_NODE_CNT	FUNCTION	2	   id_      IN INTEGER,

FN_GET_PRJ_NODE_CNT	FUNCTION	3	   tn_      IN INTEGER,

FN_GET_PRJ_NODE_CNT	FUNCTION	4	   lvl_     IN INTEGER,

FN_GET_PRJ_NODE_CNT	FUNCTION	5	   chief_   IN INTEGER := 0                         /*chk_   IN INTEGER := 0*/

FN_GET_PRJ_NODE_CNT	FUNCTION	6	                           )

FN_GET_PRJ_NODE_CNT	FUNCTION	7	   RETURN VARCHAR

FN_GET_PRJ_NODE_CNT	FUNCTION	8	IS

FN_GET_PRJ_NODE_CNT	FUNCTION	9	   total_               NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	10	   completed_           NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	11	   completed_perc_      NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	12	   vsrok_               NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	13	   vsrok_perc_          NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	14	   prosroch             NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	15	   prosroch_perc_       NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	16	   no_completed         NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	17	   no_completed_perc_   NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	18	   ok_chief             NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	19	   ok_chief_perc_       NUMBER (10, 2);

FN_GET_PRJ_NODE_CNT	FUNCTION	20	BEGIN

FN_GET_PRJ_NODE_CNT	FUNCTION	21	   SELECT COUNT (DISTINCT u1.tn) total,

FN_GET_PRJ_NODE_CNT	FUNCTION	22	          SUM (DECODE (completed_dt, NULL, 0, 1)) completed,

FN_GET_PRJ_NODE_CNT	FUNCTION	23	            SUM (DECODE (completed_dt, NULL, 0, 1))

FN_GET_PRJ_NODE_CNT	FUNCTION	24	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT	FUNCTION	25	          * 100

FN_GET_PRJ_NODE_CNT	FUNCTION	26	             completed_perc,

FN_GET_PRJ_NODE_CNT	FUNCTION	27	          SUM (

FN_GET_PRJ_NODE_CNT	FUNCTION	28	             DECODE (completed_dt,

FN_GET_PRJ_NODE_CNT	FUNCTION	29	                     NULL, 0,

FN_GET_PRJ_NODE_CNT	FUNCTION	30	                     DECODE (SIGN (dt_end - TRUNC (completed_dt)), -1, 0, 1)))

FN_GET_PRJ_NODE_CNT	FUNCTION	31	             vsrok,

FN_GET_PRJ_NODE_CNT	FUNCTION	32	          SUM (

FN_GET_PRJ_NODE_CNT	FUNCTION	33	             DECODE (completed_dt,

FN_GET_PRJ_NODE_CNT	FUNCTION	34	                     NULL, 0,

FN_GET_PRJ_NODE_CNT	FUNCTION	35	                     DECODE (SIGN (dt_end - TRUNC (completed_dt)), -1, 0, 1)))

FN_GET_PRJ_NODE_CNT	FUNCTION	36	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT	FUNCTION	37	          * 100

FN_GET_PRJ_NODE_CNT	FUNCTION	38	             vsrok_perc,

FN_GET_PRJ_NODE_CNT	FUNCTION	39	          SUM (

FN_GET_PRJ_NODE_CNT	FUNCTION	40	             DECODE (completed_dt,

FN_GET_PRJ_NODE_CNT	FUNCTION	41	                     NULL, 0,

FN_GET_PRJ_NODE_CNT	FUNCTION	42	                     DECODE (SIGN (dt_end - TRUNC (completed_dt)), -1, 1, 0)))

FN_GET_PRJ_NODE_CNT	FUNCTION	43	             prosroch,

FN_GET_PRJ_NODE_CNT	FUNCTION	44	          SUM (

FN_GET_PRJ_NODE_CNT	FUNCTION	45	             DECODE (completed_dt,

FN_GET_PRJ_NODE_CNT	FUNCTION	46	                     NULL, 0,

FN_GET_PRJ_NODE_CNT	FUNCTION	47	                     DECODE (SIGN (dt_end - TRUNC (completed_dt)), -1, 1, 0)))

FN_GET_PRJ_NODE_CNT	FUNCTION	48	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT	FUNCTION	49	          * 100

FN_GET_PRJ_NODE_CNT	FUNCTION	50	             prosroch_perc,

FN_GET_PRJ_NODE_CNT	FUNCTION	51	          COUNT (DISTINCT u1.tn) - SUM (DECODE (completed_dt, NULL, 0, 1))

FN_GET_PRJ_NODE_CNT	FUNCTION	52	             no_completed,

FN_GET_PRJ_NODE_CNT	FUNCTION	53	          (COUNT (DISTINCT u1.tn) - SUM (DECODE (completed_dt, NULL, 0, 1)))

FN_GET_PRJ_NODE_CNT	FUNCTION	54	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT	FUNCTION	55	          * 100

FN_GET_PRJ_NODE_CNT	FUNCTION	56	             no_completed_perc,

FN_GET_PRJ_NODE_CNT	FUNCTION	57	          SUM (DECODE (ok_chief_dt, NULL, 0, 1)) ok_chief,

FN_GET_PRJ_NODE_CNT	FUNCTION	58	            SUM (DECODE (ok_chief_dt, NULL, 0, 1))

FN_GET_PRJ_NODE_CNT	FUNCTION	59	          / COUNT (DISTINCT u1.tn)

FN_GET_PRJ_NODE_CNT	FUNCTION	60	          * 100

FN_GET_PRJ_NODE_CNT	FUNCTION	61	             ok_chief_perc

FN_GET_PRJ_NODE_CNT	FUNCTION	62	     INTO total_,

FN_GET_PRJ_NODE_CNT	FUNCTION	63	          completed_,

FN_GET_PRJ_NODE_CNT	FUNCTION	64	          completed_perc_,

FN_GET_PRJ_NODE_CNT	FUNCTION	65	          vsrok_,

FN_GET_PRJ_NODE_CNT	FUNCTION	66	          vsrok_perc_,

FN_GET_PRJ_NODE_CNT	FUNCTION	67	          prosroch,

FN_GET_PRJ_NODE_CNT	FUNCTION	68	          prosroch_perc_,

FN_GET_PRJ_NODE_CNT	FUNCTION	69	          no_completed,

FN_GET_PRJ_NODE_CNT	FUNCTION	70	          no_completed_perc_,

FN_GET_PRJ_NODE_CNT	FUNCTION	71	          ok_chief,

FN_GET_PRJ_NODE_CNT	FUNCTION	72	          ok_chief_perc_

FN_GET_PRJ_NODE_CNT	FUNCTION	73	     FROM (SELECT p3.id, u.tn, p1.dt_end

FN_GET_PRJ_NODE_CNT	FUNCTION	74	             FROM project p1,

FN_GET_PRJ_NODE_CNT	FUNCTION	75	                  project p2,

FN_GET_PRJ_NODE_CNT	FUNCTION	76	                  project p3,

FN_GET_PRJ_NODE_CNT	FUNCTION	77	                  project_grant pg,

FN_GET_PRJ_NODE_CNT	FUNCTION	78	                  user_list u

FN_GET_PRJ_NODE_CNT	FUNCTION	79	            WHERE     p1.id = p2.parent

FN_GET_PRJ_NODE_CNT	FUNCTION	80	                  AND p2.id = p3.parent

FN_GET_PRJ_NODE_CNT	FUNCTION	81	                  AND p2.id = pg.prj_node_id

FN_GET_PRJ_NODE_CNT	FUNCTION	82	                  AND (pg.pos = u.pos_id OR pg.tn = u.tn)

FN_GET_PRJ_NODE_CNT	FUNCTION	83	                  AND u.dpt_id = p1.dpt_id

FN_GET_PRJ_NODE_CNT	FUNCTION	84	                  AND u.datauvol IS NULL

FN_GET_PRJ_NODE_CNT	FUNCTION	85	                  AND (pg.otv = 1                   /* OR pg.chk * chk_ <> 0*/

FN_GET_PRJ_NODE_CNT	FUNCTION	86	                                 )

FN_GET_PRJ_NODE_CNT	FUNCTION	87	                  AND (u.tn IN (SELECT slave

FN_GET_PRJ_NODE_CNT	FUNCTION	88	                                  FROM full

FN_GET_PRJ_NODE_CNT	FUNCTION	89	                                 WHERE master = tn_)

FN_GET_PRJ_NODE_CNT	FUNCTION	90	                       OR fn_get_prj_node_grant (

FN_GET_PRJ_NODE_CNT	FUNCTION	91	                             DECODE (lvl_,  2, p3.id,  1, p2.id),

FN_GET_PRJ_NODE_CNT	FUNCTION	92	                             tn_,

FN_GET_PRJ_NODE_CNT	FUNCTION	93	                             lvl_,

FN_GET_PRJ_NODE_CNT	FUNCTION	94	                             1) = 2)

FN_GET_PRJ_NODE_CNT	FUNCTION	95	                  AND (u.tn IN (SELECT slave

FN_GET_PRJ_NODE_CNT	FUNCTION	96	                                  FROM full

FN_GET_PRJ_NODE_CNT	FUNCTION	97	                                 WHERE master = chief_)

FN_GET_PRJ_NODE_CNT	FUNCTION	98	                       OR chief_ = 0)

FN_GET_PRJ_NODE_CNT	FUNCTION	99	                  AND ( (p3.id = id_ AND lvl_ = 2)

FN_GET_PRJ_NODE_CNT	FUNCTION	100	                       OR (p2.id = id_ AND lvl_ = 1))) u1,

FN_GET_PRJ_NODE_CNT	FUNCTION	101	          project_report pr

FN_GET_PRJ_NODE_CNT	FUNCTION	102	    WHERE u1.tn = pr.tn(+) AND u1.id = pr.prj_node_id(+);

FN_GET_PRJ_NODE_CNT	FUNCTION	103	

FN_GET_PRJ_NODE_CNT	FUNCTION	104	   --  RETURN (total_);

FN_GET_PRJ_NODE_CNT	FUNCTION	105	

FN_GET_PRJ_NODE_CNT	FUNCTION	106	   RETURN (   total_

FN_GET_PRJ_NODE_CNT	FUNCTION	107	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	108	           || completed_

FN_GET_PRJ_NODE_CNT	FUNCTION	109	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	110	           || completed_perc_

FN_GET_PRJ_NODE_CNT	FUNCTION	111	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	112	           || vsrok_

FN_GET_PRJ_NODE_CNT	FUNCTION	113	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	114	           || vsrok_perc_

FN_GET_PRJ_NODE_CNT	FUNCTION	115	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	116	           || prosroch

FN_GET_PRJ_NODE_CNT	FUNCTION	117	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	118	           || prosroch_perc_

FN_GET_PRJ_NODE_CNT	FUNCTION	119	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	120	           || no_completed

FN_GET_PRJ_NODE_CNT	FUNCTION	121	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	122	           || no_completed_perc_

FN_GET_PRJ_NODE_CNT	FUNCTION	123	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	124	           || ok_chief

FN_GET_PRJ_NODE_CNT	FUNCTION	125	           || '/'

FN_GET_PRJ_NODE_CNT	FUNCTION	126	           || ok_chief_perc_);

FN_GET_PRJ_NODE_CNT	FUNCTION	127	END;

FN_GET_PRJ_NODE_CNT	FUNCTION	128	 

FN_GET_PRJ_NODE_CNT	FUNCTION	129	 

FN_GET_PRJ_NODE_CNT	FUNCTION	130	 

FN_GET_PRJ_NODE_CNT	FUNCTION	131	 
FN_GET_PRJ_MAX_DT_FIN	FUNCTION	1	FUNCTION          "FN_GET_PRJ_MAX_DT_FIN" (prj_id IN INTEGER)

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	2	   RETURN DATE

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	3	IS

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	4	   dt   DATE;

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	5	BEGIN

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	6	       SELECT MAX (dt_fin)

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	7	         INTO dt

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	8	         FROM project z

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	9	   START WITH z.PARENT = prj_id

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	10	   CONNECT BY PRIOR z.ID = z.PARENT;

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	11	

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	12	   RETURN (dt);

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	13	END;

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	14	 

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	15	 

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	16	 

FN_GET_PRJ_MAX_DT_FIN	FUNCTION	17	 
FN_GET_PRJ_GRANT	FUNCTION	1	FUNCTION          "FN_GET_PRJ_GRANT" (

FN_GET_PRJ_GRANT	FUNCTION	2	   prj_id_   IN INTEGER,

FN_GET_PRJ_GRANT	FUNCTION	3	   tn_       IN INTEGER,

FN_GET_PRJ_GRANT	FUNCTION	4	   chk_      IN INTEGER := 0)

FN_GET_PRJ_GRANT	FUNCTION	5	   RETURN INTEGER

FN_GET_PRJ_GRANT	FUNCTION	6	IS

FN_GET_PRJ_GRANT	FUNCTION	7	   c_    INTEGER;

FN_GET_PRJ_GRANT	FUNCTION	8	   c1_   INTEGER;

FN_GET_PRJ_GRANT	FUNCTION	9	BEGIN

FN_GET_PRJ_GRANT	FUNCTION	10	   SELECT COUNT (p1.id), SUM (pg.chk * chk_)

FN_GET_PRJ_GRANT	FUNCTION	11	     INTO c_, c1_

FN_GET_PRJ_GRANT	FUNCTION	12	     FROM project p1,

FN_GET_PRJ_GRANT	FUNCTION	13	          project p2,

FN_GET_PRJ_GRANT	FUNCTION	14	          project_grant pg,

FN_GET_PRJ_GRANT	FUNCTION	15	          user_list u

FN_GET_PRJ_GRANT	FUNCTION	16	    WHERE     p1.id = p2.parent

FN_GET_PRJ_GRANT	FUNCTION	17	          AND p2.id = pg.prj_node_id

FN_GET_PRJ_GRANT	FUNCTION	18	          AND (pg.pos = u.pos_id OR pg.tn = u.tn)

FN_GET_PRJ_GRANT	FUNCTION	19	          /*AND u.dpt_id = p1.dpt_id*/

FN_GET_PRJ_GRANT	FUNCTION	20	          AND (pg.otv = 1 OR pg.chk * chk_ <> 0)

FN_GET_PRJ_GRANT	FUNCTION	21	          AND u.tn = tn_

FN_GET_PRJ_GRANT	FUNCTION	22	          AND u.datauvol IS NULL

FN_GET_PRJ_GRANT	FUNCTION	23	          AND p1.id = prj_id_;

FN_GET_PRJ_GRANT	FUNCTION	24	

FN_GET_PRJ_GRANT	FUNCTION	25	   IF c_ <> 0

FN_GET_PRJ_GRANT	FUNCTION	26	   THEN

FN_GET_PRJ_GRANT	FUNCTION	27	      IF c1_ <> 0

FN_GET_PRJ_GRANT	FUNCTION	28	      THEN

FN_GET_PRJ_GRANT	FUNCTION	29	         RETURN (2);

FN_GET_PRJ_GRANT	FUNCTION	30	      ELSE

FN_GET_PRJ_GRANT	FUNCTION	31	         RETURN (1);

FN_GET_PRJ_GRANT	FUNCTION	32	      END IF;

FN_GET_PRJ_GRANT	FUNCTION	33	   ELSE

FN_GET_PRJ_GRANT	FUNCTION	34	      RETURN (0);

FN_GET_PRJ_GRANT	FUNCTION	35	   END IF;

FN_GET_PRJ_GRANT	FUNCTION	36	END;

FN_GET_PRJ_GRANT	FUNCTION	37	 

FN_GET_PRJ_GRANT	FUNCTION	38	 

FN_GET_PRJ_GRANT	FUNCTION	39	 

FN_GET_PRJ_GRANT	FUNCTION	40	 
FN_GET_NEW_ID	FUNCTION	1	FUNCTION          "FN_GET_NEW_ID" 

FN_GET_NEW_ID	FUNCTION	2	   RETURN INTEGER

FN_GET_NEW_ID	FUNCTION	3	IS

FN_GET_NEW_ID	FUNCTION	4	   i   INTEGER;

FN_GET_NEW_ID	FUNCTION	5	BEGIN

FN_GET_NEW_ID	FUNCTION	6	   SELECT seq_all.NEXTVAL INTO i FROM DUAL;

FN_GET_NEW_ID	FUNCTION	7	

FN_GET_NEW_ID	FUNCTION	8	   RETURN (i);

FN_GET_NEW_ID	FUNCTION	9	END;

FN_GET_NEW_ID	FUNCTION	10	 

FN_GET_NEW_ID	FUNCTION	11	 
FN_GET_MSRFC_RESPONSE_OK	FUNCTION	1	FUNCTION        FN_GET_MsrfC_RESPONSE_ok (

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	2	   --p_id IN INTEGER

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	3	   p_dt       IN DATE,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	4	   p_ag_id    IN INTEGER,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	5	   p_kod_tp   IN INTEGER)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	6	   RETURN INTEGER

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	7	IS

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	8	   v1            INTEGER;

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	9	   RESPONSE_ok   INTEGER;

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	10	BEGIN

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	11	   RESPONSE_ok := 0;

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	12	

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	13	   FOR a

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	14	      IN (SELECT id

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	15	            FROM merch_spec_report_files f

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	16	           WHERE f.dt = p_dt AND f.ag_id = p_ag_id AND f.kod_tp = p_kod_tp)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	17	   LOOP

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	18	      SELECT CASE

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	19	                WHEN (  NVL (

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	20	                           (SELECT lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	21	                              FROM (  SELECT c.lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	22	                                        FROM user_list u,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	23	                                             routes_agents_pwd p,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	24	                                             merch_spec_report_files f,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	25	                                             merch_spec_report_files_chat c

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	26	                                       WHERE     c.login = u.login

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	27	                                             AND u.login = p.login(+)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	28	                                             AND a.id = c.msr_file_id

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	29	                                             AND u.is_spd = 1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	30	                                    ORDER BY c.id)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	31	                             WHERE ROWNUM = 1),

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	32	                           SYSDATE)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	33	                      - (SELECT lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	34	                           FROM (  SELECT c.lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	35	                                     FROM user_list u,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	36	                                          routes_agents_pwd p,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	37	                                          merch_spec_report_files f,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	38	                                          merch_spec_report_files_chat c

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	39	                                    WHERE     c.login = u.login

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	40	                                          AND u.login = p.login(+)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	41	                                          AND a.id = c.msr_file_id

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	42	                                 ORDER BY c.id)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	43	                          WHERE ROWNUM = 1)) <= 1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	44	                THEN

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	45	                   1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	46	                ELSE

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	47	                   0

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	48	             END

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	49	        INTO v1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	50	        FROM DUAL;

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	51	

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	52	      RESPONSE_ok := RESPONSE_ok + v1;

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	53	   END LOOP;

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	54	

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	55	   /* SELECT CASE

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	56	              WHEN (  NVL (

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	57	                         (SELECT lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	58	                            FROM (  SELECT c.lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	59	                                      FROM user_list u,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	60	                                           routes_agents_pwd p,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	61	                                           merch_spec_report_files_chat c

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	62	                                     WHERE     c.login = u.login

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	63	                                           AND u.login = p.login(+)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	64	                                           AND p_id = c.msr_file_id

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	65	                                           AND u.is_spd = 1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	66	                                  ORDER BY c.id)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	67	                           WHERE ROWNUM = 1),

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	68	                         SYSDATE)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	69	                    - (SELECT lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	70	                         FROM (  SELECT c.lu

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	71	                                   FROM user_list u,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	72	                                        routes_agents_pwd p,

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	73	                                        merch_spec_report_files_chat c

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	74	                                  WHERE     c.login = u.login

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	75	                                        AND u.login = p.login(+)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	76	                                        AND p_id = c.msr_file_id

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	77	                               ORDER BY c.id)

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	78	                        WHERE ROWNUM = 1)) <= 1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	79	              THEN

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	80	                 1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	81	              ELSE

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	82	                 0

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	83	           END

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	84	      INTO v1

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	85	      FROM DUAL;*/

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	86	

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	87	   RETURN (RESPONSE_ok);

FN_GET_MSRFC_RESPONSE_OK	FUNCTION	88	END;
FN_GET_MSRFC_CNT1	FUNCTION	1	FUNCTION        FN_GET_MSRFC_CNT1 (p_dt       IN DATE,

FN_GET_MSRFC_CNT1	FUNCTION	2	                                                     p_ag_id    IN INTEGER,

FN_GET_MSRFC_CNT1	FUNCTION	3	                                                     p_kod_tp   IN INTEGER)

FN_GET_MSRFC_CNT1	FUNCTION	4	   RETURN INTEGER

FN_GET_MSRFC_CNT1	FUNCTION	5	IS

FN_GET_MSRFC_CNT1	FUNCTION	6	   v1   INTEGER;

FN_GET_MSRFC_CNT1	FUNCTION	7	BEGIN

FN_GET_MSRFC_CNT1	FUNCTION	8	   SELECT COUNT (DISTINCT f.id)

FN_GET_MSRFC_CNT1	FUNCTION	9	     INTO v1

FN_GET_MSRFC_CNT1	FUNCTION	10	     FROM merch_spec_report_files f, merch_spec_report_files_chat c

FN_GET_MSRFC_CNT1	FUNCTION	11	    WHERE     c.msr_file_id = f.id

FN_GET_MSRFC_CNT1	FUNCTION	12	          AND f.dt = p_dt

FN_GET_MSRFC_CNT1	FUNCTION	13	          AND f.ag_id = p_ag_id

FN_GET_MSRFC_CNT1	FUNCTION	14	          AND f.kod_tp = p_kod_tp;

FN_GET_MSRFC_CNT1	FUNCTION	15	

FN_GET_MSRFC_CNT1	FUNCTION	16	   RETURN (v1);

FN_GET_MSRFC_CNT1	FUNCTION	17	END;
FN_GET_MSRFC_CNT	FUNCTION	1	FUNCTION          "FN_GET_MSRFC_CNT" (p_id IN INTEGER)

FN_GET_MSRFC_CNT	FUNCTION	2	   RETURN INTEGER

FN_GET_MSRFC_CNT	FUNCTION	3	IS

FN_GET_MSRFC_CNT	FUNCTION	4	   v1   INTEGER;

FN_GET_MSRFC_CNT	FUNCTION	5	BEGIN

FN_GET_MSRFC_CNT	FUNCTION	6	   SELECT COUNT (*)

FN_GET_MSRFC_CNT	FUNCTION	7	     INTO v1

FN_GET_MSRFC_CNT	FUNCTION	8	     FROM merch_spec_report_files_chat c

FN_GET_MSRFC_CNT	FUNCTION	9	    WHERE c.msr_file_id = p_id;

FN_GET_MSRFC_CNT	FUNCTION	10	

FN_GET_MSRFC_CNT	FUNCTION	11	   RETURN (v1);

FN_GET_MSRFC_CNT	FUNCTION	12	END;

FN_GET_MSRFC_CNT	FUNCTION	13	 

FN_GET_MSRFC_CNT	FUNCTION	14	 
FN_GET_MC_RESPONSE_OK	FUNCTION	1	FUNCTION        FN_GET_MC_RESPONSE_ok (

FN_GET_MC_RESPONSE_OK	FUNCTION	2	   p_dt       IN DATE,

FN_GET_MC_RESPONSE_OK	FUNCTION	3	   p_ag_id    IN INTEGER,

FN_GET_MC_RESPONSE_OK	FUNCTION	4	   p_kod_tp   IN INTEGER)

FN_GET_MC_RESPONSE_OK	FUNCTION	5	   RETURN integer

FN_GET_MC_RESPONSE_OK	FUNCTION	6	IS

FN_GET_MC_RESPONSE_OK	FUNCTION	7	   v1   integer;

FN_GET_MC_RESPONSE_OK	FUNCTION	8	BEGIN

FN_GET_MC_RESPONSE_OK	FUNCTION	9	   SELECT CASE

FN_GET_MC_RESPONSE_OK	FUNCTION	10	             WHEN (  NVL (

FN_GET_MC_RESPONSE_OK	FUNCTION	11	                        (SELECT lu

FN_GET_MC_RESPONSE_OK	FUNCTION	12	                           FROM (  SELECT c.lu

FN_GET_MC_RESPONSE_OK	FUNCTION	13	                                     FROM user_list u,

FN_GET_MC_RESPONSE_OK	FUNCTION	14	                                          routes_agents_pwd p,

FN_GET_MC_RESPONSE_OK	FUNCTION	15	                                          merch_chat c

FN_GET_MC_RESPONSE_OK	FUNCTION	16	                                    WHERE     c.login = u.login

FN_GET_MC_RESPONSE_OK	FUNCTION	17	                                          AND u.login = p.login(+)

FN_GET_MC_RESPONSE_OK	FUNCTION	18	                                          AND c.dt = p_dt

FN_GET_MC_RESPONSE_OK	FUNCTION	19	                                          AND c.ag_id = p_ag_id

FN_GET_MC_RESPONSE_OK	FUNCTION	20	                                          AND c.kod_tp = p_kod_tp

FN_GET_MC_RESPONSE_OK	FUNCTION	21	                                          AND u.is_spd = 1

FN_GET_MC_RESPONSE_OK	FUNCTION	22	                                 ORDER BY c.id)

FN_GET_MC_RESPONSE_OK	FUNCTION	23	                          WHERE ROWNUM = 1),

FN_GET_MC_RESPONSE_OK	FUNCTION	24	                        SYSDATE)

FN_GET_MC_RESPONSE_OK	FUNCTION	25	                   - (SELECT lu

FN_GET_MC_RESPONSE_OK	FUNCTION	26	                        FROM (  SELECT c.lu

FN_GET_MC_RESPONSE_OK	FUNCTION	27	                                  FROM user_list u,

FN_GET_MC_RESPONSE_OK	FUNCTION	28	                                       routes_agents_pwd p,

FN_GET_MC_RESPONSE_OK	FUNCTION	29	                                       merch_chat c

FN_GET_MC_RESPONSE_OK	FUNCTION	30	                                 WHERE     c.login = u.login

FN_GET_MC_RESPONSE_OK	FUNCTION	31	                                       AND u.login = p.login(+)

FN_GET_MC_RESPONSE_OK	FUNCTION	32	                                       AND c.dt = p_dt

FN_GET_MC_RESPONSE_OK	FUNCTION	33	                                       AND c.ag_id = p_ag_id

FN_GET_MC_RESPONSE_OK	FUNCTION	34	                                       AND c.kod_tp = p_kod_tp

FN_GET_MC_RESPONSE_OK	FUNCTION	35	                              ORDER BY c.id)

FN_GET_MC_RESPONSE_OK	FUNCTION	36	                       WHERE ROWNUM = 1)) <= 1

FN_GET_MC_RESPONSE_OK	FUNCTION	37	             THEN

FN_GET_MC_RESPONSE_OK	FUNCTION	38	                1

FN_GET_MC_RESPONSE_OK	FUNCTION	39	             ELSE

FN_GET_MC_RESPONSE_OK	FUNCTION	40	                0

FN_GET_MC_RESPONSE_OK	FUNCTION	41	          END

FN_GET_MC_RESPONSE_OK	FUNCTION	42	     INTO v1

FN_GET_MC_RESPONSE_OK	FUNCTION	43	     FROM DUAL;

FN_GET_MC_RESPONSE_OK	FUNCTION	44	

FN_GET_MC_RESPONSE_OK	FUNCTION	45	   RETURN (v1);

FN_GET_MC_RESPONSE_OK	FUNCTION	46	END;
FN_GET_MC_LAST	FUNCTION	1	FUNCTION          "FN_GET_MC_LAST" (p_dt       IN DATE,

FN_GET_MC_LAST	FUNCTION	2	                                                  p_ag_id    IN INTEGER,

FN_GET_MC_LAST	FUNCTION	3	                                                  p_kod_tp   IN INTEGER)

FN_GET_MC_LAST	FUNCTION	4	   RETURN INTEGER

FN_GET_MC_LAST	FUNCTION	5	IS

FN_GET_MC_LAST	FUNCTION	6	   v1   INTEGER;

FN_GET_MC_LAST	FUNCTION	7	BEGIN

FN_GET_MC_LAST	FUNCTION	8	   SELECT is_spd

FN_GET_MC_LAST	FUNCTION	9	     INTO v1

FN_GET_MC_LAST	FUNCTION	10	     FROM (  SELECT NVL (u.is_spd, -1) is_spd

FN_GET_MC_LAST	FUNCTION	11	               FROM user_list u, routes_agents_pwd p, merch_chat c

FN_GET_MC_LAST	FUNCTION	12	              WHERE     c.login = u.login

FN_GET_MC_LAST	FUNCTION	13	                    AND u.login = p.login(+)

FN_GET_MC_LAST	FUNCTION	14	                    AND c.dt = p_dt

FN_GET_MC_LAST	FUNCTION	15	                    AND c.ag_id = p_ag_id

FN_GET_MC_LAST	FUNCTION	16	                    AND c.kod_tp = p_kod_tp

FN_GET_MC_LAST	FUNCTION	17	           ORDER BY c.id DESC)

FN_GET_MC_LAST	FUNCTION	18	    WHERE ROWNUM = 1;

FN_GET_MC_LAST	FUNCTION	19	

FN_GET_MC_LAST	FUNCTION	20	   RETURN (v1);

FN_GET_MC_LAST	FUNCTION	21	END;

FN_GET_MC_LAST	FUNCTION	22	 

FN_GET_MC_LAST	FUNCTION	23	 
FN_GET_MC_CNT	FUNCTION	1	FUNCTION          "FN_GET_MC_CNT" (p_dt       IN DATE,

FN_GET_MC_CNT	FUNCTION	2	                                                 p_ag_id    IN INTEGER,

FN_GET_MC_CNT	FUNCTION	3	                                                 p_kod_tp   IN INTEGER)

FN_GET_MC_CNT	FUNCTION	4	   RETURN INTEGER

FN_GET_MC_CNT	FUNCTION	5	IS

FN_GET_MC_CNT	FUNCTION	6	   v1   INTEGER;

FN_GET_MC_CNT	FUNCTION	7	BEGIN

FN_GET_MC_CNT	FUNCTION	8	   SELECT COUNT (*)

FN_GET_MC_CNT	FUNCTION	9	     INTO v1

FN_GET_MC_CNT	FUNCTION	10	     FROM merch_chat c

FN_GET_MC_CNT	FUNCTION	11	    WHERE c.dt = p_dt AND c.ag_id = p_ag_id AND c.kod_tp = p_kod_tp;

FN_GET_MC_CNT	FUNCTION	12	

FN_GET_MC_CNT	FUNCTION	13	   RETURN (v1);

FN_GET_MC_CNT	FUNCTION	14	END;

FN_GET_MC_CNT	FUNCTION	15	 

FN_GET_MC_CNT	FUNCTION	16	 
FN_GET_MC_CLOSED	FUNCTION	1	FUNCTION          "FN_GET_MC_CLOSED" (p_dt       IN DATE,

FN_GET_MC_CLOSED	FUNCTION	2	                                                    p_ag_id    IN INTEGER,

FN_GET_MC_CLOSED	FUNCTION	3	                                                    p_kod_tp   IN INTEGER)

FN_GET_MC_CLOSED	FUNCTION	4	   RETURN INTEGER

FN_GET_MC_CLOSED	FUNCTION	5	IS

FN_GET_MC_CLOSED	FUNCTION	6	   v1   INTEGER;

FN_GET_MC_CLOSED	FUNCTION	7	BEGIN

FN_GET_MC_CLOSED	FUNCTION	8	   SELECT COUNT (*)

FN_GET_MC_CLOSED	FUNCTION	9	     INTO v1

FN_GET_MC_CLOSED	FUNCTION	10	     FROM merch_chat_closed c

FN_GET_MC_CLOSED	FUNCTION	11	    WHERE c.dt = p_dt AND c.ag_id = p_ag_id AND c.kod_tp = p_kod_tp;

FN_GET_MC_CLOSED	FUNCTION	12	

FN_GET_MC_CLOSED	FUNCTION	13	   IF v1 IS NULL

FN_GET_MC_CLOSED	FUNCTION	14	   THEN

FN_GET_MC_CLOSED	FUNCTION	15	      v1 := 0;

FN_GET_MC_CLOSED	FUNCTION	16	   END IF;

FN_GET_MC_CLOSED	FUNCTION	17	

FN_GET_MC_CLOSED	FUNCTION	18	   RETURN (v1);

FN_GET_MC_CLOSED	FUNCTION	19	END;

FN_GET_MC_CLOSED	FUNCTION	20	 

FN_GET_MC_CLOSED	FUNCTION	21	 
FN_GET_FULL	FUNCTION	1	FUNCTION        FN_GET_FULL (p_master   IN NUMBER,

FN_GET_FULL	FUNCTION	2	                                               p_slave    IN NUMBER)

FN_GET_FULL	FUNCTION	3	   RETURN INTEGER

FN_GET_FULL	FUNCTION	4	IS

FN_GET_FULL	FUNCTION	5	   i   INTEGER;

FN_GET_FULL	FUNCTION	6	BEGIN

FN_GET_FULL	FUNCTION	7	   IF p_master = p_slave

FN_GET_FULL	FUNCTION	8	   THEN

FN_GET_FULL	FUNCTION	9	      RETURN -2;

FN_GET_FULL	FUNCTION	10	   END IF;

FN_GET_FULL	FUNCTION	11	

FN_GET_FULL	FUNCTION	12	   SELECT COUNT (*)

FN_GET_FULL	FUNCTION	13	     INTO i

FN_GET_FULL	FUNCTION	14	     FROM DUAL

FN_GET_FULL	FUNCTION	15	    WHERE EXISTS

FN_GET_FULL	FUNCTION	16	             (SELECT *

FN_GET_FULL	FUNCTION	17	                FROM emp_exp

FN_GET_FULL	FUNCTION	18	               WHERE exp_tn = p_master AND emp_tn = p_slave AND full = 1);

FN_GET_FULL	FUNCTION	19	

FN_GET_FULL	FUNCTION	20	   IF i = 1

FN_GET_FULL	FUNCTION	21	   THEN

FN_GET_FULL	FUNCTION	22	      RETURN 1;

FN_GET_FULL	FUNCTION	23	   END IF;

FN_GET_FULL	FUNCTION	24	

FN_GET_FULL	FUNCTION	25	   SELECT COUNT (*)

FN_GET_FULL	FUNCTION	26	     INTO i

FN_GET_FULL	FUNCTION	27	     FROM DUAL

FN_GET_FULL	FUNCTION	28	    WHERE EXISTS

FN_GET_FULL	FUNCTION	29	             (SELECT *

FN_GET_FULL	FUNCTION	30	                FROM emp_exp

FN_GET_FULL	FUNCTION	31	               WHERE     exp_tn = p_master

FN_GET_FULL	FUNCTION	32	                     AND emp_tn = p_slave

FN_GET_FULL	FUNCTION	33	                     AND full = 0

FN_GET_FULL	FUNCTION	34	                     AND emp_tn <> exp_tn);

FN_GET_FULL	FUNCTION	35	

FN_GET_FULL	FUNCTION	36	   IF i = 1

FN_GET_FULL	FUNCTION	37	   THEN

FN_GET_FULL	FUNCTION	38	      RETURN 0;

FN_GET_FULL	FUNCTION	39	   END IF;

FN_GET_FULL	FUNCTION	40	

FN_GET_FULL	FUNCTION	41	   SELECT COUNT (*)

FN_GET_FULL	FUNCTION	42	     INTO i

FN_GET_FULL	FUNCTION	43	     FROM DUAL

FN_GET_FULL	FUNCTION	44	    WHERE EXISTS

FN_GET_FULL	FUNCTION	45	             (SELECT *

FN_GET_FULL	FUNCTION	46	                FROM (    SELECT z.*

FN_GET_FULL	FUNCTION	47	                            FROM (SELECT *

FN_GET_FULL	FUNCTION	48	                                    FROM emp_exp

FN_GET_FULL	FUNCTION	49	                                   WHERE full = 1 AND exp_tn <> emp_tn) z

FN_GET_FULL	FUNCTION	50	                      START WITH exp_tn = p_master

FN_GET_FULL	FUNCTION	51	                      CONNECT BY PRIOR emp_tn = exp_tn)

FN_GET_FULL	FUNCTION	52	               WHERE emp_tn = p_slave);

FN_GET_FULL	FUNCTION	53	

FN_GET_FULL	FUNCTION	54	   IF i = 1

FN_GET_FULL	FUNCTION	55	   THEN

FN_GET_FULL	FUNCTION	56	      RETURN 0;

FN_GET_FULL	FUNCTION	57	   END IF;

FN_GET_FULL	FUNCTION	58	

FN_GET_FULL	FUNCTION	59	   SELECT NVL (is_super, 0) + NVL (is_acceptor, 0) + NVL (is_admin, 0)

FN_GET_FULL	FUNCTION	60	     INTO i

FN_GET_FULL	FUNCTION	61	     FROM spdtree

FN_GET_FULL	FUNCTION	62	    WHERE svideninn = p_master;

FN_GET_FULL	FUNCTION	63	

FN_GET_FULL	FUNCTION	64	   IF i > 0

FN_GET_FULL	FUNCTION	65	   THEN

FN_GET_FULL	FUNCTION	66	      RETURN 0;

FN_GET_FULL	FUNCTION	67	   END IF;

FN_GET_FULL	FUNCTION	68	

FN_GET_FULL	FUNCTION	69	   RETURN (-1);

FN_GET_FULL	FUNCTION	70	/*

FN_GET_FULL	FUNCTION	71	CREATE OR REPLACE FUNCTION PERSIK."FN_GET_FULL" (p_master   IN NUMBER,

FN_GET_FULL	FUNCTION	72	                                                 p_slave    IN NUMBER)

FN_GET_FULL	FUNCTION	73	   RETURN INTEGER

FN_GET_FULL	FUNCTION	74	IS

FN_GET_FULL	FUNCTION	75	   i   INTEGER;

FN_GET_FULL	FUNCTION	76	BEGIN

FN_GET_FULL	FUNCTION	77	   IF p_master = p_slave

FN_GET_FULL	FUNCTION	78	   THEN

FN_GET_FULL	FUNCTION	79	      RETURN -2;

FN_GET_FULL	FUNCTION	80	   END IF;

FN_GET_FULL	FUNCTION	81	

FN_GET_FULL	FUNCTION	82	   SELECT COUNT (*)

FN_GET_FULL	FUNCTION	83	     INTO i

FN_GET_FULL	FUNCTION	84	     FROM emp_exp

FN_GET_FULL	FUNCTION	85	    WHERE exp_tn = p_master AND emp_tn = p_slave AND full = 1;

FN_GET_FULL	FUNCTION	86	

FN_GET_FULL	FUNCTION	87	   IF i = 1

FN_GET_FULL	FUNCTION	88	   THEN

FN_GET_FULL	FUNCTION	89	      RETURN 1;

FN_GET_FULL	FUNCTION	90	   END IF;

FN_GET_FULL	FUNCTION	91	

FN_GET_FULL	FUNCTION	92	   SELECT COUNT (*)

FN_GET_FULL	FUNCTION	93	     INTO i

FN_GET_FULL	FUNCTION	94	     FROM emp_exp

FN_GET_FULL	FUNCTION	95	    WHERE     exp_tn = p_master

FN_GET_FULL	FUNCTION	96	          AND emp_tn = p_slave

FN_GET_FULL	FUNCTION	97	          AND full = 0

FN_GET_FULL	FUNCTION	98	          AND emp_tn <> exp_tn;

FN_GET_FULL	FUNCTION	99	

FN_GET_FULL	FUNCTION	100	   IF i = 1

FN_GET_FULL	FUNCTION	101	   THEN

FN_GET_FULL	FUNCTION	102	      RETURN 0;

FN_GET_FULL	FUNCTION	103	   END IF;

FN_GET_FULL	FUNCTION	104	

FN_GET_FULL	FUNCTION	105	   SELECT COUNT (*)

FN_GET_FULL	FUNCTION	106	     INTO i

FN_GET_FULL	FUNCTION	107	     FROM (    SELECT z.*

FN_GET_FULL	FUNCTION	108	                 FROM (SELECT *

FN_GET_FULL	FUNCTION	109	                         FROM emp_exp

FN_GET_FULL	FUNCTION	110	                        WHERE full = 1 AND exp_tn <> emp_tn) z

FN_GET_FULL	FUNCTION	111	           START WITH exp_tn = p_master

FN_GET_FULL	FUNCTION	112	           CONNECT BY PRIOR emp_tn = exp_tn)

FN_GET_FULL	FUNCTION	113	    WHERE emp_tn = p_slave;

FN_GET_FULL	FUNCTION	114	

FN_GET_FULL	FUNCTION	115	   IF i = 1

FN_GET_FULL	FUNCTION	116	   THEN

FN_GET_FULL	FUNCTION	117	      RETURN 0;

FN_GET_FULL	FUNCTION	118	   END IF;

FN_GET_FULL	FUNCTION	119	

FN_GET_FULL	FUNCTION	120	

FN_GET_FULL	FUNCTION	121	   SELECT NVL (is_super, 0) + NVL (is_acceptor, 0) + NVL (is_admin, 0)

FN_GET_FULL	FUNCTION	122	     INTO i

FN_GET_FULL	FUNCTION	123	     FROM spdtree

FN_GET_FULL	FUNCTION	124	    WHERE svideninn = p_master;

FN_GET_FULL	FUNCTION	125	

FN_GET_FULL	FUNCTION	126	   IF i > 0

FN_GET_FULL	FUNCTION	127	   THEN

FN_GET_FULL	FUNCTION	128	      RETURN 0;

FN_GET_FULL	FUNCTION	129	   END IF;

FN_GET_FULL	FUNCTION	130	

FN_GET_FULL	FUNCTION	131	   RETURN (-1);

FN_GET_FULL	FUNCTION	132	END FN_GET_FULL;

FN_GET_FULL	FUNCTION	133	*/

FN_GET_FULL	FUNCTION	134	END FN_GET_FULL;
FN_GET_DATA	FUNCTION	1	FUNCTION        FN_GET_DATA (

FN_GET_DATA	FUNCTION	2	   src          IN VARCHAR,

FN_GET_DATA	FUNCTION	3	   dst          IN VARCHAR,

FN_GET_DATA	FUNCTION	4	   src_fields   IN VARCHAR := NULL,

FN_GET_DATA	FUNCTION	5	   dst_fields   IN VARCHAR := NULL,

FN_GET_DATA	FUNCTION	6	   user_name    IN VARCHAR := 'web.',

FN_GET_DATA	FUNCTION	7	   dblink       IN VARCHAR := 'sw')

FN_GET_DATA	FUNCTION	8	   RETURN INTEGER

FN_GET_DATA	FUNCTION	9	AS

FN_GET_DATA	FUNCTION	10	   nloop          INTEGER := 1;

FN_GET_DATA	FUNCTION	11	   nsleep         INTEGER := 10;

FN_GET_DATA	FUNCTION	12	   nerr           INTEGER := 0;

FN_GET_DATA	FUNCTION	13	   nSQL           VARCHAR2 (10000);

FN_GET_DATA	FUNCTION	14	   C              PLS_INTEGER;

FN_GET_DATA	FUNCTION	15	   ncols          NUMBER;

FN_GET_DATA	FUNCTION	16	   ct             INTEGER;

FN_GET_DATA	FUNCTION	17	   r              VARCHAR (1024);

FN_GET_DATA	FUNCTION	18	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_GET_DATA	FUNCTION	19	   address_list   VARCHAR2 (4000);

FN_GET_DATA	FUNCTION	20	BEGIN

FN_GET_DATA	FUNCTION	21	   SELECT wm_concat (e_mail)

FN_GET_DATA	FUNCTION	22	     INTO address_list

FN_GET_DATA	FUNCTION	23	     FROM user_list

FN_GET_DATA	FUNCTION	24	    WHERE is_admin = 1 AND datauvol IS NULL;

FN_GET_DATA	FUNCTION	25	

FN_GET_DATA	FUNCTION	26	   INSERT INTO full_log (text, prg)

FN_GET_DATA	FUNCTION	27	        VALUES (src || '=>' || dst || ' started', 'get_data');

FN_GET_DATA	FUNCTION	28	

FN_GET_DATA	FUNCTION	29	   COMMIT;

FN_GET_DATA	FUNCTION	30	

FN_GET_DATA	FUNCTION	31	   nerr := 0;

FN_GET_DATA	FUNCTION	32	   ncols := 0;

FN_GET_DATA	FUNCTION	33	   r := '';

FN_GET_DATA	FUNCTION	34	

FN_GET_DATA	FUNCTION	35	   EXECUTE IMMEDIATE 'truncate table ' || dst || '_tmp drop storage';

FN_GET_DATA	FUNCTION	36	

FN_GET_DATA	FUNCTION	37	   COMMIT;

FN_GET_DATA	FUNCTION	38	

FN_GET_DATA	FUNCTION	39	   EXECUTE IMMEDIATE 'alter session set NLS_NUMERIC_CHARACTERS = ".,"';

FN_GET_DATA	FUNCTION	40	

FN_GET_DATA	FUNCTION	41	   COMMIT;

FN_GET_DATA	FUNCTION	42	

FN_GET_DATA	FUNCTION	43	

FN_GET_DATA	FUNCTION	44	   IF dst_fields IS NOT NULL

FN_GET_DATA	FUNCTION	45	   THEN

FN_GET_DATA	FUNCTION	46	      nSQL :=

FN_GET_DATA	FUNCTION	47	            'insert into '

FN_GET_DATA	FUNCTION	48	         || dst

FN_GET_DATA	FUNCTION	49	         || '_tmp ('

FN_GET_DATA	FUNCTION	50	         || dst_fields

FN_GET_DATA	FUNCTION	51	         || ') select '

FN_GET_DATA	FUNCTION	52	         || NVL (src_fields, '*')

FN_GET_DATA	FUNCTION	53	         || ' from '

FN_GET_DATA	FUNCTION	54	         || user_name

FN_GET_DATA	FUNCTION	55	         || '"'

FN_GET_DATA	FUNCTION	56	         || src

FN_GET_DATA	FUNCTION	57	         || '"@'

FN_GET_DATA	FUNCTION	58	         || dblink

FN_GET_DATA	FUNCTION	59	         || '';

FN_GET_DATA	FUNCTION	60	   ELSE

FN_GET_DATA	FUNCTION	61	      nSQL :=

FN_GET_DATA	FUNCTION	62	            'insert into '

FN_GET_DATA	FUNCTION	63	         || dst

FN_GET_DATA	FUNCTION	64	         || '_tmp select * from '

FN_GET_DATA	FUNCTION	65	         || user_name

FN_GET_DATA	FUNCTION	66	         || '"'

FN_GET_DATA	FUNCTION	67	         || src

FN_GET_DATA	FUNCTION	68	         || '"@'

FN_GET_DATA	FUNCTION	69	         || dblink

FN_GET_DATA	FUNCTION	70	         || '';

FN_GET_DATA	FUNCTION	71	   END IF;

FN_GET_DATA	FUNCTION	72	

FN_GET_DATA	FUNCTION	73	   FOR i IN 1 .. nloop

FN_GET_DATA	FUNCTION	74	   LOOP

FN_GET_DATA	FUNCTION	75	      BEGIN

FN_GET_DATA	FUNCTION	76	         EXECUTE IMMEDIATE nsql;

FN_GET_DATA	FUNCTION	77	

FN_GET_DATA	FUNCTION	78	         COMMIT;

FN_GET_DATA	FUNCTION	79	

FN_GET_DATA	FUNCTION	80	         EXECUTE IMMEDIATE 'select count(*) from ' || dst || '_tmp' INTO ncols;

FN_GET_DATA	FUNCTION	81	

FN_GET_DATA	FUNCTION	82	

FN_GET_DATA	FUNCTION	83	         IF nCols > 0

FN_GET_DATA	FUNCTION	84	         THEN

FN_GET_DATA	FUNCTION	85	            EXECUTE IMMEDIATE 'truncate table ' || dst || ' drop storage';

FN_GET_DATA	FUNCTION	86	

FN_GET_DATA	FUNCTION	87	            EXECUTE IMMEDIATE

FN_GET_DATA	FUNCTION	88	               'insert into ' || dst || ' select * from ' || dst || '_tmp';

FN_GET_DATA	FUNCTION	89	

FN_GET_DATA	FUNCTION	90	            EXECUTE IMMEDIATE 'select count(*) from ' || dst INTO ncols;

FN_GET_DATA	FUNCTION	91	

FN_GET_DATA	FUNCTION	92	

FN_GET_DATA	FUNCTION	93	            COMMIT;

FN_GET_DATA	FUNCTION	94	

FN_GET_DATA	FUNCTION	95	            INSERT INTO full_log (text, prg)

FN_GET_DATA	FUNCTION	96	                    VALUES (

FN_GET_DATA	FUNCTION	97	                                 src

FN_GET_DATA	FUNCTION	98	                              || '=>'

FN_GET_DATA	FUNCTION	99	                              || dst

FN_GET_DATA	FUNCTION	100	                              || ' ended: '

FN_GET_DATA	FUNCTION	101	                              || TO_CHAR (nCols)

FN_GET_DATA	FUNCTION	102	                              || ' records',

FN_GET_DATA	FUNCTION	103	                              'get_data');

FN_GET_DATA	FUNCTION	104	

FN_GET_DATA	FUNCTION	105	            COMMIT;

FN_GET_DATA	FUNCTION	106	            RETURN (nCols);

FN_GET_DATA	FUNCTION	107	         ELSE

FN_GET_DATA	FUNCTION	108	            COMMIT;

FN_GET_DATA	FUNCTION	109	            raise_application_error (-20001, 'source table is empty');

FN_GET_DATA	FUNCTION	110	         END IF;

FN_GET_DATA	FUNCTION	111	      EXCEPTION

FN_GET_DATA	FUNCTION	112	         WHEN OTHERS

FN_GET_DATA	FUNCTION	113	         THEN

FN_GET_DATA	FUNCTION	114	            nerr := nerr + 1;

FN_GET_DATA	FUNCTION	115	            r := SQLERRM;

FN_GET_DATA	FUNCTION	116	

FN_GET_DATA	FUNCTION	117	            INSERT INTO full_log (text, prg)

FN_GET_DATA	FUNCTION	118	                 VALUES (src || '=>' || dst || ' error: ' || r, 'get_data');

FN_GET_DATA	FUNCTION	119	

FN_GET_DATA	FUNCTION	120	            COMMIT;

FN_GET_DATA	FUNCTION	121	            pr_sendmail (address_list,

FN_GET_DATA	FUNCTION	122	                         src || '=>' || dst || ' error',

FN_GET_DATA	FUNCTION	123	                         src || '=>' || dst || ' error: ' || r);

FN_GET_DATA	FUNCTION	124	      END;

FN_GET_DATA	FUNCTION	125	

FN_GET_DATA	FUNCTION	126	      DBMS_LOCK.sleep (nsleep);

FN_GET_DATA	FUNCTION	127	   END LOOP;

FN_GET_DATA	FUNCTION	128	

FN_GET_DATA	FUNCTION	129	   INSERT INTO full_log (text, prg)

FN_GET_DATA	FUNCTION	130	           VALUES (

FN_GET_DATA	FUNCTION	131	                        src

FN_GET_DATA	FUNCTION	132	                     || '=>'

FN_GET_DATA	FUNCTION	133	                     || dst

FN_GET_DATA	FUNCTION	134	                     || ' ended with '

FN_GET_DATA	FUNCTION	135	                     || TO_CHAR (-nerr)

FN_GET_DATA	FUNCTION	136	                     || ' errors',

FN_GET_DATA	FUNCTION	137	                     'get_data');

FN_GET_DATA	FUNCTION	138	

FN_GET_DATA	FUNCTION	139	   COMMIT;

FN_GET_DATA	FUNCTION	140	

FN_GET_DATA	FUNCTION	141	   RETURN (0);

FN_GET_DATA	FUNCTION	142	END;
FN_GETNAME	FUNCTION	1	FUNCTION        FN_GETNAME (p_tn IN NUMBER)

FN_GETNAME	FUNCTION	2	   RETURN VARCHAR

FN_GETNAME	FUNCTION	3	IS

FN_GETNAME	FUNCTION	4	   tmpvar   VARCHAR (255);

FN_GETNAME	FUNCTION	5	BEGIN

FN_GETNAME	FUNCTION	6	   SELECT MAX (NVL (fam, '') || ' ' || NVL (im, '') || ' ' || NVL (otch, ''))

FN_GETNAME	FUNCTION	7	     INTO tmpvar

FN_GETNAME	FUNCTION	8	     FROM spdtree

FN_GETNAME	FUNCTION	9	    WHERE svideninn = p_tn;

FN_GETNAME	FUNCTION	10	

FN_GETNAME	FUNCTION	11	   RETURN (tmpvar);

FN_GETNAME	FUNCTION	12	END;
FN_GETDOLGNID	FUNCTION	1	FUNCTION        FN_GETDOLGNID (p_tn IN NUMBER)

FN_GETDOLGNID	FUNCTION	2	   RETURN INTEGER

FN_GETDOLGNID	FUNCTION	3	IS

FN_GETDOLGNID	FUNCTION	4	   tmpvar   VARCHAR (255);

FN_GETDOLGNID	FUNCTION	5	BEGIN

FN_GETDOLGNID	FUNCTION	6	   BEGIN

FN_GETDOLGNID	FUNCTION	7	      IF p_tn > 999999999

FN_GETDOLGNID	FUNCTION	8	      THEN

FN_GETDOLGNID	FUNCTION	9	         SELECT pos_id

FN_GETDOLGNID	FUNCTION	10	           INTO tmpvar

FN_GETDOLGNID	FUNCTION	11	           FROM spdtree

FN_GETDOLGNID	FUNCTION	12	          WHERE svideninn = p_tn AND ROWNUM = 1;

FN_GETDOLGNID	FUNCTION	13	      END IF;

FN_GETDOLGNID	FUNCTION	14	

FN_GETDOLGNID	FUNCTION	15	      RETURN (tmpvar);

FN_GETDOLGNID	FUNCTION	16	   EXCEPTION

FN_GETDOLGNID	FUNCTION	17	      WHEN NO_DATA_FOUND

FN_GETDOLGNID	FUNCTION	18	      THEN

FN_GETDOLGNID	FUNCTION	19	         RETURN (0);

FN_GETDOLGNID	FUNCTION	20	   END;

FN_GETDOLGNID	FUNCTION	21	END;
FN_GETDOLGN	FUNCTION	1	FUNCTION        FN_GETDOLGN (p_tn IN NUMBER)

FN_GETDOLGN	FUNCTION	2	   RETURN VARCHAR

FN_GETDOLGN	FUNCTION	3	IS

FN_GETDOLGN	FUNCTION	4	   tmpvar   VARCHAR (255);

FN_GETDOLGN	FUNCTION	5	BEGIN

FN_GETDOLGN	FUNCTION	6	   BEGIN

FN_GETDOLGN	FUNCTION	7	      IF p_tn > 999999999

FN_GETDOLGN	FUNCTION	8	      THEN

FN_GETDOLGN	FUNCTION	9	         SELECT (SELECT pos_name

FN_GETDOLGN	FUNCTION	10	                   FROM pos

FN_GETDOLGN	FUNCTION	11	                  WHERE pos_id = spdtree.pos_id)

FN_GETDOLGN	FUNCTION	12	           INTO tmpvar

FN_GETDOLGN	FUNCTION	13	           FROM spdtree

FN_GETDOLGN	FUNCTION	14	          WHERE svideninn = p_tn AND ROWNUM = 1;

FN_GETDOLGN	FUNCTION	15	      END IF;

FN_GETDOLGN	FUNCTION	16	

FN_GETDOLGN	FUNCTION	17	      RETURN (tmpvar);

FN_GETDOLGN	FUNCTION	18	   EXCEPTION

FN_GETDOLGN	FUNCTION	19	      WHEN NO_DATA_FOUND

FN_GETDOLGN	FUNCTION	20	      THEN

FN_GETDOLGN	FUNCTION	21	         RETURN ('');

FN_GETDOLGN	FUNCTION	22	   END;

FN_GETDOLGN	FUNCTION	23	END;
FN_EMP_EXP_REPLACE	FUNCTION	1	FUNCTION        "FN_EMP_EXP_REPLACE" (

FN_EMP_EXP_REPLACE	FUNCTION	2	   old_exp_   IN VARCHAR,

FN_EMP_EXP_REPLACE	FUNCTION	3	   new_exp_   IN VARCHAR)

FN_EMP_EXP_REPLACE	FUNCTION	4	   RETURN VARCHAR

FN_EMP_EXP_REPLACE	FUNCTION	5	IS

FN_EMP_EXP_REPLACE	FUNCTION	6	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_EMP_EXP_REPLACE	FUNCTION	7	   r   VARCHAR (255);

FN_EMP_EXP_REPLACE	FUNCTION	8	BEGIN

FN_EMP_EXP_REPLACE	FUNCTION	9	   FOR a IN (SELECT *

FN_EMP_EXP_REPLACE	FUNCTION	10	               FROM emp_exp

FN_EMP_EXP_REPLACE	FUNCTION	11	              WHERE exp_tn = old_exp_ AND exp_tn <> emp_tn)

FN_EMP_EXP_REPLACE	FUNCTION	12	   LOOP

FN_EMP_EXP_REPLACE	FUNCTION	13	      SELECT fn_empexpdel (a.emp_tn, a.exp_tn) INTO r FROM DUAL;

FN_EMP_EXP_REPLACE	FUNCTION	14	

FN_EMP_EXP_REPLACE	FUNCTION	15	      SELECT fn_emp_exp_ins (a.emp_tn, new_exp_, a.FULL) INTO r FROM DUAL;

FN_EMP_EXP_REPLACE	FUNCTION	16	   END LOOP;

FN_EMP_EXP_REPLACE	FUNCTION	17	

FN_EMP_EXP_REPLACE	FUNCTION	18	   RETURN (r);

FN_EMP_EXP_REPLACE	FUNCTION	19	END;
FN_EMP_EXP_INS	FUNCTION	1	FUNCTION        "FN_EMP_EXP_INS" (emp_tn_   IN VARCHAR,

FN_EMP_EXP_INS	FUNCTION	2	                                                    exp_tn_   IN VARCHAR,

FN_EMP_EXP_INS	FUNCTION	3	                                                    full_     IN NUMBER)

FN_EMP_EXP_INS	FUNCTION	4	   RETURN VARCHAR

FN_EMP_EXP_INS	FUNCTION	5	IS

FN_EMP_EXP_INS	FUNCTION	6	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_EMP_EXP_INS	FUNCTION	7	   tmpvar   VARCHAR (255);

FN_EMP_EXP_INS	FUNCTION	8	   emp      NUMBER;

FN_EMP_EXP_INS	FUNCTION	9	   EXP      NUMBER;

FN_EMP_EXP_INS	FUNCTION	10	   c        NUMBER;

FN_EMP_EXP_INS	FUNCTION	11	   full_1   NUMBER;

FN_EMP_EXP_INS	FUNCTION	12	BEGIN

FN_EMP_EXP_INS	FUNCTION	13	   IF NVL (emp_tn_, 0) = 0 OR NVL (exp_tn_, 0) = 0

FN_EMP_EXP_INS	FUNCTION	14	   THEN

FN_EMP_EXP_INS	FUNCTION	15	      RETURN ('error1');

FN_EMP_EXP_INS	FUNCTION	16	   END IF;

FN_EMP_EXP_INS	FUNCTION	17	

FN_EMP_EXP_INS	FUNCTION	18	   BEGIN

FN_EMP_EXP_INS	FUNCTION	19	      IF emp_tn_ = exp_tn_

FN_EMP_EXP_INS	FUNCTION	20	      THEN

FN_EMP_EXP_INS	FUNCTION	21	         full_1 := 0;

FN_EMP_EXP_INS	FUNCTION	22	      ELSE

FN_EMP_EXP_INS	FUNCTION	23	         full_1 := full_;

FN_EMP_EXP_INS	FUNCTION	24	      END IF;

FN_EMP_EXP_INS	FUNCTION	25	

FN_EMP_EXP_INS	FUNCTION	26	

FN_EMP_EXP_INS	FUNCTION	27	      SELECT COUNT (*)

FN_EMP_EXP_INS	FUNCTION	28	        INTO c

FN_EMP_EXP_INS	FUNCTION	29	        FROM emp_exp

FN_EMP_EXP_INS	FUNCTION	30	       WHERE emp_tn = emp_tn_ AND exp_tn = exp_tn_;

FN_EMP_EXP_INS	FUNCTION	31	

FN_EMP_EXP_INS	FUNCTION	32	      IF c = 1

FN_EMP_EXP_INS	FUNCTION	33	      THEN

FN_EMP_EXP_INS	FUNCTION	34	         IF full_1 = 1

FN_EMP_EXP_INS	FUNCTION	35	         THEN

FN_EMP_EXP_INS	FUNCTION	36	            UPDATE emp_exp

FN_EMP_EXP_INS	FUNCTION	37	               SET full = full_1

FN_EMP_EXP_INS	FUNCTION	38	             WHERE emp_tn = emp_tn_ AND exp_tn = exp_tn_;

FN_EMP_EXP_INS	FUNCTION	39	         END IF;

FN_EMP_EXP_INS	FUNCTION	40	      ELSE

FN_EMP_EXP_INS	FUNCTION	41	         INSERT INTO emp_exp (emp_tn,

FN_EMP_EXP_INS	FUNCTION	42	                              exp_tn,

FN_EMP_EXP_INS	FUNCTION	43	                              FULL,

FN_EMP_EXP_INS	FUNCTION	44	                              emp_manufak,

FN_EMP_EXP_INS	FUNCTION	45	                              exp_manufak)

FN_EMP_EXP_INS	FUNCTION	46	              VALUES (emp_tn_,

FN_EMP_EXP_INS	FUNCTION	47	                      exp_tn_,

FN_EMP_EXP_INS	FUNCTION	48	                      full_1,

FN_EMP_EXP_INS	FUNCTION	49	                      43138,

FN_EMP_EXP_INS	FUNCTION	50	                      43138);

FN_EMP_EXP_INS	FUNCTION	51	      END IF;

FN_EMP_EXP_INS	FUNCTION	52	   EXCEPTION

FN_EMP_EXP_INS	FUNCTION	53	      WHEN OTHERS

FN_EMP_EXP_INS	FUNCTION	54	      THEN

FN_EMP_EXP_INS	FUNCTION	55	         RETURN ('error2');

FN_EMP_EXP_INS	FUNCTION	56	   END;

FN_EMP_EXP_INS	FUNCTION	57	

FN_EMP_EXP_INS	FUNCTION	58	

FN_EMP_EXP_INS	FUNCTION	59	   BEGIN

FN_EMP_EXP_INS	FUNCTION	60	      SELECT COUNT (*)

FN_EMP_EXP_INS	FUNCTION	61	        INTO c

FN_EMP_EXP_INS	FUNCTION	62	        FROM spr_users

FN_EMP_EXP_INS	FUNCTION	63	       WHERE login = exp_tn_;

FN_EMP_EXP_INS	FUNCTION	64	

FN_EMP_EXP_INS	FUNCTION	65	      IF c = 0

FN_EMP_EXP_INS	FUNCTION	66	      THEN

FN_EMP_EXP_INS	FUNCTION	67	         INSERT INTO spr_users (ID,

FN_EMP_EXP_INS	FUNCTION	68	                                fio,

FN_EMP_EXP_INS	FUNCTION	69	                                PASSWORD,

FN_EMP_EXP_INS	FUNCTION	70	                                login,

FN_EMP_EXP_INS	FUNCTION	71	                                access_ocenka,

FN_EMP_EXP_INS	FUNCTION	72	                                tn)

FN_EMP_EXP_INS	FUNCTION	73	              VALUES ( (SELECT ID

FN_EMP_EXP_INS	FUNCTION	74	                          FROM spdtree

FN_EMP_EXP_INS	FUNCTION	75	                         WHERE svideninn = exp_tn_),

FN_EMP_EXP_INS	FUNCTION	76	                      fn_getname (exp_tn_),

FN_EMP_EXP_INS	FUNCTION	77	                      DBMS_RANDOM.STRING ('A', 6),

FN_EMP_EXP_INS	FUNCTION	78	                      exp_tn_,

FN_EMP_EXP_INS	FUNCTION	79	                      1,

FN_EMP_EXP_INS	FUNCTION	80	                      exp_tn_);

FN_EMP_EXP_INS	FUNCTION	81	      END IF;

FN_EMP_EXP_INS	FUNCTION	82	

FN_EMP_EXP_INS	FUNCTION	83	      COMMIT;

FN_EMP_EXP_INS	FUNCTION	84	   EXCEPTION

FN_EMP_EXP_INS	FUNCTION	85	      WHEN OTHERS

FN_EMP_EXP_INS	FUNCTION	86	      THEN

FN_EMP_EXP_INS	FUNCTION	87	         RETURN ('error3');

FN_EMP_EXP_INS	FUNCTION	88	   END;

FN_EMP_EXP_INS	FUNCTION	89	

FN_EMP_EXP_INS	FUNCTION	90	

FN_EMP_EXP_INS	FUNCTION	91	   RETURN ('ok');

FN_EMP_EXP_INS	FUNCTION	92	END fn_emp_exp_ins;
FN_EMPEXPDEL	FUNCTION	1	FUNCTION        FN_EMPEXPDEL (emp_tn_   IN VARCHAR,

FN_EMPEXPDEL	FUNCTION	2	                                                exp_tn_   IN VARCHAR)

FN_EMPEXPDEL	FUNCTION	3	   RETURN VARCHAR

FN_EMPEXPDEL	FUNCTION	4	IS

FN_EMPEXPDEL	FUNCTION	5	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_EMPEXPDEL	FUNCTION	6	   tmpvar   VARCHAR (255);

FN_EMPEXPDEL	FUNCTION	7	   emp      NUMBER;

FN_EMPEXPDEL	FUNCTION	8	   EXP      NUMBER;

FN_EMPEXPDEL	FUNCTION	9	   c        NUMBER;

FN_EMPEXPDEL	FUNCTION	10	   full_1   NUMBER;

FN_EMPEXPDEL	FUNCTION	11	BEGIN

FN_EMPEXPDEL	FUNCTION	12	   BEGIN

FN_EMPEXPDEL	FUNCTION	13	      DELETE FROM emp_exp

FN_EMPEXPDEL	FUNCTION	14	            WHERE emp_tn = emp_tn_ AND exp_tn = exp_tn_;

FN_EMPEXPDEL	FUNCTION	15	

FN_EMPEXPDEL	FUNCTION	16	      COMMIT;

FN_EMPEXPDEL	FUNCTION	17	      RETURN (tmpvar);

FN_EMPEXPDEL	FUNCTION	18	   EXCEPTION

FN_EMPEXPDEL	FUNCTION	19	      WHEN NO_DATA_FOUND

FN_EMPEXPDEL	FUNCTION	20	      THEN

FN_EMPEXPDEL	FUNCTION	21	         RETURN ('');

FN_EMPEXPDEL	FUNCTION	22	   END;

FN_EMPEXPDEL	FUNCTION	23	END;
FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	1	FUNCTION        fn_check_file_section_ms_faq (

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	2	   p_h_name   IN VARCHAR2)

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	3	   RETURN INTEGER

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	4	IS

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	5	   c                INTEGER;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	6	   v_section_name   VARCHAR2 (255);

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	7	   v_section_id     INTEGER;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	8	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	9	BEGIN

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	10	   SELECT COUNT (*)

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	11	     INTO c

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	12	     FROM ms_faq_sections s

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	13	    WHERE md5hash (s.name) = p_h_name;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	14	

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	15	   IF c = 0

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	16	   THEN

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	17	      SELECT MAX (name)

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	18	        INTO v_section_name

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	19	        FROM ms_faq_sections s

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	20	       WHERE md5hash (s.name) = p_h_name;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	21	

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	22	      INSERT INTO ms_faq_sections (name)

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	23	           VALUES (v_section_name);

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	24	

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	25	      COMMIT;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	26	   END IF;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	27	

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	28	   SELECT id

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	29	     INTO v_section_id

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	30	     FROM ms_faq_sections s

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	31	    WHERE md5hash (s.name) = p_h_name;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	32	

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	33	   RETURN v_section_id;

FN_CHECK_FILE_SECTION_MS_FAQ	FUNCTION	34	END;
FN_CHECK_FILE_SECTION	FUNCTION	1	FUNCTION fn_check_file_section (p_h_name   IN VARCHAR2,

FN_CHECK_FILE_SECTION	FUNCTION	2	                                                  p_dpt_id   IN INTEGER)

FN_CHECK_FILE_SECTION	FUNCTION	3	   RETURN INTEGER

FN_CHECK_FILE_SECTION	FUNCTION	4	IS

FN_CHECK_FILE_SECTION	FUNCTION	5	   c                INTEGER;

FN_CHECK_FILE_SECTION	FUNCTION	6	   v_section_name   VARCHAR2 (255);

FN_CHECK_FILE_SECTION	FUNCTION	7	   v_section_id     INTEGER;

FN_CHECK_FILE_SECTION	FUNCTION	8	   PRAGMA AUTONOMOUS_TRANSACTION;

FN_CHECK_FILE_SECTION	FUNCTION	9	BEGIN

FN_CHECK_FILE_SECTION	FUNCTION	10	   SELECT COUNT (*)

FN_CHECK_FILE_SECTION	FUNCTION	11	     INTO c

FN_CHECK_FILE_SECTION	FUNCTION	12	     FROM files_sections s

FN_CHECK_FILE_SECTION	FUNCTION	13	    WHERE md5hash (s.name) = p_h_name AND s.dpt_id = p_dpt_id;

FN_CHECK_FILE_SECTION	FUNCTION	14	

FN_CHECK_FILE_SECTION	FUNCTION	15	   IF c = 0

FN_CHECK_FILE_SECTION	FUNCTION	16	   THEN

FN_CHECK_FILE_SECTION	FUNCTION	17	      SELECT MAX (name)

FN_CHECK_FILE_SECTION	FUNCTION	18	        INTO v_section_name

FN_CHECK_FILE_SECTION	FUNCTION	19	        FROM files_sections s

FN_CHECK_FILE_SECTION	FUNCTION	20	       WHERE md5hash (s.name) = p_h_name;

FN_CHECK_FILE_SECTION	FUNCTION	21	

FN_CHECK_FILE_SECTION	FUNCTION	22	      INSERT INTO files_sections (name, dpt_id)

FN_CHECK_FILE_SECTION	FUNCTION	23	           VALUES (v_section_name, p_dpt_id);

FN_CHECK_FILE_SECTION	FUNCTION	24	

FN_CHECK_FILE_SECTION	FUNCTION	25	      COMMIT;

FN_CHECK_FILE_SECTION	FUNCTION	26	   END IF;

FN_CHECK_FILE_SECTION	FUNCTION	27	

FN_CHECK_FILE_SECTION	FUNCTION	28	   SELECT id

FN_CHECK_FILE_SECTION	FUNCTION	29	     INTO v_section_id

FN_CHECK_FILE_SECTION	FUNCTION	30	     FROM files_sections s

FN_CHECK_FILE_SECTION	FUNCTION	31	    WHERE md5hash (s.name) = p_h_name AND s.dpt_id = p_dpt_id;

FN_CHECK_FILE_SECTION	FUNCTION	32	

FN_CHECK_FILE_SECTION	FUNCTION	33	   RETURN v_section_id;

FN_CHECK_FILE_SECTION	FUNCTION	34	END;
FILL_REMINDERS	PROCEDURE	1	PROCEDURE        fill_reminders (p_dt DATE)

FILL_REMINDERS	PROCEDURE	2	IS

FILL_REMINDERS	PROCEDURE	3	   emesg   CLOB;

FILL_REMINDERS	PROCEDURE	4	BEGIN

FILL_REMINDERS	PROCEDURE	5	   BEGIN

FILL_REMINDERS	PROCEDURE	6	      DELETE FROM merch_report_cal_reminders

FILL_REMINDERS	PROCEDURE	7	            WHERE TRUNC (data, 'mm') = p_dt;

FILL_REMINDERS	PROCEDURE	8	

FILL_REMINDERS	PROCEDURE	9	      COMMIT;

FILL_REMINDERS	PROCEDURE	10	

FILL_REMINDERS	PROCEDURE	11	      INSERT INTO merch_report_cal_reminders (head_id,

FILL_REMINDERS	PROCEDURE	12	                                              ag_id,

FILL_REMINDERS	PROCEDURE	13	                                              kodtp,

FILL_REMINDERS	PROCEDURE	14	                                              data,

FILL_REMINDERS	PROCEDURE	15	                                              name,

FILL_REMINDERS	PROCEDURE	16	                                              pict,

FILL_REMINDERS	PROCEDURE	17	                                              rep_id)

FILL_REMINDERS	PROCEDURE	18	           SELECT b.head_id,

FILL_REMINDERS	PROCEDURE	19	                  b.ag_id,

FILL_REMINDERS	PROCEDURE	20	                  b.kodtp,

FILL_REMINDERS	PROCEDURE	21	                  c.data,

FILL_REMINDERS	PROCEDURE	22	                  cr.name,

FILL_REMINDERS	PROCEDURE	23	                  cr.pict,

FILL_REMINDERS	PROCEDURE	24	                  cr.id

FILL_REMINDERS	PROCEDURE	25	             FROM routes_head h,

FILL_REMINDERS	PROCEDURE	26	                  routes_body1 b,

FILL_REMINDERS	PROCEDURE	27	                  calendar c,

FILL_REMINDERS	PROCEDURE	28	                  (  SELECT b.head_id,

FILL_REMINDERS	PROCEDURE	29	                            b.ag_id,

FILL_REMINDERS	PROCEDURE	30	                            b.kodtp,

FILL_REMINDERS	PROCEDURE	31	                            c.wm,

FILL_REMINDERS	PROCEDURE	32	                            MIN (c.dm) min_dm

FILL_REMINDERS	PROCEDURE	33	                       FROM routes_head h, routes_body1 b, calendar c

FILL_REMINDERS	PROCEDURE	34	                      WHERE     h.data = TRUNC (c.data, 'mm')

FILL_REMINDERS	PROCEDURE	35	                            AND h.id = b.head_id

FILL_REMINDERS	PROCEDURE	36	                            AND b.day_enabled_mr = 1

FILL_REMINDERS	PROCEDURE	37	                            AND b.day_num = c.dm

FILL_REMINDERS	PROCEDURE	38	                   GROUP BY b.head_id,

FILL_REMINDERS	PROCEDURE	39	                            b.ag_id,

FILL_REMINDERS	PROCEDURE	40	                            b.kodtp,

FILL_REMINDERS	PROCEDURE	41	                            c.wm) wmin,

FILL_REMINDERS	PROCEDURE	42	                  merch_report_cal mrc,

FILL_REMINDERS	PROCEDURE	43	                  merch_report_cal_chains mrcc,

FILL_REMINDERS	PROCEDURE	44	                  merch_report_cal_regions mrcr,

FILL_REMINDERS	PROCEDURE	45	                  merch_report_cal_rep cr,

FILL_REMINDERS	PROCEDURE	46	                  merch_report_cal_freq cf,

FILL_REMINDERS	PROCEDURE	47	                  cpp

FILL_REMINDERS	PROCEDURE	48	            WHERE     h.data = p_dt

FILL_REMINDERS	PROCEDURE	49	                  AND c.wm = wmin.wm

FILL_REMINDERS	PROCEDURE	50	                  AND h.data = TRUNC (c.data, 'mm')

FILL_REMINDERS	PROCEDURE	51	                  AND h.id = b.head_id

FILL_REMINDERS	PROCEDURE	52	                  AND b.day_enabled_mr = 1

FILL_REMINDERS	PROCEDURE	53	                  AND b.ag_id = wmin.ag_id

FILL_REMINDERS	PROCEDURE	54	                  AND b.head_id = wmin.head_id

FILL_REMINDERS	PROCEDURE	55	                  AND b.kodtp = wmin.kodtp

FILL_REMINDERS	PROCEDURE	56	                  AND b.day_num = c.dm

FILL_REMINDERS	PROCEDURE	57	                  AND mrc.ag_id = b.ag_id

FILL_REMINDERS	PROCEDURE	58	                  AND mrc.dt = h.data

FILL_REMINDERS	PROCEDURE	59	                  AND mrc.rep_id = cr.id

FILL_REMINDERS	PROCEDURE	60	                  AND mrc.freq_id = cf.id

FILL_REMINDERS	PROCEDURE	61	                  AND b.kodtp = cpp.kodtp

FILL_REMINDERS	PROCEDURE	62	                  AND mrcc.chain = cpp.id_net

FILL_REMINDERS	PROCEDURE	63	                  AND mrcr.region = cpp.h_tz_oblast

FILL_REMINDERS	PROCEDURE	64	                  AND mrc.id = mrcc.parent

FILL_REMINDERS	PROCEDURE	65	                  AND mrc.id = mrcr.parent

FILL_REMINDERS	PROCEDURE	66	                  AND (   '1d'

FILL_REMINDERS	PROCEDURE	67	                       || CASE WHEN b.day_num = wmin.min_dm THEN '1w' END

FILL_REMINDERS	PROCEDURE	68	                       || CASE

FILL_REMINDERS	PROCEDURE	69	                             WHEN b.day_num = wmin.min_dm AND c.wm IN (2, 4)

FILL_REMINDERS	PROCEDURE	70	                             THEN

FILL_REMINDERS	PROCEDURE	71	                                '2m'

FILL_REMINDERS	PROCEDURE	72	                          END

FILL_REMINDERS	PROCEDURE	73	                       || CASE

FILL_REMINDERS	PROCEDURE	74	                             WHEN b.day_num =

FILL_REMINDERS	PROCEDURE	75	                                     (SELECT MIN (c1.dm) min_dm

FILL_REMINDERS	PROCEDURE	76	                                        FROM routes_head h1,

FILL_REMINDERS	PROCEDURE	77	                                             routes_body1 b1,

FILL_REMINDERS	PROCEDURE	78	                                             calendar c1

FILL_REMINDERS	PROCEDURE	79	                                       WHERE     h1.data = TRUNC (c1.data, 'mm')

FILL_REMINDERS	PROCEDURE	80	                                             AND h1.id = b1.head_id

FILL_REMINDERS	PROCEDURE	81	                                             AND b1.day_enabled_mr = 1

FILL_REMINDERS	PROCEDURE	82	                                             AND b1.ag_id = b.ag_id

FILL_REMINDERS	PROCEDURE	83	                                             AND b1.head_id = b.head_id

FILL_REMINDERS	PROCEDURE	84	                                             AND b1.kodtp = b.kodtp

FILL_REMINDERS	PROCEDURE	85	                                             AND b1.day_num = c1.dm

FILL_REMINDERS	PROCEDURE	86	                                             AND c1.data > TRUNC (mrc.lu))

FILL_REMINDERS	PROCEDURE	87	                             THEN

FILL_REMINDERS	PROCEDURE	88	                                '1m'

FILL_REMINDERS	PROCEDURE	89	                          END) LIKE

FILL_REMINDERS	PROCEDURE	90	                         '%' || cf.kod || '%'

FILL_REMINDERS	PROCEDURE	91	         ORDER BY c.data;

FILL_REMINDERS	PROCEDURE	92	

FILL_REMINDERS	PROCEDURE	93	      COMMIT;

FILL_REMINDERS	PROCEDURE	94	

FILL_REMINDERS	PROCEDURE	95	      INSERT INTO merch_report_cal_reminders (head_id,

FILL_REMINDERS	PROCEDURE	96	                                              ag_id,

FILL_REMINDERS	PROCEDURE	97	                                              kodtp,

FILL_REMINDERS	PROCEDURE	98	                                              data,

FILL_REMINDERS	PROCEDURE	99	                                              name,

FILL_REMINDERS	PROCEDURE	100	                                              pict,

FILL_REMINDERS	PROCEDURE	101	                                              text,

FILL_REMINDERS	PROCEDURE	102	                                              rep_id,

FILL_REMINDERS	PROCEDURE	103	                                              aa_id)

FILL_REMINDERS	PROCEDURE	104	           SELECT b.head_id,

FILL_REMINDERS	PROCEDURE	105	                  b.ag_id,

FILL_REMINDERS	PROCEDURE	106	                  b.kodtp,

FILL_REMINDERS	PROCEDURE	107	                  c.data,

FILL_REMINDERS	PROCEDURE	108	                  'Акционная активность' name,

FILL_REMINDERS	PROCEDURE	109	                  'mrc6.png' pict,

FILL_REMINDERS	PROCEDURE	110	                  fn_query2str (

FILL_REMINDERS	PROCEDURE	111	                        'SELECT 

FILL_REMINDERS	PROCEDURE	112	         aa.tasks

FILL_REMINDERS	PROCEDURE	113	    FROM cpp,

FILL_REMINDERS	PROCEDURE	114	         calendar c,

FILL_REMINDERS	PROCEDURE	115	         (SELECT h.id,

FILL_REMINDERS	PROCEDURE	116	                 h.dts,

FILL_REMINDERS	PROCEDURE	117	                 h.dte,

FILL_REMINDERS	PROCEDURE	118	                 h.ag_id,

FILL_REMINDERS	PROCEDURE	119	                 h.h_city,

FILL_REMINDERS	PROCEDURE	120	                 h.id_net,

FILL_REMINDERS	PROCEDURE	121	                 h.tasks,

FILL_REMINDERS	PROCEDURE	122	                 o.h_o

FILL_REMINDERS	PROCEDURE	123	            FROM merch_report_cal_aa_h h, merch_report_cal_aa_o o

FILL_REMINDERS	PROCEDURE	124	           WHERE h.id = o.head_id) aa

FILL_REMINDERS	PROCEDURE	125	   WHERE (cpp.h_city = aa.h_city OR aa.h_city IS NULL)

FILL_REMINDERS	PROCEDURE	126	         AND c.data BETWEEN aa.dts AND aa.dte

FILL_REMINDERS	PROCEDURE	127	         AND aa.id_net = cpp.id_net

FILL_REMINDERS	PROCEDURE	128	         AND aa.h_o = cpp.h_tz_oblast

FILL_REMINDERS	PROCEDURE	129	         and cpp.kodtp='

FILL_REMINDERS	PROCEDURE	130	                     || b.kodtp

FILL_REMINDERS	PROCEDURE	131	                     || '

FILL_REMINDERS	PROCEDURE	132	         and c.data='''

FILL_REMINDERS	PROCEDURE	133	                     || c.data

FILL_REMINDERS	PROCEDURE	134	                     || '''

FILL_REMINDERS	PROCEDURE	135	         and aa.ag_id='

FILL_REMINDERS	PROCEDURE	136	                     || b.ag_id,

FILL_REMINDERS	PROCEDURE	137	                     '<hr>')

FILL_REMINDERS	PROCEDURE	138	                     text,

FILL_REMINDERS	PROCEDURE	139	                  6 rep_id,

FILL_REMINDERS	PROCEDURE	140	                  aa.id aa_id

FILL_REMINDERS	PROCEDURE	141	             FROM routes_head h,

FILL_REMINDERS	PROCEDURE	142	                  routes_body1 b,

FILL_REMINDERS	PROCEDURE	143	                  cpp,

FILL_REMINDERS	PROCEDURE	144	                  calendar c,

FILL_REMINDERS	PROCEDURE	145	                  (SELECT h.id,

FILL_REMINDERS	PROCEDURE	146	                          h.dts,

FILL_REMINDERS	PROCEDURE	147	                          h.dte,

FILL_REMINDERS	PROCEDURE	148	                          h.ag_id,

FILL_REMINDERS	PROCEDURE	149	                          h.h_city,

FILL_REMINDERS	PROCEDURE	150	                          h.id_net,

FILL_REMINDERS	PROCEDURE	151	                          o.h_o

FILL_REMINDERS	PROCEDURE	152	                     FROM merch_report_cal_aa_h h, merch_report_cal_aa_o o

FILL_REMINDERS	PROCEDURE	153	                    WHERE h.id = o.head_id AND NVL (h.cancelled, 0) = 0) aa

FILL_REMINDERS	PROCEDURE	154	            WHERE     h.data = p_dt

FILL_REMINDERS	PROCEDURE	155	                  AND h.data = TRUNC (c.data, 'mm')

FILL_REMINDERS	PROCEDURE	156	                  AND h.id = b.head_id

FILL_REMINDERS	PROCEDURE	157	                  AND b.day_enabled_mr = 1

FILL_REMINDERS	PROCEDURE	158	                  AND b.day_num = c.dm

FILL_REMINDERS	PROCEDURE	159	                  AND b.kodtp = cpp.kodtp

FILL_REMINDERS	PROCEDURE	160	                  AND (cpp.h_city = aa.h_city OR aa.h_city IS NULL)

FILL_REMINDERS	PROCEDURE	161	                  AND c.data BETWEEN aa.dts AND aa.dte

FILL_REMINDERS	PROCEDURE	162	                  AND aa.ag_id = b.ag_id

FILL_REMINDERS	PROCEDURE	163	                  AND aa.id_net = cpp.id_net

FILL_REMINDERS	PROCEDURE	164	                  AND aa.h_o = cpp.h_tz_oblast

FILL_REMINDERS	PROCEDURE	165	         GROUP BY b.head_id,

FILL_REMINDERS	PROCEDURE	166	                  b.ag_id,

FILL_REMINDERS	PROCEDURE	167	                  b.kodtp,

FILL_REMINDERS	PROCEDURE	168	                  c.data,

FILL_REMINDERS	PROCEDURE	169	                  aa.id

FILL_REMINDERS	PROCEDURE	170	         ORDER BY b.head_id,

FILL_REMINDERS	PROCEDURE	171	                  b.ag_id,

FILL_REMINDERS	PROCEDURE	172	                  b.kodtp,

FILL_REMINDERS	PROCEDURE	173	                  c.data;

FILL_REMINDERS	PROCEDURE	174	

FILL_REMINDERS	PROCEDURE	175	      COMMIT;

FILL_REMINDERS	PROCEDURE	176	   EXCEPTION

FILL_REMINDERS	PROCEDURE	177	      WHEN OTHERS

FILL_REMINDERS	PROCEDURE	178	      THEN

FILL_REMINDERS	PROCEDURE	179	         emesg := SQLERRM;

FILL_REMINDERS	PROCEDURE	180	

FILL_REMINDERS	PROCEDURE	181	         INSERT INTO full_log (prg, text)

FILL_REMINDERS	PROCEDURE	182	                 VALUES (

FILL_REMINDERS	PROCEDURE	183	                           'error',

FILL_REMINDERS	PROCEDURE	184	                              'ошибка при расчете напоминалок об акционных активностях за период '

FILL_REMINDERS	PROCEDURE	185	                           || TO_CHAR (p_dt)

FILL_REMINDERS	PROCEDURE	186	                           || CHR (10)

FILL_REMINDERS	PROCEDURE	187	                           || emesg);

FILL_REMINDERS	PROCEDURE	188	

FILL_REMINDERS	PROCEDURE	189	         COMMIT;

FILL_REMINDERS	PROCEDURE	190	   END;

FILL_REMINDERS	PROCEDURE	191	END;
FILL_A18TOZST	PROCEDURE	1	PROCEDURE        FILL_A18TOZST

FILL_A18TOZST	PROCEDURE	2	AS

FILL_A18TOZST	PROCEDURE	3	BEGIN

FILL_A18TOZST	PROCEDURE	4	   FOR x IN (SELECT DISTINCT TRUNC (visitdate, 'mm') sd

FILL_A18TOZST	PROCEDURE	5	               FROM A18TOtp

FILL_A18TOZST	PROCEDURE	6	              WHERE lu > SYSDATE - 1)

FILL_A18TOZST	PROCEDURE	7	   LOOP

FILL_A18TOZST	PROCEDURE	8	      DELETE FROM A18TOZST

FILL_A18TOZST	PROCEDURE	9	            WHERE dt = x.sd AND lu_fio IS NULL;

FILL_A18TOZST	PROCEDURE	10	

FILL_A18TOZST	PROCEDURE	11	      COMMIT;

FILL_A18TOZST	PROCEDURE	12	

FILL_A18TOZST	PROCEDURE	13	      INSERT INTO A18TOZST (dt, tp_kod_key)

FILL_A18TOZST	PROCEDURE	14	           SELECT x.sd, tp_kod_key

FILL_A18TOZST	PROCEDURE	15	             FROM (  SELECT t.visitdate,

FILL_A18TOZST	PROCEDURE	16	                            t.tp_kod_key,

FILL_A18TOZST	PROCEDURE	17	                            t.name_to,

FILL_A18TOZST	PROCEDURE	18	                            zst.lu_fio zst_lu_fio,

FILL_A18TOZST	PROCEDURE	19	                            CASE

FILL_A18TOZST	PROCEDURE	20	                               WHEN wm_concat (

FILL_A18TOZST	PROCEDURE	21	                                       DISTINCT NVL (ats.type_standart, 'null')) =

FILL_A18TOZST	PROCEDURE	22	                                       'Стандарт А'

FILL_A18TOZST	PROCEDURE	23	                               THEN

FILL_A18TOZST	PROCEDURE	24	                                  'Стандарт А'

FILL_A18TOZST	PROCEDURE	25	                               WHEN wm_concat (

FILL_A18TOZST	PROCEDURE	26	                                       DISTINCT NVL (ats.type_standart, 'null')) =

FILL_A18TOZST	PROCEDURE	27	                                       'Стандарт А (минимум)'

FILL_A18TOZST	PROCEDURE	28	                               THEN

FILL_A18TOZST	PROCEDURE	29	                                  'Стандарт А (минимум)'

FILL_A18TOZST	PROCEDURE	30	                            END

FILL_A18TOZST	PROCEDURE	31	                               standart_tp

FILL_A18TOZST	PROCEDURE	32	                       FROM A18TOzst zst,

FILL_A18TOZST	PROCEDURE	33	                            A18TO_gr_by_url t,

FILL_A18TOZST	PROCEDURE	34	                            user_list u,

FILL_A18TOZST	PROCEDURE	35	                            A18TOtp s,

FILL_A18TOZST	PROCEDURE	36	                            a18to_type_standart ats

FILL_A18TOZST	PROCEDURE	37	                      WHERE     t.tp_kod_key = zst.tp_kod_key(+)

FILL_A18TOZST	PROCEDURE	38	                            AND zst.dt(+) = TRUNC (t.visitdate, 'mm')

FILL_A18TOZST	PROCEDURE	39	                            AND u.tab_num = t.tab_num

FILL_A18TOZST	PROCEDURE	40	                            AND u.dpt_id = 1

FILL_A18TOZST	PROCEDURE	41	                            AND t.visitdate = s.visitdate(+)

FILL_A18TOZST	PROCEDURE	42	                            AND t.tp_kod_key = s.tp_kod(+)

FILL_A18TOZST	PROCEDURE	43	                            AND TRUNC (t.visitdate, 'mm') = x.sd

FILL_A18TOZST	PROCEDURE	44	                            AND s.h_type_standart = ats.h_type_standart(+)

FILL_A18TOZST	PROCEDURE	45	                   GROUP BY t.visitdate,

FILL_A18TOZST	PROCEDURE	46	                            t.tp_kod_key,

FILL_A18TOZST	PROCEDURE	47	                            t.name_to,

FILL_A18TOZST	PROCEDURE	48	                            zst.lu_fio)

FILL_A18TOZST	PROCEDURE	49	           HAVING     zst_lu_fio IS NULL

FILL_A18TOZST	PROCEDURE	50	                  AND CASE

FILL_A18TOZST	PROCEDURE	51	                         WHEN wm_concat (DISTINCT NVL (standart_tp, 'null')) =

FILL_A18TOZST	PROCEDURE	52	                                 'Стандарт А'

FILL_A18TOZST	PROCEDURE	53	                         THEN

FILL_A18TOZST	PROCEDURE	54	                            'Стандарт А'

FILL_A18TOZST	PROCEDURE	55	                         WHEN wm_concat (DISTINCT NVL (standart_tp, 'null')) =

FILL_A18TOZST	PROCEDURE	56	                                 'Стандарт А (минимум)'

FILL_A18TOZST	PROCEDURE	57	                         THEN

FILL_A18TOZST	PROCEDURE	58	                            'Стандарт А (минимум)'

FILL_A18TOZST	PROCEDURE	59	                      END

FILL_A18TOZST	PROCEDURE	60	                         IS NOT NULL

FILL_A18TOZST	PROCEDURE	61	         GROUP BY tp_kod_key, zst_lu_fio;

FILL_A18TOZST	PROCEDURE	62	

FILL_A18TOZST	PROCEDURE	63	      COMMIT;

FILL_A18TOZST	PROCEDURE	64	   END LOOP;

FILL_A18TOZST	PROCEDURE	65	END;
FILL_A14TOZST	PROCEDURE	1	PROCEDURE        FILL_A14TOZST

FILL_A14TOZST	PROCEDURE	2	AS

FILL_A14TOZST	PROCEDURE	3	BEGIN

FILL_A14TOZST	PROCEDURE	4	   FOR x IN (SELECT DISTINCT TRUNC (visitdate, 'mm') sd

FILL_A14TOZST	PROCEDURE	5	               FROM a14totp

FILL_A14TOZST	PROCEDURE	6	              WHERE lu > SYSDATE - 1)

FILL_A14TOZST	PROCEDURE	7	   LOOP

FILL_A14TOZST	PROCEDURE	8	      DELETE FROM A14TOZST

FILL_A14TOZST	PROCEDURE	9	            WHERE dt = x.sd AND lu_fio IS NULL;

FILL_A14TOZST	PROCEDURE	10	

FILL_A14TOZST	PROCEDURE	11	      COMMIT;

FILL_A14TOZST	PROCEDURE	12	

FILL_A14TOZST	PROCEDURE	13	      INSERT INTO A14TOZST (dt, tp_kod_key)

FILL_A14TOZST	PROCEDURE	14	           SELECT x.sd, tp_kod_key /*,

FILL_A14TOZST	PROCEDURE	15	                                                SUM (ts1) ts1,

FILL_A14TOZST	PROCEDURE	16	                                                AVG (summa) summa,

FILL_A14TOZST	PROCEDURE	17	                                                COUNT (DISTINCT tp_kod_key || visitdate) visit_plan,

FILL_A14TOZST	PROCEDURE	18	                                                COUNT (DISTINCT DECODE (visit, 0, NULL, tp_kod_key || visitdate))

FILL_A14TOZST	PROCEDURE	19	                                                   visit_fakt,

FILL_A14TOZST	PROCEDURE	20	                                                zst_lu*/

FILL_A14TOZST	PROCEDURE	21	             FROM (  SELECT urm.fio fio_rm,

FILL_A14TOZST	PROCEDURE	22	                            urm.tn tn_rm,

FILL_A14TOZST	PROCEDURE	23	                            utm.fio fio_tm,

FILL_A14TOZST	PROCEDURE	24	                            utm.tn tn_tm,

FILL_A14TOZST	PROCEDURE	25	                            u.tn,

FILL_A14TOZST	PROCEDURE	26	                            u.region_name,

FILL_A14TOZST	PROCEDURE	27	                            t.h_fio_eta,

FILL_A14TOZST	PROCEDURE	28	                            t.visitdate,

FILL_A14TOZST	PROCEDURE	29	                            t.fio_ts,

FILL_A14TOZST	PROCEDURE	30	                            t.fio_eta,

FILL_A14TOZST	PROCEDURE	31	                            t.tp_kod_key,

FILL_A14TOZST	PROCEDURE	32	                            t.tp_ur,

FILL_A14TOZST	PROCEDURE	33	                            t.tp_addr,

FILL_A14TOZST	PROCEDURE	34	                            r.tp_place,

FILL_A14TOZST	PROCEDURE	35	                            r.tp_type,

FILL_A14TOZST	PROCEDURE	36	                            r.stelag,

FILL_A14TOZST	PROCEDURE	37	                            r.tumb,

FILL_A14TOZST	PROCEDURE	38	                            t.visit,

FILL_A14TOZST	PROCEDURE	39	                            SUM (DECODE (t.url, NULL, 0, 1)) urls,

FILL_A14TOZST	PROCEDURE	40	                            DECODE (NVL (s.ts, 0), 1, 1, 0) ts1,

FILL_A14TOZST	PROCEDURE	41	                            DECODE (NVL (s.auditor, 0), 1, 1, 0) auditor1,

FILL_A14TOZST	PROCEDURE	42	                            DECODE (s.ts, NULL, 1, 0) tsnull,

FILL_A14TOZST	PROCEDURE	43	                            DECODE (s.auditor, NULL, 1, 0) auditornull,

FILL_A14TOZST	PROCEDURE	44	                            AVG (sp.VALUE) VALUE,

FILL_A14TOZST	PROCEDURE	45	                            m.summa,

FILL_A14TOZST	PROCEDURE	46	                            TO_CHAR (zst.lu, 'dd.mm.yyyy hh24:mi:ss') zst_lu,

FILL_A14TOZST	PROCEDURE	47	                            zst.lu_fio zst_lu_fio,

FILL_A14TOZST	PROCEDURE	48	                            zst.comm zst_comm,

FILL_A14TOZST	PROCEDURE	49	                            CASE

FILL_A14TOZST	PROCEDURE	50	                               WHEN     DECODE (NVL (s.ts, 0), 1, 1, 0) = 1

FILL_A14TOZST	PROCEDURE	51	                                    AND NVL (s.traid, 0) = 0

FILL_A14TOZST	PROCEDURE	52	                                    AND NOT (    s.visitdate IS NOT NULL

FILL_A14TOZST	PROCEDURE	53	                                             AND s.auditor = 2)

FILL_A14TOZST	PROCEDURE	54	                               THEN

FILL_A14TOZST	PROCEDURE	55	                                  1

FILL_A14TOZST	PROCEDURE	56	                               ELSE

FILL_A14TOZST	PROCEDURE	57	                                  0

FILL_A14TOZST	PROCEDURE	58	                            END

FILL_A14TOZST	PROCEDURE	59	                               ts1r

FILL_A14TOZST	PROCEDURE	60	                       FROM a14tozst zst,

FILL_A14TOZST	PROCEDURE	61	                            a14to_gr_by_url t,

FILL_A14TOZST	PROCEDURE	62	                            (SELECT DISTINCT tp_place,

FILL_A14TOZST	PROCEDURE	63	                                             tp_type,

FILL_A14TOZST	PROCEDURE	64	                                             stelag,

FILL_A14TOZST	PROCEDURE	65	                                             tumb,

FILL_A14TOZST	PROCEDURE	66	                                             tab_number,

FILL_A14TOZST	PROCEDURE	67	                                             tp_kod

FILL_A14TOZST	PROCEDURE	68	                               FROM routes

FILL_A14TOZST	PROCEDURE	69	                              WHERE dpt_id = 1) r,

FILL_A14TOZST	PROCEDURE	70	                            user_list u,

FILL_A14TOZST	PROCEDURE	71	                            a14totp s,

FILL_A14TOZST	PROCEDURE	72	                            parents ptm,

FILL_A14TOZST	PROCEDURE	73	                            user_list utm,

FILL_A14TOZST	PROCEDURE	74	                            parents prm,

FILL_A14TOZST	PROCEDURE	75	                            user_list urm,

FILL_A14TOZST	PROCEDURE	76	                            (  SELECT data, h_fio_eta, AVG (VALUE) VALUE

FILL_A14TOZST	PROCEDURE	77	                                 FROM a14tosp

FILL_A14TOZST	PROCEDURE	78	                             GROUP BY data, h_fio_eta) sp,

FILL_A14TOZST	PROCEDURE	79	                            (SELECT tp_kod, dt, summa

FILL_A14TOZST	PROCEDURE	80	                               FROM a14mega

FILL_A14TOZST	PROCEDURE	81	                              WHERE dpt_id = 1) m

FILL_A14TOZST	PROCEDURE	82	                      WHERE     t.tp_kod_key = zst.tp_kod_key(+)

FILL_A14TOZST	PROCEDURE	83	                            AND zst.dt(+) = x.sd

FILL_A14TOZST	PROCEDURE	84	                            AND t.h_fio_eta = sp.h_fio_eta(+)

FILL_A14TOZST	PROCEDURE	85	                            AND TRUNC (t.visitdate, 'mm') = sp.data(+)

FILL_A14TOZST	PROCEDURE	86	                            AND ptm.parent = utm.tn

FILL_A14TOZST	PROCEDURE	87	                            AND ptm.tn = u.tn

FILL_A14TOZST	PROCEDURE	88	                            AND prm.parent = urm.tn

FILL_A14TOZST	PROCEDURE	89	                            AND prm.tn = utm.tn

FILL_A14TOZST	PROCEDURE	90	                            AND u.tab_num = t.tab_num

FILL_A14TOZST	PROCEDURE	91	                            AND u.dpt_id = 1

FILL_A14TOZST	PROCEDURE	92	                            AND t.tp_kod_key = r.tp_kod

FILL_A14TOZST	PROCEDURE	93	                            AND t.visitdate = s.visitdate(+)

FILL_A14TOZST	PROCEDURE	94	                            AND t.tp_kod_key = s.tp_kod(+)

FILL_A14TOZST	PROCEDURE	95	                            AND TRUNC (t.visitdate, 'mm') = m.dt(+)

FILL_A14TOZST	PROCEDURE	96	                            AND t.tp_kod_key = m.tp_kod(+)

FILL_A14TOZST	PROCEDURE	97	                            /*AND (r.stelag > 0 OR r.tumb > 0)*/

FILL_A14TOZST	PROCEDURE	98	                            AND TRUNC (t.visitdate, 'mm') = x.sd

FILL_A14TOZST	PROCEDURE	99	                   GROUP BY urm.fio,

FILL_A14TOZST	PROCEDURE	100	                            urm.tn,

FILL_A14TOZST	PROCEDURE	101	                            utm.fio,

FILL_A14TOZST	PROCEDURE	102	                            utm.tn,

FILL_A14TOZST	PROCEDURE	103	                            u.tn,

FILL_A14TOZST	PROCEDURE	104	                            s.ts,

FILL_A14TOZST	PROCEDURE	105	                            s.auditor,

FILL_A14TOZST	PROCEDURE	106	                            u.region_name,

FILL_A14TOZST	PROCEDURE	107	                            t.h_fio_eta,

FILL_A14TOZST	PROCEDURE	108	                            t.visitdate,

FILL_A14TOZST	PROCEDURE	109	                            t.fio_ts,

FILL_A14TOZST	PROCEDURE	110	                            t.fio_eta,

FILL_A14TOZST	PROCEDURE	111	                            t.tp_kod_key,

FILL_A14TOZST	PROCEDURE	112	                            t.tp_ur,

FILL_A14TOZST	PROCEDURE	113	                            t.tp_addr,

FILL_A14TOZST	PROCEDURE	114	                            r.tp_place,

FILL_A14TOZST	PROCEDURE	115	                            r.tp_type,

FILL_A14TOZST	PROCEDURE	116	                            r.stelag,

FILL_A14TOZST	PROCEDURE	117	                            r.tumb,

FILL_A14TOZST	PROCEDURE	118	                            t.visit,

FILL_A14TOZST	PROCEDURE	119	                            m.summa,

FILL_A14TOZST	PROCEDURE	120	                            zst.lu,

FILL_A14TOZST	PROCEDURE	121	                            zst.lu_fio,

FILL_A14TOZST	PROCEDURE	122	                            zst.comm,

FILL_A14TOZST	PROCEDURE	123	                            CASE

FILL_A14TOZST	PROCEDURE	124	                               WHEN     DECODE (NVL (s.ts, 0), 1, 1, 0) = 1

FILL_A14TOZST	PROCEDURE	125	                                    AND NVL (s.traid, 0) = 0

FILL_A14TOZST	PROCEDURE	126	                                    AND NOT (    s.visitdate IS NOT NULL

FILL_A14TOZST	PROCEDURE	127	                                             AND s.auditor = 2)

FILL_A14TOZST	PROCEDURE	128	                               THEN

FILL_A14TOZST	PROCEDURE	129	                                  1

FILL_A14TOZST	PROCEDURE	130	                               ELSE

FILL_A14TOZST	PROCEDURE	131	                                  0

FILL_A14TOZST	PROCEDURE	132	                            END)

FILL_A14TOZST	PROCEDURE	133	           HAVING     zst_lu_fio IS NULL

FILL_A14TOZST	PROCEDURE	134	                  AND COUNT (DISTINCT tp_kod_key || visitdate) = SUM (ts1r)

FILL_A14TOZST	PROCEDURE	135	         GROUP BY tp_kod_key, zst_lu_fio;

FILL_A14TOZST	PROCEDURE	136	

FILL_A14TOZST	PROCEDURE	137	      COMMIT;

FILL_A14TOZST	PROCEDURE	138	   END LOOP;

FILL_A14TOZST	PROCEDURE	139	END;
FILES_SECTIONS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."FILES_SECTIONS_LAST_UPDATE" 

FILES_SECTIONS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

FILES_SECTIONS_LAST_UPDATE	TRIGGER	3	   ON files_sections    REFERENCING NEW AS NEW OLD AS OLD

FILES_SECTIONS_LAST_UPDATE	TRIGGER	4	   FOR EACH ROW

FILES_SECTIONS_LAST_UPDATE	TRIGGER	5	BEGIN

FILES_SECTIONS_LAST_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

FILES_SECTIONS_LAST_UPDATE	TRIGGER	7	END files_sections_last_update; 

FILES_SECTIONS_LAST_UPDATE	TRIGGER	8	

FILES_SECTIONS_LAST_UPDATE	TRIGGER	9	

FILES_SECTIONS_LAST_UPDATE	TRIGGER	10	

FILES_SECTIONS_DEL_SECTION	TRIGGER	1	TRIGGER "PERSIK"."FILES_SECTIONS_DEL_SECTION" 

FILES_SECTIONS_DEL_SECTION	TRIGGER	2	   BEFORE DELETE

FILES_SECTIONS_DEL_SECTION	TRIGGER	3	   ON PERSIK.FILES_SECTIONS

FILES_SECTIONS_DEL_SECTION	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

FILES_SECTIONS_DEL_SECTION	TRIGGER	5	   FOR EACH ROW

FILES_SECTIONS_DEL_SECTION	TRIGGER	6	BEGIN

FILES_SECTIONS_DEL_SECTION	TRIGGER	7	   UPDATE files

FILES_SECTIONS_DEL_SECTION	TRIGGER	8	      SET section = 0

FILES_SECTIONS_DEL_SECTION	TRIGGER	9	    WHERE section = :old.id;

FILES_SECTIONS_DEL_SECTION	TRIGGER	10	END files_sections_del_section;

FILES_SECTIONS_DEL_SECTION	TRIGGER	11	

FILES_SECTIONS_DEL_SECTION	TRIGGER	12	

FILES_SECTIONS_DEL_SECTION	TRIGGER	13	

FILES_RIGHTS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."FILES_RIGHTS_LAST_UPDATE" 

FILES_RIGHTS_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

FILES_RIGHTS_LAST_UPDATE	TRIGGER	3	   ON files_rights

FILES_RIGHTS_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

FILES_RIGHTS_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

FILES_RIGHTS_LAST_UPDATE	TRIGGER	6	BEGIN

FILES_RIGHTS_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

FILES_RIGHTS_LAST_UPDATE	TRIGGER	8	END files_rights_last_update; 

FILES_RIGHTS_LAST_UPDATE	TRIGGER	9	

FILES_RIGHTS_LAST_UPDATE	TRIGGER	10	

FILES_RIGHTS_LAST_UPDATE	TRIGGER	11	

FILES_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."FILES_LAST_UPDATE" 

FILES_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

FILES_LAST_UPDATE	TRIGGER	3	   ON files    REFERENCING NEW AS NEW OLD AS OLD

FILES_LAST_UPDATE	TRIGGER	4	   FOR EACH ROW

FILES_LAST_UPDATE	TRIGGER	5	BEGIN

FILES_LAST_UPDATE	TRIGGER	6	   :NEW.lu := SYSDATE;

FILES_LAST_UPDATE	TRIGGER	7	END files_last_update; 

FILES_LAST_UPDATE	TRIGGER	8	

FILES_LAST_UPDATE	TRIGGER	9	

FILES_LAST_UPDATE	TRIGGER	10	

F1	FUNCTION	1	FUNCTION f1

F1	FUNCTION	2	   RETURN DATE

F1	FUNCTION	3	IS

F1	FUNCTION	4	BEGIN

F1	FUNCTION	5	   IF TO_CHAR (SYSDATE, 'dd') > 25

F1	FUNCTION	6	   THEN

F1	FUNCTION	7	      RETURN ADD_MONTHS (TRUNC (SYSDATE, 'mm'), 1);

F1	FUNCTION	8	   ELSE

F1	FUNCTION	9	      RETURN TRUNC (SYSDATE, 'mm');

F1	FUNCTION	10	   END IF;

F1	FUNCTION	11	END;
EXP_REG	PROCEDURE	1	PROCEDURE        "EXP_REG" (p_exp   IN INTEGER,

EXP_REG	PROCEDURE	2	                                              p_reg   IN VARCHAR2)

EXP_REG	PROCEDURE	3	AS

EXP_REG	PROCEDURE	4	   i   VARCHAR2 (255);

EXP_REG	PROCEDURE	5	BEGIN

EXP_REG	PROCEDURE	6	   FOR a

EXP_REG	PROCEDURE	7	      IN (SELECT u.tn

EXP_REG	PROCEDURE	8	            FROM user_list u, emp_exp e

EXP_REG	PROCEDURE	9	           WHERE     u.region_name = p_reg

EXP_REG	PROCEDURE	10	                 AND u.datauvol IS NULL

EXP_REG	PROCEDURE	11	                 AND u.tn = e.emp_tn(+)

EXP_REG	PROCEDURE	12	                 AND e.exp_tn(+) = p_exp

EXP_REG	PROCEDURE	13	                 AND e.full IS NULL)

EXP_REG	PROCEDURE	14	   LOOP

EXP_REG	PROCEDURE	15	      SELECT fn_emp_exp_ins (a.tn, p_exp, 0) INTO i FROM DUAL;

EXP_REG	PROCEDURE	16	   END LOOP;

EXP_REG	PROCEDURE	17	END;
EXP_DEP	PROCEDURE	1	PROCEDURE        "EXP_DEP" (p_exp   IN INTEGER,

EXP_DEP	PROCEDURE	2	                                              p_dep   IN VARCHAR2)

EXP_DEP	PROCEDURE	3	AS

EXP_DEP	PROCEDURE	4	   i   VARCHAR2 (255);

EXP_DEP	PROCEDURE	5	BEGIN

EXP_DEP	PROCEDURE	6	   FOR a

EXP_DEP	PROCEDURE	7	      IN (SELECT u.tn

EXP_DEP	PROCEDURE	8	            FROM user_list u, emp_exp e

EXP_DEP	PROCEDURE	9	           WHERE     u.department_name = p_dep

EXP_DEP	PROCEDURE	10	                 AND u.datauvol IS NULL

EXP_DEP	PROCEDURE	11	                 AND u.tn = e.emp_tn(+)

EXP_DEP	PROCEDURE	12	                 AND e.exp_tn(+) = p_exp

EXP_DEP	PROCEDURE	13	                 AND e.full IS NULL)

EXP_DEP	PROCEDURE	14	   LOOP

EXP_DEP	PROCEDURE	15	      SELECT fn_emp_exp_ins (a.tn, p_exp, 0) INTO i FROM DUAL;

EXP_DEP	PROCEDURE	16	   END LOOP;

EXP_DEP	PROCEDURE	17	END;
EXP_COMMENT_raise	TRIGGER	1	TRIGGER "PERSIK"."EXP_COMMENT_raise" 

EXP_COMMENT_raise	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

EXP_COMMENT_raise	TRIGGER	3	   ON PERSIK.OCENKA_EXP_COMMENT    REFERENCING NEW AS NEW OLD AS OLD

EXP_COMMENT_raise	TRIGGER	4	   FOR EACH ROW

EXP_COMMENT_raise	TRIGGER	5	BEGIN

EXP_COMMENT_raise	TRIGGER	6	   pr_ocenka_event_enabled (:old.event);

EXP_COMMENT_raise	TRIGGER	7	END;

EXP_COMMENT_raise	TRIGGER	8	

EXP_COMMENT_raise	TRIGGER	9	

EXP_COMMENT_raise	TRIGGER	10	

EXP_COMMENT_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."EXP_COMMENT_LAST_UPDATE" 

EXP_COMMENT_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

EXP_COMMENT_LAST_UPDATE	TRIGGER	3	   ON PERSIK.OCENKA_EXP_COMMENT

EXP_COMMENT_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

EXP_COMMENT_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

EXP_COMMENT_LAST_UPDATE	TRIGGER	6	BEGIN

EXP_COMMENT_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

EXP_COMMENT_LAST_UPDATE	TRIGGER	8	END EXP_COMMENT_last_update;

EXP_COMMENT_LAST_UPDATE	TRIGGER	9	

EXP_COMMENT_LAST_UPDATE	TRIGGER	10	

EXP_COMMENT_LAST_UPDATE	TRIGGER	11	

EVENTS_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."EVENTS_LAST_UPDATE" 

EVENTS_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

EVENTS_LAST_UPDATE	TRIGGER	3	ON OCENKA_EVENTS 

EVENTS_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

EVENTS_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

EVENTS_LAST_UPDATE	TRIGGER	6	DECLARE

EVENTS_LAST_UPDATE	TRIGGER	7	BEGIN

EVENTS_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

EVENTS_LAST_UPDATE	TRIGGER	9	END EVENTS_last_update; 

EVENTS_LAST_UPDATE	TRIGGER	10	

EVENTS_LAST_UPDATE	TRIGGER	11	

EVENTS_LAST_UPDATE	TRIGGER	12	

EVENTS_LAST_UPDATE	TRIGGER	13	

EVAL	FUNCTION	1	FUNCTION eval (expr VARCHAR2)

EVAL	FUNCTION	2	   RETURN VARCHAR2

EVAL	FUNCTION	3	AS

EVAL	FUNCTION	4	   ret   VARCHAR2 (4000);

EVAL	FUNCTION	5	BEGIN

EVAL	FUNCTION	6	   EXECUTE IMMEDIATE 'begin :result := ' || expr || '; end;' USING OUT ret;

EVAL	FUNCTION	7	

EVAL	FUNCTION	8	   RETURN ret;

EVAL	FUNCTION	9	END;
EMP_EXP_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.EMP_EXP_MV_Q_ADD

EMP_EXP_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

EMP_EXP_MV_Q_ADD	TRIGGER	3	   ON PERSIK.EMP_EXP

EMP_EXP_MV_Q_ADD	TRIGGER	4	BEGIN

EMP_EXP_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('FULL');

EMP_EXP_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('USER_LIST');

EMP_EXP_MV_Q_ADD	TRIGGER	7	   mv_queue_add ('A14TO_MV_ST');

EMP_EXP_MV_Q_ADD	TRIGGER	8	END;
EMP_EXP_LOG	TRIGGER	1	TRIGGER PERSIK.EMP_EXP_LOG

EMP_EXP_LOG	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

EMP_EXP_LOG	TRIGGER	3	   ON PERSIK.EMP_EXP

EMP_EXP_LOG	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

EMP_EXP_LOG	TRIGGER	5	   FOR EACH ROW

EMP_EXP_LOG	TRIGGER	6	DECLARE

EMP_EXP_LOG	TRIGGER	7	   i     VARCHAR (255);

EMP_EXP_LOG	TRIGGER	8	   emp   INTEGER;

EMP_EXP_LOG	TRIGGER	9	   EXP   INTEGER;

EMP_EXP_LOG	TRIGGER	10	   c     INTEGER;

EMP_EXP_LOG	TRIGGER	11	   PRAGMA AUTONOMOUS_TRANSACTION;

EMP_EXP_LOG	TRIGGER	12	BEGIN

EMP_EXP_LOG	TRIGGER	13	   IF INSERTING OR UPDATING

EMP_EXP_LOG	TRIGGER	14	   THEN

EMP_EXP_LOG	TRIGGER	15	      IF :new.full = 1

EMP_EXP_LOG	TRIGGER	16	      THEN

EMP_EXP_LOG	TRIGGER	17	         SELECT COUNT (*)

EMP_EXP_LOG	TRIGGER	18	           INTO c

EMP_EXP_LOG	TRIGGER	19	           FROM emp_exp

EMP_EXP_LOG	TRIGGER	20	          WHERE emp_tn = :new.emp_tn AND full = 1;

EMP_EXP_LOG	TRIGGER	21	

EMP_EXP_LOG	TRIGGER	22	         IF c <> 0

EMP_EXP_LOG	TRIGGER	23	         THEN

EMP_EXP_LOG	TRIGGER	24	            raise_application_error (

EMP_EXP_LOG	TRIGGER	25	               -20001,

EMP_EXP_LOG	TRIGGER	26	               'попытка добавить второго руководителя для сотрудника');

EMP_EXP_LOG	TRIGGER	27	         END IF;

EMP_EXP_LOG	TRIGGER	28	

EMP_EXP_LOG	TRIGGER	29	         SELECT COUNT (*)

EMP_EXP_LOG	TRIGGER	30	           INTO c

EMP_EXP_LOG	TRIGGER	31	           FROM emp_exp

EMP_EXP_LOG	TRIGGER	32	          WHERE emp_tn = :new.exp_tn AND exp_tn = :new.emp_tn AND full = 1;

EMP_EXP_LOG	TRIGGER	33	

EMP_EXP_LOG	TRIGGER	34	         IF c <> 0

EMP_EXP_LOG	TRIGGER	35	         THEN

EMP_EXP_LOG	TRIGGER	36	            raise_application_error (

EMP_EXP_LOG	TRIGGER	37	               -20001,

EMP_EXP_LOG	TRIGGER	38	               'попытка добавить связь руководитель-сотрудник для уже существующей связи сотрудник-руководитель');

EMP_EXP_LOG	TRIGGER	39	         END IF;

EMP_EXP_LOG	TRIGGER	40	      END IF;

EMP_EXP_LOG	TRIGGER	41	

EMP_EXP_LOG	TRIGGER	42	      IF (NVL (:new.emp_tn, 0) = 0 OR NVL (:new.exp_tn, 0) = 0)

EMP_EXP_LOG	TRIGGER	43	      THEN

EMP_EXP_LOG	TRIGGER	44	         raise_application_error (

EMP_EXP_LOG	TRIGGER	45	            -20001,

EMP_EXP_LOG	TRIGGER	46	            'попытка добавить сотрудника с нулевым т.н.');

EMP_EXP_LOG	TRIGGER	47	      END IF;

EMP_EXP_LOG	TRIGGER	48	   END IF;

EMP_EXP_LOG	TRIGGER	49	

EMP_EXP_LOG	TRIGGER	50	   IF INSERTING

EMP_EXP_LOG	TRIGGER	51	   THEN

EMP_EXP_LOG	TRIGGER	52	      i := 'inserting';

EMP_EXP_LOG	TRIGGER	53	      emp := :new.emp_tn;

EMP_EXP_LOG	TRIGGER	54	      EXP := :new.exp_tn;

EMP_EXP_LOG	TRIGGER	55	   END IF;

EMP_EXP_LOG	TRIGGER	56	

EMP_EXP_LOG	TRIGGER	57	   IF DELETING

EMP_EXP_LOG	TRIGGER	58	   THEN

EMP_EXP_LOG	TRIGGER	59	      i := 'deleting';

EMP_EXP_LOG	TRIGGER	60	      emp := :old.emp_tn;

EMP_EXP_LOG	TRIGGER	61	      EXP := :old.exp_tn;

EMP_EXP_LOG	TRIGGER	62	   END IF;

EMP_EXP_LOG	TRIGGER	63	

EMP_EXP_LOG	TRIGGER	64	   IF UPDATING

EMP_EXP_LOG	TRIGGER	65	   THEN

EMP_EXP_LOG	TRIGGER	66	      i := 'updating';

EMP_EXP_LOG	TRIGGER	67	      emp := :new.emp_tn;

EMP_EXP_LOG	TRIGGER	68	      EXP := :new.exp_tn;

EMP_EXP_LOG	TRIGGER	69	   END IF;

EMP_EXP_LOG	TRIGGER	70	

EMP_EXP_LOG	TRIGGER	71	   INSERT INTO full_log (text, prg)

EMP_EXP_LOG	TRIGGER	72	           VALUES (

EMP_EXP_LOG	TRIGGER	73	                        'trigger: '

EMP_EXP_LOG	TRIGGER	74	                     || i

EMP_EXP_LOG	TRIGGER	75	                     || ', emp/exp: '

EMP_EXP_LOG	TRIGGER	76	                     || emp

EMP_EXP_LOG	TRIGGER	77	                     || '/'

EMP_EXP_LOG	TRIGGER	78	                     || EXP

EMP_EXP_LOG	TRIGGER	79	                     || ', action: '

EMP_EXP_LOG	TRIGGER	80	                     || SYS_CONTEXT ('USERENV', 'ACTION')

EMP_EXP_LOG	TRIGGER	81	                     || ', current_sql: '

EMP_EXP_LOG	TRIGGER	82	                     || SYS_CONTEXT ('USERENV', 'CURRENT_SQL')

EMP_EXP_LOG	TRIGGER	83	                     || ', current_schema: '

EMP_EXP_LOG	TRIGGER	84	                     || SYS_CONTEXT ('USERENV', 'CURRENT_SCHEMA')

EMP_EXP_LOG	TRIGGER	85	                     || ', host: '

EMP_EXP_LOG	TRIGGER	86	                     || SYS_CONTEXT ('USERENV', 'HOST')

EMP_EXP_LOG	TRIGGER	87	                     || ', instance_name: '

EMP_EXP_LOG	TRIGGER	88	                     || SYS_CONTEXT ('USERENV', 'INSTANCE_NAME')

EMP_EXP_LOG	TRIGGER	89	                     || ', ip_address: '

EMP_EXP_LOG	TRIGGER	90	                     || SYS_CONTEXT ('USERENV', 'IP_ADDRESS')

EMP_EXP_LOG	TRIGGER	91	                     || ', module: '

EMP_EXP_LOG	TRIGGER	92	                     || SYS_CONTEXT ('USERENV', 'MODULE')

EMP_EXP_LOG	TRIGGER	93	                     || ', os_user: '

EMP_EXP_LOG	TRIGGER	94	                     || SYS_CONTEXT ('USERENV', 'OS_USER')

EMP_EXP_LOG	TRIGGER	95	                     || ', server_host: '

EMP_EXP_LOG	TRIGGER	96	                     || SYS_CONTEXT ('USERENV', 'SERVER_HOST')

EMP_EXP_LOG	TRIGGER	97	                     || ', service_name: '

EMP_EXP_LOG	TRIGGER	98	                     || SYS_CONTEXT ('USERENV', 'SERVICE_NAME')

EMP_EXP_LOG	TRIGGER	99	                     || ', session_user: '

EMP_EXP_LOG	TRIGGER	100	                     || SYS_CONTEXT ('USERENV', 'SESSION_USER')

EMP_EXP_LOG	TRIGGER	101	                     || ', terminal: '

EMP_EXP_LOG	TRIGGER	102	                     || SYS_CONTEXT ('USERENV', 'TERMINAL')

EMP_EXP_LOG	TRIGGER	103	                     || ', lu: '

EMP_EXP_LOG	TRIGGER	104	                     || TO_CHAR (SYSDATE, 'dd.mm.yyyy hh24:mi:ss'),

EMP_EXP_LOG	TRIGGER	105	                     'emp_exp');

EMP_EXP_LOG	TRIGGER	106	

EMP_EXP_LOG	TRIGGER	107	   COMMIT;

EMP_EXP_LOG	TRIGGER	108	END emp_exp_log;
EMP_EXP_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."EMP_EXP_LAST_UPDATE" 

EMP_EXP_LAST_UPDATE	TRIGGER	2	BEFORE INSERT OR UPDATE

EMP_EXP_LAST_UPDATE	TRIGGER	3	ON EMP_EXP 

EMP_EXP_LAST_UPDATE	TRIGGER	4	REFERENCING NEW AS NEW OLD AS OLD

EMP_EXP_LAST_UPDATE	TRIGGER	5	FOR EACH ROW

EMP_EXP_LAST_UPDATE	TRIGGER	6	DECLARE

EMP_EXP_LAST_UPDATE	TRIGGER	7	BEGIN

EMP_EXP_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

EMP_EXP_LAST_UPDATE	TRIGGER	9	END EMP_EXP_last_update; 

EMP_EXP_LAST_UPDATE	TRIGGER	10	

EMP_EXP_LAST_UPDATE	TRIGGER	11	

EMP_EXP_LAST_UPDATE	TRIGGER	12	

EMP_EXP_LAST_UPDATE	TRIGGER	13	

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.DM_FIL_STAT_MONTH_LAST_UPDATE

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	3	   ON PERSIK.DM_FIL_STAT_MONTH

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	6	DECLARE

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	7	BEGIN

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

DM_FIL_STAT_MONTH_LAST_UPDATE	TRIGGER	9	END;
DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.DM_FIL_STAT_files_LAST_UPDATE

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	3	   ON PERSIK.DM_FIL_STAT_files

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	6	DECLARE

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	7	BEGIN

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

DM_FIL_STAT_FILES_LAST_UPDATE	TRIGGER	9	END;
DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.DM_FIL_STAT_DAY_LAST_UPDATE

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	3	   ON PERSIK.DM_FIL_STAT_DAY

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	6	DECLARE

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	7	BEGIN

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

DM_FIL_STAT_DAY_LAST_UPDATE	TRIGGER	9	END;
DM_FIL_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.dm_fil_LAST_UPDATE

DM_FIL_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

DM_FIL_LAST_UPDATE	TRIGGER	3	   ON PERSIK.dm_fil

DM_FIL_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DM_FIL_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

DM_FIL_LAST_UPDATE	TRIGGER	6	DECLARE

DM_FIL_LAST_UPDATE	TRIGGER	7	BEGIN

DM_FIL_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

DM_FIL_LAST_UPDATE	TRIGGER	9	END;
DIVIDE_ROUTE	PROCEDURE	1	PROCEDURE        divide_route (p_parent     INTEGER,

DIVIDE_ROUTE	PROCEDURE	2	                                                 p_from_dt    DATE,

DIVIDE_ROUTE	PROCEDURE	3	                                                 p_login      VARCHAR2)

DIVIDE_ROUTE	PROCEDURE	4	IS

DIVIDE_ROUTE	PROCEDURE	5	   v_head_id_new   INTEGER;

DIVIDE_ROUTE	PROCEDURE	6	   v_data          DATE;

DIVIDE_ROUTE	PROCEDURE	7	BEGIN

DIVIDE_ROUTE	PROCEDURE	8	   SELECT data

DIVIDE_ROUTE	PROCEDURE	9	     INTO v_data

DIVIDE_ROUTE	PROCEDURE	10	     FROM routes_head

DIVIDE_ROUTE	PROCEDURE	11	    WHERE id = p_parent;

DIVIDE_ROUTE	PROCEDURE	12	

DIVIDE_ROUTE	PROCEDURE	13	   IF TRUNC (p_from_dt, 'mm') <> v_data

DIVIDE_ROUTE	PROCEDURE	14	   THEN

DIVIDE_ROUTE	PROCEDURE	15	      RETURN;

DIVIDE_ROUTE	PROCEDURE	16	   END IF;

DIVIDE_ROUTE	PROCEDURE	17	

DIVIDE_ROUTE	PROCEDURE	18	   v_head_id_new := seq_all.NEXTVAL;

DIVIDE_ROUTE	PROCEDURE	19	

DIVIDE_ROUTE	PROCEDURE	20	   INSERT INTO routes_head (id,

DIVIDE_ROUTE	PROCEDURE	21	                            data,

DIVIDE_ROUTE	PROCEDURE	22	                            num,

DIVIDE_ROUTE	PROCEDURE	23	                            login)

DIVIDE_ROUTE	PROCEDURE	24	      SELECT v_head_id_new,

DIVIDE_ROUTE	PROCEDURE	25	             data,

DIVIDE_ROUTE	PROCEDURE	26	             num,

DIVIDE_ROUTE	PROCEDURE	27	             p_login

DIVIDE_ROUTE	PROCEDURE	28	        FROM routes_head

DIVIDE_ROUTE	PROCEDURE	29	       WHERE id = p_parent;

DIVIDE_ROUTE	PROCEDURE	30	

DIVIDE_ROUTE	PROCEDURE	31	   DELETE FROM routes_head_agents

DIVIDE_ROUTE	PROCEDURE	32	         WHERE head_id = v_head_id_new;

DIVIDE_ROUTE	PROCEDURE	33	

DIVIDE_ROUTE	PROCEDURE	34	   INSERT INTO routes_head_agents (ag_id, head_id)

DIVIDE_ROUTE	PROCEDURE	35	      SELECT ag_id, v_head_id_new

DIVIDE_ROUTE	PROCEDURE	36	        FROM routes_head_agents

DIVIDE_ROUTE	PROCEDURE	37	       WHERE head_id = p_parent AND vv = 0;

DIVIDE_ROUTE	PROCEDURE	38	

DIVIDE_ROUTE	PROCEDURE	39	   INSERT INTO routes_tp (kodtp, head_id)

DIVIDE_ROUTE	PROCEDURE	40	      SELECT kodtp, v_head_id_new

DIVIDE_ROUTE	PROCEDURE	41	        FROM routes_tp

DIVIDE_ROUTE	PROCEDURE	42	       WHERE head_id = p_parent AND vv = 0;

DIVIDE_ROUTE	PROCEDURE	43	

DIVIDE_ROUTE	PROCEDURE	44	   INSERT INTO PERSIK.ROUTES_BODY1 (HEAD_ID,

DIVIDE_ROUTE	PROCEDURE	45	                                    KODTP,

DIVIDE_ROUTE	PROCEDURE	46	                                    DAY_ENABLED_mr,

DIVIDE_ROUTE	PROCEDURE	47	                                    DAY_TIME_mr,

DIVIDE_ROUTE	PROCEDURE	48	                                    LU,

DIVIDE_ROUTE	PROCEDURE	49	                                    AG_ID,

DIVIDE_ROUTE	PROCEDURE	50	                                    day_num)

DIVIDE_ROUTE	PROCEDURE	51	      SELECT v_head_id_new,

DIVIDE_ROUTE	PROCEDURE	52	             b.KODTP,

DIVIDE_ROUTE	PROCEDURE	53	             b.DAY_ENABLED_mr,

DIVIDE_ROUTE	PROCEDURE	54	             b.DAY_TIME_mr,

DIVIDE_ROUTE	PROCEDURE	55	             b.LU,

DIVIDE_ROUTE	PROCEDURE	56	             b.AG_ID,

DIVIDE_ROUTE	PROCEDURE	57	             b.day_num

DIVIDE_ROUTE	PROCEDURE	58	        FROM routes_head h, ROUTES_BODY1 b, calendar c

DIVIDE_ROUTE	PROCEDURE	59	       WHERE     h.id = p_parent

DIVIDE_ROUTE	PROCEDURE	60	             AND h.id = b.head_id

DIVIDE_ROUTE	PROCEDURE	61	             AND b.vv = 0

DIVIDE_ROUTE	PROCEDURE	62	             AND h.data = TRUNC (c.data, 'mm')

DIVIDE_ROUTE	PROCEDURE	63	             AND c.dm = b.day_num

DIVIDE_ROUTE	PROCEDURE	64	             AND c.data >= p_from_dt;

DIVIDE_ROUTE	PROCEDURE	65	

DIVIDE_ROUTE	PROCEDURE	66	   BEGIN

DIVIDE_ROUTE	PROCEDURE	67	      DELETE FROM routes_body1

DIVIDE_ROUTE	PROCEDURE	68	            WHERE     head_id = p_parent

DIVIDE_ROUTE	PROCEDURE	69	                  AND day_num >= (SELECT dm

DIVIDE_ROUTE	PROCEDURE	70	                                    FROM calendar

DIVIDE_ROUTE	PROCEDURE	71	                                   WHERE data = p_from_dt);

DIVIDE_ROUTE	PROCEDURE	72	   EXCEPTION

DIVIDE_ROUTE	PROCEDURE	73	      WHEN OTHERS

DIVIDE_ROUTE	PROCEDURE	74	      THEN

DIVIDE_ROUTE	PROCEDURE	75	         NULL;

DIVIDE_ROUTE	PROCEDURE	76	   END;

DIVIDE_ROUTE	PROCEDURE	77	

DIVIDE_ROUTE	PROCEDURE	78	   INSERT INTO merch_report (rb_id, dt)

DIVIDE_ROUTE	PROCEDURE	79	      SELECT b.id, c.data

DIVIDE_ROUTE	PROCEDURE	80	        FROM routes_head h, ROUTES_BODY1 b, calendar c

DIVIDE_ROUTE	PROCEDURE	81	       WHERE     h.id = v_head_id_new

DIVIDE_ROUTE	PROCEDURE	82	             AND b.head_id = h.id

DIVIDE_ROUTE	PROCEDURE	83	             AND TRUNC (c.data, 'mm') = h.data

DIVIDE_ROUTE	PROCEDURE	84	             AND c.dw = b.day_num

DIVIDE_ROUTE	PROCEDURE	85	             AND b.vv = 0;

DIVIDE_ROUTE	PROCEDURE	86	

DIVIDE_ROUTE	PROCEDURE	87	   COMMIT;

DIVIDE_ROUTE	PROCEDURE	88	END;
DISTR_PROT_STATUS_NEW	TRIGGER	1	TRIGGER "PERSIK"."DISTR_PROT_STATUS_NEW" 

DISTR_PROT_STATUS_NEW	TRIGGER	2	   BEFORE INSERT

DISTR_PROT_STATUS_NEW	TRIGGER	3	   ON distr_PROT_status

DISTR_PROT_STATUS_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_STATUS_NEW	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_STATUS_NEW	TRIGGER	6	BEGIN

DISTR_PROT_STATUS_NEW	TRIGGER	7	   IF :new.id IS NULL

DISTR_PROT_STATUS_NEW	TRIGGER	8	   THEN

DISTR_PROT_STATUS_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

DISTR_PROT_STATUS_NEW	TRIGGER	10	   END IF;

DISTR_PROT_STATUS_NEW	TRIGGER	11	END;

DISTR_PROT_STATUS_NEW	TRIGGER	12	

DISTR_PROT_STATUS_LU	TRIGGER	1	TRIGGER "PERSIK"."DISTR_PROT_STATUS_LU" 

DISTR_PROT_STATUS_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

DISTR_PROT_STATUS_LU	TRIGGER	3	   ON distr_PROT_status

DISTR_PROT_STATUS_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_STATUS_LU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_STATUS_LU	TRIGGER	6	DECLARE

DISTR_PROT_STATUS_LU	TRIGGER	7	BEGIN

DISTR_PROT_STATUS_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

DISTR_PROT_STATUS_LU	TRIGGER	9	END;

DISTR_PROT_STATUS_LU	TRIGGER	10	

DISTR_PROT_SLU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_SLU 

DISTR_PROT_SLU	TRIGGER	2	   BEFORE UPDATE OF status_id

DISTR_PROT_SLU	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_SLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_SLU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_SLU	TRIGGER	6	DECLARE

DISTR_PROT_SLU	TRIGGER	7	BEGIN

DISTR_PROT_SLU	TRIGGER	8	   :NEW.status_lu := SYSDATE;

DISTR_PROT_SLU	TRIGGER	9	END;
DISTR_PROT_RESULT_NEW	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_result_NEW

DISTR_PROT_RESULT_NEW	TRIGGER	2	   BEFORE INSERT

DISTR_PROT_RESULT_NEW	TRIGGER	3	   ON PERSIK.DISTR_PROT_result

DISTR_PROT_RESULT_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_RESULT_NEW	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_RESULT_NEW	TRIGGER	6	BEGIN

DISTR_PROT_RESULT_NEW	TRIGGER	7	   IF :new.id IS NULL

DISTR_PROT_RESULT_NEW	TRIGGER	8	   THEN

DISTR_PROT_RESULT_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

DISTR_PROT_RESULT_NEW	TRIGGER	10	   END IF;

DISTR_PROT_RESULT_NEW	TRIGGER	11	END;
DISTR_PROT_RESULT_LU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_result_LU

DISTR_PROT_RESULT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

DISTR_PROT_RESULT_LU	TRIGGER	3	   ON PERSIK.DISTR_PROT_result

DISTR_PROT_RESULT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_RESULT_LU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_RESULT_LU	TRIGGER	6	DECLARE

DISTR_PROT_RESULT_LU	TRIGGER	7	BEGIN

DISTR_PROT_RESULT_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

DISTR_PROT_RESULT_LU	TRIGGER	9	END;
DISTR_PROT_ONLU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_OnLU

DISTR_PROT_ONLU	TRIGGER	2	   BEFORE UPDATE OF ok_nm

DISTR_PROT_ONLU	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_ONLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_ONLU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_ONLU	TRIGGER	6	DECLARE

DISTR_PROT_ONLU	TRIGGER	7	BEGIN

DISTR_PROT_ONLU	TRIGGER	8	   :NEW.ok_nm_lu := SYSDATE;

DISTR_PROT_ONLU	TRIGGER	9	END;
DISTR_PROT_OK_CHIEF_NEW	TRIGGER	1	TRIGGER "PERSIK"."DISTR_PROT_OK_CHIEF_NEW" 

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	2	   BEFORE INSERT

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	3	   ON DISTR_PROT_ok_chief

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	6	BEGIN

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	7	   IF :new.id IS NULL

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	8	   THEN

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	10	   END IF;

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	11	END;

DISTR_PROT_OK_CHIEF_NEW	TRIGGER	12	

DISTR_PROT_OK_CHIEF_LU	TRIGGER	1	TRIGGER "PERSIK"."DISTR_PROT_OK_CHIEF_LU" 

DISTR_PROT_OK_CHIEF_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

DISTR_PROT_OK_CHIEF_LU	TRIGGER	3	   ON DISTR_PROT_ok_chief

DISTR_PROT_OK_CHIEF_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_OK_CHIEF_LU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_OK_CHIEF_LU	TRIGGER	6	DECLARE

DISTR_PROT_OK_CHIEF_LU	TRIGGER	7	BEGIN

DISTR_PROT_OK_CHIEF_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

DISTR_PROT_OK_CHIEF_LU	TRIGGER	9	END;

DISTR_PROT_OK_CHIEF_LU	TRIGGER	10	

DISTR_PROT_ODLU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_OdLU

DISTR_PROT_ODLU	TRIGGER	2	   BEFORE UPDATE OF ok_dpu

DISTR_PROT_ODLU	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_ODLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_ODLU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_ODLU	TRIGGER	6	DECLARE

DISTR_PROT_ODLU	TRIGGER	7	BEGIN

DISTR_PROT_ODLU	TRIGGER	8	   :NEW.ok_dpu_lu := SYSDATE;

DISTR_PROT_ODLU	TRIGGER	9	END;
DISTR_PROT_OCLU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_OCLU

DISTR_PROT_OCLU	TRIGGER	2	   BEFORE UPDATE OF ok_chief

DISTR_PROT_OCLU	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_OCLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_OCLU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_OCLU	TRIGGER	6	DECLARE

DISTR_PROT_OCLU	TRIGGER	7	BEGIN

DISTR_PROT_OCLU	TRIGGER	8	   :NEW.ok_chief_lu := SYSDATE;

DISTR_PROT_OCLU	TRIGGER	9	END;
DISTR_PROT_LU_FIO	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_LU_FIO

DISTR_PROT_LU_FIO	TRIGGER	2	   BEFORE INSERT OR UPDATE OF lu_tn

DISTR_PROT_LU_FIO	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_LU_FIO	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_LU_FIO	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_LU_FIO	TRIGGER	6	BEGIN

DISTR_PROT_LU_FIO	TRIGGER	7	   SELECT fio

DISTR_PROT_LU_FIO	TRIGGER	8	     INTO :new.lu_fio

DISTR_PROT_LU_FIO	TRIGGER	9	     FROM user_list

DISTR_PROT_LU_FIO	TRIGGER	10	    WHERE tn = :new.lu_tn;

DISTR_PROT_LU_FIO	TRIGGER	11	END;
DISTR_PROT_LU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_LU

DISTR_PROT_LU	TRIGGER	2	   BEFORE INSERT

DISTR_PROT_LU	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_LU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_LU	TRIGGER	6	DECLARE

DISTR_PROT_LU	TRIGGER	7	BEGIN

DISTR_PROT_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

DISTR_PROT_LU	TRIGGER	9	

DISTR_PROT_LU	TRIGGER	10	   SELECT id

DISTR_PROT_LU	TRIGGER	11	     INTO :new.status_id

DISTR_PROT_LU	TRIGGER	12	     FROM distr_prot_status

DISTR_PROT_LU	TRIGGER	13	    WHERE def_val = 1;

DISTR_PROT_LU	TRIGGER	14	

DISTR_PROT_LU	TRIGGER	15	   SELECT id

DISTR_PROT_LU	TRIGGER	16	     INTO :new.ok_chief

DISTR_PROT_LU	TRIGGER	17	     FROM distr_prot_ok_chief

DISTR_PROT_LU	TRIGGER	18	    WHERE def_val = 1;

DISTR_PROT_LU	TRIGGER	19	

DISTR_PROT_LU	TRIGGER	20	   SELECT id

DISTR_PROT_LU	TRIGGER	21	     INTO :new.ok_dpu

DISTR_PROT_LU	TRIGGER	22	     FROM distr_prot_ok_chief

DISTR_PROT_LU	TRIGGER	23	    WHERE def_val = 1;

DISTR_PROT_LU	TRIGGER	24	

DISTR_PROT_LU	TRIGGER	25	   SELECT id

DISTR_PROT_LU	TRIGGER	26	     INTO :new.ok_nm

DISTR_PROT_LU	TRIGGER	27	     FROM distr_prot_ok_chief

DISTR_PROT_LU	TRIGGER	28	    WHERE def_val = 1;

DISTR_PROT_LU	TRIGGER	29	

DISTR_PROT_LU	TRIGGER	30	   IF :new.id IS NULL

DISTR_PROT_LU	TRIGGER	31	   THEN

DISTR_PROT_LU	TRIGGER	32	      :new.id := seq_all.NEXTVAL;

DISTR_PROT_LU	TRIGGER	33	   END IF;

DISTR_PROT_LU	TRIGGER	34	END;
DISTR_PROT_FULL_NEW	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_full_NEW

DISTR_PROT_FULL_NEW	TRIGGER	2	   BEFORE INSERT

DISTR_PROT_FULL_NEW	TRIGGER	3	   ON PERSIK.DISTR_PROT_full

DISTR_PROT_FULL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_FULL_NEW	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_FULL_NEW	TRIGGER	6	BEGIN

DISTR_PROT_FULL_NEW	TRIGGER	7	   IF :new.id IS NULL

DISTR_PROT_FULL_NEW	TRIGGER	8	   THEN

DISTR_PROT_FULL_NEW	TRIGGER	9	      :new.id := seq_all.NEXTVAL;

DISTR_PROT_FULL_NEW	TRIGGER	10	   END IF;

DISTR_PROT_FULL_NEW	TRIGGER	11	END;
DISTR_PROT_FULL_LU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_full_LU

DISTR_PROT_FULL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

DISTR_PROT_FULL_LU	TRIGGER	3	   ON PERSIK.DISTR_PROT_full

DISTR_PROT_FULL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_FULL_LU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_FULL_LU	TRIGGER	6	DECLARE

DISTR_PROT_FULL_LU	TRIGGER	7	BEGIN

DISTR_PROT_FULL_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

DISTR_PROT_FULL_LU	TRIGGER	9	END;
DISTR_PROT_DELLU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_delLU

DISTR_PROT_DELLU	TRIGGER	2	   BEFORE UPDATE OF deleted

DISTR_PROT_DELLU	TRIGGER	3	   ON PERSIK.DISTR_PROT

DISTR_PROT_DELLU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_DELLU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_DELLU	TRIGGER	6	DECLARE

DISTR_PROT_DELLU	TRIGGER	7	BEGIN

DISTR_PROT_DELLU	TRIGGER	8	   :NEW.deleted_lu := SYSDATE;

DISTR_PROT_DELLU	TRIGGER	9	END;
DISTR_PROT_CONQ_FIL_LU	TRIGGER	1	TRIGGER PERSIK.DISTR_PROT_CONQ_FIL_lu

DISTR_PROT_CONQ_FIL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

DISTR_PROT_CONQ_FIL_LU	TRIGGER	3	   ON PERSIK.DISTR_PROT_CONQ_FIL

DISTR_PROT_CONQ_FIL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

DISTR_PROT_CONQ_FIL_LU	TRIGGER	5	   FOR EACH ROW

DISTR_PROT_CONQ_FIL_LU	TRIGGER	6	DECLARE

DISTR_PROT_CONQ_FIL_LU	TRIGGER	7	BEGIN

DISTR_PROT_CONQ_FIL_LU	TRIGGER	8	   :NEW.lu := SYSDATE;

DISTR_PROT_CONQ_FIL_LU	TRIGGER	9	END;
DEPARTMENTS_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.DEPARTMENTS_MV_Q_ADD

DEPARTMENTS_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

DEPARTMENTS_MV_Q_ADD	TRIGGER	3	   ON PERSIK.DEPARTMENTS

DEPARTMENTS_MV_Q_ADD	TRIGGER	4	BEGIN

DEPARTMENTS_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

DEPARTMENTS_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

DEPARTMENTS_MV_Q_ADD	TRIGGER	7	END;
DC_ORDER_HEAD_UPD	TRIGGER	1	TRIGGER "PERSIK"."DC_ORDER_HEAD_UPD" 

DC_ORDER_HEAD_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

DC_ORDER_HEAD_UPD	TRIGGER	3	   ON PERSIK.dc_order_HEAD    REFERENCING NEW AS NEW OLD AS OLD

DC_ORDER_HEAD_UPD	TRIGGER	4	   FOR EACH ROW

DC_ORDER_HEAD_UPD	TRIGGER	5	BEGIN

DC_ORDER_HEAD_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

DC_ORDER_HEAD_UPD	TRIGGER	7	END;

DC_ORDER_HEAD_UPD	TRIGGER	8	

DC_ORDER_HEAD_UPD	TRIGGER	9	

DC_ORDER_HEAD_UPD	TRIGGER	10	

DC_ORDER_HEAD_NEW	TRIGGER	1	TRIGGER "PERSIK"."DC_ORDER_HEAD_NEW" 

DC_ORDER_HEAD_NEW	TRIGGER	2	   BEFORE INSERT

DC_ORDER_HEAD_NEW	TRIGGER	3	   ON PERSIK.dc_order_HEAD    REFERENCING NEW AS NEW OLD AS OLD

DC_ORDER_HEAD_NEW	TRIGGER	4	   FOR EACH ROW

DC_ORDER_HEAD_NEW	TRIGGER	5	BEGIN

DC_ORDER_HEAD_NEW	TRIGGER	6	   IF :new.id IS NULL

DC_ORDER_HEAD_NEW	TRIGGER	7	   THEN

DC_ORDER_HEAD_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

DC_ORDER_HEAD_NEW	TRIGGER	9	   END IF;

DC_ORDER_HEAD_NEW	TRIGGER	10	END;

DC_ORDER_HEAD_NEW	TRIGGER	11	

DC_ORDER_HEAD_NEW	TRIGGER	12	

DC_ORDER_HEAD_NEW	TRIGGER	13	

DC_ORDER_BODY_UPD	TRIGGER	1	TRIGGER "PERSIK"."DC_ORDER_BODY_UPD" 

DC_ORDER_BODY_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

DC_ORDER_BODY_UPD	TRIGGER	3	   ON PERSIK.dc_order_BODY    REFERENCING NEW AS NEW OLD AS OLD

DC_ORDER_BODY_UPD	TRIGGER	4	   FOR EACH ROW

DC_ORDER_BODY_UPD	TRIGGER	5	BEGIN

DC_ORDER_BODY_UPD	TRIGGER	6	   :NEW.lu := SYSDATE;

DC_ORDER_BODY_UPD	TRIGGER	7	END;

DC_ORDER_BODY_UPD	TRIGGER	8	

DC_ORDER_BODY_UPD	TRIGGER	9	

DC_ORDER_BODY_UPD	TRIGGER	10	

DC_ORDER_BODY_NEW	TRIGGER	1	TRIGGER "PERSIK"."DC_ORDER_BODY_NEW" 

DC_ORDER_BODY_NEW	TRIGGER	2	   BEFORE INSERT

DC_ORDER_BODY_NEW	TRIGGER	3	   ON PERSIK.dc_order_BODY    REFERENCING NEW AS NEW OLD AS OLD

DC_ORDER_BODY_NEW	TRIGGER	4	   FOR EACH ROW

DC_ORDER_BODY_NEW	TRIGGER	5	BEGIN

DC_ORDER_BODY_NEW	TRIGGER	6	   IF :new.id IS NULL

DC_ORDER_BODY_NEW	TRIGGER	7	   THEN

DC_ORDER_BODY_NEW	TRIGGER	8	      :new.id := seq_all.NEXTVAL;

DC_ORDER_BODY_NEW	TRIGGER	9	   END IF;

DC_ORDER_BODY_NEW	TRIGGER	10	END;

DC_ORDER_BODY_NEW	TRIGGER	11	

DC_ORDER_BODY_NEW	TRIGGER	12	

DC_ORDER_BODY_NEW	TRIGGER	13	

DAY_FOR_MAREPORT	FUNCTION	1	FUNCTION        day_for_MAreport

DAY_FOR_MAREPORT	FUNCTION	2	   RETURN INTEGER

DAY_FOR_MAREPORT	FUNCTION	3	IS

DAY_FOR_MAREPORT	FUNCTION	4	   param   INTEGER;

DAY_FOR_MAREPORT	FUNCTION	5	BEGIN

DAY_FOR_MAREPORT	FUNCTION	6	   SELECT val_number

DAY_FOR_MAREPORT	FUNCTION	7	     INTO param

DAY_FOR_MAREPORT	FUNCTION	8	     FROM parameters

DAY_FOR_MAREPORT	FUNCTION	9	    WHERE param_name = 'day_for_MAreport' AND dpt_id = 1;

DAY_FOR_MAREPORT	FUNCTION	10	

DAY_FOR_MAREPORT	FUNCTION	11	   RETURN param;

DAY_FOR_MAREPORT	FUNCTION	12	END;
CRITERIA_raise	TRIGGER	1	TRIGGER "PERSIK"."CRITERIA_raise" 

CRITERIA_raise	TRIGGER	2	   BEFORE INSERT OR UPDATE OR DELETE

CRITERIA_raise	TRIGGER	3	   ON PERSIK.OCENKA_CRITERIA    REFERENCING NEW AS NEW OLD AS OLD

CRITERIA_raise	TRIGGER	4	   FOR EACH ROW

CRITERIA_raise	TRIGGER	5	DECLARE

CRITERIA_raise	TRIGGER	6	BEGIN

CRITERIA_raise	TRIGGER	7	   pr_ocenka_event_enabled (:old.event);

CRITERIA_raise	TRIGGER	8	END;

CRITERIA_raise	TRIGGER	9	

CRITERIA_raise	TRIGGER	10	

CRITERIA_raise	TRIGGER	11	

CRITERIA_NEW	TRIGGER	1	TRIGGER "PERSIK"."CRITERIA_NEW" 

CRITERIA_NEW	TRIGGER	2	   BEFORE INSERT

CRITERIA_NEW	TRIGGER	3	   ON PERSIK.OCENKA_CRITERIA

CRITERIA_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

CRITERIA_NEW	TRIGGER	5	   FOR EACH ROW

CRITERIA_NEW	TRIGGER	6	DECLARE

CRITERIA_NEW	TRIGGER	7	BEGIN

CRITERIA_NEW	TRIGGER	8	   IF :new.id_num IS NULL

CRITERIA_NEW	TRIGGER	9	   THEN

CRITERIA_NEW	TRIGGER	10	      :NEW.id_num := seq_all.NEXTVAL;

CRITERIA_NEW	TRIGGER	11	   END IF;

CRITERIA_NEW	TRIGGER	12	END criteria_new;

CRITERIA_NEW	TRIGGER	13	

CRITERIA_NEW	TRIGGER	14	

CRITERIA_NEW	TRIGGER	15	

CRITERIA_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."CRITERIA_LAST_UPDATE" 

CRITERIA_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

CRITERIA_LAST_UPDATE	TRIGGER	3	   ON PERSIK.OCENKA_CRITERIA

CRITERIA_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

CRITERIA_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

CRITERIA_LAST_UPDATE	TRIGGER	6	BEGIN

CRITERIA_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

CRITERIA_LAST_UPDATE	TRIGGER	8	END CRITERIA_last_update;

CRITERIA_LAST_UPDATE	TRIGGER	9	

CRITERIA_LAST_UPDATE	TRIGGER	10	

CRITERIA_LAST_UPDATE	TRIGGER	11	

CREATEZAYCOPY	PROCEDURE	1	PROCEDURE        createZayCopy (zold INTEGER, znew INTEGER)

CREATEZAYCOPY	PROCEDURE	2	IS

CREATEZAYCOPY	PROCEDURE	3	BEGIN

CREATEZAYCOPY	PROCEDURE	4	   INSERT INTO BUD_RU_ZAY (CREATED,

CREATEZAYCOPY	PROCEDURE	5	                           DISTR_COMPENSATION,

CREATEZAYCOPY	PROCEDURE	6	                           DT_END,

CREATEZAYCOPY	PROCEDURE	7	                           DT_START,

CREATEZAYCOPY	PROCEDURE	8	                           FIL,

CREATEZAYCOPY	PROCEDURE	9	                           FUNDS,

CREATEZAYCOPY	PROCEDURE	10	                           ID,

CREATEZAYCOPY	PROCEDURE	11	                           ID_NET,

CREATEZAYCOPY	PROCEDURE	12	                           KAT,

CREATEZAYCOPY	PROCEDURE	13	                           LU,

CREATEZAYCOPY	PROCEDURE	14	                           PAYMENT_TYPE,

CREATEZAYCOPY	PROCEDURE	15	                           RECIPIENT,

CREATEZAYCOPY	PROCEDURE	16	                           REPORT_DATA,

CREATEZAYCOPY	PROCEDURE	17	                           REPORT_DATA_LU,

CREATEZAYCOPY	PROCEDURE	18	                           REPORT_DATA_TEXT,

CREATEZAYCOPY	PROCEDURE	19	                           REPORT_DATA_TN,

CREATEZAYCOPY	PROCEDURE	20	                           REPORT_DONE,

CREATEZAYCOPY	PROCEDURE	21	                           REPORT_DONE_LU,

CREATEZAYCOPY	PROCEDURE	22	                           REPORT_FAKT_EQUAL_PLAN,

CREATEZAYCOPY	PROCEDURE	23	                           REPORT_SHORT,

CREATEZAYCOPY	PROCEDURE	24	                           REPORT_ZERO_COST,

CREATEZAYCOPY	PROCEDURE	25	                           RM_FIO,

CREATEZAYCOPY	PROCEDURE	26	                           RM_TN,

CREATEZAYCOPY	PROCEDURE	27	                           ST,

CREATEZAYCOPY	PROCEDURE	28	                           STATYA,

CREATEZAYCOPY	PROCEDURE	29	                           SUP_DOC,

CREATEZAYCOPY	PROCEDURE	30	                           TN,

CREATEZAYCOPY	PROCEDURE	31	                           VALID_LU,

CREATEZAYCOPY	PROCEDURE	32	                           VALID_NO,

CREATEZAYCOPY	PROCEDURE	33	                           VALID_TEXT,

CREATEZAYCOPY	PROCEDURE	34	                           VALID_TN)

CREATEZAYCOPY	PROCEDURE	35	      SELECT CREATED,

CREATEZAYCOPY	PROCEDURE	36	             DISTR_COMPENSATION,

CREATEZAYCOPY	PROCEDURE	37	             DT_END,

CREATEZAYCOPY	PROCEDURE	38	             DT_START,

CREATEZAYCOPY	PROCEDURE	39	             FIL,

CREATEZAYCOPY	PROCEDURE	40	             FUNDS,

CREATEZAYCOPY	PROCEDURE	41	             znew,

CREATEZAYCOPY	PROCEDURE	42	             ID_NET,

CREATEZAYCOPY	PROCEDURE	43	             KAT,

CREATEZAYCOPY	PROCEDURE	44	             LU,

CREATEZAYCOPY	PROCEDURE	45	             PAYMENT_TYPE,

CREATEZAYCOPY	PROCEDURE	46	             RECIPIENT,

CREATEZAYCOPY	PROCEDURE	47	             REPORT_DATA,

CREATEZAYCOPY	PROCEDURE	48	             REPORT_DATA_LU,

CREATEZAYCOPY	PROCEDURE	49	             REPORT_DATA_TEXT,

CREATEZAYCOPY	PROCEDURE	50	             REPORT_DATA_TN,

CREATEZAYCOPY	PROCEDURE	51	             REPORT_DONE,

CREATEZAYCOPY	PROCEDURE	52	             REPORT_DONE_LU,

CREATEZAYCOPY	PROCEDURE	53	             REPORT_FAKT_EQUAL_PLAN,

CREATEZAYCOPY	PROCEDURE	54	             REPORT_SHORT,

CREATEZAYCOPY	PROCEDURE	55	             REPORT_ZERO_COST,

CREATEZAYCOPY	PROCEDURE	56	             RM_FIO,

CREATEZAYCOPY	PROCEDURE	57	             RM_TN,

CREATEZAYCOPY	PROCEDURE	58	             ST,

CREATEZAYCOPY	PROCEDURE	59	             STATYA,

CREATEZAYCOPY	PROCEDURE	60	             SUP_DOC,

CREATEZAYCOPY	PROCEDURE	61	             TN,

CREATEZAYCOPY	PROCEDURE	62	             VALID_LU,

CREATEZAYCOPY	PROCEDURE	63	             VALID_NO,

CREATEZAYCOPY	PROCEDURE	64	             VALID_TEXT,

CREATEZAYCOPY	PROCEDURE	65	             VALID_TN

CREATEZAYCOPY	PROCEDURE	66	        FROM BUD_RU_ZAY

CREATEZAYCOPY	PROCEDURE	67	       WHERE id = zold;

CREATEZAYCOPY	PROCEDURE	68	

CREATEZAYCOPY	PROCEDURE	69	   INSERT INTO BUD_RU_ZAY_ACCEPT (ACCEPTED,

CREATEZAYCOPY	PROCEDURE	70	                                  ACCEPT_ORDER,

CREATEZAYCOPY	PROCEDURE	71	                                  CHILD,

CREATEZAYCOPY	PROCEDURE	72	                                  CREATED,

CREATEZAYCOPY	PROCEDURE	73	                                  FAILURE,

CREATEZAYCOPY	PROCEDURE	74	                                  LU,

CREATEZAYCOPY	PROCEDURE	75	                                  REP_ACCEPTED,

CREATEZAYCOPY	PROCEDURE	76	                                  REP_FAILURE,

CREATEZAYCOPY	PROCEDURE	77	                                  REP_LU,

CREATEZAYCOPY	PROCEDURE	78	                                  TN,

CREATEZAYCOPY	PROCEDURE	79	                                  Z_ID)

CREATEZAYCOPY	PROCEDURE	80	        SELECT ACCEPTED,

CREATEZAYCOPY	PROCEDURE	81	               ACCEPT_ORDER,

CREATEZAYCOPY	PROCEDURE	82	               CHILD,

CREATEZAYCOPY	PROCEDURE	83	               CREATED,

CREATEZAYCOPY	PROCEDURE	84	               FAILURE,

CREATEZAYCOPY	PROCEDURE	85	               LU,

CREATEZAYCOPY	PROCEDURE	86	               REP_ACCEPTED,

CREATEZAYCOPY	PROCEDURE	87	               REP_FAILURE,

CREATEZAYCOPY	PROCEDURE	88	               REP_LU,

CREATEZAYCOPY	PROCEDURE	89	               TN,

CREATEZAYCOPY	PROCEDURE	90	               znew

CREATEZAYCOPY	PROCEDURE	91	          FROM BUD_RU_ZAY_ACCEPT

CREATEZAYCOPY	PROCEDURE	92	         WHERE z_id = zold

CREATEZAYCOPY	PROCEDURE	93	      ORDER BY ACCEPT_ORDER;

CREATEZAYCOPY	PROCEDURE	94	

CREATEZAYCOPY	PROCEDURE	95	   INSERT INTO BUD_RU_ZAY_FF (FF_ID,

CREATEZAYCOPY	PROCEDURE	96	                              LU,

CREATEZAYCOPY	PROCEDURE	97	                              REP_VAL_BOOL,

CREATEZAYCOPY	PROCEDURE	98	                              REP_VAL_DATEPICKER,

CREATEZAYCOPY	PROCEDURE	99	                              REP_VAL_FILE,

CREATEZAYCOPY	PROCEDURE	100	                              REP_VAL_FORMULA,

CREATEZAYCOPY	PROCEDURE	101	                              REP_VAL_LIST,

CREATEZAYCOPY	PROCEDURE	102	                              REP_VAL_LIST_NAME,

CREATEZAYCOPY	PROCEDURE	103	                              REP_VAL_NUMBER,

CREATEZAYCOPY	PROCEDURE	104	                              REP_VAL_NUMBER_INT,

CREATEZAYCOPY	PROCEDURE	105	                              REP_VAL_STRING,

CREATEZAYCOPY	PROCEDURE	106	                              REP_VAL_TEXTAREA,

CREATEZAYCOPY	PROCEDURE	107	                              VAL_BOOL,

CREATEZAYCOPY	PROCEDURE	108	                              VAL_DATEPICKER,

CREATEZAYCOPY	PROCEDURE	109	                              VAL_FILE,

CREATEZAYCOPY	PROCEDURE	110	                              VAL_FORMULA,

CREATEZAYCOPY	PROCEDURE	111	                              VAL_LIST,

CREATEZAYCOPY	PROCEDURE	112	                              VAL_LIST_NAME,

CREATEZAYCOPY	PROCEDURE	113	                              VAL_NUMBER,

CREATEZAYCOPY	PROCEDURE	114	                              VAL_NUMBER_INT,

CREATEZAYCOPY	PROCEDURE	115	                              VAL_STRING,

CREATEZAYCOPY	PROCEDURE	116	                              VAL_TEXTAREA,

CREATEZAYCOPY	PROCEDURE	117	                              Z_ID)

CREATEZAYCOPY	PROCEDURE	118	      SELECT FF_ID,

CREATEZAYCOPY	PROCEDURE	119	             LU,

CREATEZAYCOPY	PROCEDURE	120	             REP_VAL_BOOL,

CREATEZAYCOPY	PROCEDURE	121	             REP_VAL_DATEPICKER,

CREATEZAYCOPY	PROCEDURE	122	             REP_VAL_FILE,

CREATEZAYCOPY	PROCEDURE	123	             REP_VAL_FORMULA,

CREATEZAYCOPY	PROCEDURE	124	             REP_VAL_LIST,

CREATEZAYCOPY	PROCEDURE	125	             REP_VAL_LIST_NAME,

CREATEZAYCOPY	PROCEDURE	126	             REP_VAL_NUMBER,

CREATEZAYCOPY	PROCEDURE	127	             REP_VAL_NUMBER_INT,

CREATEZAYCOPY	PROCEDURE	128	             REP_VAL_STRING,

CREATEZAYCOPY	PROCEDURE	129	             REP_VAL_TEXTAREA,

CREATEZAYCOPY	PROCEDURE	130	             VAL_BOOL,

CREATEZAYCOPY	PROCEDURE	131	             VAL_DATEPICKER,

CREATEZAYCOPY	PROCEDURE	132	             VAL_FILE,

CREATEZAYCOPY	PROCEDURE	133	             VAL_FORMULA,

CREATEZAYCOPY	PROCEDURE	134	             VAL_LIST,

CREATEZAYCOPY	PROCEDURE	135	             VAL_LIST_NAME,

CREATEZAYCOPY	PROCEDURE	136	             VAL_NUMBER,

CREATEZAYCOPY	PROCEDURE	137	             VAL_NUMBER_INT,

CREATEZAYCOPY	PROCEDURE	138	             VAL_STRING,

CREATEZAYCOPY	PROCEDURE	139	             VAL_TEXTAREA,

CREATEZAYCOPY	PROCEDURE	140	             znew

CREATEZAYCOPY	PROCEDURE	141	        FROM BUD_RU_ZAY_FF

CREATEZAYCOPY	PROCEDURE	142	       WHERE z_id = zold;

CREATEZAYCOPY	PROCEDURE	143	

CREATEZAYCOPY	PROCEDURE	144	   INSERT INTO BUD_RU_ZAY_CHAT (LU,

CREATEZAYCOPY	PROCEDURE	145	                                TEXT,

CREATEZAYCOPY	PROCEDURE	146	                                TN,

CREATEZAYCOPY	PROCEDURE	147	                                Z_ID)

CREATEZAYCOPY	PROCEDURE	148	        SELECT LU,

CREATEZAYCOPY	PROCEDURE	149	               TEXT,

CREATEZAYCOPY	PROCEDURE	150	               TN,

CREATEZAYCOPY	PROCEDURE	151	               znew

CREATEZAYCOPY	PROCEDURE	152	          FROM BUD_RU_ZAY_CHAT

CREATEZAYCOPY	PROCEDURE	153	         WHERE z_id = zold

CREATEZAYCOPY	PROCEDURE	154	      ORDER BY id;

CREATEZAYCOPY	PROCEDURE	155	

CREATEZAYCOPY	PROCEDURE	156	   INSERT INTO BUD_RU_ZAY_REP_CHAT (LU,

CREATEZAYCOPY	PROCEDURE	157	                                    TEXT,

CREATEZAYCOPY	PROCEDURE	158	                                    TN,

CREATEZAYCOPY	PROCEDURE	159	                                    Z_ID)

CREATEZAYCOPY	PROCEDURE	160	        SELECT LU,

CREATEZAYCOPY	PROCEDURE	161	               TEXT,

CREATEZAYCOPY	PROCEDURE	162	               TN,

CREATEZAYCOPY	PROCEDURE	163	               znew

CREATEZAYCOPY	PROCEDURE	164	          FROM BUD_RU_ZAY_REP_CHAT

CREATEZAYCOPY	PROCEDURE	165	         WHERE z_id = zold

CREATEZAYCOPY	PROCEDURE	166	      ORDER BY id;

CREATEZAYCOPY	PROCEDURE	167	

CREATEZAYCOPY	PROCEDURE	168	

CREATEZAYCOPY	PROCEDURE	169	   INSERT INTO BUD_RU_ZAY_EXECUTORS (EXECUTE_ORDER,

CREATEZAYCOPY	PROCEDURE	170	                                     LU,

CREATEZAYCOPY	PROCEDURE	171	                                     TN,

CREATEZAYCOPY	PROCEDURE	172	                                     Z_ID)

CREATEZAYCOPY	PROCEDURE	173	        SELECT EXECUTE_ORDER,

CREATEZAYCOPY	PROCEDURE	174	               LU,

CREATEZAYCOPY	PROCEDURE	175	               TN,

CREATEZAYCOPY	PROCEDURE	176	               znew

CREATEZAYCOPY	PROCEDURE	177	          FROM BUD_RU_ZAY_EXECUTORS

CREATEZAYCOPY	PROCEDURE	178	         WHERE z_id = zold

CREATEZAYCOPY	PROCEDURE	179	      ORDER BY EXECUTE_ORDER;

CREATEZAYCOPY	PROCEDURE	180	

CREATEZAYCOPY	PROCEDURE	181	   COMMIT;

CREATEZAYCOPY	PROCEDURE	182	END;
COVERINGPOINTSPOS_CHECK	PROCEDURE	1	PROCEDURE          "COVERINGPOINTSPOS_CHECK" 

COVERINGPOINTSPOS_CHECK	PROCEDURE	2	IS

COVERINGPOINTSPOS_CHECK	PROCEDURE	3	   i   INTEGER;

COVERINGPOINTSPOS_CHECK	PROCEDURE	4	BEGIN

COVERINGPOINTSPOS_CHECK	PROCEDURE	5	   SELECT COUNT (*)

COVERINGPOINTSPOS_CHECK	PROCEDURE	6	     INTO i

COVERINGPOINTSPOS_CHECK	PROCEDURE	7	     FROM coveringpointspos

COVERINGPOINTSPOS_CHECK	PROCEDURE	8	    WHERE data = TRUNC (SYSDATE, 'mm');

COVERINGPOINTSPOS_CHECK	PROCEDURE	9	

COVERINGPOINTSPOS_CHECK	PROCEDURE	10	   IF i = 0

COVERINGPOINTSPOS_CHECK	PROCEDURE	11	   THEN

COVERINGPOINTSPOS_CHECK	PROCEDURE	12	      INSERT INTO PERSIK.COVERINGPOINTSPOS (KODTP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	13	                                            DATA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	14	                                            ID_NET,

COVERINGPOINTSPOS_CHECK	PROCEDURE	15	                                            UR_TZ_NAME,

COVERINGPOINTSPOS_CHECK	PROCEDURE	16	                                            TZ_ADDRESS,

COVERINGPOINTSPOS_CHECK	PROCEDURE	17	                                            KASS_COUNT,

COVERINGPOINTSPOS_CHECK	PROCEDURE	18	                                            TZ_SQUARE,

COVERINGPOINTSPOS_CHECK	PROCEDURE	19	                                            TZ_OBLAST,

COVERINGPOINTSPOS_CHECK	PROCEDURE	20	                                            TN_MKK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	21	                                            FIO_ETA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	22	                                            PALETA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	23	                                            MINIPALETA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	24	                                            MINISTELAG,

COVERINGPOINTSPOS_CHECK	PROCEDURE	25	                                            MANEG05,

COVERINGPOINTSPOS_CHECK	PROCEDURE	26	                                            JUVISYSTEM,

COVERINGPOINTSPOS_CHECK	PROCEDURE	27	                                            JUVISTRUB,

COVERINGPOINTSPOS_CHECK	PROCEDURE	28	                                            STELAG940980,

COVERINGPOINTSPOS_CHECK	PROCEDURE	29	                                            STELAG1300,

COVERINGPOINTSPOS_CHECK	PROCEDURE	30	                                            OTHER,

COVERINGPOINTSPOS_CHECK	PROCEDURE	31	                                            KASSA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	32	                                            TORECFAS,

COVERINGPOINTSPOS_CHECK	PROCEDURE	33	                                            PALETAFKPK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	34	                                            TORECVESPAK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	35	                                            OSTROVVK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	36	                                            STELAG500,

COVERINGPOINTSPOS_CHECK	PROCEDURE	37	                                            TUMBAVP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	38	                                            TUMBA1ST,

COVERINGPOINTSPOS_CHECK	PROCEDURE	39	                                            TUMBA2ST,

COVERINGPOINTSPOS_CHECK	PROCEDURE	40	                                            STELAGDSP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	41	                                            DISPKOROVKA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	42	                                            PALETANP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	43	                                            TORECNP)

COVERINGPOINTSPOS_CHECK	PROCEDURE	44	         SELECT KODTP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	45	                TRUNC (SYSDATE, 'mm'),

COVERINGPOINTSPOS_CHECK	PROCEDURE	46	                ID_NET,

COVERINGPOINTSPOS_CHECK	PROCEDURE	47	                UR_TZ_NAME,

COVERINGPOINTSPOS_CHECK	PROCEDURE	48	                TZ_ADDRESS,

COVERINGPOINTSPOS_CHECK	PROCEDURE	49	                KASS_COUNT,

COVERINGPOINTSPOS_CHECK	PROCEDURE	50	                TZ_SQUARE,

COVERINGPOINTSPOS_CHECK	PROCEDURE	51	                TZ_OBLAST,

COVERINGPOINTSPOS_CHECK	PROCEDURE	52	                TN_MKK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	53	                FIO_ETA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	54	                PALETA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	55	                MINIPALETA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	56	                MINISTELAG,

COVERINGPOINTSPOS_CHECK	PROCEDURE	57	                MANEG05,

COVERINGPOINTSPOS_CHECK	PROCEDURE	58	                JUVISYSTEM,

COVERINGPOINTSPOS_CHECK	PROCEDURE	59	                JUVISTRUB,

COVERINGPOINTSPOS_CHECK	PROCEDURE	60	                STELAG940980,

COVERINGPOINTSPOS_CHECK	PROCEDURE	61	                STELAG1300,

COVERINGPOINTSPOS_CHECK	PROCEDURE	62	                OTHER,

COVERINGPOINTSPOS_CHECK	PROCEDURE	63	                KASSA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	64	                TORECFAS,

COVERINGPOINTSPOS_CHECK	PROCEDURE	65	                PALETAFKPK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	66	                TORECVESPAK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	67	                OSTROVVK,

COVERINGPOINTSPOS_CHECK	PROCEDURE	68	                STELAG500,

COVERINGPOINTSPOS_CHECK	PROCEDURE	69	                TUMBAVP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	70	                TUMBA1ST,

COVERINGPOINTSPOS_CHECK	PROCEDURE	71	                TUMBA2ST,

COVERINGPOINTSPOS_CHECK	PROCEDURE	72	                STELAGDSP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	73	                DISPKOROVKA,

COVERINGPOINTSPOS_CHECK	PROCEDURE	74	                PALETANP,

COVERINGPOINTSPOS_CHECK	PROCEDURE	75	                TORECNP

COVERINGPOINTSPOS_CHECK	PROCEDURE	76	           FROM PERSIK.COVERINGPOINTSPOS

COVERINGPOINTSPOS_CHECK	PROCEDURE	77	          WHERE data = (SELECT MAX (data) FROM PERSIK.COVERINGPOINTSPOS);

COVERINGPOINTSPOS_CHECK	PROCEDURE	78	   END IF;

COVERINGPOINTSPOS_CHECK	PROCEDURE	79	END;

COVERINGPOINTSPOS_CHECK	PROCEDURE	80	 

COVERINGPOINTSPOS_CHECK	PROCEDURE	81	 

COVERINGPOINTSPOS_CHECK	PROCEDURE	82	 

COVERINGPOINTSPOS_CHECK	PROCEDURE	83	 
COPY_ROUTES	PROCEDURE	1	PROCEDURE        "COPY_ROUTES"

COPY_ROUTES	PROCEDURE	2	IS

COPY_ROUTES	PROCEDURE	3	   this_month   DATE;

COPY_ROUTES	PROCEDURE	4	   next_month   DATE;

COPY_ROUTES	PROCEDURE	5	   ok           INTEGER;

COPY_ROUTES	PROCEDURE	6	BEGIN

COPY_ROUTES	PROCEDURE	7	   IF TRUNC (SYSDATE) NOT BETWEEN LAST_DAY (TRUNC (SYSDATE)) - 3

COPY_ROUTES	PROCEDURE	8	                              AND LAST_DAY (TRUNC (SYSDATE))

COPY_ROUTES	PROCEDURE	9	   THEN

COPY_ROUTES	PROCEDURE	10	      RETURN;

COPY_ROUTES	PROCEDURE	11	   END IF;

COPY_ROUTES	PROCEDURE	12	

COPY_ROUTES	PROCEDURE	13	   this_month := TRUNC (SYSDATE, 'mm');

COPY_ROUTES	PROCEDURE	14	   next_month := ADD_MONTHS (this_month, 1);

COPY_ROUTES	PROCEDURE	15	

COPY_ROUTES	PROCEDURE	16	   SELECT COUNT (*)

COPY_ROUTES	PROCEDURE	17	     INTO ok

COPY_ROUTES	PROCEDURE	18	     FROM ROUTES_COPY_OK

COPY_ROUTES	PROCEDURE	19	    WHERE data = next_month;

COPY_ROUTES	PROCEDURE	20	

COPY_ROUTES	PROCEDURE	21	   IF ok = 0

COPY_ROUTES	PROCEDURE	22	   THEN

COPY_ROUTES	PROCEDURE	23	      INSERT INTO routes_head (parent,

COPY_ROUTES	PROCEDURE	24	                               data,

COPY_ROUTES	PROCEDURE	25	                               num,

COPY_ROUTES	PROCEDURE	26	                               tn,

COPY_ROUTES	PROCEDURE	27	                               fio_otv,

COPY_ROUTES	PROCEDURE	28	                               pos_otv,

COPY_ROUTES	PROCEDURE	29	                               login,

COPY_ROUTES	PROCEDURE	30	                               gps,

COPY_ROUTES	PROCEDURE	31	                               copy2next_month)

COPY_ROUTES	PROCEDURE	32	         SELECT z.id,

COPY_ROUTES	PROCEDURE	33	                next_month,

COPY_ROUTES	PROCEDURE	34	                z.num,

COPY_ROUTES	PROCEDURE	35	                z.tn,

COPY_ROUTES	PROCEDURE	36	                z.fio_otv,

COPY_ROUTES	PROCEDURE	37	                z.pos_otv,

COPY_ROUTES	PROCEDURE	38	                z.login,

COPY_ROUTES	PROCEDURE	39	                z.gps,

COPY_ROUTES	PROCEDURE	40	                z.copy2next_month

COPY_ROUTES	PROCEDURE	41	           FROM routes_head z

COPY_ROUTES	PROCEDURE	42	          WHERE data = this_month AND copy2next_month = 1;

COPY_ROUTES	PROCEDURE	43	

COPY_ROUTES	PROCEDURE	44	      --COMMIT;

COPY_ROUTES	PROCEDURE	45	

COPY_ROUTES	PROCEDURE	46	

COPY_ROUTES	PROCEDURE	47	      FOR a IN (SELECT *

COPY_ROUTES	PROCEDURE	48	                  FROM routes_head

COPY_ROUTES	PROCEDURE	49	                 WHERE data = next_month)

COPY_ROUTES	PROCEDURE	50	      LOOP

COPY_ROUTES	PROCEDURE	51	         INSERT INTO routes_head_agents (ag_id, head_id)

COPY_ROUTES	PROCEDURE	52	            SELECT ag_id, a.id

COPY_ROUTES	PROCEDURE	53	              FROM routes_head_agents

COPY_ROUTES	PROCEDURE	54	             WHERE head_id = a.parent AND vv = 0;

COPY_ROUTES	PROCEDURE	55	

COPY_ROUTES	PROCEDURE	56	         --COMMIT;

COPY_ROUTES	PROCEDURE	57	

COPY_ROUTES	PROCEDURE	58	         INSERT INTO routes_tp (kodtp, head_id)

COPY_ROUTES	PROCEDURE	59	            SELECT kodtp, a.id

COPY_ROUTES	PROCEDURE	60	              FROM routes_tp

COPY_ROUTES	PROCEDURE	61	             WHERE head_id = a.parent AND vv = 0;

COPY_ROUTES	PROCEDURE	62	

COPY_ROUTES	PROCEDURE	63	         --COMMIT;

COPY_ROUTES	PROCEDURE	64	

COPY_ROUTES	PROCEDURE	65	         INSERT INTO PERSIK.ROUTES_BODY1 (HEAD_ID,

COPY_ROUTES	PROCEDURE	66	                                          KODTP,

COPY_ROUTES	PROCEDURE	67	                                          DAY_ENABLED_mr,

COPY_ROUTES	PROCEDURE	68	                                          DAY_TIME_mr,

COPY_ROUTES	PROCEDURE	69	                                          LU,

COPY_ROUTES	PROCEDURE	70	                                          AG_ID,

COPY_ROUTES	PROCEDURE	71	                                          day_num)

COPY_ROUTES	PROCEDURE	72	            SELECT a.id,

COPY_ROUTES	PROCEDURE	73	                   b.KODTP,

COPY_ROUTES	PROCEDURE	74	                   b.DAY_ENABLED_mr,

COPY_ROUTES	PROCEDURE	75	                   b.DAY_TIME_mr,

COPY_ROUTES	PROCEDURE	76	                   b.LU,

COPY_ROUTES	PROCEDURE	77	                   b.AG_ID,

COPY_ROUTES	PROCEDURE	78	                   c_new.dm

COPY_ROUTES	PROCEDURE	79	              FROM routes_head h,

COPY_ROUTES	PROCEDURE	80	                   ROUTES_BODY1 b,

COPY_ROUTES	PROCEDURE	81	                   calendar c,

COPY_ROUTES	PROCEDURE	82	                   calendar c_new

COPY_ROUTES	PROCEDURE	83	             WHERE     h.data = TRUNC (c.data, 'mm')

COPY_ROUTES	PROCEDURE	84	                   AND h.id = b.head_id

COPY_ROUTES	PROCEDURE	85	                   AND b.day_num = c.dm

COPY_ROUTES	PROCEDURE	86	                   AND h.data = (SELECT data

COPY_ROUTES	PROCEDURE	87	                                   FROM routes_head

COPY_ROUTES	PROCEDURE	88	                                  WHERE id = a.parent)

COPY_ROUTES	PROCEDURE	89	                   AND b.day_num >

COPY_ROUTES	PROCEDURE	90	                          (SELECT MAX (dm) - 7

COPY_ROUTES	PROCEDURE	91	                             FROM calendar

COPY_ROUTES	PROCEDURE	92	                            WHERE TRUNC (data, 'mm') = (SELECT data

COPY_ROUTES	PROCEDURE	93	                                                          FROM routes_head

COPY_ROUTES	PROCEDURE	94	                                                         WHERE id = a.parent))

COPY_ROUTES	PROCEDURE	95	                   AND TRUNC (c_new.data, 'mm') = a.data

COPY_ROUTES	PROCEDURE	96	                   AND c.dw = c_new.dw

COPY_ROUTES	PROCEDURE	97	                   AND b.head_id = a.parent

COPY_ROUTES	PROCEDURE	98	                   AND b.vv = 0;

COPY_ROUTES	PROCEDURE	99	

COPY_ROUTES	PROCEDURE	100	         --COMMIT;

COPY_ROUTES	PROCEDURE	101	

COPY_ROUTES	PROCEDURE	102	         /*INSERT INTO merch_report (rb_id, dt)

COPY_ROUTES	PROCEDURE	103	            SELECT b.id, c.data

COPY_ROUTES	PROCEDURE	104	              FROM routes_head h, ROUTES_BODY1 b, calendar c

COPY_ROUTES	PROCEDURE	105	             WHERE     h.id = a.id

COPY_ROUTES	PROCEDURE	106	                   AND b.head_id = h.id

COPY_ROUTES	PROCEDURE	107	                   AND TRUNC (c.data, 'mm') = h.data

COPY_ROUTES	PROCEDURE	108	                   AND c.dw = b.day_num

COPY_ROUTES	PROCEDURE	109	                   AND b.vv = 0;

COPY_ROUTES	PROCEDURE	110	

COPY_ROUTES	PROCEDURE	111	         COMMIT;*/

COPY_ROUTES	PROCEDURE	112	      END LOOP;

COPY_ROUTES	PROCEDURE	113	    mr_zp_copy_pins (next_month);

COPY_ROUTES	PROCEDURE	114	

COPY_ROUTES	PROCEDURE	115	    INSERT INTO merch_report_cal (ag_id,

COPY_ROUTES	PROCEDURE	116	                                  rep_id,

COPY_ROUTES	PROCEDURE	117	                                  freq_id,

COPY_ROUTES	PROCEDURE	118	                                  dt)

COPY_ROUTES	PROCEDURE	119	       SELECT ag_id,

COPY_ROUTES	PROCEDURE	120	              rep_id,

COPY_ROUTES	PROCEDURE	121	              freq_id,

COPY_ROUTES	PROCEDURE	122	              next_month

COPY_ROUTES	PROCEDURE	123	         FROM merch_report_cal

COPY_ROUTES	PROCEDURE	124	        WHERE dt = this_month;

COPY_ROUTES	PROCEDURE	125	

COPY_ROUTES	PROCEDURE	126	    COMMIT;

COPY_ROUTES	PROCEDURE	127	    fill_reminders (next_month);

COPY_ROUTES	PROCEDURE	128	    COMMIT;

COPY_ROUTES	PROCEDURE	129	

COPY_ROUTES	PROCEDURE	130	    INSERT INTO ROUTES_COPY_OK (data)

COPY_ROUTES	PROCEDURE	131	         VALUES (next_month);

COPY_ROUTES	PROCEDURE	132	

COPY_ROUTES	PROCEDURE	133	    COMMIT;

COPY_ROUTES	PROCEDURE	134	   END IF;

COPY_ROUTES	PROCEDURE	135	END;
COPY_ROUTE	PROCEDURE	1	PROCEDURE        copy_route (p_parent    INTEGER,

COPY_ROUTE	PROCEDURE	2	                                               p_login     VARCHAR2)

COPY_ROUTE	PROCEDURE	3	IS

COPY_ROUTE	PROCEDURE	4	   v_head_id_new   INTEGER;

COPY_ROUTE	PROCEDURE	5	   v_data          DATE;

COPY_ROUTE	PROCEDURE	6	BEGIN

COPY_ROUTE	PROCEDURE	7	   SELECT data

COPY_ROUTE	PROCEDURE	8	     INTO v_data

COPY_ROUTE	PROCEDURE	9	     FROM routes_head

COPY_ROUTE	PROCEDURE	10	    WHERE id = p_parent;

COPY_ROUTE	PROCEDURE	11	

COPY_ROUTE	PROCEDURE	12	   v_head_id_new := seq_all.NEXTVAL;

COPY_ROUTE	PROCEDURE	13	

COPY_ROUTE	PROCEDURE	14	   INSERT INTO routes_head (id,

COPY_ROUTE	PROCEDURE	15	                            data,

COPY_ROUTE	PROCEDURE	16	                            num,

COPY_ROUTE	PROCEDURE	17	                            login)

COPY_ROUTE	PROCEDURE	18	      SELECT v_head_id_new,

COPY_ROUTE	PROCEDURE	19	             data,

COPY_ROUTE	PROCEDURE	20	             num,

COPY_ROUTE	PROCEDURE	21	             p_login

COPY_ROUTE	PROCEDURE	22	        FROM routes_head

COPY_ROUTE	PROCEDURE	23	       WHERE id = p_parent;

COPY_ROUTE	PROCEDURE	24	

COPY_ROUTE	PROCEDURE	25	

COPY_ROUTE	PROCEDURE	26	

COPY_ROUTE	PROCEDURE	27	   DELETE FROM routes_head_agents

COPY_ROUTE	PROCEDURE	28	         WHERE head_id = v_head_id_new;

COPY_ROUTE	PROCEDURE	29	

COPY_ROUTE	PROCEDURE	30	   INSERT INTO routes_head_agents (ag_id, head_id)

COPY_ROUTE	PROCEDURE	31	      SELECT ag_id, v_head_id_new

COPY_ROUTE	PROCEDURE	32	        FROM routes_head_agents

COPY_ROUTE	PROCEDURE	33	       WHERE head_id = p_parent AND vv = 0;

COPY_ROUTE	PROCEDURE	34	

COPY_ROUTE	PROCEDURE	35	   INSERT INTO routes_tp (kodtp, head_id)

COPY_ROUTE	PROCEDURE	36	      SELECT kodtp, v_head_id_new

COPY_ROUTE	PROCEDURE	37	        FROM routes_tp

COPY_ROUTE	PROCEDURE	38	       WHERE head_id = p_parent AND vv = 0;

COPY_ROUTE	PROCEDURE	39	

COPY_ROUTE	PROCEDURE	40	

COPY_ROUTE	PROCEDURE	41	   INSERT INTO PERSIK.ROUTES_BODY1 (HEAD_ID,

COPY_ROUTE	PROCEDURE	42	                                    KODTP,

COPY_ROUTE	PROCEDURE	43	                                    DAY_ENABLED_mr,

COPY_ROUTE	PROCEDURE	44	                                    DAY_TIME_mr,

COPY_ROUTE	PROCEDURE	45	                                    LU,

COPY_ROUTE	PROCEDURE	46	                                    AG_ID,

COPY_ROUTE	PROCEDURE	47	                                    day_num)

COPY_ROUTE	PROCEDURE	48	      SELECT v_head_id_new,

COPY_ROUTE	PROCEDURE	49	             b.KODTP,

COPY_ROUTE	PROCEDURE	50	             b.DAY_ENABLED_mr,

COPY_ROUTE	PROCEDURE	51	             b.DAY_TIME_mr,

COPY_ROUTE	PROCEDURE	52	             b.LU,

COPY_ROUTE	PROCEDURE	53	             b.AG_ID,

COPY_ROUTE	PROCEDURE	54	             b.day_num

COPY_ROUTE	PROCEDURE	55	        FROM routes_head h, ROUTES_BODY1 b, calendar c

COPY_ROUTE	PROCEDURE	56	       WHERE     h.id = p_parent

COPY_ROUTE	PROCEDURE	57	             AND h.id = b.head_id

COPY_ROUTE	PROCEDURE	58	             AND b.vv = 0

COPY_ROUTE	PROCEDURE	59	             AND h.data = TRUNC (c.data, 'mm')

COPY_ROUTE	PROCEDURE	60	             AND c.dm = b.day_num;

COPY_ROUTE	PROCEDURE	61	

COPY_ROUTE	PROCEDURE	62	

COPY_ROUTE	PROCEDURE	63	

COPY_ROUTE	PROCEDURE	64	   INSERT INTO merch_report (rb_id, dt)

COPY_ROUTE	PROCEDURE	65	      SELECT b.id, c.data

COPY_ROUTE	PROCEDURE	66	        FROM routes_head h, ROUTES_BODY1 b, calendar c

COPY_ROUTE	PROCEDURE	67	       WHERE     h.id = v_head_id_new

COPY_ROUTE	PROCEDURE	68	             AND b.head_id = h.id

COPY_ROUTE	PROCEDURE	69	             AND TRUNC (c.data, 'mm') = h.data

COPY_ROUTE	PROCEDURE	70	             AND c.dw = b.day_num

COPY_ROUTE	PROCEDURE	71	             AND b.vv = 0;

COPY_ROUTE	PROCEDURE	72	

COPY_ROUTE	PROCEDURE	73	   COMMIT;

COPY_ROUTE	PROCEDURE	74	END;
COPY_DPNR_BUDJET	PROCEDURE	1	PROCEDURE        copy_dpnr_budjet (p_market     INTEGER,

COPY_DPNR_BUDJET	PROCEDURE	2	                                                     p_from_dt    DATE,

COPY_DPNR_BUDJET	PROCEDURE	3	                                                     p_to_dt      DATE)

COPY_DPNR_BUDJET	PROCEDURE	4	IS

COPY_DPNR_BUDJET	PROCEDURE	5	   dt   DATE;

COPY_DPNR_BUDJET	PROCEDURE	6	   ok   INTEGER;

COPY_DPNR_BUDJET	PROCEDURE	7	   c    INTEGER;

COPY_DPNR_BUDJET	PROCEDURE	8	BEGIN

COPY_DPNR_BUDJET	PROCEDURE	9	   SELECT SUM (ok_chief)

COPY_DPNR_BUDJET	PROCEDURE	10	     INTO c

COPY_DPNR_BUDJET	PROCEDURE	11	     FROM dpnr_budjet_head o

COPY_DPNR_BUDJET	PROCEDURE	12	    WHERE o.market = p_market AND o.dt = p_to_dt;

COPY_DPNR_BUDJET	PROCEDURE	13	

COPY_DPNR_BUDJET	PROCEDURE	14	   IF c > 0

COPY_DPNR_BUDJET	PROCEDURE	15	   THEN

COPY_DPNR_BUDJET	PROCEDURE	16	      raise_application_error (-20000, 'not allowed');

COPY_DPNR_BUDJET	PROCEDURE	17	      RETURN;

COPY_DPNR_BUDJET	PROCEDURE	18	   END IF;

COPY_DPNR_BUDJET	PROCEDURE	19	

COPY_DPNR_BUDJET	PROCEDURE	20	

COPY_DPNR_BUDJET	PROCEDURE	21	

COPY_DPNR_BUDJET	PROCEDURE	22	   FOR a

COPY_DPNR_BUDJET	PROCEDURE	23	      IN (SELECT o.market,

COPY_DPNR_BUDJET	PROCEDURE	24	                 o.plan_weight,

COPY_DPNR_BUDJET	PROCEDURE	25	                 o.plan_sum,

COPY_DPNR_BUDJET	PROCEDURE	26	                 o.plan_sume,

COPY_DPNR_BUDJET	PROCEDURE	27	                 n.lu

COPY_DPNR_BUDJET	PROCEDURE	28	            FROM dpnr_budjet_head o, dpnr_budjet_head n

COPY_DPNR_BUDJET	PROCEDURE	29	           WHERE     o.market = p_market

COPY_DPNR_BUDJET	PROCEDURE	30	                 AND o.dt = p_from_dt

COPY_DPNR_BUDJET	PROCEDURE	31	                 AND o.market = n.market(+)

COPY_DPNR_BUDJET	PROCEDURE	32	                 AND n.dt(+) = p_to_dt)

COPY_DPNR_BUDJET	PROCEDURE	33	   LOOP

COPY_DPNR_BUDJET	PROCEDURE	34	      IF a.lu IS NULL

COPY_DPNR_BUDJET	PROCEDURE	35	      THEN

COPY_DPNR_BUDJET	PROCEDURE	36	         INSERT INTO dpnr_budjet_head (market,

COPY_DPNR_BUDJET	PROCEDURE	37	                                       dt,

COPY_DPNR_BUDJET	PROCEDURE	38	                                       plan_weight,

COPY_DPNR_BUDJET	PROCEDURE	39	                                       plan_sum,

COPY_DPNR_BUDJET	PROCEDURE	40	                                       plan_sume)

COPY_DPNR_BUDJET	PROCEDURE	41	              VALUES (p_market,

COPY_DPNR_BUDJET	PROCEDURE	42	                      p_to_dt,

COPY_DPNR_BUDJET	PROCEDURE	43	                      a.plan_weight,

COPY_DPNR_BUDJET	PROCEDURE	44	                      a.plan_sum,

COPY_DPNR_BUDJET	PROCEDURE	45	                      a.plan_sume);

COPY_DPNR_BUDJET	PROCEDURE	46	      ELSE

COPY_DPNR_BUDJET	PROCEDURE	47	         UPDATE dpnr_budjet_head

COPY_DPNR_BUDJET	PROCEDURE	48	            SET plan_weight = a.plan_weight,

COPY_DPNR_BUDJET	PROCEDURE	49	                plan_sum = a.plan_sum,

COPY_DPNR_BUDJET	PROCEDURE	50	                plan_sume = a.plan_sume

COPY_DPNR_BUDJET	PROCEDURE	51	          WHERE market = p_market AND dt = p_to_dt;

COPY_DPNR_BUDJET	PROCEDURE	52	      END IF;

COPY_DPNR_BUDJET	PROCEDURE	53	

COPY_DPNR_BUDJET	PROCEDURE	54	      COMMIT;

COPY_DPNR_BUDJET	PROCEDURE	55	   END LOOP;

COPY_DPNR_BUDJET	PROCEDURE	56	

COPY_DPNR_BUDJET	PROCEDURE	57	

COPY_DPNR_BUDJET	PROCEDURE	58	

COPY_DPNR_BUDJET	PROCEDURE	59	   FOR a

COPY_DPNR_BUDJET	PROCEDURE	60	      IN (SELECT o.market,

COPY_DPNR_BUDJET	PROCEDURE	61	                 o.st,

COPY_DPNR_BUDJET	PROCEDURE	62	                 o.cmp,

COPY_DPNR_BUDJET	PROCEDURE	63	                 o.plan,

COPY_DPNR_BUDJET	PROCEDURE	64	                 o.comm,

COPY_DPNR_BUDJET	PROCEDURE	65	                 n.lu

COPY_DPNR_BUDJET	PROCEDURE	66	            FROM dpnr_budjet_body o, dpnr_budjet_body n

COPY_DPNR_BUDJET	PROCEDURE	67	           WHERE     o.market = p_market

COPY_DPNR_BUDJET	PROCEDURE	68	                 AND o.dt = p_from_dt

COPY_DPNR_BUDJET	PROCEDURE	69	                 AND o.market = n.market(+)

COPY_DPNR_BUDJET	PROCEDURE	70	                 AND n.dt(+) = p_to_dt)

COPY_DPNR_BUDJET	PROCEDURE	71	   LOOP

COPY_DPNR_BUDJET	PROCEDURE	72	      IF a.lu IS NULL

COPY_DPNR_BUDJET	PROCEDURE	73	      THEN

COPY_DPNR_BUDJET	PROCEDURE	74	         INSERT INTO dpnr_budjet_body (market,

COPY_DPNR_BUDJET	PROCEDURE	75	                                       dt,

COPY_DPNR_BUDJET	PROCEDURE	76	                                       st,

COPY_DPNR_BUDJET	PROCEDURE	77	                                       cmp,

COPY_DPNR_BUDJET	PROCEDURE	78	                                       plan,

COPY_DPNR_BUDJET	PROCEDURE	79	                                       comm)

COPY_DPNR_BUDJET	PROCEDURE	80	              VALUES (p_market,

COPY_DPNR_BUDJET	PROCEDURE	81	                      p_to_dt,

COPY_DPNR_BUDJET	PROCEDURE	82	                      a.st,

COPY_DPNR_BUDJET	PROCEDURE	83	                      a.cmp,

COPY_DPNR_BUDJET	PROCEDURE	84	                      a.plan,

COPY_DPNR_BUDJET	PROCEDURE	85	                      a.comm);

COPY_DPNR_BUDJET	PROCEDURE	86	      ELSE

COPY_DPNR_BUDJET	PROCEDURE	87	         UPDATE dpnr_budjet_body

COPY_DPNR_BUDJET	PROCEDURE	88	            SET plan = a.plan, comm = a.comm

COPY_DPNR_BUDJET	PROCEDURE	89	          WHERE     market = p_market

COPY_DPNR_BUDJET	PROCEDURE	90	                AND dt = p_to_dt

COPY_DPNR_BUDJET	PROCEDURE	91	                AND st = a.st

COPY_DPNR_BUDJET	PROCEDURE	92	                AND cmp = a.cmp;

COPY_DPNR_BUDJET	PROCEDURE	93	      END IF;

COPY_DPNR_BUDJET	PROCEDURE	94	

COPY_DPNR_BUDJET	PROCEDURE	95	      COMMIT;

COPY_DPNR_BUDJET	PROCEDURE	96	   END LOOP;

COPY_DPNR_BUDJET	PROCEDURE	97	END;
COMPARE_STRINGS	FUNCTION	1	FUNCTION compare_strings (PString1 CHAR, Pstring2 CHAR)

COMPARE_STRINGS	FUNCTION	2	   RETURN CHAR

COMPARE_STRINGS	FUNCTION	3	IS

COMPARE_STRINGS	FUNCTION	4	   TYPE set_t IS TABLE OF CLOB;

COMPARE_STRINGS	FUNCTION	5	

COMPARE_STRINGS	FUNCTION	6	   listA   APEX_APPLICATION_GLOBAL.vc_arr2;

COMPARE_STRINGS	FUNCTION	7	   listB   APEX_APPLICATION_GLOBAL.vc_arr2;

COMPARE_STRINGS	FUNCTION	8	   excpt   set_t;

COMPARE_STRINGS	FUNCTION	9	   v_old   CLOB;

COMPARE_STRINGS	FUNCTION	10	   v_new   CLOB;

COMPARE_STRINGS	FUNCTION	11	   res     CLOB := '';

COMPARE_STRINGS	FUNCTION	12	

COMPARE_STRINGS	FUNCTION	13	   FUNCTION to_set_t (arr IN APEX_APPLICATION_GLOBAL.vc_arr2)

COMPARE_STRINGS	FUNCTION	14	      RETURN set_t

COMPARE_STRINGS	FUNCTION	15	   IS

COMPARE_STRINGS	FUNCTION	16	      rset   set_t := set_t ();

COMPARE_STRINGS	FUNCTION	17	   BEGIN

COMPARE_STRINGS	FUNCTION	18	      rset.EXTEND (arr.COUNT);

COMPARE_STRINGS	FUNCTION	19	

COMPARE_STRINGS	FUNCTION	20	      FOR i IN 1 .. arr.COUNT

COMPARE_STRINGS	FUNCTION	21	      LOOP

COMPARE_STRINGS	FUNCTION	22	         rset (i) := TRIM (arr (i));

COMPARE_STRINGS	FUNCTION	23	      END LOOP;

COMPARE_STRINGS	FUNCTION	24	

COMPARE_STRINGS	FUNCTION	25	      RETURN rset;

COMPARE_STRINGS	FUNCTION	26	   END;

COMPARE_STRINGS	FUNCTION	27	BEGIN

COMPARE_STRINGS	FUNCTION	28	   listA := APEX_UTIL.string_to_table (PString1, CHR (13) || CHR (10));

COMPARE_STRINGS	FUNCTION	29	   listB := APEX_UTIL.string_to_table (Pstring2, CHR (13) || CHR (10));

COMPARE_STRINGS	FUNCTION	30	/*

COMPARE_STRINGS	FUNCTION	31	   excpt := to_set_t (listA) MULTISET EXCEPT to_set_t (listB);

COMPARE_STRINGS	FUNCTION	32	

COMPARE_STRINGS	FUNCTION	33	   IF excpt.COUNT > 0

COMPARE_STRINGS	FUNCTION	34	   THEN

COMPARE_STRINGS	FUNCTION	35	      res :=

COMPARE_STRINGS	FUNCTION	36	            res

COMPARE_STRINGS	FUNCTION	37	         || '<p style="font-weight:bold;color:red;">Removed:</p>'

COMPARE_STRINGS	FUNCTION	38	         || CHR (13)

COMPARE_STRINGS	FUNCTION	39	         || CHR (10);

COMPARE_STRINGS	FUNCTION	40	   END IF;

COMPARE_STRINGS	FUNCTION	41	

COMPARE_STRINGS	FUNCTION	42	   FOR i IN 1 .. excpt.COUNT

COMPARE_STRINGS	FUNCTION	43	   LOOP

COMPARE_STRINGS	FUNCTION	44	      --DBMS_OUTPUT.put_line (excpt (i));

COMPARE_STRINGS	FUNCTION	45	      res := res || excpt (i) || CHR (13) || CHR (10);

COMPARE_STRINGS	FUNCTION	46	   END LOOP;

COMPARE_STRINGS	FUNCTION	47	*/

COMPARE_STRINGS	FUNCTION	48	   excpt := to_set_t (listB) MULTISET EXCEPT to_set_t (listA);

COMPARE_STRINGS	FUNCTION	49	

COMPARE_STRINGS	FUNCTION	50	  /* IF excpt.COUNT > 0

COMPARE_STRINGS	FUNCTION	51	   THEN

COMPARE_STRINGS	FUNCTION	52	      res :=

COMPARE_STRINGS	FUNCTION	53	            res

COMPARE_STRINGS	FUNCTION	54	         || '<p style="font-weight:bold;color:red;">Changes:</p>'

COMPARE_STRINGS	FUNCTION	55	         || CHR (13)

COMPARE_STRINGS	FUNCTION	56	         || CHR (10);

COMPARE_STRINGS	FUNCTION	57	   END IF;*/

COMPARE_STRINGS	FUNCTION	58	

COMPARE_STRINGS	FUNCTION	59	   FOR i IN 1 .. excpt.COUNT

COMPARE_STRINGS	FUNCTION	60	   LOOP

COMPARE_STRINGS	FUNCTION	61	      --DBMS_OUTPUT.put_line (excpt (i));

COMPARE_STRINGS	FUNCTION	62	      res := res || excpt (i) || CHR (13) || CHR (10);

COMPARE_STRINGS	FUNCTION	63	   END LOOP;

COMPARE_STRINGS	FUNCTION	64	

COMPARE_STRINGS	FUNCTION	65	   RETURN res;

COMPARE_STRINGS	FUNCTION	66	END;
CLOB_TO_BLOB	FUNCTION	1	FUNCTION CLOB_TO_BLOB (p_clob CLOB)

CLOB_TO_BLOB	FUNCTION	2	   RETURN BLOB

CLOB_TO_BLOB	FUNCTION	3	AS

CLOB_TO_BLOB	FUNCTION	4	   l_blob            BLOB;

CLOB_TO_BLOB	FUNCTION	5	   l_dest_offset     INTEGER := 1;

CLOB_TO_BLOB	FUNCTION	6	   l_source_offset   INTEGER := 1;

CLOB_TO_BLOB	FUNCTION	7	   l_lang_context    INTEGER := DBMS_LOB.DEFAULT_LANG_CTX;

CLOB_TO_BLOB	FUNCTION	8	   l_warning         INTEGER := DBMS_LOB.WARN_INCONVERTIBLE_CHAR;

CLOB_TO_BLOB	FUNCTION	9	BEGIN

CLOB_TO_BLOB	FUNCTION	10	   DBMS_LOB.CREATETEMPORARY (l_blob, TRUE);

CLOB_TO_BLOB	FUNCTION	11	   DBMS_LOB.CONVERTTOBLOB (dest_lob       => l_blob,

CLOB_TO_BLOB	FUNCTION	12	                           src_clob       => p_clob,

CLOB_TO_BLOB	FUNCTION	13	                           amount         => DBMS_LOB.LOBMAXSIZE,

CLOB_TO_BLOB	FUNCTION	14	                           dest_offset    => l_dest_offset,

CLOB_TO_BLOB	FUNCTION	15	                           src_offset     => l_source_offset,

CLOB_TO_BLOB	FUNCTION	16	                           blob_csid      => DBMS_LOB.DEFAULT_CSID,

CLOB_TO_BLOB	FUNCTION	17	                           lang_context   => l_lang_context,

CLOB_TO_BLOB	FUNCTION	18	                           warning        => l_warning);

CLOB_TO_BLOB	FUNCTION	19	   RETURN l_blob;

CLOB_TO_BLOB	FUNCTION	20	END;
BUD_ZAY_REP2FINPLAN	PROCEDURE	1	PROCEDURE        BUD_ZAY_REP2FINPLAN (p_zay_id IN INTEGER)

BUD_ZAY_REP2FINPLAN	PROCEDURE	2	AS

BUD_ZAY_REP2FINPLAN	PROCEDURE	3	   v_id_net               INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	4	   v_year                 INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	5	   v_month                INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	6	   v_statya               INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	7	   v_descript             VARCHAR2 (1024);

BUD_ZAY_REP2FINPLAN	PROCEDURE	8	   v_payment_type         INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	9	   v_price                NUMBER (10, 3);

BUD_ZAY_REP2FINPLAN	PROCEDURE	10	   v_cnt                  NUMBER (10, 3);

BUD_ZAY_REP2FINPLAN	PROCEDURE	11	   v_mkk_ter              INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	12	   v_dpt_id               INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	13	   PRAGMA AUTONOMOUS_TRANSACTION;

BUD_ZAY_REP2FINPLAN	PROCEDURE	14	   v_nets_plan_month_id   INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	15	   v_fil                  INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	16	   v_invoice_id           INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	17	   v_valid_no             INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	18	   v_distr_compensation   INTEGER;

BUD_ZAY_REP2FINPLAN	PROCEDURE	19	BEGIN

BUD_ZAY_REP2FINPLAN	PROCEDURE	20	   SELECT z.id_net, u.dpt_id, z.valid_no

BUD_ZAY_REP2FINPLAN	PROCEDURE	21	     INTO v_id_net, v_dpt_id, v_valid_no

BUD_ZAY_REP2FINPLAN	PROCEDURE	22	     FROM bud_ru_zay z, user_list u

BUD_ZAY_REP2FINPLAN	PROCEDURE	23	    WHERE z.id = p_zay_id AND u.tn = z.tn;

BUD_ZAY_REP2FINPLAN	PROCEDURE	24	

BUD_ZAY_REP2FINPLAN	PROCEDURE	25	   IF v_id_net IS NULL OR v_dpt_id <> 1 OR v_valid_no = 1

BUD_ZAY_REP2FINPLAN	PROCEDURE	26	   THEN

BUD_ZAY_REP2FINPLAN	PROCEDURE	27	      RETURN;

BUD_ZAY_REP2FINPLAN	PROCEDURE	28	   END IF;

BUD_ZAY_REP2FINPLAN	PROCEDURE	29	

BUD_ZAY_REP2FINPLAN	PROCEDURE	30	   SELECT z.id_net,

BUD_ZAY_REP2FINPLAN	PROCEDURE	31	          z.statya,

BUD_ZAY_REP2FINPLAN	PROCEDURE	32	          z.payment_type,

BUD_ZAY_REP2FINPLAN	PROCEDURE	33	          DECODE (NVL (u.is_mkk, 0), 1, u.tn, NULL) mkk_ter,

BUD_ZAY_REP2FINPLAN	PROCEDURE	34	          z.fil,

BUD_ZAY_REP2FINPLAN	PROCEDURE	35	          z.distr_compensation

BUD_ZAY_REP2FINPLAN	PROCEDURE	36	     INTO v_id_net,

BUD_ZAY_REP2FINPLAN	PROCEDURE	37	          v_statya,

BUD_ZAY_REP2FINPLAN	PROCEDURE	38	          v_payment_type,

BUD_ZAY_REP2FINPLAN	PROCEDURE	39	          v_mkk_ter,

BUD_ZAY_REP2FINPLAN	PROCEDURE	40	          v_fil,

BUD_ZAY_REP2FINPLAN	PROCEDURE	41	          v_distr_compensation

BUD_ZAY_REP2FINPLAN	PROCEDURE	42	     FROM bud_ru_zay z, user_list u

BUD_ZAY_REP2FINPLAN	PROCEDURE	43	    WHERE z.id = p_zay_id AND u.tn = z.tn;

BUD_ZAY_REP2FINPLAN	PROCEDURE	44	

BUD_ZAY_REP2FINPLAN	PROCEDURE	45	   SELECT y, my

BUD_ZAY_REP2FINPLAN	PROCEDURE	46	     INTO v_year, v_month

BUD_ZAY_REP2FINPLAN	PROCEDURE	47	     FROM (  SELECT c.y, c.my, COUNT (*) days

BUD_ZAY_REP2FINPLAN	PROCEDURE	48	               FROM bud_ru_zay z, calendar c

BUD_ZAY_REP2FINPLAN	PROCEDURE	49	              WHERE z.id = p_zay_id AND c.data BETWEEN z.dt_start AND z.dt_end

BUD_ZAY_REP2FINPLAN	PROCEDURE	50	           GROUP BY c.y, c.my

BUD_ZAY_REP2FINPLAN	PROCEDURE	51	           ORDER BY days DESC, c.my DESC, c.y DESC)

BUD_ZAY_REP2FINPLAN	PROCEDURE	52	    WHERE ROWNUM = 1;

BUD_ZAY_REP2FINPLAN	PROCEDURE	53	

BUD_ZAY_REP2FINPLAN	PROCEDURE	54	   BEGIN

BUD_ZAY_REP2FINPLAN	PROCEDURE	55	      SELECT zf.val_textarea

BUD_ZAY_REP2FINPLAN	PROCEDURE	56	        INTO v_descript

BUD_ZAY_REP2FINPLAN	PROCEDURE	57	        FROM bud_ru_zay_ff zf, bud_ru_ff f

BUD_ZAY_REP2FINPLAN	PROCEDURE	58	       WHERE zf.z_id = p_zay_id AND zf.ff_id = f.id AND f.admin_id = 2;

BUD_ZAY_REP2FINPLAN	PROCEDURE	59	   EXCEPTION

BUD_ZAY_REP2FINPLAN	PROCEDURE	60	      WHEN OTHERS

BUD_ZAY_REP2FINPLAN	PROCEDURE	61	      THEN

BUD_ZAY_REP2FINPLAN	PROCEDURE	62	         NULL;

BUD_ZAY_REP2FINPLAN	PROCEDURE	63	   END;

BUD_ZAY_REP2FINPLAN	PROCEDURE	64	

BUD_ZAY_REP2FINPLAN	PROCEDURE	65	   BEGIN

BUD_ZAY_REP2FINPLAN	PROCEDURE	66	      SELECT CASE

BUD_ZAY_REP2FINPLAN	PROCEDURE	67	                WHEN f.TYPE = 'number' THEN zf.rep_val_number

BUD_ZAY_REP2FINPLAN	PROCEDURE	68	                WHEN f.TYPE = 'number_int' THEN zf.rep_val_number_int

BUD_ZAY_REP2FINPLAN	PROCEDURE	69	             END

BUD_ZAY_REP2FINPLAN	PROCEDURE	70	        INTO v_price

BUD_ZAY_REP2FINPLAN	PROCEDURE	71	        FROM bud_ru_zay_ff zf, bud_ru_ff f

BUD_ZAY_REP2FINPLAN	PROCEDURE	72	       WHERE zf.z_id = p_zay_id AND zf.ff_id = f.id AND f.var1 = 82;

BUD_ZAY_REP2FINPLAN	PROCEDURE	73	

BUD_ZAY_REP2FINPLAN	PROCEDURE	74	      SELECT CASE

BUD_ZAY_REP2FINPLAN	PROCEDURE	75	                WHEN f.TYPE = 'number' THEN zf.rep_val_number

BUD_ZAY_REP2FINPLAN	PROCEDURE	76	                WHEN f.TYPE = 'number_int' THEN zf.rep_val_number_int

BUD_ZAY_REP2FINPLAN	PROCEDURE	77	             END

BUD_ZAY_REP2FINPLAN	PROCEDURE	78	        INTO v_cnt

BUD_ZAY_REP2FINPLAN	PROCEDURE	79	        FROM bud_ru_zay_ff zf, bud_ru_ff f

BUD_ZAY_REP2FINPLAN	PROCEDURE	80	       WHERE zf.z_id = p_zay_id AND zf.ff_id = f.id AND f.var1 = 81;

BUD_ZAY_REP2FINPLAN	PROCEDURE	81	   EXCEPTION

BUD_ZAY_REP2FINPLAN	PROCEDURE	82	      WHEN OTHERS

BUD_ZAY_REP2FINPLAN	PROCEDURE	83	      THEN

BUD_ZAY_REP2FINPLAN	PROCEDURE	84	         NULL;

BUD_ZAY_REP2FINPLAN	PROCEDURE	85	   END;

BUD_ZAY_REP2FINPLAN	PROCEDURE	86	

BUD_ZAY_REP2FINPLAN	PROCEDURE	87	   DELETE FROM nets_plan_month

BUD_ZAY_REP2FINPLAN	PROCEDURE	88	         WHERE bud_z_id = p_zay_id AND plan_type = 4;

BUD_ZAY_REP2FINPLAN	PROCEDURE	89	

BUD_ZAY_REP2FINPLAN	PROCEDURE	90	   INSERT INTO nets_plan_month (id_net,

BUD_ZAY_REP2FINPLAN	PROCEDURE	91	                                year,

BUD_ZAY_REP2FINPLAN	PROCEDURE	92	                                month,

BUD_ZAY_REP2FINPLAN	PROCEDURE	93	                                statya,

BUD_ZAY_REP2FINPLAN	PROCEDURE	94	                                descript,

BUD_ZAY_REP2FINPLAN	PROCEDURE	95	                                payment_type,

BUD_ZAY_REP2FINPLAN	PROCEDURE	96	                                payment_format,

BUD_ZAY_REP2FINPLAN	PROCEDURE	97	                                total,

BUD_ZAY_REP2FINPLAN	PROCEDURE	98	                                price,

BUD_ZAY_REP2FINPLAN	PROCEDURE	99	                                cnt,

BUD_ZAY_REP2FINPLAN	PROCEDURE	100	                                plan_type,

BUD_ZAY_REP2FINPLAN	PROCEDURE	101	                                mkk_ter,

BUD_ZAY_REP2FINPLAN	PROCEDURE	102	                                bud_z_id,

BUD_ZAY_REP2FINPLAN	PROCEDURE	103	                                payer,

BUD_ZAY_REP2FINPLAN	PROCEDURE	104	                                distr_compensation)

BUD_ZAY_REP2FINPLAN	PROCEDURE	105	        VALUES (v_id_net,

BUD_ZAY_REP2FINPLAN	PROCEDURE	106	                v_year,

BUD_ZAY_REP2FINPLAN	PROCEDURE	107	                v_month,

BUD_ZAY_REP2FINPLAN	PROCEDURE	108	                v_statya,

BUD_ZAY_REP2FINPLAN	PROCEDURE	109	                v_descript,

BUD_ZAY_REP2FINPLAN	PROCEDURE	110	                v_payment_type,

BUD_ZAY_REP2FINPLAN	PROCEDURE	111	                2,

BUD_ZAY_REP2FINPLAN	PROCEDURE	112	                v_price * v_cnt,

BUD_ZAY_REP2FINPLAN	PROCEDURE	113	                v_price,

BUD_ZAY_REP2FINPLAN	PROCEDURE	114	                v_cnt,

BUD_ZAY_REP2FINPLAN	PROCEDURE	115	                4,

BUD_ZAY_REP2FINPLAN	PROCEDURE	116	                v_mkk_ter,

BUD_ZAY_REP2FINPLAN	PROCEDURE	117	                p_zay_id,

BUD_ZAY_REP2FINPLAN	PROCEDURE	118	                v_fil,

BUD_ZAY_REP2FINPLAN	PROCEDURE	119	                v_distr_compensation);

BUD_ZAY_REP2FINPLAN	PROCEDURE	120	

BUD_ZAY_REP2FINPLAN	PROCEDURE	121	   COMMIT;

BUD_ZAY_REP2FINPLAN	PROCEDURE	122	

BUD_ZAY_REP2FINPLAN	PROCEDURE	123	   DELETE FROM invoice

BUD_ZAY_REP2FINPLAN	PROCEDURE	124	         WHERE bud_z_id = p_zay_id;

BUD_ZAY_REP2FINPLAN	PROCEDURE	125	

BUD_ZAY_REP2FINPLAN	PROCEDURE	126	   COMMIT;

BUD_ZAY_REP2FINPLAN	PROCEDURE	127	

BUD_ZAY_REP2FINPLAN	PROCEDURE	128	   /* для форм оплаты "Форма 2", "Скидка", "Оплата товаром" */

BUD_ZAY_REP2FINPLAN	PROCEDURE	129	   /* прописывается строка в "Реестре Промо" */

BUD_ZAY_REP2FINPLAN	PROCEDURE	130	

BUD_ZAY_REP2FINPLAN	PROCEDURE	131	   IF v_payment_type IN (1, 3, 4)

BUD_ZAY_REP2FINPLAN	PROCEDURE	132	   THEN

BUD_ZAY_REP2FINPLAN	PROCEDURE	133	      SELECT id

BUD_ZAY_REP2FINPLAN	PROCEDURE	134	        INTO v_nets_plan_month_id

BUD_ZAY_REP2FINPLAN	PROCEDURE	135	        FROM nets_plan_month

BUD_ZAY_REP2FINPLAN	PROCEDURE	136	       WHERE bud_z_id = p_zay_id AND plan_type = 4;

BUD_ZAY_REP2FINPLAN	PROCEDURE	137	

BUD_ZAY_REP2FINPLAN	PROCEDURE	138	      INSERT INTO invoice (y,

BUD_ZAY_REP2FINPLAN	PROCEDURE	139	                           m,

BUD_ZAY_REP2FINPLAN	PROCEDURE	140	                           data,

BUD_ZAY_REP2FINPLAN	PROCEDURE	141	                           num,

BUD_ZAY_REP2FINPLAN	PROCEDURE	142	                           id_net,

BUD_ZAY_REP2FINPLAN	PROCEDURE	143	                           summa,

BUD_ZAY_REP2FINPLAN	PROCEDURE	144	                           payer,

BUD_ZAY_REP2FINPLAN	PROCEDURE	145	                           bud_z_id,

BUD_ZAY_REP2FINPLAN	PROCEDURE	146	                           promo)

BUD_ZAY_REP2FINPLAN	PROCEDURE	147	           VALUES (v_year,

BUD_ZAY_REP2FINPLAN	PROCEDURE	148	                   v_month,

BUD_ZAY_REP2FINPLAN	PROCEDURE	149	                   TRUNC (SYSDATE),

BUD_ZAY_REP2FINPLAN	PROCEDURE	150	                   p_zay_id,

BUD_ZAY_REP2FINPLAN	PROCEDURE	151	                   v_id_net,

BUD_ZAY_REP2FINPLAN	PROCEDURE	152	                   v_price * v_cnt,

BUD_ZAY_REP2FINPLAN	PROCEDURE	153	                   v_fil,

BUD_ZAY_REP2FINPLAN	PROCEDURE	154	                   p_zay_id,

BUD_ZAY_REP2FINPLAN	PROCEDURE	155	                   1);

BUD_ZAY_REP2FINPLAN	PROCEDURE	156	

BUD_ZAY_REP2FINPLAN	PROCEDURE	157	      COMMIT;

BUD_ZAY_REP2FINPLAN	PROCEDURE	158	

BUD_ZAY_REP2FINPLAN	PROCEDURE	159	      SELECT id

BUD_ZAY_REP2FINPLAN	PROCEDURE	160	        INTO v_invoice_id

BUD_ZAY_REP2FINPLAN	PROCEDURE	161	        FROM invoice

BUD_ZAY_REP2FINPLAN	PROCEDURE	162	       WHERE bud_z_id = p_zay_id;

BUD_ZAY_REP2FINPLAN	PROCEDURE	163	

BUD_ZAY_REP2FINPLAN	PROCEDURE	164	      INSERT INTO invoice_detail (statya, summa, invoice)

BUD_ZAY_REP2FINPLAN	PROCEDURE	165	           VALUES (v_nets_plan_month_id, v_price * v_cnt, v_invoice_id);

BUD_ZAY_REP2FINPLAN	PROCEDURE	166	

BUD_ZAY_REP2FINPLAN	PROCEDURE	167	      COMMIT;

BUD_ZAY_REP2FINPLAN	PROCEDURE	168	   END IF;

BUD_ZAY_REP2FINPLAN	PROCEDURE	169	END;
BUD_ZAY2FINPLAN	PROCEDURE	1	PROCEDURE        BUD_ZAY2FINPLAN (p_zay_id IN INTEGER)

BUD_ZAY2FINPLAN	PROCEDURE	2	AS

BUD_ZAY2FINPLAN	PROCEDURE	3	   v_id_net               INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	4	   v_year                 INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	5	   v_month                INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	6	   v_statya               INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	7	   v_descript             VARCHAR2 (1024);

BUD_ZAY2FINPLAN	PROCEDURE	8	   v_payment_type         INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	9	   v_price                NUMBER (10, 3);

BUD_ZAY2FINPLAN	PROCEDURE	10	   v_cnt                  NUMBER (10, 3);

BUD_ZAY2FINPLAN	PROCEDURE	11	   v_mkk_ter              INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	12	   v_dpt_id               INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	13	   PRAGMA AUTONOMOUS_TRANSACTION;

BUD_ZAY2FINPLAN	PROCEDURE	14	   v_valid_no             INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	15	   v_fil                  INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	16	   v_distr_compensation   INTEGER;

BUD_ZAY2FINPLAN	PROCEDURE	17	BEGIN

BUD_ZAY2FINPLAN	PROCEDURE	18	   SELECT z.id_net, u.dpt_id, z.valid_no

BUD_ZAY2FINPLAN	PROCEDURE	19	     INTO v_id_net, v_dpt_id, v_valid_no

BUD_ZAY2FINPLAN	PROCEDURE	20	     FROM bud_ru_zay z, user_list u

BUD_ZAY2FINPLAN	PROCEDURE	21	    WHERE z.id = p_zay_id AND u.tn = z.tn;

BUD_ZAY2FINPLAN	PROCEDURE	22	

BUD_ZAY2FINPLAN	PROCEDURE	23	   IF v_id_net IS NULL OR v_dpt_id <> 1 OR v_valid_no = 1

BUD_ZAY2FINPLAN	PROCEDURE	24	   THEN

BUD_ZAY2FINPLAN	PROCEDURE	25	      RETURN;

BUD_ZAY2FINPLAN	PROCEDURE	26	   END IF;

BUD_ZAY2FINPLAN	PROCEDURE	27	

BUD_ZAY2FINPLAN	PROCEDURE	28	   UPDATE bud_ru_zay z

BUD_ZAY2FINPLAN	PROCEDURE	29	      SET report_data = dt_end + 30, report_short = 1

BUD_ZAY2FINPLAN	PROCEDURE	30	    WHERE z.id = p_zay_id;

BUD_ZAY2FINPLAN	PROCEDURE	31	

BUD_ZAY2FINPLAN	PROCEDURE	32	   COMMIT;

BUD_ZAY2FINPLAN	PROCEDURE	33	

BUD_ZAY2FINPLAN	PROCEDURE	34	   SELECT z.id_net,

BUD_ZAY2FINPLAN	PROCEDURE	35	          z.statya,

BUD_ZAY2FINPLAN	PROCEDURE	36	          z.payment_type,

BUD_ZAY2FINPLAN	PROCEDURE	37	          DECODE (NVL (u.is_mkk, 0), 1, u.tn, NULL) mkk_ter,

BUD_ZAY2FINPLAN	PROCEDURE	38	          z.fil,

BUD_ZAY2FINPLAN	PROCEDURE	39	          z.distr_compensation

BUD_ZAY2FINPLAN	PROCEDURE	40	     INTO v_id_net,

BUD_ZAY2FINPLAN	PROCEDURE	41	          v_statya,

BUD_ZAY2FINPLAN	PROCEDURE	42	          v_payment_type,

BUD_ZAY2FINPLAN	PROCEDURE	43	          v_mkk_ter,

BUD_ZAY2FINPLAN	PROCEDURE	44	          v_fil,

BUD_ZAY2FINPLAN	PROCEDURE	45	          v_distr_compensation

BUD_ZAY2FINPLAN	PROCEDURE	46	     FROM bud_ru_zay z, user_list u

BUD_ZAY2FINPLAN	PROCEDURE	47	    WHERE z.id = p_zay_id AND u.tn = z.tn;

BUD_ZAY2FINPLAN	PROCEDURE	48	

BUD_ZAY2FINPLAN	PROCEDURE	49	   SELECT y, my

BUD_ZAY2FINPLAN	PROCEDURE	50	     INTO v_year, v_month

BUD_ZAY2FINPLAN	PROCEDURE	51	     FROM (  SELECT c.y, c.my, COUNT (*) days

BUD_ZAY2FINPLAN	PROCEDURE	52	               FROM bud_ru_zay z, calendar c

BUD_ZAY2FINPLAN	PROCEDURE	53	              WHERE z.id = p_zay_id AND c.data BETWEEN z.dt_start AND z.dt_end

BUD_ZAY2FINPLAN	PROCEDURE	54	           GROUP BY c.y, c.my

BUD_ZAY2FINPLAN	PROCEDURE	55	           ORDER BY days DESC, c.my DESC, c.y DESC)

BUD_ZAY2FINPLAN	PROCEDURE	56	    WHERE ROWNUM = 1;

BUD_ZAY2FINPLAN	PROCEDURE	57	

BUD_ZAY2FINPLAN	PROCEDURE	58	   BEGIN

BUD_ZAY2FINPLAN	PROCEDURE	59	      SELECT zf.val_textarea

BUD_ZAY2FINPLAN	PROCEDURE	60	        INTO v_descript

BUD_ZAY2FINPLAN	PROCEDURE	61	        FROM bud_ru_zay_ff zf, bud_ru_ff f

BUD_ZAY2FINPLAN	PROCEDURE	62	       WHERE zf.z_id = p_zay_id AND zf.ff_id = f.id AND f.admin_id = 2;

BUD_ZAY2FINPLAN	PROCEDURE	63	   EXCEPTION

BUD_ZAY2FINPLAN	PROCEDURE	64	      WHEN OTHERS

BUD_ZAY2FINPLAN	PROCEDURE	65	      THEN

BUD_ZAY2FINPLAN	PROCEDURE	66	         NULL;

BUD_ZAY2FINPLAN	PROCEDURE	67	   END;

BUD_ZAY2FINPLAN	PROCEDURE	68	

BUD_ZAY2FINPLAN	PROCEDURE	69	   BEGIN

BUD_ZAY2FINPLAN	PROCEDURE	70	      SELECT CASE

BUD_ZAY2FINPLAN	PROCEDURE	71	                WHEN f.TYPE = 'number' THEN zf.val_number

BUD_ZAY2FINPLAN	PROCEDURE	72	                WHEN f.TYPE = 'number_int' THEN zf.val_number_int

BUD_ZAY2FINPLAN	PROCEDURE	73	             END

BUD_ZAY2FINPLAN	PROCEDURE	74	        INTO v_price

BUD_ZAY2FINPLAN	PROCEDURE	75	        FROM bud_ru_zay_ff zf, bud_ru_ff f

BUD_ZAY2FINPLAN	PROCEDURE	76	       WHERE zf.z_id = p_zay_id AND zf.ff_id = f.id AND f.admin_id = 72;

BUD_ZAY2FINPLAN	PROCEDURE	77	

BUD_ZAY2FINPLAN	PROCEDURE	78	      SELECT CASE

BUD_ZAY2FINPLAN	PROCEDURE	79	                WHEN f.TYPE = 'number' THEN zf.val_number

BUD_ZAY2FINPLAN	PROCEDURE	80	                WHEN f.TYPE = 'number_int' THEN zf.val_number_int

BUD_ZAY2FINPLAN	PROCEDURE	81	             END

BUD_ZAY2FINPLAN	PROCEDURE	82	        INTO v_cnt

BUD_ZAY2FINPLAN	PROCEDURE	83	        FROM bud_ru_zay_ff zf, bud_ru_ff f

BUD_ZAY2FINPLAN	PROCEDURE	84	       WHERE zf.z_id = p_zay_id AND zf.ff_id = f.id AND f.admin_id = 71;

BUD_ZAY2FINPLAN	PROCEDURE	85	   EXCEPTION

BUD_ZAY2FINPLAN	PROCEDURE	86	      WHEN OTHERS

BUD_ZAY2FINPLAN	PROCEDURE	87	      THEN

BUD_ZAY2FINPLAN	PROCEDURE	88	         NULL;

BUD_ZAY2FINPLAN	PROCEDURE	89	   END;

BUD_ZAY2FINPLAN	PROCEDURE	90	

BUD_ZAY2FINPLAN	PROCEDURE	91	   DELETE FROM nets_plan_month

BUD_ZAY2FINPLAN	PROCEDURE	92	         WHERE bud_z_id = p_zay_id AND plan_type = 3;

BUD_ZAY2FINPLAN	PROCEDURE	93	

BUD_ZAY2FINPLAN	PROCEDURE	94	   INSERT INTO nets_plan_month (id_net,

BUD_ZAY2FINPLAN	PROCEDURE	95	                                year,

BUD_ZAY2FINPLAN	PROCEDURE	96	                                month,

BUD_ZAY2FINPLAN	PROCEDURE	97	                                statya,

BUD_ZAY2FINPLAN	PROCEDURE	98	                                descript,

BUD_ZAY2FINPLAN	PROCEDURE	99	                                payment_type,

BUD_ZAY2FINPLAN	PROCEDURE	100	                                payment_format,

BUD_ZAY2FINPLAN	PROCEDURE	101	                                total,

BUD_ZAY2FINPLAN	PROCEDURE	102	                                price,

BUD_ZAY2FINPLAN	PROCEDURE	103	                                cnt,

BUD_ZAY2FINPLAN	PROCEDURE	104	                                plan_type,

BUD_ZAY2FINPLAN	PROCEDURE	105	                                mkk_ter,

BUD_ZAY2FINPLAN	PROCEDURE	106	                                bud_z_id,

BUD_ZAY2FINPLAN	PROCEDURE	107	                                payer,

BUD_ZAY2FINPLAN	PROCEDURE	108	                                distr_compensation)

BUD_ZAY2FINPLAN	PROCEDURE	109	        VALUES (v_id_net,

BUD_ZAY2FINPLAN	PROCEDURE	110	                v_year,

BUD_ZAY2FINPLAN	PROCEDURE	111	                v_month,

BUD_ZAY2FINPLAN	PROCEDURE	112	                v_statya,

BUD_ZAY2FINPLAN	PROCEDURE	113	                v_descript,

BUD_ZAY2FINPLAN	PROCEDURE	114	                v_payment_type,

BUD_ZAY2FINPLAN	PROCEDURE	115	                2,

BUD_ZAY2FINPLAN	PROCEDURE	116	                v_price * v_cnt,

BUD_ZAY2FINPLAN	PROCEDURE	117	                v_price,

BUD_ZAY2FINPLAN	PROCEDURE	118	                v_cnt,

BUD_ZAY2FINPLAN	PROCEDURE	119	                3,

BUD_ZAY2FINPLAN	PROCEDURE	120	                v_mkk_ter,

BUD_ZAY2FINPLAN	PROCEDURE	121	                p_zay_id,

BUD_ZAY2FINPLAN	PROCEDURE	122	                v_fil,

BUD_ZAY2FINPLAN	PROCEDURE	123	                v_distr_compensation);

BUD_ZAY2FINPLAN	PROCEDURE	124	

BUD_ZAY2FINPLAN	PROCEDURE	125	   COMMIT;

BUD_ZAY2FINPLAN	PROCEDURE	126	END;
BUD_TN_FIL_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."BUD_TN_FIL_LAST_UPDATE" 

BUD_TN_FIL_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

BUD_TN_FIL_LAST_UPDATE	TRIGGER	3	   ON PERSIK.bud_TN_fil

BUD_TN_FIL_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_TN_FIL_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

BUD_TN_FIL_LAST_UPDATE	TRIGGER	6	DECLARE

BUD_TN_FIL_LAST_UPDATE	TRIGGER	7	BEGIN

BUD_TN_FIL_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

BUD_TN_FIL_LAST_UPDATE	TRIGGER	9	END;

BUD_TN_FIL_LAST_UPDATE	TRIGGER	10	

BUD_TN_FIL_LAST_UPDATE	TRIGGER	11	

BUD_TN_FIL_LAST_UPDATE	TRIGGER	12	

BUD_SVOD_ZP_UPD1	TRIGGER	1	TRIGGER PERSIK.BUD_SVOD_ZP_upd1

BUD_SVOD_ZP_UPD1	TRIGGER	2	   BEFORE INSERT OR UPDATE OF gbo

BUD_SVOD_ZP_UPD1	TRIGGER	3	   ON PERSIK.BUD_SVOD_ZP

BUD_SVOD_ZP_UPD1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_SVOD_ZP_UPD1	TRIGGER	5	   FOR EACH ROW

BUD_SVOD_ZP_UPD1	TRIGGER	6	BEGIN

BUD_SVOD_ZP_UPD1	TRIGGER	7	   IF :new.gbo = 1

BUD_SVOD_ZP_UPD1	TRIGGER	8	   THEN

BUD_SVOD_ZP_UPD1	TRIGGER	9	      NULL;

BUD_SVOD_ZP_UPD1	TRIGGER	10	   ELSE

BUD_SVOD_ZP_UPD1	TRIGGER	11	      :new.gbo_warmup := NULL;

BUD_SVOD_ZP_UPD1	TRIGGER	12	   END IF;

BUD_SVOD_ZP_UPD1	TRIGGER	13	END;
BUD_SVOD_ZP_NEW	TRIGGER	1	TRIGGER PERSIK.BUD_SVOD_ZP_NEW

BUD_SVOD_ZP_NEW	TRIGGER	2	   BEFORE INSERT

BUD_SVOD_ZP_NEW	TRIGGER	3	   ON BUD_SVOD_ZP

BUD_SVOD_ZP_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_SVOD_ZP_NEW	TRIGGER	5	   FOR EACH ROW

BUD_SVOD_ZP_NEW	TRIGGER	6	BEGIN

BUD_SVOD_ZP_NEW	TRIGGER	7	   IF :NEW.id IS NULL

BUD_SVOD_ZP_NEW	TRIGGER	8	   THEN

BUD_SVOD_ZP_NEW	TRIGGER	9	      :NEW.id := seq_all.NEXTVAL;

BUD_SVOD_ZP_NEW	TRIGGER	10	   END IF;

BUD_SVOD_ZP_NEW	TRIGGER	11	END;
BUD_SVOD_ZP_LU	TRIGGER	1	TRIGGER PERSIK.BUD_SVOD_ZP_LU

BUD_SVOD_ZP_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

BUD_SVOD_ZP_LU	TRIGGER	3	   ON PERSIK.BUD_SVOD_ZP

BUD_SVOD_ZP_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_SVOD_ZP_LU	TRIGGER	5	   FOR EACH ROW

BUD_SVOD_ZP_LU	TRIGGER	6	DECLARE

BUD_SVOD_ZP_LU	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

BUD_SVOD_ZP_LU	TRIGGER	8	   v_fil   INTEGER;

BUD_SVOD_ZP_LU	TRIGGER	9	BEGIN

BUD_SVOD_ZP_LU	TRIGGER	10	   :NEW.lu := SYSDATE;

BUD_SVOD_ZP_LU	TRIGGER	11	

BUD_SVOD_ZP_LU	TRIGGER	12	   IF :new.fio IS NOT NULL

BUD_SVOD_ZP_LU	TRIGGER	13	   THEN

BUD_SVOD_ZP_LU	TRIGGER	14	      :new.h_eta := md5hash (:new.fio);

BUD_SVOD_ZP_LU	TRIGGER	15	   END IF;

BUD_SVOD_ZP_LU	TRIGGER	16	

BUD_SVOD_ZP_LU	TRIGGER	17	   IF :new.unscheduled = 0 AND :new.h_eta IS NOT NULL

BUD_SVOD_ZP_LU	TRIGGER	18	   THEN

BUD_SVOD_ZP_LU	TRIGGER	19	      SELECT MAX (eta_tab_number)

BUD_SVOD_ZP_LU	TRIGGER	20	        INTO :new.eta_tab_number

BUD_SVOD_ZP_LU	TRIGGER	21	        FROM routes

BUD_SVOD_ZP_LU	TRIGGER	22	       WHERE h_eta = :new.h_eta;

BUD_SVOD_ZP_LU	TRIGGER	23	   END IF;

BUD_SVOD_ZP_LU	TRIGGER	24	

BUD_SVOD_ZP_LU	TRIGGER	25	   IF :new.unscheduled = 1 AND :new.eta_tab_number IS NULL

BUD_SVOD_ZP_LU	TRIGGER	26	   THEN

BUD_SVOD_ZP_LU	TRIGGER	27	      :new.eta_tab_number := :new.id;

BUD_SVOD_ZP_LU	TRIGGER	28	   END IF;

BUD_SVOD_ZP_LU	TRIGGER	29	

BUD_SVOD_ZP_LU	TRIGGER	30	   IF :new.unscheduled = 1 AND :new.fio IS NOT NULL AND :new.fil IS NOT NULL

BUD_SVOD_ZP_LU	TRIGGER	31	   THEN

BUD_SVOD_ZP_LU	TRIGGER	32	      SELECT MAX (fil)

BUD_SVOD_ZP_LU	TRIGGER	33	        INTO v_fil

BUD_SVOD_ZP_LU	TRIGGER	34	        FROM bud_svod_zp

BUD_SVOD_ZP_LU	TRIGGER	35	       WHERE     dt = :new.dt

BUD_SVOD_ZP_LU	TRIGGER	36	             AND h_eta = :new.h_eta

BUD_SVOD_ZP_LU	TRIGGER	37	             AND dpt_id = :new.dpt_id

BUD_SVOD_ZP_LU	TRIGGER	38	             AND fil IS NOT NULL

BUD_SVOD_ZP_LU	TRIGGER	39	             AND id <> :new.id;

BUD_SVOD_ZP_LU	TRIGGER	40	

BUD_SVOD_ZP_LU	TRIGGER	41	      IF v_fil <> :new.fil

BUD_SVOD_ZP_LU	TRIGGER	42	      THEN

BUD_SVOD_ZP_LU	TRIGGER	43	         :new.fio := :new.fio || ' (' || :new.id || ')';

BUD_SVOD_ZP_LU	TRIGGER	44	         :new.h_eta := md5hash (:new.fio);

BUD_SVOD_ZP_LU	TRIGGER	45	      END IF;

BUD_SVOD_ZP_LU	TRIGGER	46	   END IF;

BUD_SVOD_ZP_LU	TRIGGER	47	

BUD_SVOD_ZP_LU	TRIGGER	48	   IF :new.unscheduled = 1 AND :new.fio IS NULL

BUD_SVOD_ZP_LU	TRIGGER	49	   THEN

BUD_SVOD_ZP_LU	TRIGGER	50	      :new.fio := :new.id;

BUD_SVOD_ZP_LU	TRIGGER	51	      :new.h_eta := md5hash (:new.fio);

BUD_SVOD_ZP_LU	TRIGGER	52	   END IF;

BUD_SVOD_ZP_LU	TRIGGER	53	END;
BUD_SVOD_TA_LU	TRIGGER	1	TRIGGER BUD_SVOD_TA_LU

BUD_SVOD_TA_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

BUD_SVOD_TA_LU	TRIGGER	3	   ON BUD_SVOD_TAF

BUD_SVOD_TA_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_SVOD_TA_LU	TRIGGER	5	   FOR EACH ROW

BUD_SVOD_TA_LU	TRIGGER	6	DECLARE

BUD_SVOD_TA_LU	TRIGGER	7	   PRAGMA AUTONOMOUS_TRANSACTION;

BUD_SVOD_TA_LU	TRIGGER	8	BEGIN

BUD_SVOD_TA_LU	TRIGGER	9	   :NEW.lu := SYSDATE;

BUD_SVOD_TA_LU	TRIGGER	10	END;
BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."BUD_RU_FF_ST_LAST_UPDATE" 

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	3	   ON BUD_ru_ff_st

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	6	DECLARE

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	7	BEGIN

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	9	END;

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	10	

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	11	

BUD_RU_FF_ST_LAST_UPDATE	TRIGGER	12	

BUD_INCOME_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.BUD_INCOME_LAST_UPDATE

BUD_INCOME_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

BUD_INCOME_LAST_UPDATE	TRIGGER	3	   ON PERSIK.BUD_INCOME

BUD_INCOME_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_INCOME_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

BUD_INCOME_LAST_UPDATE	TRIGGER	6	BEGIN

BUD_INCOME_LAST_UPDATE	TRIGGER	7	   :NEW.lu := SYSDATE;

BUD_INCOME_LAST_UPDATE	TRIGGER	8	END;
BUD_FIL_PASSPORT_COPY	PROCEDURE	1	PROCEDURE bud_fil_passport_copy (from_   IN INTEGER,

BUD_FIL_PASSPORT_COPY	PROCEDURE	2	                                                   to_     IN INTEGER)

BUD_FIL_PASSPORT_COPY	PROCEDURE	3	IS

BUD_FIL_PASSPORT_COPY	PROCEDURE	4	   tn_           INTEGER;

BUD_FIL_PASSPORT_COPY	PROCEDURE	5	   tr_name_      VARCHAR2 (1024);

BUD_FIL_PASSPORT_COPY	PROCEDURE	6	   fio_          VARCHAR2 (1024);

BUD_FIL_PASSPORT_COPY	PROCEDURE	7	   mail_         VARCHAR2 (1024);

BUD_FIL_PASSPORT_COPY	PROCEDURE	8	   chief_mail_   VARCHAR2 (1024);

BUD_FIL_PASSPORT_COPY	PROCEDURE	9	   tr_mail_      VARCHAR2 (1024);

BUD_FIL_PASSPORT_COPY	PROCEDURE	10	   test_         INTEGER;

BUD_FIL_PASSPORT_COPY	PROCEDURE	11	BEGIN

BUD_FIL_PASSPORT_COPY	PROCEDURE	12	   FOR a IN (SELECT *

BUD_FIL_PASSPORT_COPY	PROCEDURE	13	               FROM bud_fil

BUD_FIL_PASSPORT_COPY	PROCEDURE	14	              WHERE id = from_)

BUD_FIL_PASSPORT_COPY	PROCEDURE	15	   LOOP

BUD_FIL_PASSPORT_COPY	PROCEDURE	16	      UPDATE bud_fil

BUD_FIL_PASSPORT_COPY	PROCEDURE	17	         SET uname = a.uname,

BUD_FIL_PASSPORT_COPY	PROCEDURE	18	             ownership = a.ownership,

BUD_FIL_PASSPORT_COPY	PROCEDURE	19	             activity = a.activity,

BUD_FIL_PASSPORT_COPY	PROCEDURE	20	             data_start = a.data_start,

BUD_FIL_PASSPORT_COPY	PROCEDURE	21	             data_start_avk = a.data_start_avk,

BUD_FIL_PASSPORT_COPY	PROCEDURE	22	             portfolio = a.portfolio,

BUD_FIL_PASSPORT_COPY	PROCEDURE	23	             areas = a.areas,

BUD_FIL_PASSPORT_COPY	PROCEDURE	24	             address_fakt = a.address_fakt,

BUD_FIL_PASSPORT_COPY	PROCEDURE	25	             address_ur = a.address_ur,

BUD_FIL_PASSPORT_COPY	PROCEDURE	26	             wsarea = a.wsarea,

BUD_FIL_PASSPORT_COPY	PROCEDURE	27	             ws_addres_fakt = a.ws_addres_fakt,

BUD_FIL_PASSPORT_COPY	PROCEDURE	28	             transport_own = a.transport_own,

BUD_FIL_PASSPORT_COPY	PROCEDURE	29	             transport_hired = a.transport_hired,

BUD_FIL_PASSPORT_COPY	PROCEDURE	30	             tpbase = a.tpbase,

BUD_FIL_PASSPORT_COPY	PROCEDURE	31	             web = a.web,

BUD_FIL_PASSPORT_COPY	PROCEDURE	32	             other = a.other,

BUD_FIL_PASSPORT_COPY	PROCEDURE	33	             warranty = a.warranty,

BUD_FIL_PASSPORT_COPY	PROCEDURE	34	             retailer = a.retailer,

BUD_FIL_PASSPORT_COPY	PROCEDURE	35	             props = a.props

BUD_FIL_PASSPORT_COPY	PROCEDURE	36	       WHERE id = to_;

BUD_FIL_PASSPORT_COPY	PROCEDURE	37	   END LOOP;

BUD_FIL_PASSPORT_COPY	PROCEDURE	38	

BUD_FIL_PASSPORT_COPY	PROCEDURE	39	   DELETE FROM bud_fil_contacts

BUD_FIL_PASSPORT_COPY	PROCEDURE	40	         WHERE fil = to_;

BUD_FIL_PASSPORT_COPY	PROCEDURE	41	

BUD_FIL_PASSPORT_COPY	PROCEDURE	42	   FOR a IN (SELECT *

BUD_FIL_PASSPORT_COPY	PROCEDURE	43	               FROM bud_fil_contacts

BUD_FIL_PASSPORT_COPY	PROCEDURE	44	              WHERE fil = from_)

BUD_FIL_PASSPORT_COPY	PROCEDURE	45	   LOOP

BUD_FIL_PASSPORT_COPY	PROCEDURE	46	      INSERT INTO bud_fil_contacts (fil,

BUD_FIL_PASSPORT_COPY	PROCEDURE	47	                                    dolgn,

BUD_FIL_PASSPORT_COPY	PROCEDURE	48	                                    fio,

BUD_FIL_PASSPORT_COPY	PROCEDURE	49	                                    phone,

BUD_FIL_PASSPORT_COPY	PROCEDURE	50	                                    mail,

BUD_FIL_PASSPORT_COPY	PROCEDURE	51	                                    birthday,

BUD_FIL_PASSPORT_COPY	PROCEDURE	52	                                    comm)

BUD_FIL_PASSPORT_COPY	PROCEDURE	53	           VALUES (to_,

BUD_FIL_PASSPORT_COPY	PROCEDURE	54	                   a.dolgn,

BUD_FIL_PASSPORT_COPY	PROCEDURE	55	                   a.fio,

BUD_FIL_PASSPORT_COPY	PROCEDURE	56	                   a.phone,

BUD_FIL_PASSPORT_COPY	PROCEDURE	57	                   a.mail,

BUD_FIL_PASSPORT_COPY	PROCEDURE	58	                   a.birthday,

BUD_FIL_PASSPORT_COPY	PROCEDURE	59	                   a.comm);

BUD_FIL_PASSPORT_COPY	PROCEDURE	60	   END LOOP;

BUD_FIL_PASSPORT_COPY	PROCEDURE	61	END;
BUD_FIL_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.BUD_FIL_MV_Q_ADD

BUD_FIL_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

BUD_FIL_MV_Q_ADD	TRIGGER	3	   ON PERSIK.BUD_FIL

BUD_FIL_MV_Q_ADD	TRIGGER	4	BEGIN

BUD_FIL_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

BUD_FIL_MV_Q_ADD	TRIGGER	6	   mv_queue_add ('A14TO_MV_ST');

BUD_FIL_MV_Q_ADD	TRIGGER	7	END;
BUD_FIL_CONTACTS_FILL	PROCEDURE	1	PROCEDURE        bud_fil_contacts_fill (

BUD_FIL_CONTACTS_FILL	PROCEDURE	2	   dolgn_id IN INTEGER)

BUD_FIL_CONTACTS_FILL	PROCEDURE	3	IS

BUD_FIL_CONTACTS_FILL	PROCEDURE	4	   v_dpt_id     INTEGER;

BUD_FIL_CONTACTS_FILL	PROCEDURE	5	   i            INTEGER;

BUD_FIL_CONTACTS_FILL	PROCEDURE	6	   dolgn_name   INTEGER;

BUD_FIL_CONTACTS_FILL	PROCEDURE	7	BEGIN

BUD_FIL_CONTACTS_FILL	PROCEDURE	8	   SELECT name, dpt_id

BUD_FIL_CONTACTS_FILL	PROCEDURE	9	     INTO dolgn_name, v_dpt_id

BUD_FIL_CONTACTS_FILL	PROCEDURE	10	     FROM bud_fil_contacts_dolgn

BUD_FIL_CONTACTS_FILL	PROCEDURE	11	    WHERE id = dolgn_id;

BUD_FIL_CONTACTS_FILL	PROCEDURE	12	

BUD_FIL_CONTACTS_FILL	PROCEDURE	13	   FOR a IN (SELECT *

BUD_FIL_CONTACTS_FILL	PROCEDURE	14	               FROM bud_fil

BUD_FIL_CONTACTS_FILL	PROCEDURE	15	              WHERE dpt_id = v_dpt_id)

BUD_FIL_CONTACTS_FILL	PROCEDURE	16	   LOOP

BUD_FIL_CONTACTS_FILL	PROCEDURE	17	      SELECT COUNT (*)

BUD_FIL_CONTACTS_FILL	PROCEDURE	18	        INTO i

BUD_FIL_CONTACTS_FILL	PROCEDURE	19	        FROM bud_fil_contacts

BUD_FIL_CONTACTS_FILL	PROCEDURE	20	       WHERE fil = a.id AND dolgn = dolgn_name AND required = 1;

BUD_FIL_CONTACTS_FILL	PROCEDURE	21	

BUD_FIL_CONTACTS_FILL	PROCEDURE	22	      IF i = 0

BUD_FIL_CONTACTS_FILL	PROCEDURE	23	      THEN

BUD_FIL_CONTACTS_FILL	PROCEDURE	24	         INSERT INTO bud_fil_contacts (fil, dolgn, required)

BUD_FIL_CONTACTS_FILL	PROCEDURE	25	              VALUES (a.id, dolgn_name, 1);

BUD_FIL_CONTACTS_FILL	PROCEDURE	26	

BUD_FIL_CONTACTS_FILL	PROCEDURE	27	         COMMIT;

BUD_FIL_CONTACTS_FILL	PROCEDURE	28	      END IF;

BUD_FIL_CONTACTS_FILL	PROCEDURE	29	   END LOOP;

BUD_FIL_CONTACTS_FILL	PROCEDURE	30	END;
BUD_ACT_FUND_LAST_UPDATE	TRIGGER	1	TRIGGER PERSIK.BUD_ACT_FUND_LAST_UPDATE

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	3	   ON PERSIK.BUD_ACT_FUND

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	6	DECLARE

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	7	   c   INTEGER;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	8	   PRAGMA AUTONOMOUS_TRANSACTION;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	9	BEGIN

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	10	   :NEW.lu := SYSDATE;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	11	

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	12	   IF INSERTING

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	13	   THEN

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	14	      INSERT INTO replace_ts (table_name, field_name, action_name)

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	15	           VALUES (:new.act, 'tab_num', :new.act_name);

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	16	   END IF;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	17	

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	18	   IF UPDATING

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	19	   THEN

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	20	      UPDATE replace_ts

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	21	         SET table_name = :new.act,

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	22	             field_name = 'tab_num',

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	23	             action_name = :new.act_name

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	24	       WHERE table_name = :old.act;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	25	   END IF;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	26	

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	27	   COMMIT;

BUD_ACT_FUND_LAST_UPDATE	TRIGGER	28	END;
BUD_ACT_FUND_DEL	TRIGGER	1	TRIGGER PERSIK.BUD_ACT_FUND_del

BUD_ACT_FUND_DEL	TRIGGER	2	   BEFORE DELETE

BUD_ACT_FUND_DEL	TRIGGER	3	   ON PERSIK.BUD_ACT_FUND

BUD_ACT_FUND_DEL	TRIGGER	4	   FOR EACH ROW

BUD_ACT_FUND_DEL	TRIGGER	5	DECLARE

BUD_ACT_FUND_DEL	TRIGGER	6	   PRAGMA AUTONOMOUS_TRANSACTION;

BUD_ACT_FUND_DEL	TRIGGER	7	BEGIN

BUD_ACT_FUND_DEL	TRIGGER	8	   DELETE FROM replace_ts

BUD_ACT_FUND_DEL	TRIGGER	9	         WHERE table_name = :old.act;

BUD_ACT_FUND_DEL	TRIGGER	10	

BUD_ACT_FUND_DEL	TRIGGER	11	   COMMIT;

BUD_ACT_FUND_DEL	TRIGGER	12	END;
BONUSES2MSSQL	PROCEDURE	1	PROCEDURE        bonuses2mssql

BONUSES2MSSQL	PROCEDURE	2	IS

BONUSES2MSSQL	PROCEDURE	3	   PRAGMA AUTONOMOUS_TRANSACTION;

BONUSES2MSSQL	PROCEDURE	4	   i   INTEGER;

BONUSES2MSSQL	PROCEDURE	5	   r   VARCHAR (1024);

BONUSES2MSSQL	PROCEDURE	6	BEGIN

BONUSES2MSSQL	PROCEDURE	7	   INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	8	        VALUES ('started', 'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	9	

BONUSES2MSSQL	PROCEDURE	10	   COMMIT;

BONUSES2MSSQL	PROCEDURE	11	

BONUSES2MSSQL	PROCEDURE	12	   BEGIN

BONUSES2MSSQL	PROCEDURE	13	      EXECUTE IMMEDIATE 'truncate table PERS_C_KADR';

BONUSES2MSSQL	PROCEDURE	14	

BONUSES2MSSQL	PROCEDURE	15	      EXECUTE IMMEDIATE 'truncate table PERS_POOSHLK';

BONUSES2MSSQL	PROCEDURE	16	

BONUSES2MSSQL	PROCEDURE	17	      EXECUTE IMMEDIATE 'truncate table PERS_TDN';

BONUSES2MSSQL	PROCEDURE	18	

BONUSES2MSSQL	PROCEDURE	19	      COMMIT;

BONUSES2MSSQL	PROCEDURE	20	   EXCEPTION

BONUSES2MSSQL	PROCEDURE	21	      WHEN OTHERS

BONUSES2MSSQL	PROCEDURE	22	      THEN

BONUSES2MSSQL	PROCEDURE	23	         r := SQLERRM;

BONUSES2MSSQL	PROCEDURE	24	

BONUSES2MSSQL	PROCEDURE	25	         INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	26	                 VALUES (

BONUSES2MSSQL	PROCEDURE	27	                           'error in truncate table PERS_... ' || r,

BONUSES2MSSQL	PROCEDURE	28	                           'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	29	

BONUSES2MSSQL	PROCEDURE	30	         COMMIT;

BONUSES2MSSQL	PROCEDURE	31	   END;

BONUSES2MSSQL	PROCEDURE	32	

BONUSES2MSSQL	PROCEDURE	33	   FOR a

BONUSES2MSSQL	PROCEDURE	34	      IN (SELECT *

BONUSES2MSSQL	PROCEDURE	35	            FROM departments d

BONUSES2MSSQL	PROCEDURE	36	           WHERE     manufak IS NOT NULL

BONUSES2MSSQL	PROCEDURE	37	                 AND fn_query2str (

BONUSES2MSSQL	PROCEDURE	38	                        'select count(*) from C_KADR@PERS_' || d.manufak,

BONUSES2MSSQL	PROCEDURE	39	                        ',')

BONUSES2MSSQL	PROCEDURE	40	                        IS NOT NULL)

BONUSES2MSSQL	PROCEDURE	41	   LOOP

BONUSES2MSSQL	PROCEDURE	42	      BEGIN

BONUSES2MSSQL	PROCEDURE	43	         EXECUTE IMMEDIATE

BONUSES2MSSQL	PROCEDURE	44	               'INSERT INTO PERS_C_KADR SELECT DISTINCT '

BONUSES2MSSQL	PROCEDURE	45	            || a.manufak

BONUSES2MSSQL	PROCEDURE	46	            || ' manufak,DCODE,CODE_,TEXT_ FROM C_KADR@PERS_'

BONUSES2MSSQL	PROCEDURE	47	            || a.manufak;

BONUSES2MSSQL	PROCEDURE	48	

BONUSES2MSSQL	PROCEDURE	49	         EXECUTE IMMEDIATE

BONUSES2MSSQL	PROCEDURE	50	               'INSERT INTO PERS_POOSHLK SELECT DISTINCT '

BONUSES2MSSQL	PROCEDURE	51	            || a.manufak

BONUSES2MSSQL	PROCEDURE	52	            || ' manufak,TN,DATAPR,MOTIV,SUMP,OSNOVANIE FROM POOSHLK@PERS_'

BONUSES2MSSQL	PROCEDURE	53	            || a.manufak;

BONUSES2MSSQL	PROCEDURE	54	

BONUSES2MSSQL	PROCEDURE	55	         EXECUTE IMMEDIATE

BONUSES2MSSQL	PROCEDURE	56	               'INSERT INTO PERS_TDN SELECT DISTINCT '

BONUSES2MSSQL	PROCEDURE	57	            || a.manufak

BONUSES2MSSQL	PROCEDURE	58	            || ' manufak,TN,SL,VNN,DATAP,OSN,SUMP FROM TDN@PERS_'

BONUSES2MSSQL	PROCEDURE	59	            || a.manufak;

BONUSES2MSSQL	PROCEDURE	60	

BONUSES2MSSQL	PROCEDURE	61	         COMMIT;

BONUSES2MSSQL	PROCEDURE	62	      EXCEPTION

BONUSES2MSSQL	PROCEDURE	63	         WHEN OTHERS

BONUSES2MSSQL	PROCEDURE	64	         THEN

BONUSES2MSSQL	PROCEDURE	65	            r := SQLERRM;

BONUSES2MSSQL	PROCEDURE	66	

BONUSES2MSSQL	PROCEDURE	67	            INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	68	                    VALUES (

BONUSES2MSSQL	PROCEDURE	69	                              'error in INSERT INTO PERS_... ' || r,

BONUSES2MSSQL	PROCEDURE	70	                              'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	71	

BONUSES2MSSQL	PROCEDURE	72	            COMMIT;

BONUSES2MSSQL	PROCEDURE	73	      END;

BONUSES2MSSQL	PROCEDURE	74	   END LOOP;

BONUSES2MSSQL	PROCEDURE	75	

BONUSES2MSSQL	PROCEDURE	76	   i := 0;

BONUSES2MSSQL	PROCEDURE	77	

BONUSES2MSSQL	PROCEDURE	78	   FOR a

BONUSES2MSSQL	PROCEDURE	79	      IN (  SELECT x1.*,

BONUSES2MSSQL	PROCEDURE	80	                      'insert into '

BONUSES2MSSQL	PROCEDURE	81	                   || exp_table_name

BONUSES2MSSQL	PROCEDURE	82	                   || '@pers_'

BONUSES2MSSQL	PROCEDURE	83	                   || manufak

BONUSES2MSSQL	PROCEDURE	84	                   || ' ('

BONUSES2MSSQL	PROCEDURE	85	                   || exp_fields_names

BONUSES2MSSQL	PROCEDURE	86	                   || ') values ('

BONUSES2MSSQL	PROCEDURE	87	                   || exp_fields_values

BONUSES2MSSQL	PROCEDURE	88	                   || ')'

BONUSES2MSSQL	PROCEDURE	89	                      sql_insert

BONUSES2MSSQL	PROCEDURE	90	              FROM (SELECT x.*,

BONUSES2MSSQL	PROCEDURE	91	                           CASE

BONUSES2MSSQL	PROCEDURE	92	                              WHEN koef = 1

BONUSES2MSSQL	PROCEDURE	93	                              THEN

BONUSES2MSSQL	PROCEDURE	94	                                    'select count(*) from pers_pooshlk where manufak='

BONUSES2MSSQL	PROCEDURE	95	                                 || manufak

BONUSES2MSSQL	PROCEDURE	96	                                 || ' and tn='

BONUSES2MSSQL	PROCEDURE	97	                                 || tab_num

BONUSES2MSSQL	PROCEDURE	98	                                 || ' and datapr=to_date('''

BONUSES2MSSQL	PROCEDURE	99	                                 || TO_CHAR (sz_created, 'dd.mm.yyyy')

BONUSES2MSSQL	PROCEDURE	100	                                 || ''',''dd.mm.yyyy'') and motiv='

BONUSES2MSSQL	PROCEDURE	101	                                 || pcode

BONUSES2MSSQL	PROCEDURE	102	                              WHEN koef = -1

BONUSES2MSSQL	PROCEDURE	103	                              THEN

BONUSES2MSSQL	PROCEDURE	104	                                    'select count(*) from pers_tdn where manufak='

BONUSES2MSSQL	PROCEDURE	105	                                 || manufak

BONUSES2MSSQL	PROCEDURE	106	                                 || ' and tn='

BONUSES2MSSQL	PROCEDURE	107	                                 || tab_num

BONUSES2MSSQL	PROCEDURE	108	                                 || ' and datap=to_date('''

BONUSES2MSSQL	PROCEDURE	109	                                 || TO_CHAR (sz_created, 'dd.mm.yyyy')

BONUSES2MSSQL	PROCEDURE	110	                                 || ''',''dd.mm.yyyy'') and vnn='

BONUSES2MSSQL	PROCEDURE	111	                                 || pcode

BONUSES2MSSQL	PROCEDURE	112	                           END

BONUSES2MSSQL	PROCEDURE	113	                              sql_text,

BONUSES2MSSQL	PROCEDURE	114	                           CASE

BONUSES2MSSQL	PROCEDURE	115	                              WHEN koef = 1 THEN 'pooshlk'

BONUSES2MSSQL	PROCEDURE	116	                              WHEN koef = -1 THEN 'tdn'

BONUSES2MSSQL	PROCEDURE	117	                           END

BONUSES2MSSQL	PROCEDURE	118	                              exp_table_name,

BONUSES2MSSQL	PROCEDURE	119	                           CASE

BONUSES2MSSQL	PROCEDURE	120	                              WHEN koef = 1

BONUSES2MSSQL	PROCEDURE	121	                              THEN

BONUSES2MSSQL	PROCEDURE	122	                                 'tn,datapr,motiv,sump,osnovanie'

BONUSES2MSSQL	PROCEDURE	123	                              WHEN koef = -1

BONUSES2MSSQL	PROCEDURE	124	                              THEN

BONUSES2MSSQL	PROCEDURE	125	                                 'tn,datap,vnn,sump,osn,sl'

BONUSES2MSSQL	PROCEDURE	126	                           END

BONUSES2MSSQL	PROCEDURE	127	                              exp_fields_names,

BONUSES2MSSQL	PROCEDURE	128	                           CASE

BONUSES2MSSQL	PROCEDURE	129	                              WHEN koef = 1

BONUSES2MSSQL	PROCEDURE	130	                              THEN

BONUSES2MSSQL	PROCEDURE	131	                                    tab_num

BONUSES2MSSQL	PROCEDURE	132	                                 || ','

BONUSES2MSSQL	PROCEDURE	133	                                 || ''''

BONUSES2MSSQL	PROCEDURE	134	                                 || sz_created_mssql

BONUSES2MSSQL	PROCEDURE	135	                                 || ''''

BONUSES2MSSQL	PROCEDURE	136	                                 || ','

BONUSES2MSSQL	PROCEDURE	137	                                 || pcode

BONUSES2MSSQL	PROCEDURE	138	                                 || ','

BONUSES2MSSQL	PROCEDURE	139	                                 || summa

BONUSES2MSSQL	PROCEDURE	140	                                 || ','''

BONUSES2MSSQL	PROCEDURE	141	                                 || osn

BONUSES2MSSQL	PROCEDURE	142	                                 || ''''

BONUSES2MSSQL	PROCEDURE	143	                              WHEN koef = -1

BONUSES2MSSQL	PROCEDURE	144	                              THEN

BONUSES2MSSQL	PROCEDURE	145	                                    tab_num

BONUSES2MSSQL	PROCEDURE	146	                                 || ','

BONUSES2MSSQL	PROCEDURE	147	                                 || ''''

BONUSES2MSSQL	PROCEDURE	148	                                 || sz_created_mssql

BONUSES2MSSQL	PROCEDURE	149	                                 || ''''

BONUSES2MSSQL	PROCEDURE	150	                                 || ','

BONUSES2MSSQL	PROCEDURE	151	                                 || pcode

BONUSES2MSSQL	PROCEDURE	152	                                 || ','

BONUSES2MSSQL	PROCEDURE	153	                                 || summa

BONUSES2MSSQL	PROCEDURE	154	                                 || ','''

BONUSES2MSSQL	PROCEDURE	155	                                 || osn

BONUSES2MSSQL	PROCEDURE	156	                                 || ''',1'

BONUSES2MSSQL	PROCEDURE	157	                           END

BONUSES2MSSQL	PROCEDURE	158	                              exp_fields_values,

BONUSES2MSSQL	PROCEDURE	159	                           CASE

BONUSES2MSSQL	PROCEDURE	160	                              WHEN koef = 1

BONUSES2MSSQL	PROCEDURE	161	                              THEN

BONUSES2MSSQL	PROCEDURE	162	                                 (SELECT COUNT (*)

BONUSES2MSSQL	PROCEDURE	163	                                    FROM pers_pooshlk

BONUSES2MSSQL	PROCEDURE	164	                                   WHERE     manufak = x.manufak

BONUSES2MSSQL	PROCEDURE	165	                                         AND tn = x.tab_num

BONUSES2MSSQL	PROCEDURE	166	                                         AND datapr =

BONUSES2MSSQL	PROCEDURE	167	                                                TO_DATE (

BONUSES2MSSQL	PROCEDURE	168	                                                   TO_CHAR (x.sz_created,

BONUSES2MSSQL	PROCEDURE	169	                                                            'dd.mm.yyyy'),

BONUSES2MSSQL	PROCEDURE	170	                                                   'dd.mm.yyyy')

BONUSES2MSSQL	PROCEDURE	171	                                         AND motiv = x.pcode)

BONUSES2MSSQL	PROCEDURE	172	                              WHEN koef = -1

BONUSES2MSSQL	PROCEDURE	173	                              THEN

BONUSES2MSSQL	PROCEDURE	174	                                 (SELECT COUNT (*)

BONUSES2MSSQL	PROCEDURE	175	                                    FROM pers_tdn

BONUSES2MSSQL	PROCEDURE	176	                                   WHERE     manufak = x.manufak

BONUSES2MSSQL	PROCEDURE	177	                                         AND tn = x.tab_num

BONUSES2MSSQL	PROCEDURE	178	                                         AND datap =

BONUSES2MSSQL	PROCEDURE	179	                                                TO_DATE (

BONUSES2MSSQL	PROCEDURE	180	                                                   TO_CHAR (x.sz_created,

BONUSES2MSSQL	PROCEDURE	181	                                                            'dd.mm.yyyy'),

BONUSES2MSSQL	PROCEDURE	182	                                                   'dd.mm.yyyy')

BONUSES2MSSQL	PROCEDURE	183	                                         AND vnn = x.pcode)

BONUSES2MSSQL	PROCEDURE	184	                           END

BONUSES2MSSQL	PROCEDURE	185	                              exist

BONUSES2MSSQL	PROCEDURE	186	                      FROM (SELECT d.manufak,

BONUSES2MSSQL	PROCEDURE	187	                                   d.dpt_name,

BONUSES2MSSQL	PROCEDURE	188	                                   h.created,

BONUSES2MSSQL	PROCEDURE	189	                                   h.sz_id,

BONUSES2MSSQL	PROCEDURE	190	                                   t.koef,

BONUSES2MSSQL	PROCEDURE	191	                                   st.pcode,

BONUSES2MSSQL	PROCEDURE	192	                                   h.text,

BONUSES2MSSQL	PROCEDURE	193	                                   b.summa,

BONUSES2MSSQL	PROCEDURE	194	                                   b.tab_num,

BONUSES2MSSQL	PROCEDURE	195	                                      'СЗ № '

BONUSES2MSSQL	PROCEDURE	196	                                   || h.sz_id

BONUSES2MSSQL	PROCEDURE	197	                                   || ' от '

BONUSES2MSSQL	PROCEDURE	198	                                   || TO_CHAR ( (SELECT created

BONUSES2MSSQL	PROCEDURE	199	                                                   FROM sz

BONUSES2MSSQL	PROCEDURE	200	                                                  WHERE id = h.sz_id),

BONUSES2MSSQL	PROCEDURE	201	                                               'dd.mm.yyyy')

BONUSES2MSSQL	PROCEDURE	202	                                      osn,

BONUSES2MSSQL	PROCEDURE	203	                                   TO_DATE (TO_CHAR ( (SELECT created

BONUSES2MSSQL	PROCEDURE	204	                                                         FROM sz

BONUSES2MSSQL	PROCEDURE	205	                                                        WHERE id = h.sz_id),

BONUSES2MSSQL	PROCEDURE	206	                                                     'dd.mm.yyyy'),

BONUSES2MSSQL	PROCEDURE	207	                                            'dd.mm.yyyy')

BONUSES2MSSQL	PROCEDURE	208	                                      sz_created,

BONUSES2MSSQL	PROCEDURE	209	                                   TO_CHAR ( (SELECT created

BONUSES2MSSQL	PROCEDURE	210	                                                FROM sz

BONUSES2MSSQL	PROCEDURE	211	                                               WHERE id = h.sz_id),

BONUSES2MSSQL	PROCEDURE	212	                                            'yyyymmdd')

BONUSES2MSSQL	PROCEDURE	213	                                      sz_created_mssql

BONUSES2MSSQL	PROCEDURE	214	                              FROM bonus_head h,

BONUSES2MSSQL	PROCEDURE	215	                                   bonus_body b,

BONUSES2MSSQL	PROCEDURE	216	                                   bonus_types t,

BONUSES2MSSQL	PROCEDURE	217	                                   bonus_types st,

BONUSES2MSSQL	PROCEDURE	218	                                   user_list u,

BONUSES2MSSQL	PROCEDURE	219	                                   departments d

BONUSES2MSSQL	PROCEDURE	220	                             WHERE     (   (    b.tn = u.tn

BONUSES2MSSQL	PROCEDURE	221	                                            AND u.tab_num IS NOT NULL)

BONUSES2MSSQL	PROCEDURE	222	                                        OR b.h_eta = u.h_eta)

BONUSES2MSSQL	PROCEDURE	223	                                   AND u.dpt_id = d.dpt_id

BONUSES2MSSQL	PROCEDURE	224	                                   AND u.datauvol IS NULL

BONUSES2MSSQL	PROCEDURE	225	                                   AND d.manufak IS NOT NULL

BONUSES2MSSQL	PROCEDURE	226	                                   AND EXISTS

BONUSES2MSSQL	PROCEDURE	227	                                          (SELECT *

BONUSES2MSSQL	PROCEDURE	228	                                             FROM PERS_C_KADR

BONUSES2MSSQL	PROCEDURE	229	                                            WHERE manufak = d.manufak)

BONUSES2MSSQL	PROCEDURE	230	                                   AND EXISTS

BONUSES2MSSQL	PROCEDURE	231	                                          (SELECT *

BONUSES2MSSQL	PROCEDURE	232	                                             FROM sz

BONUSES2MSSQL	PROCEDURE	233	                                            WHERE id = h.sz_id)

BONUSES2MSSQL	PROCEDURE	234	                                   AND DECODE (

BONUSES2MSSQL	PROCEDURE	235	                                            (SELECT COUNT (*)

BONUSES2MSSQL	PROCEDURE	236	                                               FROM sz_accept

BONUSES2MSSQL	PROCEDURE	237	                                              WHERE sz_id = h.sz_id)

BONUSES2MSSQL	PROCEDURE	238	                                          - (SELECT COUNT (*)

BONUSES2MSSQL	PROCEDURE	239	                                               FROM sz_accept

BONUSES2MSSQL	PROCEDURE	240	                                              WHERE     sz_id = h.sz_id

BONUSES2MSSQL	PROCEDURE	241	                                                    AND accepted = 1),

BONUSES2MSSQL	PROCEDURE	242	                                          0, 1,

BONUSES2MSSQL	PROCEDURE	243	                                          0) = 1

BONUSES2MSSQL	PROCEDURE	244	                                   AND h.id = b.bonus_id

BONUSES2MSSQL	PROCEDURE	245	                                   AND t.id = h.bonus_type

BONUSES2MSSQL	PROCEDURE	246	                                   AND st.id = h.bonus_subtype) x) x1

BONUSES2MSSQL	PROCEDURE	247	             WHERE TO_CHAR (fn_query2str (sql_text, ',')) = 0 AND exist = 0

BONUSES2MSSQL	PROCEDURE	248	          ORDER BY sz_id, tab_num)

BONUSES2MSSQL	PROCEDURE	249	   LOOP

BONUSES2MSSQL	PROCEDURE	250	      i := i + 1;

BONUSES2MSSQL	PROCEDURE	251	

BONUSES2MSSQL	PROCEDURE	252	      BEGIN

BONUSES2MSSQL	PROCEDURE	253	         EXECUTE IMMEDIATE a.sql_insert;

BONUSES2MSSQL	PROCEDURE	254	

BONUSES2MSSQL	PROCEDURE	255	         COMMIT;

BONUSES2MSSQL	PROCEDURE	256	

BONUSES2MSSQL	PROCEDURE	257	         INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	258	              VALUES (a.sql_insert, 'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	259	

BONUSES2MSSQL	PROCEDURE	260	         COMMIT;

BONUSES2MSSQL	PROCEDURE	261	      EXCEPTION

BONUSES2MSSQL	PROCEDURE	262	         WHEN OTHERS

BONUSES2MSSQL	PROCEDURE	263	         THEN

BONUSES2MSSQL	PROCEDURE	264	            COMMIT;

BONUSES2MSSQL	PROCEDURE	265	            r := SQLERRM;

BONUSES2MSSQL	PROCEDURE	266	

BONUSES2MSSQL	PROCEDURE	267	            INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	268	                    VALUES (

BONUSES2MSSQL	PROCEDURE	269	                                 'error in query: '

BONUSES2MSSQL	PROCEDURE	270	                              || a.sql_insert

BONUSES2MSSQL	PROCEDURE	271	                              || ' SQLERRM: '

BONUSES2MSSQL	PROCEDURE	272	                              || r,

BONUSES2MSSQL	PROCEDURE	273	                              'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	274	

BONUSES2MSSQL	PROCEDURE	275	            COMMIT;

BONUSES2MSSQL	PROCEDURE	276	      END;

BONUSES2MSSQL	PROCEDURE	277	   END LOOP;

BONUSES2MSSQL	PROCEDURE	278	

BONUSES2MSSQL	PROCEDURE	279	   COMMIT;

BONUSES2MSSQL	PROCEDURE	280	

BONUSES2MSSQL	PROCEDURE	281	   IF i > 0

BONUSES2MSSQL	PROCEDURE	282	   THEN

BONUSES2MSSQL	PROCEDURE	283	      INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	284	           VALUES ('total bonuses: ' || TO_CHAR (i), 'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	285	

BONUSES2MSSQL	PROCEDURE	286	      COMMIT;

BONUSES2MSSQL	PROCEDURE	287	   ELSE

BONUSES2MSSQL	PROCEDURE	288	      INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	289	           VALUES ('all bonuses already exists', 'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	290	

BONUSES2MSSQL	PROCEDURE	291	      COMMIT;

BONUSES2MSSQL	PROCEDURE	292	   END IF;

BONUSES2MSSQL	PROCEDURE	293	

BONUSES2MSSQL	PROCEDURE	294	   INSERT INTO full_log (text, prg)

BONUSES2MSSQL	PROCEDURE	295	        VALUES ('finished', 'bonuses2mssql');

BONUSES2MSSQL	PROCEDURE	296	

BONUSES2MSSQL	PROCEDURE	297	   COMMIT;

BONUSES2MSSQL	PROCEDURE	298	  /*SELECT COUNT (*) c,

BONUSES2MSSQL	PROCEDURE	299	         TN,

BONUSES2MSSQL	PROCEDURE	300	         DATAPR,

BONUSES2MSSQL	PROCEDURE	301	         MOTIV,

BONUSES2MSSQL	PROCEDURE	302	         SUMP,

BONUSES2MSSQL	PROCEDURE	303	         OSNOVANIE

BONUSES2MSSQL	PROCEDURE	304	    FROM (SELECT DISTINCT TN,

BONUSES2MSSQL	PROCEDURE	305	                          DATAPR,

BONUSES2MSSQL	PROCEDURE	306	                          MOTIV,

BONUSES2MSSQL	PROCEDURE	307	                          SUMP,

BONUSES2MSSQL	PROCEDURE	308	                          OSNOVANIE,

BONUSES2MSSQL	PROCEDURE	309	                          id_record

BONUSES2MSSQL	PROCEDURE	310	            FROM POOSHLK@PERS_43139)

BONUSES2MSSQL	PROCEDURE	311	GROUP BY TN,

BONUSES2MSSQL	PROCEDURE	312	         DATAPR,

BONUSES2MSSQL	PROCEDURE	313	         MOTIV,

BONUSES2MSSQL	PROCEDURE	314	         SUMP,

BONUSES2MSSQL	PROCEDURE	315	         OSNOVANIE

BONUSES2MSSQL	PROCEDURE	316	  HAVING COUNT (*) > 1

BONUSES2MSSQL	PROCEDURE	317	ORDER BY tn;

BONUSES2MSSQL	PROCEDURE	318	

BONUSES2MSSQL	PROCEDURE	319	

BONUSES2MSSQL	PROCEDURE	320	  SELECT COUNT (*) c,

BONUSES2MSSQL	PROCEDURE	321	         TN,

BONUSES2MSSQL	PROCEDURE	322	         SL,

BONUSES2MSSQL	PROCEDURE	323	         VNN,

BONUSES2MSSQL	PROCEDURE	324	         DATAP,

BONUSES2MSSQL	PROCEDURE	325	         OSN,

BONUSES2MSSQL	PROCEDURE	326	         SUMP

BONUSES2MSSQL	PROCEDURE	327	    FROM (SELECT DISTINCT TN,

BONUSES2MSSQL	PROCEDURE	328	                          SL,

BONUSES2MSSQL	PROCEDURE	329	                          VNN,

BONUSES2MSSQL	PROCEDURE	330	                          DATAP,

BONUSES2MSSQL	PROCEDURE	331	                          OSN,

BONUSES2MSSQL	PROCEDURE	332	                          SUMP,

BONUSES2MSSQL	PROCEDURE	333	                          id_record

BONUSES2MSSQL	PROCEDURE	334	            FROM TDN@PERS_43139)

BONUSES2MSSQL	PROCEDURE	335	GROUP BY TN,

BONUSES2MSSQL	PROCEDURE	336	         SL,

BONUSES2MSSQL	PROCEDURE	337	         VNN,

BONUSES2MSSQL	PROCEDURE	338	         DATAP,

BONUSES2MSSQL	PROCEDURE	339	         OSN,

BONUSES2MSSQL	PROCEDURE	340	         SUMP

BONUSES2MSSQL	PROCEDURE	341	  HAVING COUNT (*) > 1

BONUSES2MSSQL	PROCEDURE	342	ORDER BY tn;*/

BONUSES2MSSQL	PROCEDURE	343	

BONUSES2MSSQL	PROCEDURE	344	END;
ASSIST_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.ASSIST_MV_Q_ADD

ASSIST_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

ASSIST_MV_Q_ADD	TRIGGER	3	   ON PERSIK.ASSIST

ASSIST_MV_Q_ADD	TRIGGER	4	BEGIN

ASSIST_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('USER_LIST');

ASSIST_MV_Q_ADD	TRIGGER	6	   --mv_queue_add ('A14TO_MV');

ASSIST_MV_Q_ADD	TRIGGER	7	END;
ASSIST_LAST_UPDATE	TRIGGER	1	TRIGGER "PERSIK"."ASSIST_LAST_UPDATE" 

ASSIST_LAST_UPDATE	TRIGGER	2	   BEFORE INSERT OR UPDATE

ASSIST_LAST_UPDATE	TRIGGER	3	   ON PERSIK.assist

ASSIST_LAST_UPDATE	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ASSIST_LAST_UPDATE	TRIGGER	5	   FOR EACH ROW

ASSIST_LAST_UPDATE	TRIGGER	6	DECLARE

ASSIST_LAST_UPDATE	TRIGGER	7	BEGIN

ASSIST_LAST_UPDATE	TRIGGER	8	   :NEW.lu := SYSDATE;

ASSIST_LAST_UPDATE	TRIGGER	9	END;

ASSIST_LAST_UPDATE	TRIGGER	10	

ASSIST_LAST_UPDATE	TRIGGER	11	

ASSIST_LAST_UPDATE	TRIGGER	12	

ANKETA_LANG_UPD	TRIGGER	1	TRIGGER anketa_lang_UPD

ANKETA_LANG_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

ANKETA_LANG_UPD	TRIGGER	3	   ON anketa_lang

ANKETA_LANG_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ANKETA_LANG_UPD	TRIGGER	5	   FOR EACH ROW

ANKETA_LANG_UPD	TRIGGER	6	BEGIN

ANKETA_LANG_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

ANKETA_LANG_UPD	TRIGGER	8	END;
ANKETA_LANG_LEVEL_NEW	TRIGGER	1	TRIGGER ANKETA_LANG_level_new

ANKETA_LANG_LEVEL_NEW	TRIGGER	2	   BEFORE INSERT

ANKETA_LANG_LEVEL_NEW	TRIGGER	3	   ON ANKETA_LANG_level

ANKETA_LANG_LEVEL_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ANKETA_LANG_LEVEL_NEW	TRIGGER	5	   FOR EACH ROW

ANKETA_LANG_LEVEL_NEW	TRIGGER	6	BEGIN

ANKETA_LANG_LEVEL_NEW	TRIGGER	7	   :NEW.id := NVL (:NEW.id, seq_all.NEXTVAL);

ANKETA_LANG_LEVEL_NEW	TRIGGER	8	END;
ANKETA_LANG_LEVEL_LU	TRIGGER	1	TRIGGER ANKETA_LANG_level_lu

ANKETA_LANG_LEVEL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

ANKETA_LANG_LEVEL_LU	TRIGGER	3	   ON ANKETA_LANG_level

ANKETA_LANG_LEVEL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ANKETA_LANG_LEVEL_LU	TRIGGER	5	   FOR EACH ROW

ANKETA_LANG_LEVEL_LU	TRIGGER	6	BEGIN

ANKETA_LANG_LEVEL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

ANKETA_LANG_LEVEL_LU	TRIGGER	8	END;
ANKETA_LANGH_UPD	TRIGGER	1	TRIGGER ANKETA_LANGH_UPD

ANKETA_LANGH_UPD	TRIGGER	2	   BEFORE INSERT OR UPDATE

ANKETA_LANGH_UPD	TRIGGER	3	   ON ANKETA_LANGH

ANKETA_LANGH_UPD	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ANKETA_LANGH_UPD	TRIGGER	5	   FOR EACH ROW

ANKETA_LANGH_UPD	TRIGGER	6	BEGIN

ANKETA_LANGH_UPD	TRIGGER	7	   :NEW.lu := SYSDATE;

ANKETA_LANGH_UPD	TRIGGER	8	END;
AKCII_LOCAL_TP_LU	TRIGGER	1	TRIGGER "PERSIK"."AKCII_LOCAL_TP_LU" 

AKCII_LOCAL_TP_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

AKCII_LOCAL_TP_LU	TRIGGER	3	   ON akcii_local_tp

AKCII_LOCAL_TP_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

AKCII_LOCAL_TP_LU	TRIGGER	5	   FOR EACH ROW

AKCII_LOCAL_TP_LU	TRIGGER	6	BEGIN

AKCII_LOCAL_TP_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

AKCII_LOCAL_TP_LU	TRIGGER	8	END akcii_local_tp_lu;

AKCII_LOCAL_TP_LU	TRIGGER	9	

AKCII_LOCAL_FILES_NEW	TRIGGER	1	TRIGGER "PERSIK"."AKCII_LOCAL_FILES_NEW" 

AKCII_LOCAL_FILES_NEW	TRIGGER	2	   BEFORE INSERT

AKCII_LOCAL_FILES_NEW	TRIGGER	3	   ON akcii_local_files

AKCII_LOCAL_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

AKCII_LOCAL_FILES_NEW	TRIGGER	5	   FOR EACH ROW

AKCII_LOCAL_FILES_NEW	TRIGGER	6	BEGIN

AKCII_LOCAL_FILES_NEW	TRIGGER	7	   :NEW.id := seq_all.NEXTVAL;

AKCII_LOCAL_FILES_NEW	TRIGGER	8	END akcii_local_files_new;

AKCII_LOCAL_FILES_NEW	TRIGGER	9	

AKCII_LOCAL_FILES_LU	TRIGGER	1	TRIGGER "PERSIK"."AKCII_LOCAL_FILES_LU" 

AKCII_LOCAL_FILES_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

AKCII_LOCAL_FILES_LU	TRIGGER	3	   ON akcii_local_files

AKCII_LOCAL_FILES_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

AKCII_LOCAL_FILES_LU	TRIGGER	5	   FOR EACH ROW

AKCII_LOCAL_FILES_LU	TRIGGER	6	BEGIN

AKCII_LOCAL_FILES_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

AKCII_LOCAL_FILES_LU	TRIGGER	8	END akcii_local_files_lu;

AKCII_LOCAL_FILES_LU	TRIGGER	9	

ADD_LOG	PROCEDURE	1	PROCEDURE        ADD_LOG (p_prg IN VARCHAR, p_text IN VARCHAR)

ADD_LOG	PROCEDURE	2	IS

ADD_LOG	PROCEDURE	3	   PRAGMA AUTONOMOUS_TRANSACTION;

ADD_LOG	PROCEDURE	4	BEGIN

ADD_LOG	PROCEDURE	5	   INSERT INTO full_log (text, prg)

ADD_LOG	PROCEDURE	6	        VALUES (p_text, p_prg);

ADD_LOG	PROCEDURE	7	

ADD_LOG	PROCEDURE	8	   COMMIT;

ADD_LOG	PROCEDURE	9	END;
ADD_JOB_MOVE_STUFF	PROCEDURE	1	PROCEDURE        "ADD_JOB_MOVE_STUFF" (id_   IN INTEGER,

ADD_JOB_MOVE_STUFF	PROCEDURE	2	                                                         dt_   IN DATE)

ADD_JOB_MOVE_STUFF	PROCEDURE	3	IS

ADD_JOB_MOVE_STUFF	PROCEDURE	4	   job_id   VARCHAR2 (32);

ADD_JOB_MOVE_STUFF	PROCEDURE	5	   vdt      DATE;

ADD_JOB_MOVE_STUFF	PROCEDURE	6	BEGIN

ADD_JOB_MOVE_STUFF	PROCEDURE	7	   SELECT CASE WHEN dt_ < SYSDATE THEN SYSDATE + 1 / 24 / 60 ELSE dt_ END

ADD_JOB_MOVE_STUFF	PROCEDURE	8	     INTO vdt

ADD_JOB_MOVE_STUFF	PROCEDURE	9	     FROM DUAL;

ADD_JOB_MOVE_STUFF	PROCEDURE	10	

ADD_JOB_MOVE_STUFF	PROCEDURE	11	   job_id := 'PERSIK.job_move_staff_' || seq_all.NEXTVAL;

ADD_JOB_MOVE_STUFF	PROCEDURE	12	   SYS.DBMS_SCHEDULER.CREATE_JOB (

ADD_JOB_MOVE_STUFF	PROCEDURE	13	      job_name          => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	14	      start_date        => TO_TIMESTAMP_TZ (TO_CHAR (dt_, 'dd.mm.yyyy hh24:mi:ss'),

ADD_JOB_MOVE_STUFF	PROCEDURE	15	                                            'dd.mm.yyyy hh24:mi:ss tzr'),

ADD_JOB_MOVE_STUFF	PROCEDURE	16	      repeat_interval   => NULL,

ADD_JOB_MOVE_STUFF	PROCEDURE	17	      end_date          => NULL,

ADD_JOB_MOVE_STUFF	PROCEDURE	18	      job_class         => 'DEFAULT_JOB_CLASS',

ADD_JOB_MOVE_STUFF	PROCEDURE	19	      job_type          => 'PLSQL_BLOCK',

ADD_JOB_MOVE_STUFF	PROCEDURE	20	      job_action        =>    'BEGIN pr_move_staff('

ADD_JOB_MOVE_STUFF	PROCEDURE	21	                           || TO_CHAR (id_)

ADD_JOB_MOVE_STUFF	PROCEDURE	22	                           || '); END;',

ADD_JOB_MOVE_STUFF	PROCEDURE	23	      comments          => NULL);

ADD_JOB_MOVE_STUFF	PROCEDURE	24	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	25	                                     attribute   => 'RESTARTABLE',

ADD_JOB_MOVE_STUFF	PROCEDURE	26	                                     VALUE       => FALSE);

ADD_JOB_MOVE_STUFF	PROCEDURE	27	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	28	                                          attribute   => 'MAX_FAILURES');

ADD_JOB_MOVE_STUFF	PROCEDURE	29	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	30	                                          attribute   => 'MAX_RUNS');

ADD_JOB_MOVE_STUFF	PROCEDURE	31	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	32	                                     attribute   => 'JOB_PRIORITY',

ADD_JOB_MOVE_STUFF	PROCEDURE	33	                                     VALUE       => 3);

ADD_JOB_MOVE_STUFF	PROCEDURE	34	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	35	                                          attribute   => 'SCHEDULE_LIMIT');

ADD_JOB_MOVE_STUFF	PROCEDURE	36	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	37	                                     attribute   => 'AUTO_DROP',

ADD_JOB_MOVE_STUFF	PROCEDURE	38	                                     VALUE       => TRUE);

ADD_JOB_MOVE_STUFF	PROCEDURE	39	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (

ADD_JOB_MOVE_STUFF	PROCEDURE	40	      name        => job_id,

ADD_JOB_MOVE_STUFF	PROCEDURE	41	      attribute   => 'LOGGING_LEVEL',

ADD_JOB_MOVE_STUFF	PROCEDURE	42	      VALUE       => SYS.DBMS_SCHEDULER.LOGGING_FULL);

ADD_JOB_MOVE_STUFF	PROCEDURE	43	   SYS.DBMS_SCHEDULER.ENABLE (name => job_id);

ADD_JOB_MOVE_STUFF	PROCEDURE	44	END;
ADD_JOB_FREE_STUFF	PROCEDURE	1	PROCEDURE        "ADD_JOB_FREE_STUFF" (id_   IN INTEGER,

ADD_JOB_FREE_STUFF	PROCEDURE	2	                                                         dt_   IN DATE)

ADD_JOB_FREE_STUFF	PROCEDURE	3	IS

ADD_JOB_FREE_STUFF	PROCEDURE	4	   job_id   VARCHAR2 (32);

ADD_JOB_FREE_STUFF	PROCEDURE	5	   vdt      DATE;

ADD_JOB_FREE_STUFF	PROCEDURE	6	BEGIN

ADD_JOB_FREE_STUFF	PROCEDURE	7	   SELECT CASE WHEN dt_ < SYSDATE THEN SYSDATE + 1 / 24 / 60 ELSE dt_ END

ADD_JOB_FREE_STUFF	PROCEDURE	8	     INTO vdt

ADD_JOB_FREE_STUFF	PROCEDURE	9	     FROM DUAL;

ADD_JOB_FREE_STUFF	PROCEDURE	10	

ADD_JOB_FREE_STUFF	PROCEDURE	11	   job_id := 'PERSIK.job_free_staff_' || seq_all.NEXTVAL;

ADD_JOB_FREE_STUFF	PROCEDURE	12	   SYS.DBMS_SCHEDULER.CREATE_JOB (

ADD_JOB_FREE_STUFF	PROCEDURE	13	      job_name          => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	14	      start_date        => TO_TIMESTAMP_TZ (TO_CHAR (vdt, 'dd.mm.yyyy hh24:mi:ss'),

ADD_JOB_FREE_STUFF	PROCEDURE	15	                                            'dd.mm.yyyy hh24:mi:ss tzr'),

ADD_JOB_FREE_STUFF	PROCEDURE	16	      repeat_interval   => NULL,

ADD_JOB_FREE_STUFF	PROCEDURE	17	      end_date          => NULL,

ADD_JOB_FREE_STUFF	PROCEDURE	18	      job_class         => 'DEFAULT_JOB_CLASS',

ADD_JOB_FREE_STUFF	PROCEDURE	19	      job_type          => 'PLSQL_BLOCK',

ADD_JOB_FREE_STUFF	PROCEDURE	20	      job_action        =>    'BEGIN pr_free_staff('

ADD_JOB_FREE_STUFF	PROCEDURE	21	                           || TO_CHAR (id_)

ADD_JOB_FREE_STUFF	PROCEDURE	22	                           || '); END;',

ADD_JOB_FREE_STUFF	PROCEDURE	23	      comments          => NULL);

ADD_JOB_FREE_STUFF	PROCEDURE	24	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	25	                                     attribute   => 'RESTARTABLE',

ADD_JOB_FREE_STUFF	PROCEDURE	26	                                     VALUE       => FALSE);

ADD_JOB_FREE_STUFF	PROCEDURE	27	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	28	                                          attribute   => 'MAX_FAILURES');

ADD_JOB_FREE_STUFF	PROCEDURE	29	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	30	                                          attribute   => 'MAX_RUNS');

ADD_JOB_FREE_STUFF	PROCEDURE	31	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	32	                                     attribute   => 'JOB_PRIORITY',

ADD_JOB_FREE_STUFF	PROCEDURE	33	                                     VALUE       => 3);

ADD_JOB_FREE_STUFF	PROCEDURE	34	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	35	                                          attribute   => 'SCHEDULE_LIMIT');

ADD_JOB_FREE_STUFF	PROCEDURE	36	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	37	                                     attribute   => 'AUTO_DROP',

ADD_JOB_FREE_STUFF	PROCEDURE	38	                                     VALUE       => TRUE);

ADD_JOB_FREE_STUFF	PROCEDURE	39	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (

ADD_JOB_FREE_STUFF	PROCEDURE	40	      name        => job_id,

ADD_JOB_FREE_STUFF	PROCEDURE	41	      attribute   => 'LOGGING_LEVEL',

ADD_JOB_FREE_STUFF	PROCEDURE	42	      VALUE       => SYS.DBMS_SCHEDULER.LOGGING_FULL);

ADD_JOB_FREE_STUFF	PROCEDURE	43	   SYS.DBMS_SCHEDULER.ENABLE (name => job_id);

ADD_JOB_FREE_STUFF	PROCEDURE	44	END;
ADD_JOB	PROCEDURE	1	PROCEDURE        "ADD_JOB" (add_hours   IN FLOAT,

ADD_JOB	PROCEDURE	2	                                              action      IN VARCHAR2)

ADD_JOB	PROCEDURE	3	IS

ADD_JOB	PROCEDURE	4	   job_id   VARCHAR2 (32);

ADD_JOB	PROCEDURE	5	BEGIN

ADD_JOB	PROCEDURE	6	   job_id := 'PERSIK.job_' || seq_all.NEXTVAL;

ADD_JOB	PROCEDURE	7	   SYS.DBMS_SCHEDULER.CREATE_JOB (

ADD_JOB	PROCEDURE	8	      job_name          => job_id,

ADD_JOB	PROCEDURE	9	      start_date        => TO_TIMESTAMP_TZ (

ADD_JOB	PROCEDURE	10	                             TO_CHAR (SYSDATE + add_hours / 24,

ADD_JOB	PROCEDURE	11	                                      'dd.mm.yyyy hh24:mi:ss'),

ADD_JOB	PROCEDURE	12	                             'dd.mm.yyyy hh24:mi:ss tzr'),

ADD_JOB	PROCEDURE	13	      repeat_interval   => NULL,

ADD_JOB	PROCEDURE	14	      end_date          => NULL,

ADD_JOB	PROCEDURE	15	      job_class         => 'DEFAULT_JOB_CLASS',

ADD_JOB	PROCEDURE	16	      job_type          => 'PLSQL_BLOCK',

ADD_JOB	PROCEDURE	17	      job_action        => action,

ADD_JOB	PROCEDURE	18	      comments          => NULL);

ADD_JOB	PROCEDURE	19	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB	PROCEDURE	20	                                     attribute   => 'RESTARTABLE',

ADD_JOB	PROCEDURE	21	                                     VALUE       => FALSE);

ADD_JOB	PROCEDURE	22	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB	PROCEDURE	23	                                          attribute   => 'MAX_FAILURES');

ADD_JOB	PROCEDURE	24	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB	PROCEDURE	25	                                          attribute   => 'MAX_RUNS');

ADD_JOB	PROCEDURE	26	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB	PROCEDURE	27	                                     attribute   => 'JOB_PRIORITY',

ADD_JOB	PROCEDURE	28	                                     VALUE       => 3);

ADD_JOB	PROCEDURE	29	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (name        => job_id,

ADD_JOB	PROCEDURE	30	                                          attribute   => 'SCHEDULE_LIMIT');

ADD_JOB	PROCEDURE	31	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (name        => job_id,

ADD_JOB	PROCEDURE	32	                                     attribute   => 'AUTO_DROP',

ADD_JOB	PROCEDURE	33	                                     VALUE       => TRUE);

ADD_JOB	PROCEDURE	34	   SYS.DBMS_SCHEDULER.SET_ATTRIBUTE (

ADD_JOB	PROCEDURE	35	      name        => job_id,

ADD_JOB	PROCEDURE	36	      attribute   => 'LOGGING_LEVEL',

ADD_JOB	PROCEDURE	37	      VALUE       => SYS.DBMS_SCHEDULER.LOGGING_FULL);

ADD_JOB	PROCEDURE	38	   SYS.DBMS_SCHEDULER.ENABLE (name => job_id);

ADD_JOB	PROCEDURE	39	END;
AC_TEST_OFF	PROCEDURE	1	PROCEDURE        AC_TEST_OFF (id_ IN INTEGER)

AC_TEST_OFF	PROCEDURE	2	IS

AC_TEST_OFF	PROCEDURE	3	   tn_           INTEGER;

AC_TEST_OFF	PROCEDURE	4	   tr_name_      VARCHAR2 (1024);

AC_TEST_OFF	PROCEDURE	5	   fio_          VARCHAR2 (1024);

AC_TEST_OFF	PROCEDURE	6	   mail_         VARCHAR2 (1024);

AC_TEST_OFF	PROCEDURE	7	   chief_mail_   VARCHAR2 (1024);

AC_TEST_OFF	PROCEDURE	8	   tr_mail_      VARCHAR2 (1024);

AC_TEST_OFF	PROCEDURE	9	   test_         INTEGER;

AC_TEST_OFF	PROCEDURE	10	BEGIN

AC_TEST_OFF	PROCEDURE	11	   SELECT b.tn,

AC_TEST_OFF	PROCEDURE	12	          tr.name,

AC_TEST_OFF	PROCEDURE	13	          u1.fio,

AC_TEST_OFF	PROCEDURE	14	          u1.e_mail,

AC_TEST_OFF	PROCEDURE	15	          u2.e_mail,

AC_TEST_OFF	PROCEDURE	16	          b.test,

AC_TEST_OFF	PROCEDURE	17	          u3.e_mail

AC_TEST_OFF	PROCEDURE	18	     INTO tn_,

AC_TEST_OFF	PROCEDURE	19	          tr_name_,

AC_TEST_OFF	PROCEDURE	20	          fio_,

AC_TEST_OFF	PROCEDURE	21	          mail_,

AC_TEST_OFF	PROCEDURE	22	          chief_mail_,

AC_TEST_OFF	PROCEDURE	23	          test_,

AC_TEST_OFF	PROCEDURE	24	          tr_mail_

AC_TEST_OFF	PROCEDURE	25	     FROM tr_order_body b,

AC_TEST_OFF	PROCEDURE	26	          tr_order_head h,

AC_TEST_OFF	PROCEDURE	27	          tr,

AC_TEST_OFF	PROCEDURE	28	          user_list u1,

AC_TEST_OFF	PROCEDURE	29	          user_list u2,

AC_TEST_OFF	PROCEDURE	30	          user_list u3,

AC_TEST_OFF	PROCEDURE	31	          parents p

AC_TEST_OFF	PROCEDURE	32	    WHERE h.id = b.head AND tr.id = h.tr AND u1.tn = b.tn AND p.tn = b.tn AND u2.tn = p.parent AND u3.tn = h.tn AND b.id = id_;

AC_TEST_OFF	PROCEDURE	33	

AC_TEST_OFF	PROCEDURE	34	   IF test_ = 1

AC_TEST_OFF	PROCEDURE	35	   THEN

AC_TEST_OFF	PROCEDURE	36	      UPDATE ac_memb_ext

AC_TEST_OFF	PROCEDURE	37	         SET logic_test = 3

AC_TEST_OFF	PROCEDURE	38	       WHERE id = id_;

AC_TEST_OFF	PROCEDURE	39	

AC_TEST_OFF	PROCEDURE	40	      pr_sendmail (

AC_TEST_OFF	PROCEDURE	41	         mail_,

AC_TEST_OFF	PROCEDURE	42	         'Тестирование',

AC_TEST_OFF	PROCEDURE	43	         'Вы не прошли в установленный срок тестирование по тренингу ' || tr_name_

AC_TEST_OFF	PROCEDURE	44	         || '. <br />Ссылка для прохождения тестирования – неактивна. Для прохождения тестирования Вам необходимо связаться с тренером, проводившим тренинг, и согласовать время активации теста');

AC_TEST_OFF	PROCEDURE	45	      pr_sendmail (chief_mail_ || ',' || tr_mail_,

AC_TEST_OFF	PROCEDURE	46	                   'Тестирование сотрудника ' || fio_ || ' – не проходил тестирование',

AC_TEST_OFF	PROCEDURE	47	                   'Сотрудник ' || fio_ || ' не прошел в установленный срок тестирование по тренингу ' || tr_name_);

AC_TEST_OFF	PROCEDURE	48	   END IF;

AC_TEST_OFF	PROCEDURE	49	END;
ACT_OK_UPD_OK_TRAID	TRIGGER	1	TRIGGER ACT_OK_UPD_OK_TRAID

ACT_OK_UPD_OK_TRAID	TRIGGER	2	   BEFORE INSERT OR UPDATE OF ok_traid

ACT_OK_UPD_OK_TRAID	TRIGGER	3	   ON ACT_OK

ACT_OK_UPD_OK_TRAID	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ACT_OK_UPD_OK_TRAID	TRIGGER	5	   FOR EACH ROW

ACT_OK_UPD_OK_TRAID	TRIGGER	6	BEGIN

ACT_OK_UPD_OK_TRAID	TRIGGER	7	   IF :new.ok_traid = 1

ACT_OK_UPD_OK_TRAID	TRIGGER	8	   THEN

ACT_OK_UPD_OK_TRAID	TRIGGER	9	      :new.ok_traid_lu := SYSDATE;

ACT_OK_UPD_OK_TRAID	TRIGGER	10	   ELSE

ACT_OK_UPD_OK_TRAID	TRIGGER	11	      :new.ok_traid := NULL;

ACT_OK_UPD_OK_TRAID	TRIGGER	12	      :new.ok_traid_lu := NULL;

ACT_OK_UPD_OK_TRAID	TRIGGER	13	      :new.ok_traid_fio := NULL;

ACT_OK_UPD_OK_TRAID	TRIGGER	14	      :new.rec_count := NULL;

ACT_OK_UPD_OK_TRAID	TRIGGER	15	      :new.sum_bonus := NULL;

ACT_OK_UPD_OK_TRAID	TRIGGER	16	      :new.sum_files := NULL;

ACT_OK_UPD_OK_TRAID	TRIGGER	17	   END IF;

ACT_OK_UPD_OK_TRAID	TRIGGER	18	END;
ACT_OK_NEW	TRIGGER	1	TRIGGER ACT_OK_NEW

ACT_OK_NEW	TRIGGER	2	   BEFORE INSERT

ACT_OK_NEW	TRIGGER	3	   ON ACT_OK

ACT_OK_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ACT_OK_NEW	TRIGGER	5	   FOR EACH ROW

ACT_OK_NEW	TRIGGER	6	DECLARE

ACT_OK_NEW	TRIGGER	7	   db_fio       VARCHAR2 (255);

ACT_OK_NEW	TRIGGER	8	   v_mt         VARCHAR2 (255);

ACT_OK_NEW	TRIGGER	9	   v_act_name   VARCHAR2 (255);

ACT_OK_NEW	TRIGGER	10	   v_act        VARCHAR2 (255);

ACT_OK_NEW	TRIGGER	11	BEGIN

ACT_OK_NEW	TRIGGER	12	   :NEW.id := seq_all.NEXTVAL;

ACT_OK_NEW	TRIGGER	13	   :NEW.lu := SYSDATE;

ACT_OK_NEW	TRIGGER	14	

ACT_OK_NEW	TRIGGER	15	   SELECT fio

ACT_OK_NEW	TRIGGER	16	     INTO db_fio

ACT_OK_NEW	TRIGGER	17	     FROM user_list

ACT_OK_NEW	TRIGGER	18	    WHERE tn = :new.tn;

ACT_OK_NEW	TRIGGER	19	

ACT_OK_NEW	TRIGGER	20	   SELECT mt

ACT_OK_NEW	TRIGGER	21	     INTO v_mt

ACT_OK_NEW	TRIGGER	22	     FROM calendar

ACT_OK_NEW	TRIGGER	23	    WHERE my = :new.m AND ROWNUM = 1;

ACT_OK_NEW	TRIGGER	24	

ACT_OK_NEW	TRIGGER	25	   SELECT act_name, act

ACT_OK_NEW	TRIGGER	26	     INTO v_act_name, v_act

ACT_OK_NEW	TRIGGER	27	     FROM bud_act_fund

ACT_OK_NEW	TRIGGER	28	    WHERE act = :new.act AND TO_NUMBER (TO_CHAR (act_month, 'mm')) = :new.m;

ACT_OK_NEW	TRIGGER	29	

ACT_OK_NEW	TRIGGER	30	   FOR a IN (SELECT e_mail

ACT_OK_NEW	TRIGGER	31	               FROM user_list

ACT_OK_NEW	TRIGGER	32	              WHERE     is_traid = 1

ACT_OK_NEW	TRIGGER	33	                    AND dpt_id = (SELECT dpt_id

ACT_OK_NEW	TRIGGER	34	                                    FROM user_list

ACT_OK_NEW	TRIGGER	35	                                   WHERE tn = :new.tn))

ACT_OK_NEW	TRIGGER	36	   LOOP

ACT_OK_NEW	TRIGGER	37	      PR_SENDMAIL (

ACT_OK_NEW	TRIGGER	38	         a.e_mail,

ACT_OK_NEW	TRIGGER	39	            'Закончен отчет по акции "'

ACT_OK_NEW	TRIGGER	40	         || v_act_name

ACT_OK_NEW	TRIGGER	41	         || '" '

ACT_OK_NEW	TRIGGER	42	         || v_mt

ACT_OK_NEW	TRIGGER	43	         || ', держатель бюджета - '

ACT_OK_NEW	TRIGGER	44	         || db_fio,

ACT_OK_NEW	TRIGGER	45	            db_fio

ACT_OK_NEW	TRIGGER	46	         || ' закончил отчет по акции "'

ACT_OK_NEW	TRIGGER	47	         || v_act_name

ACT_OK_NEW	TRIGGER	48	         || '" '

ACT_OK_NEW	TRIGGER	49	         || v_mt

ACT_OK_NEW	TRIGGER	50	         || '. Дата завершения отчета - '

ACT_OK_NEW	TRIGGER	51	         || TO_CHAR (:new.lu, 'dd/mm/yyyy hh24:mi:ss')

ACT_OK_NEW	TRIGGER	52	         || '.<br />Для дальнейшей работы необходимо перейти по '

ACT_OK_NEW	TRIGGER	53	         || '<a href="https://ps.avk.ua/?action='

ACT_OK_NEW	TRIGGER	54	         || v_act

ACT_OK_NEW	TRIGGER	55	         || '_report_v6='

ACT_OK_NEW	TRIGGER	56	         || :new.m

ACT_OK_NEW	TRIGGER	57	         || '">ссылке</a>');

ACT_OK_NEW	TRIGGER	58	   END LOOP;

ACT_OK_NEW	TRIGGER	59	END;
ACT_FILES_NEW	TRIGGER	1	TRIGGER ACT_FILES_NEW

ACT_FILES_NEW	TRIGGER	2	   BEFORE INSERT

ACT_FILES_NEW	TRIGGER	3	   ON ACT_FILES

ACT_FILES_NEW	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ACT_FILES_NEW	TRIGGER	5	   FOR EACH ROW

ACT_FILES_NEW	TRIGGER	6	BEGIN

ACT_FILES_NEW	TRIGGER	7	   :NEW.id := seq_all.NEXTVAL;

ACT_FILES_NEW	TRIGGER	8	END ACT_FILES_new;
ACT_FILES_LU	TRIGGER	1	TRIGGER ACT_FILES_LU

ACT_FILES_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

ACT_FILES_LU	TRIGGER	3	   ON ACT_FILES

ACT_FILES_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

ACT_FILES_LU	TRIGGER	5	   FOR EACH ROW

ACT_FILES_LU	TRIGGER	6	BEGIN

ACT_FILES_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

ACT_FILES_LU	TRIGGER	8	END ACT_FILES_lu;
A18TO_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A18TO_MV_Q_ADD

A18TO_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A18TO_MV_Q_ADD	TRIGGER	3	   ON PERSIK.A18TO

A18TO_MV_Q_ADD	TRIGGER	4	BEGIN

A18TO_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A18TO_MV_ST');

A18TO_MV_Q_ADD	TRIGGER	6	END;
A18TOZST_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A18TOZST_MV_Q_ADD

A18TOZST_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A18TOZST_MV_Q_ADD	TRIGGER	3	   ON PERSIK.A18TOzst

A18TOZST_MV_Q_ADD	TRIGGER	4	BEGIN

A18TOZST_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A18TO_MV_ST');

A18TOZST_MV_Q_ADD	TRIGGER	6	END;
A18TOTP_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A18TOTP_MV_Q_ADD

A18TOTP_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A18TOTP_MV_Q_ADD	TRIGGER	3	   ON PERSIK.A18TOtp

A18TOTP_MV_Q_ADD	TRIGGER	4	BEGIN

A18TOTP_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A18TO_MV_ST');

A18TOTP_MV_Q_ADD	TRIGGER	6	END;
A18TOGETTARGETINFO	FUNCTION	1	FUNCTION        A18TOGetTargetInfo (tp_kod_   IN VARCHAR,

A18TOGETTARGETINFO	FUNCTION	2	                                                      visit_    IN DATE)

A18TOGETTARGETINFO	FUNCTION	3	   RETURN VARCHAR

A18TOGETTARGETINFO	FUNCTION	4	IS

A18TOGETTARGETINFO	FUNCTION	5	   res   VARCHAR (255);

A18TOGETTARGETINFO	FUNCTION	6	BEGIN

A18TOGETTARGETINFO	FUNCTION	7	   BEGIN

A18TOGETTARGETINFO	FUNCTION	8	        SELECT target_info

A18TOGETTARGETINFO	FUNCTION	9	          INTO res

A18TOGETTARGETINFO	FUNCTION	10	          FROM A18TO

A18TOGETTARGETINFO	FUNCTION	11	         WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_ AND ROWNUM = 1

A18TOGETTARGETINFO	FUNCTION	12	      ORDER BY visitdate DESC;

A18TOGETTARGETINFO	FUNCTION	13	

A18TOGETTARGETINFO	FUNCTION	14	      RETURN (res);

A18TOGETTARGETINFO	FUNCTION	15	   EXCEPTION

A18TOGETTARGETINFO	FUNCTION	16	      WHEN NO_DATA_FOUND

A18TOGETTARGETINFO	FUNCTION	17	      THEN

A18TOGETTARGETINFO	FUNCTION	18	         RETURN ('');

A18TOGETTARGETINFO	FUNCTION	19	   END;

A18TOGETTARGETINFO	FUNCTION	20	END;
A18TOGETTARGET	FUNCTION	1	FUNCTION        A18TOGetTarget (tp_kod_   IN VARCHAR,

A18TOGETTARGET	FUNCTION	2	                                                  visit_    IN DATE)

A18TOGETTARGET	FUNCTION	3	   RETURN INTEGER

A18TOGETTARGET	FUNCTION	4	IS

A18TOGETTARGET	FUNCTION	5	   res   INTEGER;

A18TOGETTARGET	FUNCTION	6	BEGIN

A18TOGETTARGET	FUNCTION	7	   BEGIN

A18TOGETTARGET	FUNCTION	8	        SELECT target

A18TOGETTARGET	FUNCTION	9	          INTO res

A18TOGETTARGET	FUNCTION	10	          FROM A18TO

A18TOGETTARGET	FUNCTION	11	         WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_ AND ROWNUM = 1

A18TOGETTARGET	FUNCTION	12	      ORDER BY visitdate DESC;

A18TOGETTARGET	FUNCTION	13	

A18TOGETTARGET	FUNCTION	14	

A18TOGETTARGET	FUNCTION	15	

A18TOGETTARGET	FUNCTION	16	      RETURN (res);

A18TOGETTARGET	FUNCTION	17	   EXCEPTION

A18TOGETTARGET	FUNCTION	18	      WHEN NO_DATA_FOUND

A18TOGETTARGET	FUNCTION	19	      THEN

A18TOGETTARGET	FUNCTION	20	         RETURN (0);

A18TOGETTARGET	FUNCTION	21	   END;

A18TOGETTARGET	FUNCTION	22	END;
A1808SB5_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808sb5_TP_SELECT_LU

A1808SB5_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808SB5_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808sb5_TP_SELECT

A1808SB5_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808SB5_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808SB5_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808SB5_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808SB5_TP_SELECT_LU	TRIGGER	8	END a1808sb5_tp_select_lu;
A1808SB5_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1808sb5_TP_SELECT_DEL

A1808SB5_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808SB5_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1808sb5_TP_SELECT

A1808SB5_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808SB5_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808SB5_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808SB5_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1808sb5_ACTION_NAKL

A1808SB5_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808SB5_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1808sb5

A1808SB5_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808SB5_TP_SELECT_DEL	TRIGGER	11	END;
A1808SB5_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1808sb5_ACTION_NAKL_LU

A1808SB5_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808SB5_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1808sb5_ACTION_NAKL

A1808SB5_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808SB5_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808SB5_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808SB5_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808SB5_ACTION_NAKL_LU	TRIGGER	8	END a1808sb5_ACTION_NAKL_lu;
A1808SB5_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1808sb5_ACTION_NAKL_IF1

A1808SB5_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808SB5_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1808sb5_ACTION_NAKL

A1808SB5_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808SB5_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808SB5_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1808SB5_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808SB5_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808SB5_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808SB5_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808SB5_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808SB5_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808SB5_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808sb5_ACTION_NAKL_BONUS_DT1

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808sb5_ACTION_NAKL

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808SB5_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1808RS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1808rs_TP_SELECT_LU

A1808RS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808RS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1808rs_TP_SELECT

A1808RS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808RS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808RS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808RS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808RS_TP_SELECT_LU	TRIGGER	8	END A1808rs_tp_select_lu;
A1808RS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1808rs_TP_SELECT_DEL

A1808RS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808RS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1808rs_TP_SELECT

A1808RS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808RS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808RS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808RS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1808rs_ACTION_NAKL

A1808RS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808RS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1808rs

A1808RS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808RS_TP_SELECT_DEL	TRIGGER	11	END;
A1808RS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1808rs_ACTION_NAKL_LU

A1808RS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808RS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1808rs_ACTION_NAKL

A1808RS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808RS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808RS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808RS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808RS_ACTION_NAKL_LU	TRIGGER	8	END A1808rs_ACTION_NAKL_lu;
A1808RS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1808rs_ACTION_NAKL_IF1

A1808RS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808RS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1808rs_ACTION_NAKL

A1808RS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808RS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808RS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1808RS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808RS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808RS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808RS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808RS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808RS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808RS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1808rs_ACTION_NAKL_BONUS_DT1

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1808rs_ACTION_NAKL

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808RS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1808MS2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808ms2_TP_SELECT_LU

A1808MS2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MS2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808ms2_TP_SELECT

A1808MS2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808MS2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808MS2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MS2_TP_SELECT_LU	TRIGGER	8	END a1808ms2_tp_select_lu;
A1808MS2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1808ms2_TP_SELECT_DEL

A1808MS2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808MS2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1808ms2_TP_SELECT

A1808MS2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808MS2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808MS2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808MS2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1808ms2_ACTION_NAKL

A1808MS2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808MS2_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1808ms2

A1808MS2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808MS2_TP_SELECT_DEL	TRIGGER	11	END;
A1808MS2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1808ms2_ACTION_NAKL_LU

A1808MS2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MS2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1808ms2_ACTION_NAKL

A1808MS2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808MS2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808MS2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MS2_ACTION_NAKL_LU	TRIGGER	8	END a1808ms2_ACTION_NAKL_lu;
A1808MS2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1808ms2_ACTION_NAKL_IF1

A1808MS2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808MS2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1808ms2_ACTION_NAKL

A1808MS2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808MS2_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1808MS2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808MS2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808MS2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MS2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MS2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808MS2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808MS2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808ms2_ACTION_NAKL_BONUS_DT1

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808ms2_ACTION_NAKL

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1808MS1_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808ms1_TP_SELECT_LU

A1808MS1_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MS1_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808ms1_TP_SELECT

A1808MS1_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS1_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808MS1_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808MS1_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MS1_TP_SELECT_LU	TRIGGER	8	END a1808ms1_tp_select_lu;
A1808MS1_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1808ms1_TP_SELECT_DEL

A1808MS1_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808MS1_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1808ms1_TP_SELECT

A1808MS1_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808MS1_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808MS1_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808MS1_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1808ms1_ACTION_NAKL

A1808MS1_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808MS1_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1808ms1

A1808MS1_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808MS1_TP_SELECT_DEL	TRIGGER	11	END;
A1808MS1_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1808ms1_ACTION_NAKL_LU

A1808MS1_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MS1_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1808ms1_ACTION_NAKL

A1808MS1_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS1_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808MS1_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808MS1_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MS1_ACTION_NAKL_LU	TRIGGER	8	END a1808ms1_ACTION_NAKL_lu;
A1808MS1_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1808ms1_ACTION_NAKL_IF1

A1808MS1_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808MS1_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1808ms1_ACTION_NAKL

A1808MS1_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS1_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808MS1_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1808MS1_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808MS1_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808MS1_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MS1_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MS1_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808MS1_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808MS1_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808ms1_ACTION_NAKL_BONUS_DT1

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808ms1_ACTION_NAKL

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1808MP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808mp_SELECT_LU

A1808MP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808mp_SELECT

A1808MP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808MP_SELECT_LU	TRIGGER	6	BEGIN

A1808MP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MP_SELECT_LU	TRIGGER	8	END a1808mp_SELECT_lu;
A1808MP_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808mp_SELECT_BONUS_DT1

A1808MP_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808MP_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808mp_SELECT

A1808MP_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MP_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808MP_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1808MP_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808MP_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1808MP_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MP_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1808MP_SELECT_BONUS_DT1	TRIGGER	11	END;
A1808MH3_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808mh3_TP_SELECT_LU

A1808MH3_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MH3_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808mh3_TP_SELECT

A1808MH3_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH3_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808MH3_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808MH3_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MH3_TP_SELECT_LU	TRIGGER	8	END a1808mh3_tp_select_lu;
A1808MH3_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1808mh3_TP_SELECT_DEL

A1808MH3_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808MH3_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1808mh3_TP_SELECT

A1808MH3_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808MH3_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808MH3_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808MH3_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1808mh3_ACTION_NAKL

A1808MH3_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808MH3_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1808mh3

A1808MH3_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808MH3_TP_SELECT_DEL	TRIGGER	11	END;
A1808MH3_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1808mh3_ACTION_NAKL_LU

A1808MH3_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MH3_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1808mh3_ACTION_NAKL

A1808MH3_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH3_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808MH3_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808MH3_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MH3_ACTION_NAKL_LU	TRIGGER	8	END a1808mh3_ACTION_NAKL_lu;
A1808MH3_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1808mh3_ACTION_NAKL_IF1

A1808MH3_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808MH3_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1808mh3_ACTION_NAKL

A1808MH3_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH3_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808MH3_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1808MH3_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808MH3_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808MH3_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MH3_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MH3_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808MH3_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808MH3_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808mh3_ACTION_NAKL_BONUS_DT1

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808mh3_ACTION_NAKL

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808MH3_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1808MH2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808mh2_TP_SELECT_LU

A1808MH2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MH2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808mh2_TP_SELECT

A1808MH2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808MH2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808MH2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MH2_TP_SELECT_LU	TRIGGER	8	END a1808mh2_tp_select_lu;
A1808MH2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1808mh2_TP_SELECT_DEL

A1808MH2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808MH2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1808mh2_TP_SELECT

A1808MH2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808MH2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808MH2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808MH2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1808mh2_ACTION_NAKL

A1808MH2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808MH2_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1808mh2

A1808MH2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808MH2_TP_SELECT_DEL	TRIGGER	11	END;
A1808MH2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1808mh2_ACTION_NAKL_LU

A1808MH2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MH2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1808mh2_ACTION_NAKL

A1808MH2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808MH2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808MH2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MH2_ACTION_NAKL_LU	TRIGGER	8	END a1808mh2_ACTION_NAKL_lu;
A1808MH2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1808mh2_ACTION_NAKL_IF1

A1808MH2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808MH2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1808mh2_ACTION_NAKL

A1808MH2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808MH2_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1808MH2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808MH2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808MH2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MH2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MH2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808MH2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808MH2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808mh2_ACTION_NAKL_BONUS_DT1

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808mh2_ACTION_NAKL

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808MH2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1808MH1_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1808mh1_TP_SELECT_LU

A1808MH1_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MH1_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1808mh1_TP_SELECT

A1808MH1_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH1_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1808MH1_TP_SELECT_LU	TRIGGER	6	BEGIN

A1808MH1_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MH1_TP_SELECT_LU	TRIGGER	8	END a1808mh1_tp_select_lu;
A1808MH1_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1808mh1_TP_SELECT_DEL

A1808MH1_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1808MH1_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1808mh1_TP_SELECT

A1808MH1_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1808MH1_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1808MH1_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1808MH1_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1808mh1_ACTION_NAKL

A1808MH1_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1808MH1_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1808mh1

A1808MH1_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1808MH1_TP_SELECT_DEL	TRIGGER	11	END;
A1808MH1_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1808mh1_ACTION_NAKL_LU

A1808MH1_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1808MH1_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1808mh1_ACTION_NAKL

A1808MH1_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH1_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1808MH1_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1808MH1_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1808MH1_ACTION_NAKL_LU	TRIGGER	8	END a1808mh1_ACTION_NAKL_lu;
A1808MH1_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1808mh1_ACTION_NAKL_IF1

A1808MH1_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1808MH1_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1808mh1_ACTION_NAKL

A1808MH1_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH1_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1808MH1_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1808MH1_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1808MH1_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1808MH1_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MH1_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MH1_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1808MH1_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1808MH1_ACTION_NAKL_IF1	TRIGGER	13	END;
A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1808mh1_ACTION_NAKL_BONUS_DT1

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1808mh1_ACTION_NAKL

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1808MH1_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807SS2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807ss2_TP_SELECT_LU

A1807SS2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SS2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807ss2_TP_SELECT

A1807SS2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807SS2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807SS2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SS2_TP_SELECT_LU	TRIGGER	8	END A1807ss2_tp_select_lu;
A1807SS2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807ss2_TP_SELECT_DEL

A1807SS2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807SS2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807ss2_TP_SELECT

A1807SS2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807SS2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807SS2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807SS2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807ss2_ACTION_NAKL

A1807SS2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807SS2_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807ss2

A1807SS2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807SS2_TP_SELECT_DEL	TRIGGER	11	END;
A1807SS2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807ss2_ACTION_NAKL_LU

A1807SS2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SS2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807ss2_ACTION_NAKL

A1807SS2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807SS2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807SS2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SS2_ACTION_NAKL_LU	TRIGGER	8	END A1807ss2_ACTION_NAKL_lu;
A1807SS2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807ss2_ACTION_NAKL_IF1

A1807SS2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807SS2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807ss2_ACTION_NAKL

A1807SS2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807SS2_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807SS2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807SS2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807SS2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SS2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SS2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807SS2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807SS2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807ss2_ACTION_NAKL_BONUS_DT1

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807ss2_ACTION_NAKL

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807SS1_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807ss1_TP_SELECT_LU

A1807SS1_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SS1_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807ss1_TP_SELECT

A1807SS1_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS1_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807SS1_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807SS1_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SS1_TP_SELECT_LU	TRIGGER	8	END A1807ss1_tp_select_lu;
A1807SS1_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807ss1_TP_SELECT_DEL

A1807SS1_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807SS1_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807ss1_TP_SELECT

A1807SS1_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807SS1_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807SS1_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807SS1_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807ss1_ACTION_NAKL

A1807SS1_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807SS1_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807ss1

A1807SS1_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807SS1_TP_SELECT_DEL	TRIGGER	11	END;
A1807SS1_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807ss1_ACTION_NAKL_LU

A1807SS1_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SS1_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807ss1_ACTION_NAKL

A1807SS1_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS1_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807SS1_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807SS1_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SS1_ACTION_NAKL_LU	TRIGGER	8	END A1807ss1_ACTION_NAKL_lu;
A1807SS1_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807ss1_ACTION_NAKL_IF1

A1807SS1_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807SS1_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807ss1_ACTION_NAKL

A1807SS1_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS1_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807SS1_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807SS1_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807SS1_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807SS1_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SS1_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SS1_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807SS1_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807SS1_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807ss1_ACTION_NAKL_BONUS_DT1

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807ss1_ACTION_NAKL

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807SS1_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807SC_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807sc_TP_SELECT_LU

A1807SC_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SC_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807sc_TP_SELECT

A1807SC_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807SC_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807SC_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SC_TP_SELECT_LU	TRIGGER	8	END A1807sc_tp_select_lu;
A1807SC_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807sc_TP_SELECT_DEL

A1807SC_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807SC_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807sc_TP_SELECT

A1807SC_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807SC_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807SC_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807SC_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807sc_ACTION_NAKL

A1807SC_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807SC_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807sc

A1807SC_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807SC_TP_SELECT_DEL	TRIGGER	11	END;
A1807SC_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807sc_ACTION_NAKL_LU

A1807SC_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SC_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807sc_ACTION_NAKL

A1807SC_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807SC_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807SC_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SC_ACTION_NAKL_LU	TRIGGER	8	END A1807sc_ACTION_NAKL_lu;
A1807SC_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807sc_ACTION_NAKL_IF1

A1807SC_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807SC_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807sc_ACTION_NAKL

A1807SC_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807SC_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807SC_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807SC_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807SC_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SC_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SC_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807SC_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807SC_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807sc_ACTION_NAKL_BONUS_DT1

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807sc_ACTION_NAKL

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807SC_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807SC2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807SC2_TP_SELECT_LU

A1807SC2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SC2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807SC2_TP_SELECT

A1807SC2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807SC2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807SC2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SC2_TP_SELECT_LU	TRIGGER	8	END A1807SC2_tp_select_lu;
A1807SC2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807SC2_TP_SELECT_DEL

A1807SC2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807SC2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807SC2_TP_SELECT

A1807SC2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807SC2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807SC2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807SC2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807SC2_ACTION_NAKL

A1807SC2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807SC2_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807SC2

A1807SC2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807SC2_TP_SELECT_DEL	TRIGGER	11	END;
A1807SC2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807SC2_ACTION_NAKL_LU

A1807SC2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SC2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807SC2_ACTION_NAKL

A1807SC2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807SC2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807SC2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SC2_ACTION_NAKL_LU	TRIGGER	8	END A1807SC2_ACTION_NAKL_lu;
A1807SC2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807SC2_ACTION_NAKL_IF1

A1807SC2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807SC2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807SC2_ACTION_NAKL

A1807SC2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807SC2_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807SC2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807SC2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807SC2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SC2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SC2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807SC2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807SC2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807SC2_ACTION_NAKL_BONUS_DT1

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807SC2_ACTION_NAKL

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807SC2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807SB4_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807SB4_TP_SELECT_LU

A1807SB4_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SB4_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807SB4_TP_SELECT

A1807SB4_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SB4_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807SB4_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807SB4_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SB4_TP_SELECT_LU	TRIGGER	8	END A1807SB4_tp_select_lu;
A1807SB4_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807SB4_TP_SELECT_DEL

A1807SB4_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807SB4_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807SB4_TP_SELECT

A1807SB4_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807SB4_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807SB4_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807SB4_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807SB4_ACTION_NAKL

A1807SB4_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807SB4_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807SB4

A1807SB4_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807SB4_TP_SELECT_DEL	TRIGGER	11	END;
A1807SB4_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807SB4_ACTION_NAKL_LU

A1807SB4_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807SB4_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807SB4_ACTION_NAKL

A1807SB4_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SB4_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807SB4_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807SB4_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807SB4_ACTION_NAKL_LU	TRIGGER	8	END A1807SB4_ACTION_NAKL_lu;
A1807SB4_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807SB4_ACTION_NAKL_IF1

A1807SB4_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807SB4_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807SB4_ACTION_NAKL

A1807SB4_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SB4_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807SB4_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807SB4_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807SB4_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807SB4_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SB4_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SB4_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807SB4_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807SB4_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807SB4_ACTION_NAKL_BONUS_DT1

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807SB4_ACTION_NAKL

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807SB4_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807MS2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807ms2_TP_SELECT_LU

A1807MS2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807MS2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807ms2_TP_SELECT

A1807MS2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807MS2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807MS2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807MS2_TP_SELECT_LU	TRIGGER	8	END A1807ms2_tp_select_lu;
A1807MS2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807ms2_TP_SELECT_DEL

A1807MS2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807MS2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807ms2_TP_SELECT

A1807MS2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807MS2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807MS2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807MS2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807ms2_ACTION_NAKL

A1807MS2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807MS2_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807ms2

A1807MS2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807MS2_TP_SELECT_DEL	TRIGGER	11	END;
A1807MS2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807ms2_ACTION_NAKL_LU

A1807MS2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807MS2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807ms2_ACTION_NAKL

A1807MS2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807MS2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807MS2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807MS2_ACTION_NAKL_LU	TRIGGER	8	END A1807ms2_ACTION_NAKL_lu;
A1807MS2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807ms2_ACTION_NAKL_IF1

A1807MS2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807MS2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807ms2_ACTION_NAKL

A1807MS2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807MS2_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807MS2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807MS2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807MS2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807MS2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807MS2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807MS2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807MS2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807ms2_ACTION_NAKL_BONUS_DT1

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807ms2_ACTION_NAKL

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807MS2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807MS1_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807ms1_TP_SELECT_LU

A1807MS1_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807MS1_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807ms1_TP_SELECT

A1807MS1_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS1_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807MS1_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807MS1_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807MS1_TP_SELECT_LU	TRIGGER	8	END A1807ms1_tp_select_lu;
A1807MS1_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807ms1_TP_SELECT_DEL

A1807MS1_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807MS1_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807ms1_TP_SELECT

A1807MS1_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807MS1_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807MS1_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807MS1_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807ms1_ACTION_NAKL

A1807MS1_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807MS1_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807ms1

A1807MS1_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807MS1_TP_SELECT_DEL	TRIGGER	11	END;
A1807MS1_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807ms1_ACTION_NAKL_LU

A1807MS1_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807MS1_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807ms1_ACTION_NAKL

A1807MS1_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS1_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807MS1_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807MS1_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807MS1_ACTION_NAKL_LU	TRIGGER	8	END A1807ms1_ACTION_NAKL_lu;
A1807MS1_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807ms1_ACTION_NAKL_IF1

A1807MS1_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807MS1_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807ms1_ACTION_NAKL

A1807MS1_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS1_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807MS1_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807MS1_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1807MS1_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807MS1_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807MS1_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807MS1_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807MS1_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807MS1_ACTION_NAKL_IF1	TRIGGER	13	END;
A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1807ms1_ACTION_NAKL_BONUS_DT1

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1807ms1_ACTION_NAKL

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1807MS1_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1807F_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1807F_TP_SELECT_LU

A1807F_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807F_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1807F_TP_SELECT

A1807F_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807F_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1807F_TP_SELECT_LU	TRIGGER	6	BEGIN

A1807F_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807F_TP_SELECT_LU	TRIGGER	8	END A1807F_tp_select_lu;
A1807F_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1807F_TP_SELECT_DEL

A1807F_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1807F_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1807F_TP_SELECT

A1807F_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1807F_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1807F_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1807F_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1807F_ACTION_NAKL

A1807F_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1807F_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1807F

A1807F_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1807F_TP_SELECT_DEL	TRIGGER	11	END;
A1807F_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1807F_ACTION_NAKL_LU

A1807F_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1807F_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1807F_ACTION_NAKL

A1807F_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807F_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1807F_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1807F_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1807F_ACTION_NAKL_LU	TRIGGER	8	END A1807F_ACTION_NAKL_lu;
A1807F_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1807F_ACTION_NAKL_IF1

A1807F_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1807F_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1807F_ACTION_NAKL

A1807F_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1807F_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1807F_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1807F_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1807F_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1807F_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1807F_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1807F_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1807F_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1807F_ACTION_NAKL_IF1	TRIGGER	13	END;
A1806SS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1806SS_TP_SELECT_LU

A1806SS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1806SS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1806SS_TP_SELECT

A1806SS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1806SS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1806SS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1806SS_TP_SELECT_LU	TRIGGER	8	END A1806SS_tp_select_lu;
A1806SS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1806SS_TP_SELECT_DEL

A1806SS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1806SS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1806SS_TP_SELECT

A1806SS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1806SS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1806SS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1806SS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1806SS_ACTION_NAKL

A1806SS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1806SS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1806SS

A1806SS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1806SS_TP_SELECT_DEL	TRIGGER	11	END;
A1806SS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1806SS_ACTION_NAKL_LU

A1806SS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1806SS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1806SS_ACTION_NAKL

A1806SS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1806SS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1806SS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1806SS_ACTION_NAKL_LU	TRIGGER	8	END A1806SS_ACTION_NAKL_lu;
A1806SS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1806SS_ACTION_NAKL_IF1

A1806SS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1806SS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1806SS_ACTION_NAKL

A1806SS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1806SS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1806SS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1806SS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1806SS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1806SS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1806SS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1806SS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1806SS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1806SS_ACTION_NAKL_BONUS_DT1

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1806SS_ACTION_NAKL

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1806SS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1806SB3_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1806SB3_TP_SELECT_LU

A1806SB3_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1806SB3_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1806SB3_TP_SELECT

A1806SB3_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SB3_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1806SB3_TP_SELECT_LU	TRIGGER	6	BEGIN

A1806SB3_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1806SB3_TP_SELECT_LU	TRIGGER	8	END A1806SB3_tp_select_lu;
A1806SB3_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1806SB3_TP_SELECT_DEL

A1806SB3_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1806SB3_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1806SB3_TP_SELECT

A1806SB3_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1806SB3_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1806SB3_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1806SB3_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1806SB3_ACTION_NAKL

A1806SB3_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1806SB3_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1806SB3

A1806SB3_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1806SB3_TP_SELECT_DEL	TRIGGER	11	END;
A1806SB3_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1806SB3_ACTION_NAKL_LU

A1806SB3_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1806SB3_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1806SB3_ACTION_NAKL

A1806SB3_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SB3_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1806SB3_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1806SB3_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1806SB3_ACTION_NAKL_LU	TRIGGER	8	END A1806SB3_ACTION_NAKL_lu;
A1806SB3_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1806SB3_ACTION_NAKL_IF1

A1806SB3_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1806SB3_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1806SB3_ACTION_NAKL

A1806SB3_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SB3_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1806SB3_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1806SB3_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1806SB3_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1806SB3_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1806SB3_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1806SB3_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1806SB3_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1806SB3_ACTION_NAKL_IF1	TRIGGER	13	END;
A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1806SB3_ACTION_NAKL_BONUS_DT1

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1806SB3_ACTION_NAKL

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1806SB3_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1806CH_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1806CH_SELECT_LU

A1806CH_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1806CH_SELECT_LU	TRIGGER	3	   ON PERSIK.A1806CH_SELECT

A1806CH_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806CH_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1806CH_SELECT_LU	TRIGGER	6	BEGIN

A1806CH_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1806CH_SELECT_LU	TRIGGER	8	END A1806CH_SELECT_lu;
A1806CH_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1806CH_SELECT_BONUS_DT1

A1806CH_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1806CH_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1806CH_SELECT

A1806CH_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1806CH_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1806CH_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1806CH_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1806CH_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1806CH_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1806CH_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1806CH_SELECT_BONUS_DT1	TRIGGER	11	END;
A1805SB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1805SB_TP_SELECT_LU

A1805SB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805SB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1805SB_TP_SELECT

A1805SB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1805SB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1805SB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805SB_TP_SELECT_LU	TRIGGER	8	END A1805SB_tp_select_lu;
A1805SB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1805SB_TP_SELECT_DEL

A1805SB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1805SB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1805SB_TP_SELECT

A1805SB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1805SB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1805SB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1805SB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1805SB_ACTION_NAKL

A1805SB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1805SB_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1805SB

A1805SB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1805SB_TP_SELECT_DEL	TRIGGER	11	END;
A1805SB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1805SB_ACTION_NAKL_LU

A1805SB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805SB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1805SB_ACTION_NAKL

A1805SB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1805SB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1805SB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805SB_ACTION_NAKL_LU	TRIGGER	8	END A1805SB_ACTION_NAKL_lu;
A1805SB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1805SB_ACTION_NAKL_IF1

A1805SB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1805SB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1805SB_ACTION_NAKL

A1805SB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1805SB_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1805SB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1805SB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1805SB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805SB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805SB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1805SB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1805SB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1805SB_ACTION_NAKL_BONUS_DT1

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1805SB_ACTION_NAKL

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1805SB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1805SB2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1805SB2_TP_SELECT_LU

A1805SB2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805SB2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1805SB2_TP_SELECT

A1805SB2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1805SB2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1805SB2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805SB2_TP_SELECT_LU	TRIGGER	8	END A1805SB2_tp_select_lu;
A1805SB2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1805SB2_TP_SELECT_DEL

A1805SB2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1805SB2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1805SB2_TP_SELECT

A1805SB2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1805SB2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1805SB2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1805SB2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1805SB2_ACTION_NAKL

A1805SB2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1805SB2_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1805SB2

A1805SB2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1805SB2_TP_SELECT_DEL	TRIGGER	11	END;
A1805SB2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1805SB2_ACTION_NAKL_LU

A1805SB2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805SB2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1805SB2_ACTION_NAKL

A1805SB2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1805SB2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1805SB2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805SB2_ACTION_NAKL_LU	TRIGGER	8	END A1805SB2_ACTION_NAKL_lu;
A1805SB2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1805SB2_ACTION_NAKL_IF1

A1805SB2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1805SB2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1805SB2_ACTION_NAKL

A1805SB2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1805SB2_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1805SB2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1805SB2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1805SB2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805SB2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805SB2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1805SB2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1805SB2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1805SB2_ACTION_NAKL_BONUS_DT1

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1805SB2_ACTION_NAKL

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1805SB2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1805SA_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1805SA_TP_SELECT_LU

A1805SA_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805SA_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1805SA_TP_SELECT

A1805SA_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SA_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1805SA_TP_SELECT_LU	TRIGGER	6	BEGIN

A1805SA_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805SA_TP_SELECT_LU	TRIGGER	8	END A1805SA_tp_select_lu;
A1805SA_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1805SA_TP_SELECT_DEL

A1805SA_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1805SA_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1805SA_TP_SELECT

A1805SA_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1805SA_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1805SA_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1805SA_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1805SA_ACTION_NAKL

A1805SA_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1805SA_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1805SA

A1805SA_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1805SA_TP_SELECT_DEL	TRIGGER	11	END;
A1805SA_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1805SA_ACTION_NAKL_LU

A1805SA_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805SA_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1805SA_ACTION_NAKL

A1805SA_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SA_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1805SA_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1805SA_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805SA_ACTION_NAKL_LU	TRIGGER	8	END A1805SA_ACTION_NAKL_lu;
A1805SA_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1805SA_ACTION_NAKL_IF1

A1805SA_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1805SA_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1805SA_ACTION_NAKL

A1805SA_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SA_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1805SA_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1805SA_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1805SA_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1805SA_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805SA_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805SA_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1805SA_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1805SA_ACTION_NAKL_IF1	TRIGGER	13	END;
A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1805SA_ACTION_NAKL_BONUS_DT1

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1805SA_ACTION_NAKL

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1805SA_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1805DB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1805DB_TP_SELECT_LU

A1805DB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805DB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1805DB_TP_SELECT

A1805DB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805DB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1805DB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1805DB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805DB_TP_SELECT_LU	TRIGGER	8	END A1805DB_tp_select_lu;
A1805DB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1805DB_TP_SELECT_DEL

A1805DB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1805DB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1805DB_TP_SELECT

A1805DB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1805DB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1805DB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1805DB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1805DB_ACTION_NAKL

A1805DB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1805DB_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1805DB

A1805DB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1805DB_TP_SELECT_DEL	TRIGGER	11	END;
A1805DB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1805DB_ACTION_NAKL_LU

A1805DB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1805DB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1805DB_ACTION_NAKL

A1805DB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805DB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1805DB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1805DB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1805DB_ACTION_NAKL_LU	TRIGGER	8	END A1805DB_ACTION_NAKL_lu;
A1805DB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1805DB_ACTION_NAKL_IF1

A1805DB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1805DB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1805DB_ACTION_NAKL

A1805DB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805DB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1805DB_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1805DB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1805DB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1805DB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805DB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805DB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1805DB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1805DB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1805DB_ACTION_NAKL_BONUS_DT1

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1805DB_ACTION_NAKL

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1805DB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1804CEG_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1804ceg_SELECT_LU

A1804CEG_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1804CEG_SELECT_LU	TRIGGER	3	   ON PERSIK.A1804ceg_SELECT

A1804CEG_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1804CEG_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1804CEG_SELECT_LU	TRIGGER	6	BEGIN

A1804CEG_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1804CEG_SELECT_LU	TRIGGER	8	END A1804ceg_SELECT_lu;
A1804CEG_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1804ceg_SELECT_BONUS_DT1

A1804CEG_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1804CEG_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1804ceg_SELECT

A1804CEG_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1804CEG_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1804CEG_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1804CEG_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1804CEG_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1804CEG_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1804CEG_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1804CEG_SELECT_BONUS_DT1	TRIGGER	11	END;
A1804BD_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1804Bd_TP_SELECT_LU

A1804BD_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1804BD_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1804Bd_TP_SELECT

A1804BD_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1804BD_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1804BD_TP_SELECT_LU	TRIGGER	6	BEGIN

A1804BD_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1804BD_TP_SELECT_LU	TRIGGER	8	END A1804Bd_tp_select_lu;
A1804BD_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1804Bd_TP_SELECT_DEL

A1804BD_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1804BD_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1804Bd_TP_SELECT

A1804BD_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1804BD_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1804BD_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1804BD_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1804Bd_ACTION_NAKL

A1804BD_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1804BD_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1804Bd

A1804BD_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1804BD_TP_SELECT_DEL	TRIGGER	11	END;
A1804BD_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1804Bd_ACTION_NAKL_LU

A1804BD_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1804BD_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1804Bd_ACTION_NAKL

A1804BD_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1804BD_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1804BD_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1804BD_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1804BD_ACTION_NAKL_LU	TRIGGER	8	END A1804Bd_ACTION_NAKL_lu;
A1804BD_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1804Bd_ACTION_NAKL_IF1

A1804BD_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1804BD_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1804Bd_ACTION_NAKL

A1804BD_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1804BD_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1804BD_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1804BD_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1804BD_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1804BD_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1804BD_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1804BD_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1804BD_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1804BD_ACTION_NAKL_IF1	TRIGGER	13	END;
A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1804Bd_ACTION_NAKL_BONUS_DT1

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1804Bd_ACTION_NAKL

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1804BD_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1803P5TE_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1803p5te_SELECT_LU

A1803P5TE_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1803P5TE_SELECT_LU	TRIGGER	3	   ON PERSIK.A1803p5te_SELECT

A1803P5TE_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803P5TE_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1803P5TE_SELECT_LU	TRIGGER	6	BEGIN

A1803P5TE_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1803P5TE_SELECT_LU	TRIGGER	8	END A1803p5te_SELECT_lu;
A1803P5TE_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1803p5te_SELECT_BONUS_DT1

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1803p5te_SELECT

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1803P5TE_SELECT_BONUS_DT1	TRIGGER	11	END;
A1803CR_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1803cr_TP_SELECT_LU

A1803CR_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1803CR_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1803cr_TP_SELECT

A1803CR_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803CR_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1803CR_TP_SELECT_LU	TRIGGER	6	BEGIN

A1803CR_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1803CR_TP_SELECT_LU	TRIGGER	8	END a1803cr_tp_select_lu;
A1803CR_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1803cr_TP_SELECT_DEL

A1803CR_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1803CR_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1803cr_TP_SELECT

A1803CR_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1803CR_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1803CR_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1803CR_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1803cr_ACTION_NAKL

A1803CR_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1803CR_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1803cr

A1803CR_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1803CR_TP_SELECT_DEL	TRIGGER	11	END;
A1803CR_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1803cr_ACTION_NAKL_LU

A1803CR_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1803CR_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1803cr_ACTION_NAKL

A1803CR_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803CR_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1803CR_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1803CR_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1803CR_ACTION_NAKL_LU	TRIGGER	8	END a1803cr_ACTION_NAKL_lu;
A1803CR_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1803cr_ACTION_NAKL_IF1

A1803CR_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1803CR_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1803cr_ACTION_NAKL

A1803CR_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803CR_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1803CR_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1803CR_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1803CR_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1803CR_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1803CR_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1803CR_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1803CR_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1803CR_ACTION_NAKL_IF1	TRIGGER	13	END;
A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1803cr_ACTION_NAKL_BONUS_DT1

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1803cr_ACTION_NAKL

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1803CR_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1803BO_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1803bo_TP_SELECT_LU

A1803BO_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1803BO_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1803bo_TP_SELECT

A1803BO_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803BO_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1803BO_TP_SELECT_LU	TRIGGER	6	BEGIN

A1803BO_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1803BO_TP_SELECT_LU	TRIGGER	8	END a1803bo_tp_select_lu;
A1803BO_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1803bo_TP_SELECT_DEL

A1803BO_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1803BO_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1803bo_TP_SELECT

A1803BO_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1803BO_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1803BO_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1803BO_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1803bo_ACTION_NAKL

A1803BO_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1803BO_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1803bo

A1803BO_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1803BO_TP_SELECT_DEL	TRIGGER	11	END;
A1803BO_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1803bo_ACTION_NAKL_LU

A1803BO_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1803BO_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1803bo_ACTION_NAKL

A1803BO_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803BO_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1803BO_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1803BO_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1803BO_ACTION_NAKL_LU	TRIGGER	8	END a1803bo_ACTION_NAKL_lu;
A1803BO_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1803bo_ACTION_NAKL_IF1

A1803BO_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1803BO_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1803bo_ACTION_NAKL

A1803BO_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803BO_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1803BO_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1803BO_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1803BO_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1803BO_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1803BO_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1803BO_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1803BO_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1803BO_ACTION_NAKL_IF1	TRIGGER	13	END;
A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1803bo_ACTION_NAKL_BONUS_DT1

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1803bo_ACTION_NAKL

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1803BO_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1802SS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1802SS_TP_SELECT_LU

A1802SS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802SS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1802SS_TP_SELECT

A1802SS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802SS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1802SS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1802SS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802SS_TP_SELECT_LU	TRIGGER	8	END A1802SS_tp_select_lu;
A1802SS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1802SS_TP_SELECT_DEL

A1802SS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1802SS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1802SS_TP_SELECT

A1802SS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1802SS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1802SS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1802SS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1802SS_ACTION_NAKL

A1802SS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1802SS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1802SS

A1802SS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1802SS_TP_SELECT_DEL	TRIGGER	11	END;
A1802SS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1802SS_ACTION_NAKL_LU

A1802SS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802SS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1802SS_ACTION_NAKL

A1802SS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802SS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1802SS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1802SS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802SS_ACTION_NAKL_LU	TRIGGER	8	END A1802SS_ACTION_NAKL_lu;
A1802SS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1802SS_ACTION_NAKL_IF1

A1802SS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1802SS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1802SS_ACTION_NAKL

A1802SS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802SS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1802SS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1802SS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1802SS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1802SS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802SS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802SS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1802SS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1802SS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1802SS_ACTION_NAKL_BONUS_DT1

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1802SS_ACTION_NAKL

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1802SS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1802PP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1802PP_TP_SELECT_LU

A1802PP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802PP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1802PP_TP_SELECT

A1802PP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802PP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1802PP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1802PP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802PP_TP_SELECT_LU	TRIGGER	8	END A1802PP_tp_select_lu;
A1802PP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1802PP_TP_SELECT_DEL

A1802PP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1802PP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1802PP_TP_SELECT

A1802PP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1802PP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1802PP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1802PP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1802PP_ACTION_NAKL

A1802PP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1802PP_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1802PP

A1802PP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1802PP_TP_SELECT_DEL	TRIGGER	11	END;
A1802PP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1802PP_ACTION_NAKL_LU

A1802PP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802PP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1802PP_ACTION_NAKL

A1802PP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802PP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1802PP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1802PP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802PP_ACTION_NAKL_LU	TRIGGER	8	END A1802PP_ACTION_NAKL_lu;
A1802PP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1802PP_ACTION_NAKL_IF1

A1802PP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1802PP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1802PP_ACTION_NAKL

A1802PP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802PP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1802PP_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1802PP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1802PP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1802PP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802PP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802PP_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1802PP_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1802PP_ACTION_NAKL_IF1	TRIGGER	13	END;
A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1802PP_ACTION_NAKL_BONUS_DT1

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1802PP_ACTION_NAKL

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1802PP_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1802CM_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1802CM_SELECT_LU

A1802CM_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CM_SELECT_LU	TRIGGER	3	   ON PERSIK.A1802CM_SELECT

A1802CM_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CM_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1802CM_SELECT_LU	TRIGGER	6	BEGIN

A1802CM_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CM_SELECT_LU	TRIGGER	8	END A1802CM_SELECT_lu;
A1802CM_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1802CM_SELECT_BONUS_DT1

A1802CM_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1802CM_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1802CM_SELECT

A1802CM_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CM_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1802CM_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1802CM_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1802CM_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1802CM_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802CM_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1802CM_SELECT_BONUS_DT1	TRIGGER	11	END;
A1802CL_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1802CL_TP_SELECT_LU

A1802CL_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CL_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1802CL_TP_SELECT

A1802CL_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CL_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1802CL_TP_SELECT_LU	TRIGGER	6	BEGIN

A1802CL_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CL_TP_SELECT_LU	TRIGGER	8	END A1802CL_tp_select_lu;
A1802CL_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1802CL_TP_SELECT_DEL

A1802CL_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1802CL_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1802CL_TP_SELECT

A1802CL_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1802CL_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1802CL_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1802CL_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1802CL_ACTION_NAKL

A1802CL_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1802CL_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1802CL

A1802CL_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1802CL_TP_SELECT_DEL	TRIGGER	11	END;
A1802CL_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1802CL_ACTION_NAKL_LU

A1802CL_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CL_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1802CL_ACTION_NAKL

A1802CL_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CL_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1802CL_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1802CL_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CL_ACTION_NAKL_LU	TRIGGER	8	END A1802CL_ACTION_NAKL_lu;
A1802CL_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1802CL_ACTION_NAKL_IF1

A1802CL_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1802CL_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1802CL_ACTION_NAKL

A1802CL_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CL_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1802CL_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1802CL_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1802CL_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1802CL_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802CL_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802CL_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1802CL_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1802CL_ACTION_NAKL_IF1	TRIGGER	13	END;
A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1802CL_ACTION_NAKL_BONUS_DT1

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1802CL_ACTION_NAKL

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1802CL_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1802CB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1802cb_TP_SELECT_LU

A1802CB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1802cb_TP_SELECT

A1802CB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1802CB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1802CB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CB_TP_SELECT_LU	TRIGGER	8	END a1802cb_tp_select_lu;
A1802CB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1802cb_TP_SELECT_DEL

A1802CB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1802CB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1802cb_TP_SELECT

A1802CB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1802CB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1802CB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1802CB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1802cb_ACTION_NAKL

A1802CB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1802CB_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1802cb

A1802CB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1802CB_TP_SELECT_DEL	TRIGGER	11	END;
A1802CB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1802cb_ACTION_NAKL_LU

A1802CB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1802cb_ACTION_NAKL

A1802CB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1802CB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1802CB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CB_ACTION_NAKL_LU	TRIGGER	8	END a1802cb_ACTION_NAKL_lu;
A1802CB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1802cb_ACTION_NAKL_IF1

A1802CB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1802CB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1802cb_ACTION_NAKL

A1802CB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1802CB_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1802CB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1802CB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1802CB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802CB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802CB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1802CB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1802CB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1802cb_ACTION_NAKL_BONUS_DT1

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1802cb_ACTION_NAKL

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1802CB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1802CABA_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1802caba_TP_SELECT_LU

A1802CABA_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CABA_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1802caba_TP_SELECT

A1802CABA_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CABA_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1802CABA_TP_SELECT_LU	TRIGGER	6	BEGIN

A1802CABA_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CABA_TP_SELECT_LU	TRIGGER	8	END A1802caba_tp_select_lu;
A1802CABA_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1802caba_TP_SELECT_DEL

A1802CABA_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1802CABA_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1802caba_TP_SELECT

A1802CABA_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1802CABA_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1802CABA_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1802CABA_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1802caba_ACTION_NAKL

A1802CABA_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1802CABA_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1802caba

A1802CABA_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1802CABA_TP_SELECT_DEL	TRIGGER	11	END;
A1802CABA_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1802caba_ACTION_NAKL_LU

A1802CABA_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1802CABA_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1802caba_ACTION_NAKL

A1802CABA_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CABA_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1802CABA_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1802CABA_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1802CABA_ACTION_NAKL_LU	TRIGGER	8	END A1802caba_ACTION_NAKL_lu;
A1802CABA_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1802caba_ACTION_NAKL_IF1

A1802CABA_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1802CABA_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1802caba_ACTION_NAKL

A1802CABA_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1802CABA_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1802CABA_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1802CABA_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1802CABA_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1802CABA_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1802CABA_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1802CABA_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1802CABA_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1802CABA_ACTION_NAKL_IF1	TRIGGER	13	END;
A1801TJ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1801tj_TP_SELECT_LU

A1801TJ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801TJ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1801tj_TP_SELECT

A1801TJ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801TJ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1801TJ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1801TJ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801TJ_TP_SELECT_LU	TRIGGER	8	END A1801tj_tp_select_lu;
A1801TJ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1801tj_TP_SELECT_DEL

A1801TJ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1801TJ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1801tj_TP_SELECT

A1801TJ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1801TJ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1801TJ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1801TJ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1801tj_ACTION_NAKL

A1801TJ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1801TJ_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1801tj

A1801TJ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1801TJ_TP_SELECT_DEL	TRIGGER	11	END;
A1801TJ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1801tj_ACTION_NAKL_LU

A1801TJ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801TJ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1801tj_ACTION_NAKL

A1801TJ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801TJ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1801TJ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1801TJ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801TJ_ACTION_NAKL_LU	TRIGGER	8	END A1801tj_ACTION_NAKL_lu;
A1801TJ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1801tj_ACTION_NAKL_IF1

A1801TJ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1801TJ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1801tj_ACTION_NAKL

A1801TJ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801TJ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1801TJ_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1801TJ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1801TJ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1801TJ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801TJ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801TJ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1801TJ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1801TJ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1801tj_ACTION_NAKL_BONUS_DT1

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1801tj_ACTION_NAKL

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1801TJ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1801SK_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1801sk_TP_SELECT_LU

A1801SK_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801SK_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1801sk_TP_SELECT

A1801SK_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801SK_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1801SK_TP_SELECT_LU	TRIGGER	6	BEGIN

A1801SK_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801SK_TP_SELECT_LU	TRIGGER	8	END A1801sk_tp_select_lu;
A1801SK_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1801sk_TP_SELECT_DEL

A1801SK_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1801SK_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1801sk_TP_SELECT

A1801SK_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1801SK_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1801SK_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1801SK_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1801sk_ACTION_NAKL

A1801SK_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1801SK_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1801sk

A1801SK_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1801SK_TP_SELECT_DEL	TRIGGER	11	END;
A1801SK_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1801sk_ACTION_NAKL_LU

A1801SK_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801SK_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1801sk_ACTION_NAKL

A1801SK_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801SK_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1801SK_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1801SK_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801SK_ACTION_NAKL_LU	TRIGGER	8	END A1801sk_ACTION_NAKL_lu;
A1801SK_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1801sk_ACTION_NAKL_IF1

A1801SK_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1801SK_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1801sk_ACTION_NAKL

A1801SK_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801SK_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1801SK_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1801SK_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1801SK_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1801SK_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801SK_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801SK_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1801SK_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1801SK_ACTION_NAKL_IF1	TRIGGER	13	END;
A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1801sk_ACTION_NAKL_BONUS_DT1

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1801sk_ACTION_NAKL

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1801SK_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1801PO_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1801po_TP_SELECT_LU

A1801PO_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801PO_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1801po_TP_SELECT

A1801PO_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801PO_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1801PO_TP_SELECT_LU	TRIGGER	6	BEGIN

A1801PO_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801PO_TP_SELECT_LU	TRIGGER	8	END A1801po_tp_select_lu;
A1801PO_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1801po_TP_SELECT_DEL

A1801PO_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1801PO_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1801po_TP_SELECT

A1801PO_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1801PO_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1801PO_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1801PO_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1801po_ACTION_NAKL

A1801PO_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1801PO_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1801po

A1801PO_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1801PO_TP_SELECT_DEL	TRIGGER	11	END;
A1801PO_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1801po_ACTION_NAKL_LU

A1801PO_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801PO_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1801po_ACTION_NAKL

A1801PO_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801PO_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1801PO_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1801PO_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801PO_ACTION_NAKL_LU	TRIGGER	8	END A1801po_ACTION_NAKL_lu;
A1801PO_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1801po_ACTION_NAKL_IF1

A1801PO_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1801PO_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1801po_ACTION_NAKL

A1801PO_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801PO_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1801PO_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1801PO_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1801PO_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1801PO_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801PO_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801PO_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1801PO_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1801PO_ACTION_NAKL_IF1	TRIGGER	13	END;
A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1801po_ACTION_NAKL_BONUS_DT1

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1801po_ACTION_NAKL

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1801PO_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1801NYG_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1801nyg_TP_SELECT_LU

A1801NYG_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801NYG_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1801nyg_TP_SELECT

A1801NYG_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801NYG_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1801NYG_TP_SELECT_LU	TRIGGER	6	BEGIN

A1801NYG_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801NYG_TP_SELECT_LU	TRIGGER	8	END A1801nyg_tp_select_lu;
A1801NYG_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1801nyg_TP_SELECT_DEL

A1801NYG_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1801NYG_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1801nyg_TP_SELECT

A1801NYG_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1801NYG_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1801NYG_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1801NYG_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1801nyg_ACTION_NAKL

A1801NYG_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1801NYG_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1801nyg

A1801NYG_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1801NYG_TP_SELECT_DEL	TRIGGER	11	END;
A1801NYG_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1801nyg_ACTION_NAKL_LU

A1801NYG_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801NYG_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1801nyg_ACTION_NAKL

A1801NYG_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801NYG_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1801NYG_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1801NYG_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801NYG_ACTION_NAKL_LU	TRIGGER	8	END A1801nyg_ACTION_NAKL_lu;
A1801NYG_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1801nyg_ACTION_NAKL_IF1

A1801NYG_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1801NYG_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1801nyg_ACTION_NAKL

A1801NYG_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801NYG_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1801NYG_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1801NYG_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1801NYG_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1801NYG_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801NYG_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801NYG_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1801NYG_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1801NYG_ACTION_NAKL_IF1	TRIGGER	13	END;
A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1801nyg_ACTION_NAKL_BONUS_DT1

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1801nyg_ACTION_NAKL

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1801NYG_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1801CT_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1801ct_TP_SELECT_LU

A1801CT_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801CT_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1801ct_TP_SELECT

A1801CT_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801CT_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1801CT_TP_SELECT_LU	TRIGGER	6	BEGIN

A1801CT_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801CT_TP_SELECT_LU	TRIGGER	8	END A1801ct_tp_select_lu;
A1801CT_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1801ct_TP_SELECT_DEL

A1801CT_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1801CT_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1801ct_TP_SELECT

A1801CT_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1801CT_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1801CT_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1801CT_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1801ct_ACTION_NAKL

A1801CT_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1801CT_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1801ct

A1801CT_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1801CT_TP_SELECT_DEL	TRIGGER	11	END;
A1801CT_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1801ct_ACTION_NAKL_LU

A1801CT_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801CT_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1801ct_ACTION_NAKL

A1801CT_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801CT_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1801CT_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1801CT_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801CT_ACTION_NAKL_LU	TRIGGER	8	END A1801ct_ACTION_NAKL_lu;
A1801CT_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1801ct_ACTION_NAKL_IF1

A1801CT_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1801CT_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1801ct_ACTION_NAKL

A1801CT_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801CT_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1801CT_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1801CT_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1801CT_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1801CT_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801CT_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801CT_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1801CT_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1801CT_ACTION_NAKL_IF1	TRIGGER	13	END;
A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1801ct_ACTION_NAKL_BONUS_DT1

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1801ct_ACTION_NAKL

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1801CT_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1801CC_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1801CC_SELECT_LU

A1801CC_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1801CC_SELECT_LU	TRIGGER	3	   ON PERSIK.A1801CC_SELECT

A1801CC_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801CC_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1801CC_SELECT_LU	TRIGGER	6	BEGIN

A1801CC_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1801CC_SELECT_LU	TRIGGER	8	END A1801CC_SELECT_lu;
A1801CC_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1801CC_SELECT_BONUS_DT1

A1801CC_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1801CC_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1801CC_SELECT

A1801CC_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1801CC_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1801CC_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1801CC_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1801CC_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1801CC_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1801CC_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1801CC_SELECT_BONUS_DT1	TRIGGER	11	END;
A1712NYO3_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712nyo3_SELECT_LU

A1712NYO3_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712NYO3_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712nyo3_SELECT

A1712NYO3_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712NYO3_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712NYO3_SELECT_LU	TRIGGER	6	BEGIN

A1712NYO3_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712NYO3_SELECT_LU	TRIGGER	8	END a1712nyo3_SELECT_lu;
A1712NYO3_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712nyo3_SELECT_BONUS_DT1

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712nyo3_SELECT

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1712NYO3_SELECT_BONUS_DT1	TRIGGER	11	END;
A1712NYO2_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712nyo2_SELECT_LU

A1712NYO2_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712NYO2_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712nyo2_SELECT

A1712NYO2_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712NYO2_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712NYO2_SELECT_LU	TRIGGER	6	BEGIN

A1712NYO2_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712NYO2_SELECT_LU	TRIGGER	8	END a1712nyo2_SELECT_lu;
A1712NYO2_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712nyo2_SELECT_BONUS_DT1

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712nyo2_SELECT

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1712NYO2_SELECT_BONUS_DT1	TRIGGER	11	END;
A1712NYO1_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712nyo1_SELECT_LU

A1712NYO1_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712NYO1_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712nyo1_SELECT

A1712NYO1_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712NYO1_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712NYO1_SELECT_LU	TRIGGER	6	BEGIN

A1712NYO1_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712NYO1_SELECT_LU	TRIGGER	8	END a1712nyo1_SELECT_lu;
A1712NYO1_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712nyo1_SELECT_BONUS_DT1

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712nyo1_SELECT

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1712NYO1_SELECT_BONUS_DT1	TRIGGER	11	END;
A1712ES_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712es_TP_SELECT_LU

A1712ES_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712ES_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712es_TP_SELECT

A1712ES_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712ES_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712ES_TP_SELECT_LU	TRIGGER	6	BEGIN

A1712ES_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712ES_TP_SELECT_LU	TRIGGER	8	END a1712es_tp_select_lu;
A1712ES_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1712es_TP_SELECT_DEL

A1712ES_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1712ES_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1712es_TP_SELECT

A1712ES_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1712ES_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1712ES_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1712ES_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1712es_ACTION_NAKL

A1712ES_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1712ES_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1712es

A1712ES_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1712ES_TP_SELECT_DEL	TRIGGER	11	END;
A1712ES_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1712es_ACTION_NAKL_LU

A1712ES_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712ES_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1712es_ACTION_NAKL

A1712ES_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712ES_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1712ES_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1712ES_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712ES_ACTION_NAKL_LU	TRIGGER	8	END a1712es_ACTION_NAKL_lu;
A1712ES_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1712es_ACTION_NAKL_IF1

A1712ES_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1712ES_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1712es_ACTION_NAKL

A1712ES_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712ES_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1712ES_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1712ES_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1712ES_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1712ES_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712ES_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712ES_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1712ES_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1712ES_ACTION_NAKL_IF1	TRIGGER	13	END;
A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712es_ACTION_NAKL_BONUS_DT1

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712es_ACTION_NAKL

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1712ES_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1712CB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712cb_TP_SELECT_LU

A1712CB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712CB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712cb_TP_SELECT

A1712CB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712CB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1712CB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712CB_TP_SELECT_LU	TRIGGER	8	END a1712cb_tp_select_lu;
A1712CB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1712cb_TP_SELECT_DEL

A1712CB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1712CB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1712cb_TP_SELECT

A1712CB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1712CB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1712CB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1712CB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1712cb_ACTION_NAKL

A1712CB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1712CB_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1712cb

A1712CB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1712CB_TP_SELECT_DEL	TRIGGER	11	END;
A1712CB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1712cb_ACTION_NAKL_LU

A1712CB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712CB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1712cb_ACTION_NAKL

A1712CB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1712CB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1712CB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712CB_ACTION_NAKL_LU	TRIGGER	8	END a1712cb_ACTION_NAKL_lu;
A1712CB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1712cb_ACTION_NAKL_IF1

A1712CB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1712CB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1712cb_ACTION_NAKL

A1712CB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1712CB_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1712CB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1712CB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1712CB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712CB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712CB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1712CB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1712CB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712cb_ACTION_NAKL_BONUS_DT1

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712cb_ACTION_NAKL

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1712CB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1712CBR_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712cbr_TP_SELECT_LU

A1712CBR_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712CBR_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712cbr_TP_SELECT

A1712CBR_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CBR_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712CBR_TP_SELECT_LU	TRIGGER	6	BEGIN

A1712CBR_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712CBR_TP_SELECT_LU	TRIGGER	8	END a1712cbr_tp_select_lu;
A1712CBR_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1712cbr_TP_SELECT_DEL

A1712CBR_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1712CBR_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1712cbr_TP_SELECT

A1712CBR_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1712CBR_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1712CBR_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1712CBR_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1712cbr_ACTION_NAKL

A1712CBR_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1712CBR_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1712cbr

A1712CBR_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1712CBR_TP_SELECT_DEL	TRIGGER	11	END;
A1712CBR_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1712cbr_ACTION_NAKL_LU

A1712CBR_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712CBR_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1712cbr_ACTION_NAKL

A1712CBR_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CBR_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1712CBR_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1712CBR_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712CBR_ACTION_NAKL_LU	TRIGGER	8	END a1712cbr_ACTION_NAKL_lu;
A1712CBR_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1712cbr_ACTION_NAKL_IF1

A1712CBR_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1712CBR_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1712cbr_ACTION_NAKL

A1712CBR_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CBR_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1712CBR_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1712CBR_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1712CBR_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1712CBR_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712CBR_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712CBR_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1712CBR_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1712CBR_ACTION_NAKL_IF1	TRIGGER	13	END;
A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712cbr_ACTION_NAKL_BONUS_DT1

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712cbr_ACTION_NAKL

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1712CBR_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1712BS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1712bs_TP_SELECT_LU

A1712BS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712BS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1712bs_TP_SELECT

A1712BS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712BS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1712BS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1712BS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712BS_TP_SELECT_LU	TRIGGER	8	END a1712bs_tp_select_lu;
A1712BS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1712bs_TP_SELECT_DEL

A1712BS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1712BS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1712bs_TP_SELECT

A1712BS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1712BS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1712BS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1712BS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1712bs_ACTION_NAKL

A1712BS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1712BS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1712bs

A1712BS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1712BS_TP_SELECT_DEL	TRIGGER	11	END;
A1712BS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1712bs_ACTION_NAKL_LU

A1712BS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1712BS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1712bs_ACTION_NAKL

A1712BS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712BS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1712BS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1712BS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1712BS_ACTION_NAKL_LU	TRIGGER	8	END a1712bs_ACTION_NAKL_lu;
A1712BS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1712bs_ACTION_NAKL_IF1

A1712BS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1712BS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1712bs_ACTION_NAKL

A1712BS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712BS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1712BS_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1712BS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1712BS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1712BS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712BS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712BS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1712BS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1712BS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1712bs_ACTION_NAKL_BONUS_DT1

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1712bs_ACTION_NAKL

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1712BS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1711ST_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1711st_TP_SELECT_LU

A1711ST_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711ST_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1711st_TP_SELECT

A1711ST_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ST_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711ST_TP_SELECT_LU	TRIGGER	6	BEGIN

A1711ST_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711ST_TP_SELECT_LU	TRIGGER	8	END A1711st_tp_select_lu;
A1711ST_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1711st_TP_SELECT_DEL

A1711ST_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1711ST_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1711st_TP_SELECT

A1711ST_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1711ST_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1711ST_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1711ST_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1711st_ACTION_NAKL

A1711ST_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1711ST_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1711st

A1711ST_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1711ST_TP_SELECT_DEL	TRIGGER	11	END;
A1711ST_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1711st_ACTION_NAKL_LU

A1711ST_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711ST_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1711st_ACTION_NAKL

A1711ST_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ST_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1711ST_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1711ST_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711ST_ACTION_NAKL_LU	TRIGGER	8	END A1711st_ACTION_NAKL_lu;
A1711ST_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1711st_ACTION_NAKL_IF1

A1711ST_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1711ST_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1711st_ACTION_NAKL

A1711ST_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ST_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1711ST_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1711ST_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1711ST_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1711ST_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711ST_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711ST_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1711ST_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1711ST_ACTION_NAKL_IF1	TRIGGER	13	END;
A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1711st_ACTION_NAKL_BONUS_DT1

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1711st_ACTION_NAKL

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1711ST_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1711SS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1711ss_TP_SELECT_LU

A1711SS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711SS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1711ss_TP_SELECT

A1711SS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711SS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711SS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1711SS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711SS_TP_SELECT_LU	TRIGGER	8	END a1711ss_tp_select_lu;
A1711SS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1711ss_TP_SELECT_DEL

A1711SS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1711SS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1711ss_TP_SELECT

A1711SS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1711SS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1711SS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1711SS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1711ss_ACTION_NAKL

A1711SS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1711SS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1711ss

A1711SS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1711SS_TP_SELECT_DEL	TRIGGER	11	END;
A1711SS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1711ss_ACTION_NAKL_LU

A1711SS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711SS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1711ss_ACTION_NAKL

A1711SS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711SS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1711SS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1711SS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711SS_ACTION_NAKL_LU	TRIGGER	8	END a1711ss_ACTION_NAKL_lu;
A1711SS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1711ss_ACTION_NAKL_IF1

A1711SS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1711SS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1711ss_ACTION_NAKL

A1711SS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711SS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1711SS_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1711SS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1711SS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1711SS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711SS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711SS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1711SS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1711SS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1711ss_ACTION_NAKL_BONUS_DT1

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1711ss_ACTION_NAKL

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1711SS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1711ES_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1711es_TP_SELECT_LU

A1711ES_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711ES_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1711es_TP_SELECT

A1711ES_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ES_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711ES_TP_SELECT_LU	TRIGGER	6	BEGIN

A1711ES_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711ES_TP_SELECT_LU	TRIGGER	8	END a1711es_tp_select_lu;
A1711ES_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1711es_TP_SELECT_DEL

A1711ES_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1711ES_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1711es_TP_SELECT

A1711ES_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1711ES_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1711ES_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1711ES_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1711es_ACTION_NAKL

A1711ES_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1711ES_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1711es

A1711ES_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1711ES_TP_SELECT_DEL	TRIGGER	11	END;
A1711ES_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1711es_ACTION_NAKL_LU

A1711ES_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711ES_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1711es_ACTION_NAKL

A1711ES_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ES_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1711ES_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1711ES_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711ES_ACTION_NAKL_LU	TRIGGER	8	END a1711es_ACTION_NAKL_lu;
A1711ES_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1711es_ACTION_NAKL_IF1

A1711ES_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1711ES_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1711es_ACTION_NAKL

A1711ES_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ES_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1711ES_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1711ES_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1711ES_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1711ES_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711ES_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711ES_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1711ES_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1711ES_ACTION_NAKL_IF1	TRIGGER	13	END;
A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1711es_ACTION_NAKL_BONUS_DT1

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1711es_ACTION_NAKL

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1711ES_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1711CSN_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1711CSn_SELECT_LU

A1711CSN_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711CSN_SELECT_LU	TRIGGER	3	   ON PERSIK.A1711CSn_SELECT

A1711CSN_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CSN_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711CSN_SELECT_LU	TRIGGER	6	BEGIN

A1711CSN_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711CSN_SELECT_LU	TRIGGER	8	END;
A1711CSN_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1711CSn_SELECT_BONUS_DT1

A1711CSN_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711CSN_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1711CSn_SELECT

A1711CSN_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CSN_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711CSN_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1711CSN_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711CSN_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1711CSN_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711CSN_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1711CSN_SELECT_BONUS_DT1	TRIGGER	11	END;
A1711CS6_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1711cs6_SELECT_LU

A1711CS6_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711CS6_SELECT_LU	TRIGGER	3	   ON PERSIK.A1711cs6_SELECT

A1711CS6_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CS6_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711CS6_SELECT_LU	TRIGGER	6	BEGIN

A1711CS6_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711CS6_SELECT_LU	TRIGGER	8	END A1711cs6_SELECT_lu;
A1711CS6_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1711cs6_SELECT_BONUS_DT1

A1711CS6_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711CS6_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1711cs6_SELECT

A1711CS6_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CS6_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711CS6_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1711CS6_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711CS6_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1711CS6_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711CS6_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1711CS6_SELECT_BONUS_DT1	TRIGGER	11	END;
A1711CS4_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1711cs4_SELECT_LU

A1711CS4_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711CS4_SELECT_LU	TRIGGER	3	   ON PERSIK.A1711cs4_SELECT

A1711CS4_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CS4_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711CS4_SELECT_LU	TRIGGER	6	BEGIN

A1711CS4_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711CS4_SELECT_LU	TRIGGER	8	END A1711cs4_SELECT_lu;
A1711CS4_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1711cs4_SELECT_BONUS_DT1

A1711CS4_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711CS4_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1711cs4_SELECT

A1711CS4_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CS4_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711CS4_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1711CS4_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711CS4_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1711CS4_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711CS4_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1711CS4_SELECT_BONUS_DT1	TRIGGER	11	END;
A1711CB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1711cb_TP_SELECT_LU

A1711CB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711CB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1711cb_TP_SELECT

A1711CB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1711CB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1711CB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711CB_TP_SELECT_LU	TRIGGER	8	END a1711cb_tp_select_lu;
A1711CB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1711cb_TP_SELECT_DEL

A1711CB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1711CB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1711cb_TP_SELECT

A1711CB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1711CB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1711CB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1711CB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1711cb_ACTION_NAKL

A1711CB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1711CB_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1711cb

A1711CB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1711CB_TP_SELECT_DEL	TRIGGER	11	END;
A1711CB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1711cb_ACTION_NAKL_LU

A1711CB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1711CB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1711cb_ACTION_NAKL

A1711CB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1711CB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1711CB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1711CB_ACTION_NAKL_LU	TRIGGER	8	END a1711cb_ACTION_NAKL_lu;
A1711CB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1711cb_ACTION_NAKL_IF1

A1711CB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1711CB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1711cb_ACTION_NAKL

A1711CB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1711CB_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1711CB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1711CB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1711CB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711CB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711CB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1711CB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1711CB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1711cb_ACTION_NAKL_BONUS_DT1

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1711cb_ACTION_NAKL

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1711CB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1710TK_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1710tk_TP_SELECT_LU

A1710TK_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710TK_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1710tk_TP_SELECT

A1710TK_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710TK_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1710TK_TP_SELECT_LU	TRIGGER	6	BEGIN

A1710TK_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710TK_TP_SELECT_LU	TRIGGER	8	END a1710tk_tp_select_lu;
A1710TK_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1710tk_TP_SELECT_DEL

A1710TK_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1710TK_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1710tk_TP_SELECT

A1710TK_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1710TK_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1710TK_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1710TK_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1710tk_ACTION_NAKL

A1710TK_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1710TK_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1710tk

A1710TK_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1710TK_TP_SELECT_DEL	TRIGGER	11	END;
A1710TK_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1710tk_ACTION_NAKL_LU

A1710TK_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710TK_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1710tk_ACTION_NAKL

A1710TK_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710TK_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1710TK_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1710TK_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710TK_ACTION_NAKL_LU	TRIGGER	8	END a1710tk_ACTION_NAKL_lu;
A1710TK_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1710tk_ACTION_NAKL_IF1

A1710TK_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1710TK_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1710tk_ACTION_NAKL

A1710TK_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710TK_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1710TK_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1710TK_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1710TK_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1710TK_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710TK_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710TK_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1710TK_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1710TK_ACTION_NAKL_IF1	TRIGGER	13	END;
A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1710tk_ACTION_NAKL_BONUS_DT1

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1710tk_ACTION_NAKL

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1710TK_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1710SS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1710ss_TP_SELECT_LU

A1710SS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710SS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1710ss_TP_SELECT

A1710SS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1710SS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1710SS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710SS_TP_SELECT_LU	TRIGGER	8	END a1710ss_tp_select_lu;
A1710SS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1710ss_TP_SELECT_DEL

A1710SS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1710SS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1710ss_TP_SELECT

A1710SS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1710SS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1710SS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1710SS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1710ss_ACTION_NAKL

A1710SS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1710SS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1710ss

A1710SS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1710SS_TP_SELECT_DEL	TRIGGER	11	END;
A1710SS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1710ss_ACTION_NAKL_LU

A1710SS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710SS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1710ss_ACTION_NAKL

A1710SS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1710SS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1710SS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710SS_ACTION_NAKL_LU	TRIGGER	8	END a1710ss_ACTION_NAKL_lu;
A1710SS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1710ss_ACTION_NAKL_IF1

A1710SS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1710SS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1710ss_ACTION_NAKL

A1710SS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1710SS_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1710SS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1710SS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1710SS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710SS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710SS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1710SS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1710SS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1710ss_ACTION_NAKL_BONUS_DT1

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1710ss_ACTION_NAKL

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1710SS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1710SS2_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1710SS2_TP_SELECT_LU

A1710SS2_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710SS2_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1710SS2_TP_SELECT

A1710SS2_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS2_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1710SS2_TP_SELECT_LU	TRIGGER	6	BEGIN

A1710SS2_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710SS2_TP_SELECT_LU	TRIGGER	8	END A1710SS2_tp_select_lu;
A1710SS2_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1710SS2_TP_SELECT_DEL

A1710SS2_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1710SS2_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1710SS2_TP_SELECT

A1710SS2_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1710SS2_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1710SS2_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1710SS2_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1710SS2_ACTION_NAKL

A1710SS2_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1710SS2_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1710SS2

A1710SS2_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1710SS2_TP_SELECT_DEL	TRIGGER	11	END;
A1710SS2_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1710SS2_ACTION_NAKL_LU

A1710SS2_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710SS2_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1710SS2_ACTION_NAKL

A1710SS2_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS2_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1710SS2_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1710SS2_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710SS2_ACTION_NAKL_LU	TRIGGER	8	END A1710SS2_ACTION_NAKL_lu;
A1710SS2_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1710SS2_ACTION_NAKL_IF1

A1710SS2_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1710SS2_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1710SS2_ACTION_NAKL

A1710SS2_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS2_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1710SS2_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1710SS2_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1710SS2_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1710SS2_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710SS2_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710SS2_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1710SS2_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1710SS2_ACTION_NAKL_IF1	TRIGGER	13	END;
A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1710SS2_ACTION_NAKL_BONUS_DT1

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1710SS2_ACTION_NAKL

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1710SS2_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1710OO_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1710oo_SELECT_LU

A1710OO_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710OO_SELECT_LU	TRIGGER	3	   ON PERSIK.a1710oo_SELECT

A1710OO_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710OO_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1710OO_SELECT_LU	TRIGGER	6	BEGIN

A1710OO_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710OO_SELECT_LU	TRIGGER	8	END a1710oo_SELECT_lu;
A1710OO_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1710oo_SELECT_BONUS_DT1

A1710OO_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1710OO_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1710oo_SELECT

A1710OO_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710OO_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1710OO_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1710OO_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1710OO_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1710OO_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710OO_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1710OO_SELECT_BONUS_DT1	TRIGGER	11	END;
A1710MO_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1710mo_TP_SELECT_LU

A1710MO_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710MO_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1710mo_TP_SELECT

A1710MO_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710MO_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1710MO_TP_SELECT_LU	TRIGGER	6	BEGIN

A1710MO_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710MO_TP_SELECT_LU	TRIGGER	8	END a1710mo_tp_select_lu;
A1710MO_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1710mo_TP_SELECT_DEL

A1710MO_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1710MO_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1710mo_TP_SELECT

A1710MO_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1710MO_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1710MO_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1710MO_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1710mo_ACTION_NAKL

A1710MO_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1710MO_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1710mo

A1710MO_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1710MO_TP_SELECT_DEL	TRIGGER	11	END;
A1710MO_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1710mo_ACTION_NAKL_LU

A1710MO_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710MO_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1710mo_ACTION_NAKL

A1710MO_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710MO_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1710MO_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1710MO_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710MO_ACTION_NAKL_LU	TRIGGER	8	END a1710mo_ACTION_NAKL_lu;
A1710MO_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1710mo_ACTION_NAKL_IF1

A1710MO_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1710MO_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1710mo_ACTION_NAKL

A1710MO_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710MO_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1710MO_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1710MO_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1710MO_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1710MO_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710MO_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710MO_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1710MO_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1710MO_ACTION_NAKL_IF1	TRIGGER	13	END;
A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1710mo_ACTION_NAKL_BONUS_DT1

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1710mo_ACTION_NAKL

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1710MO_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1710CC_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1710CC_TP_SELECT_LU

A1710CC_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710CC_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1710CC_TP_SELECT

A1710CC_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710CC_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1710CC_TP_SELECT_LU	TRIGGER	6	BEGIN

A1710CC_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710CC_TP_SELECT_LU	TRIGGER	8	END A1710CC_tp_select_lu;
A1710CC_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1710CC_TP_SELECT_DEL

A1710CC_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1710CC_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1710CC_TP_SELECT

A1710CC_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1710CC_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1710CC_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1710CC_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1710CC_ACTION_NAKL

A1710CC_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1710CC_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1710CC

A1710CC_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1710CC_TP_SELECT_DEL	TRIGGER	11	END;
A1710CC_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1710CC_ACTION_NAKL_LU

A1710CC_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1710CC_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1710CC_ACTION_NAKL

A1710CC_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710CC_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1710CC_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1710CC_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1710CC_ACTION_NAKL_LU	TRIGGER	8	END A1710CC_ACTION_NAKL_lu;
A1710CC_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1710CC_ACTION_NAKL_IF1

A1710CC_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1710CC_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1710CC_ACTION_NAKL

A1710CC_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710CC_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1710CC_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1710CC_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1710CC_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1710CC_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710CC_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710CC_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1710CC_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1710CC_ACTION_NAKL_IF1	TRIGGER	13	END;
A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1710CC_ACTION_NAKL_BONUS_DT1

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1710CC_ACTION_NAKL

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1710CC_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1709TH_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1709th_TP_SELECT_LU

A1709TH_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709TH_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1709th_TP_SELECT

A1709TH_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709TH_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1709TH_TP_SELECT_LU	TRIGGER	6	BEGIN

A1709TH_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709TH_TP_SELECT_LU	TRIGGER	8	END a1709th_tp_select_lu;
A1709TH_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1709th_TP_SELECT_DEL

A1709TH_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1709TH_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1709th_TP_SELECT

A1709TH_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1709TH_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1709TH_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1709TH_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1709th_ACTION_NAKL

A1709TH_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1709TH_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1709th

A1709TH_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1709TH_TP_SELECT_DEL	TRIGGER	11	END;
A1709TH_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1709th_ACTION_NAKL_LU

A1709TH_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709TH_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1709th_ACTION_NAKL

A1709TH_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709TH_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1709TH_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1709TH_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709TH_ACTION_NAKL_LU	TRIGGER	8	END a1709th_ACTION_NAKL_lu;
A1709TH_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1709th_ACTION_NAKL_IF1

A1709TH_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1709TH_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1709th_ACTION_NAKL

A1709TH_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709TH_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1709TH_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1709TH_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1709TH_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1709TH_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709TH_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709TH_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1709TH_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1709TH_ACTION_NAKL_IF1	TRIGGER	13	END;
A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1709th_ACTION_NAKL_BONUS_DT1

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1709th_ACTION_NAKL

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1709TH_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1709OC_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1709oc_TP_SELECT_LU

A1709OC_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709OC_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1709oc_TP_SELECT

A1709OC_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709OC_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1709OC_TP_SELECT_LU	TRIGGER	6	BEGIN

A1709OC_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709OC_TP_SELECT_LU	TRIGGER	8	END a1709oc_tp_select_lu;
A1709OC_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1709oc_TP_SELECT_DEL

A1709OC_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1709OC_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1709oc_TP_SELECT

A1709OC_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1709OC_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1709OC_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1709OC_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1709oc_ACTION_NAKL

A1709OC_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1709OC_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1709oc

A1709OC_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1709OC_TP_SELECT_DEL	TRIGGER	11	END;
A1709OC_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1709oc_ACTION_NAKL_LU

A1709OC_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709OC_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1709oc_ACTION_NAKL

A1709OC_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709OC_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1709OC_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1709OC_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709OC_ACTION_NAKL_LU	TRIGGER	8	END a1709oc_ACTION_NAKL_lu;
A1709OC_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1709oc_ACTION_NAKL_IF1

A1709OC_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1709OC_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1709oc_ACTION_NAKL

A1709OC_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709OC_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1709OC_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1709OC_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1709OC_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1709OC_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709OC_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709OC_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1709OC_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1709OC_ACTION_NAKL_IF1	TRIGGER	13	END;
A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1709oc_ACTION_NAKL_BONUS_DT1

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1709oc_ACTION_NAKL

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1709OC_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1709CM_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1709cm_TP_SELECT_LU

A1709CM_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709CM_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1709cm_TP_SELECT

A1709CM_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CM_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1709CM_TP_SELECT_LU	TRIGGER	6	BEGIN

A1709CM_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709CM_TP_SELECT_LU	TRIGGER	8	END a1709cm_tp_select_lu;
A1709CM_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1709cm_TP_SELECT_DEL

A1709CM_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1709CM_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1709cm_TP_SELECT

A1709CM_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1709CM_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1709CM_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1709CM_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1709cm_ACTION_NAKL

A1709CM_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1709CM_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1709cm

A1709CM_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1709CM_TP_SELECT_DEL	TRIGGER	11	END;
A1709CM_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1709cm_ACTION_NAKL_LU

A1709CM_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709CM_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1709cm_ACTION_NAKL

A1709CM_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CM_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1709CM_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1709CM_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709CM_ACTION_NAKL_LU	TRIGGER	8	END a1709cm_ACTION_NAKL_lu;
A1709CM_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1709cm_ACTION_NAKL_IF1

A1709CM_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1709CM_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1709cm_ACTION_NAKL

A1709CM_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CM_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1709CM_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1709CM_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1709CM_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1709CM_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709CM_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709CM_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1709CM_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1709CM_ACTION_NAKL_IF1	TRIGGER	13	END;
A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1709cm_ACTION_NAKL_BONUS_DT1

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1709cm_ACTION_NAKL

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1709CM_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1709CH_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1709ch_TP_SELECT_LU

A1709CH_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709CH_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1709ch_TP_SELECT

A1709CH_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CH_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1709CH_TP_SELECT_LU	TRIGGER	6	BEGIN

A1709CH_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709CH_TP_SELECT_LU	TRIGGER	8	END a1709ch_tp_select_lu;
A1709CH_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1709ch_TP_SELECT_DEL

A1709CH_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1709CH_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1709ch_TP_SELECT

A1709CH_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1709CH_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1709CH_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1709CH_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1709ch_ACTION_NAKL

A1709CH_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1709CH_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1709ch

A1709CH_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1709CH_TP_SELECT_DEL	TRIGGER	11	END;
A1709CH_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1709ch_ACTION_NAKL_LU

A1709CH_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709CH_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1709ch_ACTION_NAKL

A1709CH_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CH_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1709CH_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1709CH_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709CH_ACTION_NAKL_LU	TRIGGER	8	END a1709ch_ACTION_NAKL_lu;
A1709CH_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1709ch_ACTION_NAKL_IF1

A1709CH_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1709CH_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1709ch_ACTION_NAKL

A1709CH_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CH_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1709CH_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1709CH_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1709CH_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1709CH_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709CH_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709CH_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1709CH_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1709CH_ACTION_NAKL_IF1	TRIGGER	13	END;
A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1709ch_ACTION_NAKL_BONUS_DT1

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1709ch_ACTION_NAKL

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1709CH_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1709BS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1709bs_TP_SELECT_LU

A1709BS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709BS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1709bs_TP_SELECT

A1709BS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709BS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1709BS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1709BS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709BS_TP_SELECT_LU	TRIGGER	8	END a1709bs_tp_select_lu;
A1709BS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1709bs_TP_SELECT_DEL

A1709BS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1709BS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1709bs_TP_SELECT

A1709BS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1709BS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1709BS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1709BS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1709bs_ACTION_NAKL

A1709BS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1709BS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1709bs

A1709BS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1709BS_TP_SELECT_DEL	TRIGGER	11	END;
A1709BS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1709bs_ACTION_NAKL_LU

A1709BS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709BS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1709bs_ACTION_NAKL

A1709BS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709BS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1709BS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1709BS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709BS_ACTION_NAKL_LU	TRIGGER	8	END a1709bs_ACTION_NAKL_lu;
A1709BS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1709bs_ACTION_NAKL_IF1

A1709BS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1709BS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1709bs_ACTION_NAKL

A1709BS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709BS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1709BS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1709BS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1709BS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1709BS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709BS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709BS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1709BS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1709BS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1709bs_ACTION_NAKL_BONUS_DT1

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1709bs_ACTION_NAKL

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1709BS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1709AO_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1709ao_TP_SELECT_LU

A1709AO_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709AO_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1709ao_TP_SELECT

A1709AO_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709AO_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1709AO_TP_SELECT_LU	TRIGGER	6	BEGIN

A1709AO_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709AO_TP_SELECT_LU	TRIGGER	8	END a1709ao_tp_select_lu;
A1709AO_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1709ao_TP_SELECT_DEL

A1709AO_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1709AO_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1709ao_TP_SELECT

A1709AO_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1709AO_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1709AO_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1709AO_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1709ao_ACTION_NAKL

A1709AO_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1709AO_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1709ao

A1709AO_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1709AO_TP_SELECT_DEL	TRIGGER	11	END;
A1709AO_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1709ao_ACTION_NAKL_LU

A1709AO_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1709AO_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1709ao_ACTION_NAKL

A1709AO_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709AO_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1709AO_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1709AO_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1709AO_ACTION_NAKL_LU	TRIGGER	8	END a1709ao_ACTION_NAKL_lu;
A1709AO_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1709ao_ACTION_NAKL_IF1

A1709AO_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1709AO_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1709ao_ACTION_NAKL

A1709AO_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709AO_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1709AO_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1709AO_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1709AO_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1709AO_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709AO_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709AO_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1709AO_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1709AO_ACTION_NAKL_IF1	TRIGGER	13	END;
A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1709ao_ACTION_NAKL_BONUS_DT1

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1709ao_ACTION_NAKL

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1709AO_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1708OZ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1708oz_TP_SELECT_LU

A1708OZ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708OZ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1708oz_TP_SELECT

A1708OZ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708OZ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1708OZ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1708OZ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708OZ_TP_SELECT_LU	TRIGGER	8	END a1708oz_tp_select_lu;
A1708OZ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1708oz_TP_SELECT_DEL

A1708OZ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1708OZ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1708oz_TP_SELECT

A1708OZ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1708OZ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1708OZ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1708OZ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1708oz_ACTION_NAKL

A1708OZ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1708OZ_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1708oz

A1708OZ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1708OZ_TP_SELECT_DEL	TRIGGER	11	END;
A1708OZ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1708oz_ACTION_NAKL_LU

A1708OZ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708OZ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1708oz_ACTION_NAKL

A1708OZ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708OZ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1708OZ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1708OZ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708OZ_ACTION_NAKL_LU	TRIGGER	8	END a1708oz_ACTION_NAKL_lu;
A1708OZ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1708oz_ACTION_NAKL_IF1

A1708OZ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1708OZ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1708oz_ACTION_NAKL

A1708OZ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708OZ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1708OZ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1708OZ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1708OZ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1708OZ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708OZ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708OZ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1708OZ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1708OZ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1708oz_ACTION_NAKL_BONUS_DT1

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1708oz_ACTION_NAKL

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1708OZ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1708KR_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1708KR_TP_SELECT_LU

A1708KR_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708KR_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1708KR_TP_SELECT

A1708KR_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KR_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1708KR_TP_SELECT_LU	TRIGGER	6	BEGIN

A1708KR_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708KR_TP_SELECT_LU	TRIGGER	8	END A1708KR_tp_select_lu;
A1708KR_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1708KR_TP_SELECT_DEL

A1708KR_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1708KR_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1708KR_TP_SELECT

A1708KR_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1708KR_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1708KR_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1708KR_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1708KR_ACTION_NAKL

A1708KR_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1708KR_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1708KR

A1708KR_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1708KR_TP_SELECT_DEL	TRIGGER	11	END;
A1708KR_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1708KR_ACTION_NAKL_LU

A1708KR_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708KR_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1708KR_ACTION_NAKL

A1708KR_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KR_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1708KR_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1708KR_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708KR_ACTION_NAKL_LU	TRIGGER	8	END A1708KR_ACTION_NAKL_lu;
A1708KR_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1708KR_ACTION_NAKL_IF1

A1708KR_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1708KR_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1708KR_ACTION_NAKL

A1708KR_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KR_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1708KR_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1708KR_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1708KR_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1708KR_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708KR_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708KR_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1708KR_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1708KR_ACTION_NAKL_IF1	TRIGGER	13	END;
A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1708KR_ACTION_NAKL_BONUS_DT1

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1708KR_ACTION_NAKL

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1708KR_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1708KB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1708KB_TP_SELECT_LU

A1708KB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708KB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1708KB_TP_SELECT

A1708KB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1708KB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1708KB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708KB_TP_SELECT_LU	TRIGGER	8	END A1708KB_tp_select_lu;
A1708KB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1708KB_TP_SELECT_DEL

A1708KB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1708KB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1708KB_TP_SELECT

A1708KB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1708KB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1708KB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1708KB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1708KB_ACTION_NAKL

A1708KB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1708KB_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1708KB

A1708KB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1708KB_TP_SELECT_DEL	TRIGGER	11	END;
A1708KB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1708KB_ACTION_NAKL_LU

A1708KB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708KB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1708KB_ACTION_NAKL

A1708KB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1708KB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1708KB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708KB_ACTION_NAKL_LU	TRIGGER	8	END A1708KB_ACTION_NAKL_lu;
A1708KB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1708KB_ACTION_NAKL_IF1

A1708KB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1708KB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1708KB_ACTION_NAKL

A1708KB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1708KB_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1708KB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1708KB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1708KB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708KB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708KB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1708KB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1708KB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1708KB_ACTION_NAKL_BONUS_DT1

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1708KB_ACTION_NAKL

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1708KB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1708GB_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1708GB_SELECT_LU

A1708GB_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708GB_SELECT_LU	TRIGGER	3	   ON PERSIK.A1708GB_SELECT

A1708GB_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708GB_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1708GB_SELECT_LU	TRIGGER	6	BEGIN

A1708GB_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708GB_SELECT_LU	TRIGGER	8	END A1708GB_SELECT_lu;
A1708GB_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1708GB_SELECT_BONUS_DT1

A1708GB_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1708GB_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1708GB_SELECT

A1708GB_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708GB_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1708GB_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1708GB_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1708GB_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1708GB_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708GB_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1708GB_SELECT_BONUS_DT1	TRIGGER	11	END;
A1708C_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1708c_TP_SELECT_LU

A1708C_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708C_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1708c_TP_SELECT

A1708C_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708C_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1708C_TP_SELECT_LU	TRIGGER	6	BEGIN

A1708C_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708C_TP_SELECT_LU	TRIGGER	8	END a1708c_tp_select_lu;
A1708C_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1708c_TP_SELECT_DEL

A1708C_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1708C_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1708c_TP_SELECT

A1708C_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1708C_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1708C_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1708C_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1708c_ACTION_NAKL

A1708C_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1708C_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1708c

A1708C_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1708C_TP_SELECT_DEL	TRIGGER	11	END;
A1708C_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1708c_ACTION_NAKL_LU

A1708C_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708C_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1708c_ACTION_NAKL

A1708C_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708C_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1708C_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1708C_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708C_ACTION_NAKL_LU	TRIGGER	8	END a1708c_ACTION_NAKL_lu;
A1708C_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1708c_ACTION_NAKL_IF1

A1708C_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1708C_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1708c_ACTION_NAKL

A1708C_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708C_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1708C_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1708C_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1708C_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1708C_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708C_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708C_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1708C_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1708C_ACTION_NAKL_IF1	TRIGGER	13	END;
A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1708c_ACTION_NAKL_BONUS_DT1

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1708c_ACTION_NAKL

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1708C_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1708CK_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1708Ck_TP_SELECT_LU

A1708CK_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708CK_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1708Ck_TP_SELECT

A1708CK_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708CK_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1708CK_TP_SELECT_LU	TRIGGER	6	BEGIN

A1708CK_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708CK_TP_SELECT_LU	TRIGGER	8	END A1708Ck_tp_select_lu;
A1708CK_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1708Ck_TP_SELECT_DEL

A1708CK_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1708CK_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1708Ck_TP_SELECT

A1708CK_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1708CK_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1708CK_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1708CK_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1708Ck_ACTION_NAKL

A1708CK_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1708CK_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1708Ck

A1708CK_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1708CK_TP_SELECT_DEL	TRIGGER	11	END;
A1708CK_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1708Ck_ACTION_NAKL_LU

A1708CK_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1708CK_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1708Ck_ACTION_NAKL

A1708CK_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708CK_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1708CK_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1708CK_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1708CK_ACTION_NAKL_LU	TRIGGER	8	END A1708Ck_ACTION_NAKL_lu;
A1708CK_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1708Ck_ACTION_NAKL_IF1

A1708CK_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1708CK_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1708Ck_ACTION_NAKL

A1708CK_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708CK_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1708CK_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1708CK_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1708CK_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1708CK_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708CK_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708CK_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1708CK_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1708CK_ACTION_NAKL_IF1	TRIGGER	13	END;
A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1708Ck_ACTION_NAKL_BONUS_DT1

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1708Ck_ACTION_NAKL

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1708CK_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1707VB_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1707VB_TP_SELECT_LU

A1707VB_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1707VB_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1707VB_TP_SELECT

A1707VB_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707VB_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1707VB_TP_SELECT_LU	TRIGGER	6	BEGIN

A1707VB_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1707VB_TP_SELECT_LU	TRIGGER	8	END A1707VB_tp_select_lu;
A1707VB_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1707VB_TP_SELECT_DEL

A1707VB_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1707VB_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1707VB_TP_SELECT

A1707VB_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1707VB_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1707VB_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1707VB_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1707VB_ACTION_NAKL

A1707VB_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1707VB_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1707VB

A1707VB_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1707VB_TP_SELECT_DEL	TRIGGER	11	END;
A1707VB_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1707VB_ACTION_NAKL_LU

A1707VB_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1707VB_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1707VB_ACTION_NAKL

A1707VB_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707VB_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1707VB_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1707VB_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1707VB_ACTION_NAKL_LU	TRIGGER	8	END A1707VB_ACTION_NAKL_lu;
A1707VB_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1707VB_ACTION_NAKL_IF1

A1707VB_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1707VB_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1707VB_ACTION_NAKL

A1707VB_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707VB_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1707VB_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1707VB_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1707VB_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1707VB_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1707VB_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1707VB_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1707VB_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1707VB_ACTION_NAKL_IF1	TRIGGER	13	END;
A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1707VB_ACTION_NAKL_BONUS_DT1

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1707VB_ACTION_NAKL

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1707VB_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1707HI_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1707HI_TP_SELECT_LU

A1707HI_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1707HI_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1707HI_TP_SELECT

A1707HI_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707HI_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1707HI_TP_SELECT_LU	TRIGGER	6	BEGIN

A1707HI_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1707HI_TP_SELECT_LU	TRIGGER	8	END A1707HI_tp_select_lu;
A1707HI_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1707HI_TP_SELECT_DEL

A1707HI_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1707HI_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1707HI_TP_SELECT

A1707HI_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1707HI_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1707HI_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1707HI_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1707HI_ACTION_NAKL

A1707HI_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1707HI_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1707HI

A1707HI_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1707HI_TP_SELECT_DEL	TRIGGER	11	END;
A1707HI_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1707HI_ACTION_NAKL_LU

A1707HI_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1707HI_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1707HI_ACTION_NAKL

A1707HI_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707HI_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1707HI_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1707HI_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1707HI_ACTION_NAKL_LU	TRIGGER	8	END A1707HI_ACTION_NAKL_lu;
A1707HI_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1707HI_ACTION_NAKL_IF1

A1707HI_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1707HI_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1707HI_ACTION_NAKL

A1707HI_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707HI_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1707HI_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1707HI_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1707HI_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1707HI_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1707HI_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1707HI_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1707HI_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1707HI_ACTION_NAKL_IF1	TRIGGER	13	END;
A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1707HI_ACTION_NAKL_BONUS_DT1

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1707HI_ACTION_NAKL

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1707HI_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1707CA_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1707CA_TP_SELECT_LU

A1707CA_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1707CA_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1707CA_TP_SELECT

A1707CA_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707CA_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1707CA_TP_SELECT_LU	TRIGGER	6	BEGIN

A1707CA_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1707CA_TP_SELECT_LU	TRIGGER	8	END A1707CA_tp_select_lu;
A1707CA_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1707CA_TP_SELECT_DEL

A1707CA_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1707CA_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1707CA_TP_SELECT

A1707CA_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1707CA_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1707CA_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1707CA_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1707CA_ACTION_NAKL

A1707CA_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1707CA_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1707CA

A1707CA_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1707CA_TP_SELECT_DEL	TRIGGER	11	END;
A1707CA_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1707CA_ACTION_NAKL_LU

A1707CA_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1707CA_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1707CA_ACTION_NAKL

A1707CA_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707CA_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1707CA_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1707CA_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1707CA_ACTION_NAKL_LU	TRIGGER	8	END A1707CA_ACTION_NAKL_lu;
A1707CA_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1707CA_ACTION_NAKL_IF1

A1707CA_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1707CA_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1707CA_ACTION_NAKL

A1707CA_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707CA_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1707CA_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1707CA_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1707CA_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1707CA_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1707CA_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1707CA_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1707CA_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1707CA_ACTION_NAKL_IF1	TRIGGER	13	END;
A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1707CA_ACTION_NAKL_BONUS_DT1

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1707CA_ACTION_NAKL

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1707CA_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1706SL_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1706sl_TP_SELECT_LU

A1706SL_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1706SL_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1706sl_TP_SELECT

A1706SL_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SL_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1706SL_TP_SELECT_LU	TRIGGER	6	BEGIN

A1706SL_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1706SL_TP_SELECT_LU	TRIGGER	8	END a1706sl_tp_select_lu;
A1706SL_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1706sl_TP_SELECT_DEL

A1706SL_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1706SL_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1706sl_TP_SELECT

A1706SL_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1706SL_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1706SL_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1706SL_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1706sl_ACTION_NAKL

A1706SL_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1706SL_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1706sl

A1706SL_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1706SL_TP_SELECT_DEL	TRIGGER	11	END;
A1706SL_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1706sl_ACTION_NAKL_LU

A1706SL_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1706SL_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1706sl_ACTION_NAKL

A1706SL_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SL_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1706SL_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1706SL_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1706SL_ACTION_NAKL_LU	TRIGGER	8	END a1706sl_ACTION_NAKL_lu;
A1706SL_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1706sl_ACTION_NAKL_IF1

A1706SL_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1706SL_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1706sl_ACTION_NAKL

A1706SL_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SL_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1706SL_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1706SL_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1706SL_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1706SL_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1706SL_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1706SL_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1706SL_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1706SL_ACTION_NAKL_IF1	TRIGGER	13	END;
A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1706sl_ACTION_NAKL_BONUS_DT1

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1706sl_ACTION_NAKL

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1706SL_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1706SC_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1706sc_TP_SELECT_LU

A1706SC_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1706SC_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1706sc_TP_SELECT

A1706SC_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SC_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1706SC_TP_SELECT_LU	TRIGGER	6	BEGIN

A1706SC_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1706SC_TP_SELECT_LU	TRIGGER	8	END a1706sc_tp_select_lu;
A1706SC_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1706sc_TP_SELECT_DEL

A1706SC_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1706SC_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1706sc_TP_SELECT

A1706SC_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1706SC_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1706SC_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1706SC_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1706sc_ACTION_NAKL

A1706SC_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1706SC_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1706sc

A1706SC_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1706SC_TP_SELECT_DEL	TRIGGER	11	END;
A1706SC_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1706sc_ACTION_NAKL_LU

A1706SC_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1706SC_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1706sc_ACTION_NAKL

A1706SC_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SC_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1706SC_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1706SC_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1706SC_ACTION_NAKL_LU	TRIGGER	8	END a1706sc_ACTION_NAKL_lu;
A1706SC_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1706sc_ACTION_NAKL_IF1

A1706SC_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1706SC_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1706sc_ACTION_NAKL

A1706SC_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SC_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1706SC_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1706SC_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1706SC_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1706SC_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1706SC_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1706SC_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1706SC_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1706SC_ACTION_NAKL_IF1	TRIGGER	13	END;
A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1706sc_ACTION_NAKL_BONUS_DT1

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1706sc_ACTION_NAKL

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1706SC_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1706F_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1706F_TP_SELECT_LU

A1706F_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1706F_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1706F_TP_SELECT

A1706F_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706F_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1706F_TP_SELECT_LU	TRIGGER	6	BEGIN

A1706F_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1706F_TP_SELECT_LU	TRIGGER	8	END A1706F_tp_select_lu;
A1706F_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1706F_TP_SELECT_DEL

A1706F_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1706F_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1706F_TP_SELECT

A1706F_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1706F_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1706F_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1706F_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1706F_ACTION_NAKL

A1706F_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1706F_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1706F

A1706F_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1706F_TP_SELECT_DEL	TRIGGER	11	END;
A1706F_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1706F_ACTION_NAKL_LU

A1706F_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1706F_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1706F_ACTION_NAKL

A1706F_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706F_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1706F_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1706F_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1706F_ACTION_NAKL_LU	TRIGGER	8	END A1706F_ACTION_NAKL_lu;
A1706F_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1706F_ACTION_NAKL_IF1

A1706F_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1706F_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1706F_ACTION_NAKL

A1706F_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1706F_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1706F_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1706F_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1706F_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1706F_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1706F_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1706F_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1706F_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1706F_ACTION_NAKL_IF1	TRIGGER	13	END;
A1705UK_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1705UK_TP_SELECT_LU

A1705UK_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1705UK_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1705UK_TP_SELECT

A1705UK_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705UK_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1705UK_TP_SELECT_LU	TRIGGER	6	BEGIN

A1705UK_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1705UK_TP_SELECT_LU	TRIGGER	8	END A1705UK_tp_select_lu;
A1705UK_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1705UK_TP_SELECT_DEL

A1705UK_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1705UK_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1705UK_TP_SELECT

A1705UK_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1705UK_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1705UK_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1705UK_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1705UK_ACTION_NAKL

A1705UK_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1705UK_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1705UK

A1705UK_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1705UK_TP_SELECT_DEL	TRIGGER	11	END;
A1705UK_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1705UK_ACTION_NAKL_LU

A1705UK_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1705UK_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1705UK_ACTION_NAKL

A1705UK_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705UK_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1705UK_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1705UK_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1705UK_ACTION_NAKL_LU	TRIGGER	8	END A1705UK_ACTION_NAKL_lu;
A1705UK_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1705UK_ACTION_NAKL_IF1

A1705UK_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1705UK_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1705UK_ACTION_NAKL

A1705UK_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705UK_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1705UK_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1705UK_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1705UK_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1705UK_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1705UK_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1705UK_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1705UK_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1705UK_ACTION_NAKL_IF1	TRIGGER	13	END;
A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1705UK_ACTION_NAKL_BONUS_DT1

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1705UK_ACTION_NAKL

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1705UK_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1705KO_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1705KO_TP_SELECT_LU

A1705KO_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1705KO_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1705KO_TP_SELECT

A1705KO_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705KO_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1705KO_TP_SELECT_LU	TRIGGER	6	BEGIN

A1705KO_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1705KO_TP_SELECT_LU	TRIGGER	8	END A1705KO_tp_select_lu;
A1705KO_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1705KO_TP_SELECT_DEL

A1705KO_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1705KO_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1705KO_TP_SELECT

A1705KO_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1705KO_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1705KO_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1705KO_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1705KO_ACTION_NAKL

A1705KO_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1705KO_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1705KO

A1705KO_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1705KO_TP_SELECT_DEL	TRIGGER	11	END;
A1705KO_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1705KO_ACTION_NAKL_LU

A1705KO_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1705KO_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1705KO_ACTION_NAKL

A1705KO_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705KO_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1705KO_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1705KO_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1705KO_ACTION_NAKL_LU	TRIGGER	8	END A1705KO_ACTION_NAKL_lu;
A1705KO_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1705KO_ACTION_NAKL_IF1

A1705KO_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1705KO_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1705KO_ACTION_NAKL

A1705KO_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705KO_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1705KO_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1705KO_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1705KO_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1705KO_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1705KO_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1705KO_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1705KO_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1705KO_ACTION_NAKL_IF1	TRIGGER	13	END;
A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1705KO_ACTION_NAKL_BONUS_DT1

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1705KO_ACTION_NAKL

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1705KO_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1704VS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1704VS_TP_SELECT_LU

A1704VS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1704VS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1704VS_TP_SELECT

A1704VS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704VS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1704VS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1704VS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1704VS_TP_SELECT_LU	TRIGGER	8	END A1704VS_tp_select_lu;
A1704VS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1704VS_TP_SELECT_DEL

A1704VS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1704VS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1704VS_TP_SELECT

A1704VS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1704VS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1704VS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1704VS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1704VS_ACTION_NAKL

A1704VS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1704VS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1704VS

A1704VS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1704VS_TP_SELECT_DEL	TRIGGER	11	END;
A1704VS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1704VS_ACTION_NAKL_LU

A1704VS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1704VS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1704VS_ACTION_NAKL

A1704VS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704VS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1704VS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1704VS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1704VS_ACTION_NAKL_LU	TRIGGER	8	END A1704VS_ACTION_NAKL_lu;
A1704VS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1704VS_ACTION_NAKL_IF1

A1704VS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1704VS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1704VS_ACTION_NAKL

A1704VS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704VS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1704VS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1704VS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1704VS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1704VS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1704VS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1704VS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1704VS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1704VS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1704VS_ACTION_NAKL_BONUS_DT1

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1704VS_ACTION_NAKL

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1704VS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1704F_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1704F_TP_SELECT_LU

A1704F_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1704F_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1704F_TP_SELECT

A1704F_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704F_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1704F_TP_SELECT_LU	TRIGGER	6	BEGIN

A1704F_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1704F_TP_SELECT_LU	TRIGGER	8	END A1704F_tp_select_lu;
A1704F_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1704F_TP_SELECT_DEL

A1704F_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1704F_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1704F_TP_SELECT

A1704F_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1704F_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1704F_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1704F_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1704F_ACTION_NAKL

A1704F_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1704F_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1704F

A1704F_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1704F_TP_SELECT_DEL	TRIGGER	11	END;
A1704F_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1704F_ACTION_NAKL_LU

A1704F_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1704F_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1704F_ACTION_NAKL

A1704F_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704F_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1704F_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1704F_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1704F_ACTION_NAKL_LU	TRIGGER	8	END A1704F_ACTION_NAKL_lu;
A1704F_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1704F_ACTION_NAKL_IF1

A1704F_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1704F_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1704F_ACTION_NAKL

A1704F_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704F_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1704F_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1704F_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1704F_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1704F_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1704F_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1704F_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1704F_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1704F_ACTION_NAKL_IF1	TRIGGER	13	END;
A1704CA_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1704CA_TP_SELECT_LU

A1704CA_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1704CA_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1704CA_TP_SELECT

A1704CA_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704CA_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1704CA_TP_SELECT_LU	TRIGGER	6	BEGIN

A1704CA_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1704CA_TP_SELECT_LU	TRIGGER	8	END A1704CA_tp_select_lu;
A1704CA_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1704CA_TP_SELECT_DEL

A1704CA_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1704CA_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1704CA_TP_SELECT

A1704CA_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1704CA_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1704CA_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1704CA_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1704CA_ACTION_NAKL

A1704CA_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1704CA_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1704CA

A1704CA_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1704CA_TP_SELECT_DEL	TRIGGER	11	END;
A1704CA_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1704CA_ACTION_NAKL_LU

A1704CA_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1704CA_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1704CA_ACTION_NAKL

A1704CA_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704CA_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1704CA_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1704CA_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1704CA_ACTION_NAKL_LU	TRIGGER	8	END A1704CA_ACTION_NAKL_lu;
A1704CA_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1704CA_ACTION_NAKL_IF1

A1704CA_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1704CA_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1704CA_ACTION_NAKL

A1704CA_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704CA_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1704CA_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1704CA_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1704CA_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1704CA_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1704CA_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1704CA_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1704CA_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1704CA_ACTION_NAKL_IF1	TRIGGER	13	END;
A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1704CA_ACTION_NAKL_BONUS_DT1

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1704CA_ACTION_NAKL

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1704CA_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1703VN_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1703VN_TP_SELECT_LU

A1703VN_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703VN_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1703VN_TP_SELECT

A1703VN_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703VN_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1703VN_TP_SELECT_LU	TRIGGER	6	BEGIN

A1703VN_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703VN_TP_SELECT_LU	TRIGGER	8	END A1703VN_tp_select_lu;
A1703VN_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1703VN_TP_SELECT_DEL

A1703VN_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1703VN_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1703VN_TP_SELECT

A1703VN_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1703VN_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1703VN_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1703VN_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1703VN_ACTION_NAKL

A1703VN_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1703VN_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1703VN

A1703VN_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1703VN_TP_SELECT_DEL	TRIGGER	11	END;
A1703VN_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1703VN_ACTION_NAKL_LU

A1703VN_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703VN_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1703VN_ACTION_NAKL

A1703VN_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703VN_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1703VN_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1703VN_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703VN_ACTION_NAKL_LU	TRIGGER	8	END A1703VN_ACTION_NAKL_lu;
A1703VN_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1703VN_ACTION_NAKL_IF1

A1703VN_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1703VN_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1703VN_ACTION_NAKL

A1703VN_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703VN_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1703VN_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1703VN_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1703VN_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1703VN_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703VN_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703VN_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1703VN_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1703VN_ACTION_NAKL_IF1	TRIGGER	13	END;
A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1703VN_ACTION_NAKL_BONUS_DT1

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1703VN_ACTION_NAKL

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1703VN_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1703F_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1703F_TP_SELECT_LU

A1703F_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703F_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1703F_TP_SELECT

A1703F_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703F_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1703F_TP_SELECT_LU	TRIGGER	6	BEGIN

A1703F_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703F_TP_SELECT_LU	TRIGGER	8	END A1703F_tp_select_lu;
A1703F_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1703F_TP_SELECT_DEL

A1703F_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1703F_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1703F_TP_SELECT

A1703F_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1703F_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1703F_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1703F_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1703F_ACTION_NAKL

A1703F_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1703F_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1703F

A1703F_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1703F_TP_SELECT_DEL	TRIGGER	11	END;
A1703F_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1703F_ACTION_NAKL_LU

A1703F_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703F_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1703F_ACTION_NAKL

A1703F_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703F_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1703F_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1703F_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703F_ACTION_NAKL_LU	TRIGGER	8	END A1703F_ACTION_NAKL_lu;
A1703F_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1703F_ACTION_NAKL_IF1

A1703F_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1703F_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1703F_ACTION_NAKL

A1703F_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703F_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1703F_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1703F_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1703F_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1703F_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703F_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703F_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1703F_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1703F_ACTION_NAKL_IF1	TRIGGER	13	END;
A1703BS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1703BS_TP_SELECT_LU

A1703BS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703BS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1703BS_TP_SELECT

A1703BS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1703BS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1703BS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703BS_TP_SELECT_LU	TRIGGER	8	END A1703BS_tp_select_lu;
A1703BS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1703BS_TP_SELECT_DEL

A1703BS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1703BS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1703BS_TP_SELECT

A1703BS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1703BS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1703BS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1703BS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1703BS_ACTION_NAKL

A1703BS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1703BS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1703BS

A1703BS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1703BS_TP_SELECT_DEL	TRIGGER	11	END;
A1703BS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1703BS_ACTION_NAKL_LU

A1703BS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703BS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1703BS_ACTION_NAKL

A1703BS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1703BS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1703BS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703BS_ACTION_NAKL_LU	TRIGGER	8	END A1703BS_ACTION_NAKL_lu;
A1703BS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1703BS_ACTION_NAKL_IF1

A1703BS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1703BS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1703BS_ACTION_NAKL

A1703BS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1703BS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1703BS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1703BS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1703BS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703BS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703BS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1703BS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1703BS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1703BS_ACTION_NAKL_BONUS_DT1

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1703BS_ACTION_NAKL

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1703BS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1703BE_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1703BE_TP_SELECT_LU

A1703BE_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703BE_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1703BE_TP_SELECT

A1703BE_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BE_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1703BE_TP_SELECT_LU	TRIGGER	6	BEGIN

A1703BE_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703BE_TP_SELECT_LU	TRIGGER	8	END A1703BE_tp_select_lu;
A1703BE_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1703BE_TP_SELECT_DEL

A1703BE_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1703BE_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1703BE_TP_SELECT

A1703BE_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1703BE_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1703BE_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1703BE_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1703BE_ACTION_NAKL

A1703BE_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1703BE_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1703BE

A1703BE_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1703BE_TP_SELECT_DEL	TRIGGER	11	END;
A1703BE_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1703BE_ACTION_NAKL_LU

A1703BE_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1703BE_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1703BE_ACTION_NAKL

A1703BE_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BE_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1703BE_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1703BE_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1703BE_ACTION_NAKL_LU	TRIGGER	8	END A1703BE_ACTION_NAKL_lu;
A1703BE_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1703BE_ACTION_NAKL_IF1

A1703BE_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1703BE_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1703BE_ACTION_NAKL

A1703BE_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BE_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1703BE_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1703BE_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1703BE_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1703BE_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703BE_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703BE_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1703BE_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1703BE_ACTION_NAKL_IF1	TRIGGER	13	END;
A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1703BE_ACTION_NAKL_BONUS_DT1

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1703BE_ACTION_NAKL

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1703BE_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1702KV_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1702KV_TP_SELECT_LU

A1702KV_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KV_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1702KV_TP_SELECT

A1702KV_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KV_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1702KV_TP_SELECT_LU	TRIGGER	6	BEGIN

A1702KV_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KV_TP_SELECT_LU	TRIGGER	8	END A1702KV_tp_select_lu;
A1702KV_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1702KV_TP_SELECT_DEL

A1702KV_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1702KV_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1702KV_TP_SELECT

A1702KV_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1702KV_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1702KV_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1702KV_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1702KV_ACTION_NAKL

A1702KV_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1702KV_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1702KV

A1702KV_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1702KV_TP_SELECT_DEL	TRIGGER	11	END;
A1702KV_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1702KV_ACTION_NAKL_LU

A1702KV_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KV_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1702KV_ACTION_NAKL

A1702KV_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KV_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1702KV_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1702KV_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KV_ACTION_NAKL_LU	TRIGGER	8	END A1702KV_ACTION_NAKL_lu;
A1702KV_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1702KV_ACTION_NAKL_IF1

A1702KV_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1702KV_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1702KV_ACTION_NAKL

A1702KV_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KV_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1702KV_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1702KV_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1702KV_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1702KV_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KV_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KV_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1702KV_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1702KV_ACTION_NAKL_IF1	TRIGGER	13	END;
A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1702KV_ACTION_NAKL_BONUS_DT1

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1702KV_ACTION_NAKL

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1702KV_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1702KVV_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1702KVV_TP_SELECT_LU

A1702KVV_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KVV_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1702KVV_TP_SELECT

A1702KVV_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KVV_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1702KVV_TP_SELECT_LU	TRIGGER	6	BEGIN

A1702KVV_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KVV_TP_SELECT_LU	TRIGGER	8	END A1702KVV_tp_select_lu;
A1702KVV_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1702KVV_TP_SELECT_DEL

A1702KVV_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1702KVV_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1702KVV_TP_SELECT

A1702KVV_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1702KVV_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1702KVV_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1702KVV_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1702KVV_ACTION_NAKL

A1702KVV_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1702KVV_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1702KVV

A1702KVV_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1702KVV_TP_SELECT_DEL	TRIGGER	11	END;
A1702KVV_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1702KVV_ACTION_NAKL_LU

A1702KVV_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KVV_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1702KVV_ACTION_NAKL

A1702KVV_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KVV_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1702KVV_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1702KVV_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KVV_ACTION_NAKL_LU	TRIGGER	8	END A1702KVV_ACTION_NAKL_lu;
A1702KVV_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1702KVV_ACTION_NAKL_IF1

A1702KVV_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1702KVV_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1702KVV_ACTION_NAKL

A1702KVV_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KVV_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1702KVV_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1702KVV_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1702KVV_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1702KVV_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KVV_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KVV_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1702KVV_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1702KVV_ACTION_NAKL_IF1	TRIGGER	13	END;
A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1702KVV_ACTION_NAKL_BONUS_DT1

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1702KVV_ACTION_NAKL

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1702KVV_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1702KS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1702KS_TP_SELECT_LU

A1702KS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1702KS_TP_SELECT

A1702KS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1702KS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1702KS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KS_TP_SELECT_LU	TRIGGER	8	END A1702KS_tp_select_lu;
A1702KS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1702KS_TP_SELECT_DEL

A1702KS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1702KS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1702KS_TP_SELECT

A1702KS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1702KS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1702KS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1702KS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1702KS_ACTION_NAKL

A1702KS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1702KS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1702KS

A1702KS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1702KS_TP_SELECT_DEL	TRIGGER	11	END;
A1702KS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1702KS_ACTION_NAKL_LU

A1702KS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1702KS_ACTION_NAKL

A1702KS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1702KS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1702KS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KS_ACTION_NAKL_LU	TRIGGER	8	END A1702KS_ACTION_NAKL_lu;
A1702KS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1702KS_ACTION_NAKL_IF1

A1702KS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1702KS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1702KS_ACTION_NAKL

A1702KS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1702KS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1702KS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1702KS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1702KS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1702KS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1702KS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1702KS_ACTION_NAKL_BONUS_DT1

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1702KS_ACTION_NAKL

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1702KS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1702KP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1702KP_TP_SELECT_LU

A1702KP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1702KP_TP_SELECT

A1702KP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1702KP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1702KP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KP_TP_SELECT_LU	TRIGGER	8	END A1702KP_tp_select_lu;
A1702KP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1702KP_TP_SELECT_DEL

A1702KP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1702KP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1702KP_TP_SELECT

A1702KP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1702KP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1702KP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1702KP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1702KP_ACTION_NAKL

A1702KP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1702KP_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1702KP

A1702KP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1702KP_TP_SELECT_DEL	TRIGGER	11	END;
A1702KP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1702KP_ACTION_NAKL_LU

A1702KP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702KP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1702KP_ACTION_NAKL

A1702KP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1702KP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1702KP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702KP_ACTION_NAKL_LU	TRIGGER	8	END A1702KP_ACTION_NAKL_lu;
A1702KP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1702KP_ACTION_NAKL_IF1

A1702KP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1702KP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1702KP_ACTION_NAKL

A1702KP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1702KP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1702KP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1702KP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1702KP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KP_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1702KP_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1702KP_ACTION_NAKL_IF1	TRIGGER	13	END;
A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1702KP_ACTION_NAKL_BONUS_DT1

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1702KP_ACTION_NAKL

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1702KP_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1702B_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1702b_TP_SELECT_LU

A1702B_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702B_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1702b_TP_SELECT

A1702B_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702B_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1702B_TP_SELECT_LU	TRIGGER	6	BEGIN

A1702B_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702B_TP_SELECT_LU	TRIGGER	8	END a1702b_tp_select_lu;
A1702B_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1702b_TP_SELECT_DEL

A1702B_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1702B_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1702b_TP_SELECT

A1702B_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1702B_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1702B_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1702B_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1702b_ACTION_NAKL

A1702B_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1702B_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1702b

A1702B_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1702B_TP_SELECT_DEL	TRIGGER	11	END;
A1702B_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1702b_ACTION_NAKL_LU

A1702B_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1702B_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1702b_ACTION_NAKL

A1702B_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702B_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1702B_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1702B_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1702B_ACTION_NAKL_LU	TRIGGER	8	END a1702b_ACTION_NAKL_lu;
A1702B_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1702b_ACTION_NAKL_IF1

A1702B_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1702B_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1702b_ACTION_NAKL

A1702B_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702B_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1702B_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1702B_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1702B_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1702B_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702B_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702B_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1702B_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1702B_ACTION_NAKL_IF1	TRIGGER	13	END;
A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1702b_ACTION_NAKL_BONUS_DT1

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1702b_ACTION_NAKL

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1702B_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1701SH_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1701sh_TP_SELECT_LU

A1701SH_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1701SH_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1701sh_TP_SELECT

A1701SH_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701SH_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1701SH_TP_SELECT_LU	TRIGGER	6	BEGIN

A1701SH_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1701SH_TP_SELECT_LU	TRIGGER	8	END a1701sh_tp_select_lu;
A1701SH_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1701sh_TP_SELECT_DEL

A1701SH_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1701SH_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1701sh_TP_SELECT

A1701SH_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1701SH_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1701SH_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1701SH_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1701sh_ACTION_NAKL

A1701SH_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1701SH_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1701sh

A1701SH_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1701SH_TP_SELECT_DEL	TRIGGER	11	END;
A1701SH_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1701sh_ACTION_NAKL_LU

A1701SH_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1701SH_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1701sh_ACTION_NAKL

A1701SH_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701SH_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1701SH_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1701SH_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1701SH_ACTION_NAKL_LU	TRIGGER	8	END a1701sh_ACTION_NAKL_lu;
A1701SH_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1701sh_ACTION_NAKL_IF1

A1701SH_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1701SH_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1701sh_ACTION_NAKL

A1701SH_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701SH_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1701SH_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1701SH_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1701SH_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1701SH_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1701SH_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1701SH_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1701SH_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1701SH_ACTION_NAKL_IF1	TRIGGER	13	END;
A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1701sh_ACTION_NAKL_BONUS_DT1

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1701sh_ACTION_NAKL

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1701SH_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1701KS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1701ks_TP_SELECT_LU

A1701KS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1701KS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1701ks_TP_SELECT

A1701KS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1701KS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1701KS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1701KS_TP_SELECT_LU	TRIGGER	8	END a1701ks_tp_select_lu;
A1701KS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1701ks_TP_SELECT_DEL

A1701KS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1701KS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1701ks_TP_SELECT

A1701KS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1701KS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1701KS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1701KS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1701ks_ACTION_NAKL

A1701KS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1701KS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1701ks

A1701KS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1701KS_TP_SELECT_DEL	TRIGGER	11	END;
A1701KS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1701ks_ACTION_NAKL_LU

A1701KS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1701KS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1701ks_ACTION_NAKL

A1701KS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1701KS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1701KS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1701KS_ACTION_NAKL_LU	TRIGGER	8	END a1701ks_ACTION_NAKL_lu;
A1701KS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1701ks_ACTION_NAKL_IF1

A1701KS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1701KS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1701ks_ACTION_NAKL

A1701KS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1701KS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1701KS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1701KS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1701KS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1701KS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1701KS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1701KS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1701KS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1701ks_ACTION_NAKL_BONUS_DT1

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1701ks_ACTION_NAKL

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1701KS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1701KP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1701kp_TP_SELECT_LU

A1701KP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1701KP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1701kp_TP_SELECT

A1701KP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1701KP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1701KP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1701KP_TP_SELECT_LU	TRIGGER	8	END a1701kp_tp_select_lu;
A1701KP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1701kp_TP_SELECT_DEL

A1701KP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1701KP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1701kp_TP_SELECT

A1701KP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1701KP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1701KP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1701KP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1701kp_ACTION_NAKL

A1701KP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1701KP_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1701kp

A1701KP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1701KP_TP_SELECT_DEL	TRIGGER	11	END;
A1701KP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1701kp_ACTION_NAKL_LU

A1701KP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1701KP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1701kp_ACTION_NAKL

A1701KP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1701KP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1701KP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1701KP_ACTION_NAKL_LU	TRIGGER	8	END a1701kp_ACTION_NAKL_lu;
A1701KP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1701kp_ACTION_NAKL_IF1

A1701KP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1701KP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1701kp_ACTION_NAKL

A1701KP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1701KP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1701KP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1701KP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1701KP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1701KP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1701KP_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1701KP_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1701KP_ACTION_NAKL_IF1	TRIGGER	13	END;
A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1701kp_ACTION_NAKL_BONUS_DT1

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1701kp_ACTION_NAKL

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1701KP_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A16P5TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A16P5TP_SELECT_LU

A16P5TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A16P5TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A16p5TP_SELECT

A16P5TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16P5TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A16P5TP_SELECT_LU	TRIGGER	6	BEGIN

A16P5TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A16P5TP_SELECT_LU	TRIGGER	8	END A16p5TP_SELECT_lu;
A16P5TP_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER A16p5tp_select_bonus_dt1

A16P5TP_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A16P5TP_SELECT_BONUS_DT1	TRIGGER	3	   ON A16p5tp_select

A16P5TP_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16P5TP_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A16P5TP_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A16P5TP_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A16P5TP_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A16P5TP_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A16P5TP_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A16P5TP_SELECT_BONUS_DT1	TRIGGER	11	END;
A16P5N_NETTP_LU	TRIGGER	1	TRIGGER PERSIK.A16P5N_NETTP_LU

A16P5N_NETTP_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A16P5N_NETTP_LU	TRIGGER	3	   ON PERSIK.A16P5N_NETTP

A16P5N_NETTP_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16P5N_NETTP_LU	TRIGGER	5	   FOR EACH ROW

A16P5N_NETTP_LU	TRIGGER	6	BEGIN

A16P5N_NETTP_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A16P5N_NETTP_LU	TRIGGER	8	END A16P5N_NETTP_lu;
A16P5N_NETTP_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A16P5N_NETTP_BONUS_DT1

A16P5N_NETTP_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A16P5N_NETTP_BONUS_DT1	TRIGGER	3	   ON PERSIK.A16P5N_NETTP

A16P5N_NETTP_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16P5N_NETTP_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A16P5N_NETTP_BONUS_DT1	TRIGGER	6	BEGIN

A16P5N_NETTP_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A16P5N_NETTP_BONUS_DT1	TRIGGER	8	   THEN

A16P5N_NETTP_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A16P5N_NETTP_BONUS_DT1	TRIGGER	10	   END IF;

A16P5N_NETTP_BONUS_DT1	TRIGGER	11	END;
A16P5NET_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A16p5net_SELECT_LU

A16P5NET_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A16P5NET_SELECT_LU	TRIGGER	3	   ON PERSIK.A16p5net_SELECT

A16P5NET_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16P5NET_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A16P5NET_SELECT_LU	TRIGGER	6	BEGIN

A16P5NET_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A16P5NET_SELECT_LU	TRIGGER	8	END A16p5net_SELECT_lu;
A16CO_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A16CO_MV_Q_ADD

A16CO_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A16CO_MV_Q_ADD	TRIGGER	3	   ON PERSIK.A16CO

A16CO_MV_Q_ADD	TRIGGER	4	BEGIN

A16CO_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A16CO_MV_ST');

A16CO_MV_Q_ADD	TRIGGER	6	END;
A16COTP_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A16COTP_MV_Q_ADD

A16COTP_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A16COTP_MV_Q_ADD	TRIGGER	3	   ON PERSIK.A16COtp

A16COTP_MV_Q_ADD	TRIGGER	4	BEGIN

A16COTP_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A16CO_MV_ST');

A16COTP_MV_Q_ADD	TRIGGER	6	END;
A16COGETTARGETINFO	FUNCTION	1	FUNCTION        a16coGetTargetInfo (tp_kod_   IN VARCHAR,

A16COGETTARGETINFO	FUNCTION	2	                                                      visit_    IN DATE)

A16COGETTARGETINFO	FUNCTION	3	   RETURN VARCHAR

A16COGETTARGETINFO	FUNCTION	4	IS

A16COGETTARGETINFO	FUNCTION	5	   res   VARCHAR (255);

A16COGETTARGETINFO	FUNCTION	6	BEGIN

A16COGETTARGETINFO	FUNCTION	7	   BEGIN

A16COGETTARGETINFO	FUNCTION	8	      /*SELECT target_info

A16COGETTARGETINFO	FUNCTION	9	        INTO res

A16COGETTARGETINFO	FUNCTION	10	        FROM a16co

A16COGETTARGETINFO	FUNCTION	11	       WHERE     visitdate =

A16COGETTARGETINFO	FUNCTION	12	                    (SELECT MAX (visitdate)

A16COGETTARGETINFO	FUNCTION	13	                       FROM a16co

A16COGETTARGETINFO	FUNCTION	14	                      WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_)

A16COGETTARGETINFO	FUNCTION	15	             AND tp_kod_key = tp_kod_

A16COGETTARGETINFO	FUNCTION	16	             AND ROWNUM = 1;*/

A16COGETTARGETINFO	FUNCTION	17	

A16COGETTARGETINFO	FUNCTION	18	        SELECT target_info

A16COGETTARGETINFO	FUNCTION	19	          INTO res

A16COGETTARGETINFO	FUNCTION	20	          FROM a16co

A16COGETTARGETINFO	FUNCTION	21	         WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_ AND ROWNUM = 1

A16COGETTARGETINFO	FUNCTION	22	      ORDER BY visitdate DESC;

A16COGETTARGETINFO	FUNCTION	23	

A16COGETTARGETINFO	FUNCTION	24	      RETURN (res);

A16COGETTARGETINFO	FUNCTION	25	   EXCEPTION

A16COGETTARGETINFO	FUNCTION	26	      WHEN NO_DATA_FOUND

A16COGETTARGETINFO	FUNCTION	27	      THEN

A16COGETTARGETINFO	FUNCTION	28	         RETURN ('');

A16COGETTARGETINFO	FUNCTION	29	   END;

A16COGETTARGETINFO	FUNCTION	30	END;
A16COGETTARGET	FUNCTION	1	FUNCTION        a16coGetTarget (tp_kod_   IN VARCHAR,

A16COGETTARGET	FUNCTION	2	                                                  visit_    IN DATE)

A16COGETTARGET	FUNCTION	3	   RETURN INTEGER

A16COGETTARGET	FUNCTION	4	IS

A16COGETTARGET	FUNCTION	5	   res   INTEGER;

A16COGETTARGET	FUNCTION	6	BEGIN

A16COGETTARGET	FUNCTION	7	   BEGIN

A16COGETTARGET	FUNCTION	8	      /*SELECT target

A16COGETTARGET	FUNCTION	9	        INTO res

A16COGETTARGET	FUNCTION	10	        FROM a16co

A16COGETTARGET	FUNCTION	11	       WHERE     visitdate =

A16COGETTARGET	FUNCTION	12	                    (SELECT MAX (visitdate)

A16COGETTARGET	FUNCTION	13	                       FROM a16co

A16COGETTARGET	FUNCTION	14	                      WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_)

A16COGETTARGET	FUNCTION	15	             AND tp_kod_key = tp_kod_

A16COGETTARGET	FUNCTION	16	             AND ROWNUM = 1;*/

A16COGETTARGET	FUNCTION	17	

A16COGETTARGET	FUNCTION	18	

A16COGETTARGET	FUNCTION	19	        SELECT target

A16COGETTARGET	FUNCTION	20	          INTO res

A16COGETTARGET	FUNCTION	21	          FROM a16co

A16COGETTARGET	FUNCTION	22	         WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_ AND ROWNUM = 1

A16COGETTARGET	FUNCTION	23	      ORDER BY visitdate DESC;

A16COGETTARGET	FUNCTION	24	

A16COGETTARGET	FUNCTION	25	      RETURN (res);

A16COGETTARGET	FUNCTION	26	   EXCEPTION

A16COGETTARGET	FUNCTION	27	      WHEN NO_DATA_FOUND

A16COGETTARGET	FUNCTION	28	      THEN

A16COGETTARGET	FUNCTION	29	         RETURN (0);

A16COGETTARGET	FUNCTION	30	   END;

A16COGETTARGET	FUNCTION	31	END;
A1612VS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1612VS_TP_SELECT_LU

A1612VS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612VS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1612vs_TP_SELECT

A1612VS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612VS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1612VS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1612VS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612VS_TP_SELECT_LU	TRIGGER	8	END a1612vs_tp_select_lu;
A1612VS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1612VS_TP_SELECT_DEL

A1612VS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1612VS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1612vs_TP_SELECT

A1612VS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1612VS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1612VS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1612VS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1612vs_ACTION_NAKL

A1612VS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1612VS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1612vs

A1612VS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1612VS_TP_SELECT_DEL	TRIGGER	11	END;
A1612VS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1612VS_ACTION_NAKL_LU

A1612VS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612VS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1612vs_ACTION_NAKL

A1612VS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612VS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1612VS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1612VS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612VS_ACTION_NAKL_LU	TRIGGER	8	END a1612vs_ACTION_NAKL_lu;
A1612VS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1612VS_ACTION_NAKL_IF1

A1612VS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1612VS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1612vs_ACTION_NAKL

A1612VS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612VS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1612VS_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1612VS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1612VS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1612VS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612VS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612VS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1612VS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1612VS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1612VS_ACTION_NAKL_BONUS_DT1

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1612vs_ACTION_NAKL

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1612VS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1612SO_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1612SO_TP_SELECT_LU

A1612SO_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612SO_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1612so_TP_SELECT

A1612SO_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612SO_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1612SO_TP_SELECT_LU	TRIGGER	6	BEGIN

A1612SO_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612SO_TP_SELECT_LU	TRIGGER	8	END a1612so_tp_select_lu;
A1612SO_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1612SO_TP_SELECT_DEL

A1612SO_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1612SO_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1612so_TP_SELECT

A1612SO_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1612SO_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1612SO_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1612SO_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1612so_ACTION_NAKL

A1612SO_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1612SO_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1612so

A1612SO_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1612SO_TP_SELECT_DEL	TRIGGER	11	END;
A1612SO_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1612SO_ACTION_NAKL_LU

A1612SO_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612SO_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1612so_ACTION_NAKL

A1612SO_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612SO_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1612SO_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1612SO_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612SO_ACTION_NAKL_LU	TRIGGER	8	END a1612so_ACTION_NAKL_lu;
A1612SO_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1612SO_ACTION_NAKL_IF1

A1612SO_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1612SO_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1612so_ACTION_NAKL

A1612SO_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612SO_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1612SO_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1612SO_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1612SO_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1612SO_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612SO_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612SO_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1612SO_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1612SO_ACTION_NAKL_IF1	TRIGGER	13	END;
A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1612SO_ACTION_NAKL_BONUS_DT1

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1612so_ACTION_NAKL

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1612SO_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1612PZ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1612PZ_TP_SELECT_LU

A1612PZ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612PZ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1612PZ_TP_SELECT

A1612PZ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612PZ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1612PZ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1612PZ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612PZ_TP_SELECT_LU	TRIGGER	8	END A1612PZ_tp_select_lu;
A1612PZ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1612PZ_TP_SELECT_DEL

A1612PZ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1612PZ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1612PZ_TP_SELECT

A1612PZ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1612PZ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1612PZ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1612PZ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1612PZ_ACTION_NAKL

A1612PZ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1612PZ_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1612PZ

A1612PZ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1612PZ_TP_SELECT_DEL	TRIGGER	11	END;
A1612PZ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1612PZ_ACTION_NAKL_LU

A1612PZ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612PZ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1612PZ_ACTION_NAKL

A1612PZ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612PZ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1612PZ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1612PZ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612PZ_ACTION_NAKL_LU	TRIGGER	8	END A1612PZ_ACTION_NAKL_lu;
A1612PZ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1612PZ_ACTION_NAKL_IF1

A1612PZ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1612PZ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1612PZ_ACTION_NAKL

A1612PZ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612PZ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1612PZ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1612PZ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1612PZ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1612PZ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612PZ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612PZ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1612PZ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1612PZ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1612PZ_ACTION_NAKL_BONUS_DT1

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1612PZ_ACTION_NAKL

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1612PZ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1612NP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1612NP_TP_SELECT_LU

A1612NP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612NP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1612np_TP_SELECT

A1612NP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612NP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1612NP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1612NP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612NP_TP_SELECT_LU	TRIGGER	8	END a1612np_tp_select_lu;
A1612NP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1612NP_TP_SELECT_DEL

A1612NP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1612NP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1612np_TP_SELECT

A1612NP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1612NP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1612NP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1612NP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1612np_ACTION_NAKL

A1612NP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1612NP_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1612np

A1612NP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1612NP_TP_SELECT_DEL	TRIGGER	11	END;
A1612NP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1612NP_ACTION_NAKL_LU

A1612NP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1612NP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1612np_ACTION_NAKL

A1612NP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612NP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1612NP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1612NP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1612NP_ACTION_NAKL_LU	TRIGGER	8	END a1612np_ACTION_NAKL_lu;
A1612NP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1612NP_ACTION_NAKL_IF1

A1612NP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1612NP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1612np_ACTION_NAKL

A1612NP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612NP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1612NP_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1612NP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1612NP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1612NP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612NP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612NP_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1612NP_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1612NP_ACTION_NAKL_IF1	TRIGGER	13	END;
A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1612NP_ACTION_NAKL_BONUS_DT1

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1612np_ACTION_NAKL

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1612NP_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A16115P_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A16115P_SELECT_LU

A16115P_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A16115P_SELECT_LU	TRIGGER	3	   ON PERSIK.A16115P_SELECT

A16115P_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16115P_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A16115P_SELECT_LU	TRIGGER	6	BEGIN

A16115P_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A16115P_SELECT_LU	TRIGGER	8	END A16115P_SELECT_lu;
A16115P_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A16115P_SELECT_BONUS_DT1

A16115P_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A16115P_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A16115P_SELECT

A16115P_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A16115P_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A16115P_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A16115P_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A16115P_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A16115P_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A16115P_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A16115P_SELECT_BONUS_DT1	TRIGGER	11	END;
A1610S7_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1610S7_TP_SELECT_LU

A1610S7_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1610S7_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1610S7_TP_SELECT

A1610S7_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1610S7_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1610S7_TP_SELECT_LU	TRIGGER	6	BEGIN

A1610S7_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1610S7_TP_SELECT_LU	TRIGGER	8	END A1610S7_tp_select_lu;
A1610S7_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1610S7_TP_SELECT_DEL

A1610S7_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1610S7_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1610S7_TP_SELECT

A1610S7_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1610S7_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1610S7_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1610S7_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1610S7_ACTION_NAKL

A1610S7_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1610S7_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1610S7

A1610S7_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1610S7_TP_SELECT_DEL	TRIGGER	11	END;
A1610S7_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1610S7_ACTION_NAKL_LU

A1610S7_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1610S7_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1610S7_ACTION_NAKL

A1610S7_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1610S7_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1610S7_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1610S7_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1610S7_ACTION_NAKL_LU	TRIGGER	8	END A1610S7_ACTION_NAKL_lu;
A1610S7_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1610S7_ACTION_NAKL_IF1

A1610S7_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1610S7_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1610S7_ACTION_NAKL

A1610S7_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1610S7_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1610S7_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1610S7_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1610S7_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1610S7_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1610S7_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1610S7_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1610S7_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1610S7_ACTION_NAKL_IF1	TRIGGER	13	END;
A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1610S7_ACTION_NAKL_BONUS_DT1

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1610S7_ACTION_NAKL

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1610S7_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1610S6_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1610S6_SELECT_LU

A1610S6_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1610S6_SELECT_LU	TRIGGER	3	   ON PERSIK.A1610S6_SELECT

A1610S6_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1610S6_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1610S6_SELECT_LU	TRIGGER	6	BEGIN

A1610S6_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1610S6_SELECT_LU	TRIGGER	8	END A1610S6_SELECT_lu;
A1610S6_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1610S6_select_bonus_dt1

A1610S6_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1610S6_SELECT_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1610S6_SELECT

A1610S6_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1610S6_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1610S6_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1610S6_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1610S6_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1610S6_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1610S6_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1610S6_SELECT_BONUS_DT1	TRIGGER	11	END;
A1609B_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1609B_TP_SELECT_LU

A1609B_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1609B_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1609B_TP_SELECT

A1609B_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1609B_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1609B_TP_SELECT_LU	TRIGGER	6	BEGIN

A1609B_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1609B_TP_SELECT_LU	TRIGGER	8	END A1609B_tp_select_lu;
A1609B_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1609B_TP_SELECT_DEL

A1609B_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1609B_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1609B_TP_SELECT

A1609B_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1609B_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1609B_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1609B_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1609B_ACTION_NAKL

A1609B_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1609B_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1609B

A1609B_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1609B_TP_SELECT_DEL	TRIGGER	11	END;
A1609B_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1609B_ACTION_NAKL_LU

A1609B_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1609B_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1609B_ACTION_NAKL

A1609B_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1609B_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1609B_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1609B_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1609B_ACTION_NAKL_LU	TRIGGER	8	END A1609B_ACTION_NAKL_lu;
A1609B_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1609B_ACTION_NAKL_IF1

A1609B_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1609B_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1609B_ACTION_NAKL

A1609B_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1609B_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1609B_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1609B_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1609B_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1609B_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1609B_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1609B_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1609B_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1609B_ACTION_NAKL_IF1	TRIGGER	13	END;
A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1609B_ACTION_NAKL_BONUS_DT1

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1609B_ACTION_NAKL

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1609B_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1608RZ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1608RZ_TP_SELECT_LU

A1608RZ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1608RZ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1608RZ_TP_SELECT

A1608RZ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608RZ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1608RZ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1608RZ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1608RZ_TP_SELECT_LU	TRIGGER	8	END A1608RZ_tp_select_lu;
A1608RZ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1608RZ_TP_SELECT_DEL

A1608RZ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1608RZ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1608RZ_TP_SELECT

A1608RZ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1608RZ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1608RZ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1608RZ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1608RZ_ACTION_NAKL

A1608RZ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1608RZ_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1608RZ

A1608RZ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1608RZ_TP_SELECT_DEL	TRIGGER	11	END;
A1608RZ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1608RZ_ACTION_NAKL_LU

A1608RZ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1608RZ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1608RZ_ACTION_NAKL

A1608RZ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608RZ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1608RZ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1608RZ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1608RZ_ACTION_NAKL_LU	TRIGGER	8	END A1608RZ_ACTION_NAKL_lu;
A1608RZ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1608RZ_ACTION_NAKL_IF1

A1608RZ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1608RZ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1608RZ_ACTION_NAKL

A1608RZ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608RZ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1608RZ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1608RZ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1608RZ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1608RZ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1608RZ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1608RZ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1608RZ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1608RZ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1608RZ_ACTION_NAKL_BONUS_DT1

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1608RZ_ACTION_NAKL

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1608RZ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1608LJ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1608LJ_TP_SELECT_LU

A1608LJ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1608LJ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1608LJ_TP_SELECT

A1608LJ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608LJ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1608LJ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1608LJ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1608LJ_TP_SELECT_LU	TRIGGER	8	END A1608LJ_tp_select_lu;
A1608LJ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1608LJ_TP_SELECT_DEL

A1608LJ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1608LJ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1608LJ_TP_SELECT

A1608LJ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1608LJ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1608LJ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1608LJ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1608LJ_ACTION_NAKL

A1608LJ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1608LJ_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1608LJ

A1608LJ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1608LJ_TP_SELECT_DEL	TRIGGER	11	END;
A1608LJ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1608LJ_ACTION_NAKL_LU

A1608LJ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1608LJ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1608LJ_ACTION_NAKL

A1608LJ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608LJ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1608LJ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1608LJ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1608LJ_ACTION_NAKL_LU	TRIGGER	8	END A1608LJ_ACTION_NAKL_lu;
A1608LJ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1608LJ_ACTION_NAKL_IF1

A1608LJ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1608LJ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1608LJ_ACTION_NAKL

A1608LJ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608LJ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1608LJ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1608LJ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1608LJ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1608LJ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1608LJ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1608LJ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1608LJ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1608LJ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1608LJ_ACTION_NAKL_BONUS_DT1

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1608LJ_ACTION_NAKL

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1608LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1608CS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1608CS_TP_SELECT_LU

A1608CS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1608CS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1608CS_TP_SELECT

A1608CS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608CS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1608CS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1608CS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1608CS_TP_SELECT_LU	TRIGGER	8	END A1608CS_tp_select_lu;
A1608CS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1608CS_TP_SELECT_DEL

A1608CS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1608CS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1608CS_TP_SELECT

A1608CS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1608CS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1608CS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1608CS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1608CS_ACTION_NAKL

A1608CS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1608CS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1608CS

A1608CS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1608CS_TP_SELECT_DEL	TRIGGER	11	END;
A1608CS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1608CS_ACTION_NAKL_LU

A1608CS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1608CS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1608CS_ACTION_NAKL

A1608CS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608CS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1608CS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1608CS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1608CS_ACTION_NAKL_LU	TRIGGER	8	END A1608CS_ACTION_NAKL_lu;
A1608CS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1608CS_ACTION_NAKL_IF1

A1608CS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1608CS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1608CS_ACTION_NAKL

A1608CS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608CS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1608CS_ACTION_NAKL_IF1	TRIGGER	6	   BEGIN

A1608CS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1608CS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1608CS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1608CS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1608CS_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1608CS_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1608CS_ACTION_NAKL_IF1	TRIGGER	13	END;
A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1608CS_ACTION_NAKL_BONUS_DT1

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1608CS_ACTION_NAKL

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1608CS_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1607SJ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1607sj_TP_SELECT_LU

A1607SJ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1607SJ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1607sj_TP_SELECT

A1607SJ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607SJ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1607SJ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1607SJ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1607SJ_TP_SELECT_LU	TRIGGER	8	END a1607sj_tp_select_lu;
A1607SJ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1607sj_TP_SELECT_DEL

A1607SJ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1607SJ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1607sj_TP_SELECT

A1607SJ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1607SJ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1607SJ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1607SJ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1607sj_ACTION_NAKL

A1607SJ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1607SJ_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1607sj

A1607SJ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1607SJ_TP_SELECT_DEL	TRIGGER	11	END;
A1607SJ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1607sj_ACTION_NAKL_LU

A1607SJ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1607SJ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1607sj_ACTION_NAKL

A1607SJ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607SJ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1607SJ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1607SJ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1607SJ_ACTION_NAKL_LU	TRIGGER	8	END a1607sj_ACTION_NAKL_lu;
A1607SJ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1607sj_ACTION_NAKL_IF1

A1607SJ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1607SJ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1607sj_ACTION_NAKL

A1607SJ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607SJ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1607SJ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1607SJ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1607SJ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1607SJ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1607SJ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1607SJ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1607SJ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1607SJ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1607sj_ACTION_NAKL_BONUS_DT1

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1607sj_ACTION_NAKL

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1607SJ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1607LJ_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1607lj_TP_SELECT_LU

A1607LJ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1607LJ_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1607lj_TP_SELECT

A1607LJ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607LJ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1607LJ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1607LJ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1607LJ_TP_SELECT_LU	TRIGGER	8	END a1607lj_tp_select_lu;
A1607LJ_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1607lj_TP_SELECT_DEL

A1607LJ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1607LJ_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1607lj_TP_SELECT

A1607LJ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1607LJ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1607LJ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1607LJ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1607lj_ACTION_NAKL

A1607LJ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1607LJ_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1607lj

A1607LJ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1607LJ_TP_SELECT_DEL	TRIGGER	11	END;
A1607LJ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1607lj_ACTION_NAKL_LU

A1607LJ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1607LJ_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1607lj_ACTION_NAKL

A1607LJ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607LJ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1607LJ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1607LJ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1607LJ_ACTION_NAKL_LU	TRIGGER	8	END a1607lj_ACTION_NAKL_lu;
A1607LJ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1607lj_ACTION_NAKL_IF1

A1607LJ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1607LJ_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1607lj_ACTION_NAKL

A1607LJ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607LJ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1607LJ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1607LJ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1607LJ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1607LJ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1607LJ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1607LJ_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1607LJ_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1607LJ_ACTION_NAKL_IF1	TRIGGER	13	END;
A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1607lj_ACTION_NAKL_BONUS_DT1

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1607lj_ACTION_NAKL

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1607LJ_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1606LS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1606LS_TP_SELECT_LU

A1606LS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1606LS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1606LS_TP_SELECT

A1606LS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1606LS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1606LS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1606LS_TP_SELECT_LU	TRIGGER	8	END A1606LS_tp_select_lu;
A1606LS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1606LS_TP_SELECT_DEL

A1606LS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1606LS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1606LS_TP_SELECT

A1606LS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1606LS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1606LS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1606LS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1606LS_ACTION_NAKL

A1606LS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1606LS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1606LS

A1606LS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1606LS_TP_SELECT_DEL	TRIGGER	11	END;
A1606LS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1606LS_ACTION_NAKL_LU

A1606LS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1606LS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1606LS_ACTION_NAKL

A1606LS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1606LS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1606LS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1606LS_ACTION_NAKL_LU	TRIGGER	8	END A1606LS_ACTION_NAKL_lu;
A1606LS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1606LS_ACTION_NAKL_IF1

A1606LS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1606LS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1606LS_ACTION_NAKL

A1606LS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1606LS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1606LS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1606LS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1606LS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1606LS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1606LS_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1606LS_ACTION_NAKL_IF1	TRIGGER	12	END;
A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1606LS_ACTION_NAKL_BONUS_DT1

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1606LS_ACTION_NAKL

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	10	   END IF;

A1606LS_ACTION_NAKL_BONUS_DT1	TRIGGER	11	END;
A1606LG_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1606LG_TP_SELECT_LU

A1606LG_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1606LG_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1606LG_TP_SELECT

A1606LG_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LG_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1606LG_TP_SELECT_LU	TRIGGER	6	BEGIN

A1606LG_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1606LG_TP_SELECT_LU	TRIGGER	8	END A1606LG_tp_select_lu;
A1606LG_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1606LG_TP_SELECT_DEL

A1606LG_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1606LG_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1606LG_TP_SELECT

A1606LG_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1606LG_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1606LG_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1606LG_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1606LG_ACTION_NAKL

A1606LG_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1606LG_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1606LG

A1606LG_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1606LG_TP_SELECT_DEL	TRIGGER	11	END;
A1606LG_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1606LG_ACTION_NAKL_LU

A1606LG_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1606LG_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1606LG_ACTION_NAKL

A1606LG_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LG_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1606LG_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1606LG_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1606LG_ACTION_NAKL_LU	TRIGGER	8	END A1606LG_ACTION_NAKL_lu;
A1606LG_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1606LG_ACTION_NAKL_IF1

A1606LG_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1606LG_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1606LG_ACTION_NAKL

A1606LG_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LG_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1606LG_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1606LG_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1606LG_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1606LG_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1606LG_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1606LG_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1606LG_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1606LG_ACTION_NAKL_IF1	TRIGGER	13	END;
A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1606LG_ACTION_NAKL_BONUS_DT1

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1606LG_ACTION_NAKL

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	11	   END IF;

A1606LG_ACTION_NAKL_BONUS_DT1	TRIGGER	12	END;
A1605AP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.a1605ap_TP_SELECT_LU

A1605AP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1605AP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.a1605ap_TP_SELECT

A1605AP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1605AP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1605AP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1605AP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1605AP_TP_SELECT_LU	TRIGGER	8	END a1605ap_tp_select_lu;
A1605AP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.a1605ap_TP_SELECT_DEL

A1605AP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1605AP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.a1605ap_TP_SELECT

A1605AP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1605AP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1605AP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1605AP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1605ap_ACTION_NAKL

A1605AP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1605AP_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1605ap

A1605AP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1605AP_TP_SELECT_DEL	TRIGGER	11	END;
A1605AP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.a1605ap_ACTION_NAKL_LU

A1605AP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1605AP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.a1605ap_ACTION_NAKL

A1605AP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1605AP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1605AP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1605AP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1605AP_ACTION_NAKL_LU	TRIGGER	8	END a1605ap_ACTION_NAKL_lu;
A1605AP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1605ap_ACTION_NAKL_IF1

A1605AP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1605AP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.a1605ap_ACTION_NAKL

A1605AP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1605AP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1605AP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1605AP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1605AP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1605AP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1605AP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1605AP_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1605AP_ACTION_NAKL_IF1	TRIGGER	12	END;
A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.a1605ap_ACTION_NAKL_BONUS_DT1

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.a1605ap_ACTION_NAKL

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	10	   END IF;

A1605AP_ACTION_NAKL_BONUS_DT1	TRIGGER	11	END;
A1604SH_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1604SH_TP_SELECT_LU

A1604SH_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1604SH_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1604SH_TP_SELECT

A1604SH_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1604SH_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1604SH_TP_SELECT_LU	TRIGGER	6	BEGIN

A1604SH_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1604SH_TP_SELECT_LU	TRIGGER	8	END A1604SH_tp_select_lu;
A1604SH_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1604SH_TP_SELECT_DEL

A1604SH_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1604SH_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1604SH_TP_SELECT

A1604SH_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1604SH_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1604SH_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1604SH_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1604SH_ACTION_NAKL

A1604SH_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1604SH_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1604SH

A1604SH_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1604SH_TP_SELECT_DEL	TRIGGER	11	END;
A1604SH_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1604SH_ACTION_NAKL_LU

A1604SH_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1604SH_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1604SH_ACTION_NAKL

A1604SH_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1604SH_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1604SH_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1604SH_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1604SH_ACTION_NAKL_LU	TRIGGER	8	END A1604SH_ACTION_NAKL_lu;
A1604SH_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1604SH_ACTION_NAKL_IF1

A1604SH_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1604SH_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1604SH_ACTION_NAKL

A1604SH_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1604SH_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1604SH_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1604SH_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1604SH_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1604SH_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1604SH_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1604SH_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1604SH_ACTION_NAKL_IF1	TRIGGER	12	END;
A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	1	TRIGGER PERSIK.A1604SH_ACTION_NAKL_bonus_dt1

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	3	   ON PERSIK.A1604SH_ACTION_NAKL

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	6	BEGIN

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	8	   THEN

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	10	   END IF;

A1604SH_ACTION_NAKL_BONUS_DT1	TRIGGER	11	END;
A1602KAR_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1602KAR_TP_SELECT_LU

A1602KAR_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1602KAR_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1602KAR_TP_SELECT

A1602KAR_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1602KAR_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1602KAR_TP_SELECT_LU	TRIGGER	6	BEGIN

A1602KAR_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1602KAR_TP_SELECT_LU	TRIGGER	8	END A1602KAR_tp_select_lu;
A1602KAR_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1602KAR_TP_SELECT_DEL

A1602KAR_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1602KAR_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1602KAR_TP_SELECT

A1602KAR_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1602KAR_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1602KAR_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1602KAR_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1602KAR_ACTION_NAKL

A1602KAR_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1602KAR_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1602KAR

A1602KAR_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1602KAR_TP_SELECT_DEL	TRIGGER	11	END;
A1602KAR_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1602KAR_ACTION_NAKL_LU

A1602KAR_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1602KAR_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1602KAR_ACTION_NAKL

A1602KAR_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1602KAR_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1602KAR_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1602KAR_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1602KAR_ACTION_NAKL_LU	TRIGGER	8	END A1602KAR_ACTION_NAKL_lu;
A1602KAR_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1602KAR_ACTION_NAKL_IF1

A1602KAR_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1602KAR_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1602KAR_ACTION_NAKL

A1602KAR_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1602KAR_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1602KAR_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1602KAR_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) = 0

A1602KAR_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1602KAR_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1602KAR_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1602KAR_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1602KAR_ACTION_NAKL_IF1	TRIGGER	12	END;
A1512T_ACTION_CLIENT_LU	TRIGGER	1	TRIGGER PERSIK.A1512T_ACTION_client_LU

A1512T_ACTION_CLIENT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512T_ACTION_CLIENT_LU	TRIGGER	3	   ON PERSIK.A1512T_ACTION_client

A1512T_ACTION_CLIENT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512T_ACTION_CLIENT_LU	TRIGGER	5	   FOR EACH ROW

A1512T_ACTION_CLIENT_LU	TRIGGER	6	BEGIN

A1512T_ACTION_CLIENT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512T_ACTION_CLIENT_LU	TRIGGER	8	END A1512T_ACTION_client_lu;
A1512NYP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1512NYP_TP_SELECT_LU

A1512NYP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512NYP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1512NYP_TP_SELECT

A1512NYP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1512NYP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1512NYP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512NYP_TP_SELECT_LU	TRIGGER	8	END A1512NYP_tp_select_lu;
A1512NYP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1512NYP_TP_SELECT_DEL

A1512NYP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1512NYP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1512NYP_TP_SELECT

A1512NYP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1512NYP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1512NYP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1512NYP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1512NYP_ACTION_NAKL

A1512NYP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1512NYP_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1512NYP

A1512NYP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1512NYP_TP_SELECT_DEL	TRIGGER	11	END;
A1512NYP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1512NYP_ACTION_NAKL_LU

A1512NYP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512NYP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1512NYP_ACTION_NAKL

A1512NYP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1512NYP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1512NYP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512NYP_ACTION_NAKL_LU	TRIGGER	8	END A1512NYP_ACTION_NAKL_lu;
A1512NYP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1512NYP_ACTION_NAKL_IF1

A1512NYP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1512NYP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1512NYP_ACTION_NAKL

A1512NYP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1512NYP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1512NYP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1512NYP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1512NYP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1512NYP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1512NYP_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1512NYP_ACTION_NAKL_IF1	TRIGGER	12	END;
A1512NYP51_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1512NYP51_TP_SELECT_LU

A1512NYP51_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512NYP51_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1512NYP51_TP_SELECT

A1512NYP51_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP51_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1512NYP51_TP_SELECT_LU	TRIGGER	6	BEGIN

A1512NYP51_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512NYP51_TP_SELECT_LU	TRIGGER	8	END A1512NYP51_tp_select_lu;
A1512NYP51_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1512NYP51_TP_SELECT_DEL

A1512NYP51_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1512NYP51_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1512NYP51_TP_SELECT

A1512NYP51_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1512NYP51_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1512NYP51_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1512NYP51_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1512NYP51_ACTION_NAKL

A1512NYP51_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1512NYP51_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1512NYP51

A1512NYP51_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1512NYP51_TP_SELECT_DEL	TRIGGER	11	END;
A1512NYP51_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1512NYP51_ACTION_NAKL_LU

A1512NYP51_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512NYP51_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1512NYP51_ACTION_NAKL

A1512NYP51_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP51_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1512NYP51_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1512NYP51_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512NYP51_ACTION_NAKL_LU	TRIGGER	8	END A1512NYP51_ACTION_NAKL_lu;
A1512NYP51_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1512NYP51_ACTION_NAKL_IF1

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1512NYP51_ACTION_NAKL

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1512NYP51_ACTION_NAKL_IF1	TRIGGER	12	END;
A1512NYP31_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1512NYP31_TP_SELECT_LU

A1512NYP31_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512NYP31_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1512NYP31_TP_SELECT

A1512NYP31_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP31_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1512NYP31_TP_SELECT_LU	TRIGGER	6	BEGIN

A1512NYP31_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512NYP31_TP_SELECT_LU	TRIGGER	8	END A1512NYP31_tp_select_lu;
A1512NYP31_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1512NYP31_TP_SELECT_DEL

A1512NYP31_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1512NYP31_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1512NYP31_TP_SELECT

A1512NYP31_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1512NYP31_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1512NYP31_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1512NYP31_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1512NYP31_ACTION_NAKL

A1512NYP31_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1512NYP31_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1512NYP31

A1512NYP31_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1512NYP31_TP_SELECT_DEL	TRIGGER	11	END;
A1512NYP31_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1512NYP31_ACTION_NAKL_LU

A1512NYP31_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1512NYP31_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1512NYP31_ACTION_NAKL

A1512NYP31_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP31_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1512NYP31_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1512NYP31_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1512NYP31_ACTION_NAKL_LU	TRIGGER	8	END A1512NYP31_ACTION_NAKL_lu;
A1512NYP31_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1512NYP31_ACTION_NAKL_IF1

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1512NYP31_ACTION_NAKL

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1512NYP31_ACTION_NAKL_IF1	TRIGGER	12	END;
A1511NYP_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1511NYP_TP_SELECT_LU

A1511NYP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1511NYP_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1511NYP_TP_SELECT

A1511NYP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1511NYP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1511NYP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1511NYP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1511NYP_TP_SELECT_LU	TRIGGER	8	END A1511NYP_tp_select_lu;
A1511NYP_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1511NYP_TP_SELECT_DEL

A1511NYP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1511NYP_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1511NYP_TP_SELECT

A1511NYP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1511NYP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1511NYP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1511NYP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1511NYP_ACTION_NAKL

A1511NYP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1511NYP_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1511NYP

A1511NYP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1511NYP_TP_SELECT_DEL	TRIGGER	11	END;
A1511NYP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1511NYP_ACTION_NAKL_LU

A1511NYP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1511NYP_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1511NYP_ACTION_NAKL

A1511NYP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1511NYP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1511NYP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1511NYP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1511NYP_ACTION_NAKL_LU	TRIGGER	8	END A1511NYP_ACTION_NAKL_lu;
A1511NYP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1511NYP_ACTION_NAKL_IF1

A1511NYP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1511NYP_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1511NYP_ACTION_NAKL

A1511NYP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1511NYP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1511NYP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1511NYP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1511NYP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1511NYP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1511NYP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1511NYP_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1511NYP_ACTION_NAKL_IF1	TRIGGER	12	END;
A1510VS_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1510VS_TP_SELECT_LU

A1510VS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1510VS_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1510VS_TP_SELECT

A1510VS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1510VS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1510VS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1510VS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1510VS_TP_SELECT_LU	TRIGGER	8	END A1510VS_tp_select_lu;
A1510VS_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1510VS_TP_SELECT_DEL

A1510VS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1510VS_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1510VS_TP_SELECT

A1510VS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1510VS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1510VS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1510VS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1510VS_ACTION_NAKL

A1510VS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1510VS_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1510VS

A1510VS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1510VS_TP_SELECT_DEL	TRIGGER	11	END;
A1510VS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1510VS_ACTION_NAKL_LU

A1510VS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1510VS_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1510VS_ACTION_NAKL

A1510VS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1510VS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1510VS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1510VS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1510VS_ACTION_NAKL_LU	TRIGGER	8	END A1510VS_ACTION_NAKL_lu;
A1510VS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1510VS_ACTION_NAKL_IF1

A1510VS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1510VS_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1510VS_ACTION_NAKL

A1510VS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1510VS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1510VS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1510VS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1510VS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1510VS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1510VS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1510VS_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1510VS_ACTION_NAKL_IF1	TRIGGER	12	END;
A1510K5_TP_SELECT_LU	TRIGGER	1	TRIGGER PERSIK.A1510K5_TP_SELECT_LU

A1510K5_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1510K5_TP_SELECT_LU	TRIGGER	3	   ON PERSIK.A1510K5_TP_SELECT

A1510K5_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1510K5_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1510K5_TP_SELECT_LU	TRIGGER	6	BEGIN

A1510K5_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1510K5_TP_SELECT_LU	TRIGGER	8	END A1510K5_tp_select_lu;
A1510K5_TP_SELECT_DEL	TRIGGER	1	TRIGGER PERSIK.A1510K5_TP_SELECT_DEL

A1510K5_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1510K5_TP_SELECT_DEL	TRIGGER	3	   ON PERSIK.A1510K5_TP_SELECT

A1510K5_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1510K5_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1510K5_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1510K5_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A1510K5_ACTION_NAKL

A1510K5_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1510K5_TP_SELECT_DEL	TRIGGER	9	                                        FROM A1510K5

A1510K5_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1510K5_TP_SELECT_DEL	TRIGGER	11	END;
A1510K5_ACTION_NAKL_LU	TRIGGER	1	TRIGGER PERSIK.A1510K5_ACTION_NAKL_LU

A1510K5_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1510K5_ACTION_NAKL_LU	TRIGGER	3	   ON PERSIK.A1510K5_ACTION_NAKL

A1510K5_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1510K5_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1510K5_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1510K5_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1510K5_ACTION_NAKL_LU	TRIGGER	8	END A1510K5_ACTION_NAKL_lu;
A1510K5_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.A1510K5_ACTION_NAKL_IF1

A1510K5_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1510K5_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1510K5_ACTION_NAKL

A1510K5_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1510K5_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1510K5_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1510K5_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1510K5_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1510K5_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1510K5_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1510K5_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1510K5_ACTION_NAKL_IF1	TRIGGER	12	END;
A1509VS_TP_SELECT_LU	TRIGGER	1	TRIGGER a1509vs_TP_SELECT_LU

A1509VS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1509VS_TP_SELECT_LU	TRIGGER	3	   ON a1509vs_TP_SELECT

A1509VS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1509VS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1509VS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1509VS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1509VS_TP_SELECT_LU	TRIGGER	8	END a1509vs_tp_select_lu;
A1509VS_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1509vs_TP_SELECT_DEL

A1509VS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1509VS_TP_SELECT_DEL	TRIGGER	3	   ON a1509vs_TP_SELECT

A1509VS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1509VS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1509VS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1509VS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1509vs_ACTION_NAKL

A1509VS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1509VS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1509vs

A1509VS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1509VS_TP_SELECT_DEL	TRIGGER	11	END;
A1509VS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1509vs_ACTION_NAKL_LU

A1509VS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1509VS_ACTION_NAKL_LU	TRIGGER	3	   ON a1509vs_ACTION_NAKL

A1509VS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1509VS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1509VS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1509VS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1509VS_ACTION_NAKL_LU	TRIGGER	8	END a1509vs_ACTION_NAKL_lu;
A1509VS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1509vs_ACTION_NAKL_IF1

A1509VS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1509VS_ACTION_NAKL_IF1	TRIGGER	3	   ON a1509vs_ACTION_NAKL

A1509VS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1509VS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1509VS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1509VS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1509VS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1509VS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1509VS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1509VS_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1509VS_ACTION_NAKL_IF1	TRIGGER	12	END;
A1508KZP_TP_SELECT_LU	TRIGGER	1	TRIGGER a1508kzp_TP_SELECT_LU

A1508KZP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1508KZP_TP_SELECT_LU	TRIGGER	3	   ON a1508kzp_TP_SELECT

A1508KZP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1508KZP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1508KZP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1508KZP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1508KZP_TP_SELECT_LU	TRIGGER	8	END a1508kzp_tp_select_lu;
A1508KZP_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1508kzp_TP_SELECT_DEL

A1508KZP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1508KZP_TP_SELECT_DEL	TRIGGER	3	   ON a1508kzp_TP_SELECT

A1508KZP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1508KZP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1508KZP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1508KZP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1508kzp_ACTION_NAKL

A1508KZP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1508KZP_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1508kzp

A1508KZP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1508KZP_TP_SELECT_DEL	TRIGGER	11	END;
A1508KZP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1508kzp_ACTION_NAKL_LU

A1508KZP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1508KZP_ACTION_NAKL_LU	TRIGGER	3	   ON a1508kzp_ACTION_NAKL

A1508KZP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1508KZP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1508KZP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1508KZP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1508KZP_ACTION_NAKL_LU	TRIGGER	8	END a1508kzp_ACTION_NAKL_lu;
A1508KZP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1508kzp_ACTION_NAKL_IF1

A1508KZP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1508KZP_ACTION_NAKL_IF1	TRIGGER	3	   ON a1508kzp_ACTION_NAKL

A1508KZP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1508KZP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1508KZP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1508KZP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1508KZP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1508KZP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1508KZP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1508KZP_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1508KZP_ACTION_NAKL_IF1	TRIGGER	12	END;
A150611L_TP_SELECT_LU	TRIGGER	1	TRIGGER a150611l_TP_SELECT_LU

A150611L_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150611L_TP_SELECT_LU	TRIGGER	3	   ON a150611l_TP_SELECT

A150611L_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150611L_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150611L_TP_SELECT_LU	TRIGGER	6	BEGIN

A150611L_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150611L_TP_SELECT_LU	TRIGGER	8	END a150611l_tp_select_lu;
A150611L_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150611l_TP_SELECT_DEL

A150611L_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150611L_TP_SELECT_DEL	TRIGGER	3	   ON a150611l_TP_SELECT

A150611L_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150611L_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150611L_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150611L_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150611l_ACTION_NAKL

A150611L_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150611L_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150611l

A150611L_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150611L_TP_SELECT_DEL	TRIGGER	11	END;
A150611L_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150611l_ACTION_NAKL_LU

A150611L_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150611L_ACTION_NAKL_LU	TRIGGER	3	   ON a150611l_ACTION_NAKL

A150611L_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150611L_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150611L_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150611L_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150611L_ACTION_NAKL_LU	TRIGGER	8	END a150611l_ACTION_NAKL_lu;
A150611L_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150611l_ACTION_NAKL_IF1

A150611L_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150611L_ACTION_NAKL_IF1	TRIGGER	3	   ON a150611l_ACTION_NAKL

A150611L_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150611L_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150611L_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150611L_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150611L_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150611L_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150611L_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150611L_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150611L_ACTION_NAKL_IF1	TRIGGER	12	END;
A1505VV_TP_SELECT_LU	TRIGGER	1	TRIGGER a1505vv_TP_SELECT_LU

A1505VV_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1505VV_TP_SELECT_LU	TRIGGER	3	   ON a1505vv_TP_SELECT

A1505VV_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1505VV_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1505VV_TP_SELECT_LU	TRIGGER	6	BEGIN

A1505VV_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1505VV_TP_SELECT_LU	TRIGGER	8	END a1505vv_tp_select_lu;
A1505VV_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1505vv_TP_SELECT_DEL

A1505VV_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1505VV_TP_SELECT_DEL	TRIGGER	3	   ON a1505vv_TP_SELECT

A1505VV_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1505VV_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1505VV_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1505VV_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1505vv_ACTION_NAKL

A1505VV_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1505VV_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1505vv

A1505VV_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1505VV_TP_SELECT_DEL	TRIGGER	11	END;
A1505VV_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1505vv_ACTION_NAKL_LU

A1505VV_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1505VV_ACTION_NAKL_LU	TRIGGER	3	   ON a1505vv_ACTION_NAKL

A1505VV_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1505VV_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1505VV_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1505VV_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1505VV_ACTION_NAKL_LU	TRIGGER	8	END a1505vv_ACTION_NAKL_lu;
A1505VV_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1505vv_ACTION_NAKL_IF1

A1505VV_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1505VV_ACTION_NAKL_IF1	TRIGGER	3	   ON a1505vv_ACTION_NAKL

A1505VV_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1505VV_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1505VV_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1505VV_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1505VV_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1505VV_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1505VV_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1505VV_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1505VV_ACTION_NAKL_IF1	TRIGGER	12	END;
A1505SI_TP_SELECT_LU	TRIGGER	1	TRIGGER a1505si_TP_SELECT_LU

A1505SI_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1505SI_TP_SELECT_LU	TRIGGER	3	   ON a1505si_TP_SELECT

A1505SI_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1505SI_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1505SI_TP_SELECT_LU	TRIGGER	6	BEGIN

A1505SI_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1505SI_TP_SELECT_LU	TRIGGER	8	END a1505si_tp_select_lu;
A1505SI_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1505si_TP_SELECT_DEL

A1505SI_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1505SI_TP_SELECT_DEL	TRIGGER	3	   ON a1505si_TP_SELECT

A1505SI_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1505SI_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1505SI_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1505SI_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1505si_ACTION_NAKL

A1505SI_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1505SI_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1505si

A1505SI_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1505SI_TP_SELECT_DEL	TRIGGER	11	END;
A1505SI_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1505si_ACTION_NAKL_LU

A1505SI_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1505SI_ACTION_NAKL_LU	TRIGGER	3	   ON a1505si_ACTION_NAKL

A1505SI_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1505SI_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1505SI_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1505SI_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1505SI_ACTION_NAKL_LU	TRIGGER	8	END a1505si_ACTION_NAKL_lu;
A1505SI_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1505si_ACTION_NAKL_IF1

A1505SI_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1505SI_ACTION_NAKL_IF1	TRIGGER	3	   ON a1505si_ACTION_NAKL

A1505SI_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1505SI_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1505SI_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1505SI_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1505SI_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1505SI_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1505SI_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1505SI_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1505SI_ACTION_NAKL_IF1	TRIGGER	12	END;
A150511TF_TP_SELECT_LU	TRIGGER	1	TRIGGER a150511tf_TP_SELECT_LU

A150511TF_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511TF_TP_SELECT_LU	TRIGGER	3	   ON a150511tf_TP_SELECT

A150511TF_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511TF_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150511TF_TP_SELECT_LU	TRIGGER	6	BEGIN

A150511TF_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511TF_TP_SELECT_LU	TRIGGER	8	END a150511tf_tp_select_lu;
A150511TF_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150511tf_TP_SELECT_DEL

A150511TF_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150511TF_TP_SELECT_DEL	TRIGGER	3	   ON a150511tf_TP_SELECT

A150511TF_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150511TF_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150511TF_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150511TF_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150511tf_ACTION_NAKL

A150511TF_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150511TF_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150511tf

A150511TF_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150511TF_TP_SELECT_DEL	TRIGGER	11	END;
A150511TF_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150511tf_ACTION_NAKL_LU

A150511TF_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511TF_ACTION_NAKL_LU	TRIGGER	3	   ON a150511tf_ACTION_NAKL

A150511TF_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511TF_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150511TF_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150511TF_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511TF_ACTION_NAKL_LU	TRIGGER	8	END a150511tf_ACTION_NAKL_lu;
A150511TF_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150511tf_ACTION_NAKL_IF1

A150511TF_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150511TF_ACTION_NAKL_IF1	TRIGGER	3	   ON a150511tf_ACTION_NAKL

A150511TF_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511TF_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150511TF_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150511TF_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150511TF_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150511TF_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150511TF_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150511TF_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150511TF_ACTION_NAKL_IF1	TRIGGER	12	END;
A150511TE_TP_SELECT_LU	TRIGGER	1	TRIGGER a150511te_TP_SELECT_LU

A150511TE_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511TE_TP_SELECT_LU	TRIGGER	3	   ON a150511te_TP_SELECT

A150511TE_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511TE_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150511TE_TP_SELECT_LU	TRIGGER	6	BEGIN

A150511TE_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511TE_TP_SELECT_LU	TRIGGER	8	END a150511te_tp_select_lu;
A150511TE_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150511te_TP_SELECT_DEL

A150511TE_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150511TE_TP_SELECT_DEL	TRIGGER	3	   ON a150511te_TP_SELECT

A150511TE_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150511TE_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150511TE_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150511TE_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150511te_ACTION_NAKL

A150511TE_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150511TE_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150511te

A150511TE_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150511TE_TP_SELECT_DEL	TRIGGER	11	END;
A150511TE_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150511te_ACTION_NAKL_LU

A150511TE_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511TE_ACTION_NAKL_LU	TRIGGER	3	   ON a150511te_ACTION_NAKL

A150511TE_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511TE_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150511TE_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150511TE_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511TE_ACTION_NAKL_LU	TRIGGER	8	END a150511te_ACTION_NAKL_lu;
A150511TE_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150511te_ACTION_NAKL_IF1

A150511TE_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150511TE_ACTION_NAKL_IF1	TRIGGER	3	   ON a150511te_ACTION_NAKL

A150511TE_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511TE_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150511TE_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150511TE_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150511TE_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150511TE_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150511TE_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150511TE_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150511TE_ACTION_NAKL_IF1	TRIGGER	12	END;
A150511L_TP_SELECT_LU	TRIGGER	1	TRIGGER a150511l_TP_SELECT_LU

A150511L_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511L_TP_SELECT_LU	TRIGGER	3	   ON a150511l_TP_SELECT

A150511L_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511L_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150511L_TP_SELECT_LU	TRIGGER	6	BEGIN

A150511L_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511L_TP_SELECT_LU	TRIGGER	8	END a150511l_tp_select_lu;
A150511L_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150511l_TP_SELECT_DEL

A150511L_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150511L_TP_SELECT_DEL	TRIGGER	3	   ON a150511l_TP_SELECT

A150511L_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150511L_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150511L_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150511L_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150511l_ACTION_NAKL

A150511L_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150511L_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150511l

A150511L_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150511L_TP_SELECT_DEL	TRIGGER	11	END;
A150511L_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150511l_ACTION_NAKL_LU

A150511L_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511L_ACTION_NAKL_LU	TRIGGER	3	   ON a150511l_ACTION_NAKL

A150511L_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511L_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150511L_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150511L_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511L_ACTION_NAKL_LU	TRIGGER	8	END a150511l_ACTION_NAKL_lu;
A150511L_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150511l_ACTION_NAKL_IF1

A150511L_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150511L_ACTION_NAKL_IF1	TRIGGER	3	   ON a150511l_ACTION_NAKL

A150511L_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511L_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150511L_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150511L_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150511L_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150511L_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150511L_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150511L_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150511L_ACTION_NAKL_IF1	TRIGGER	12	END;
A150511G_TP_SELECT_LU	TRIGGER	1	TRIGGER a150511g_TP_SELECT_LU

A150511G_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511G_TP_SELECT_LU	TRIGGER	3	   ON a150511g_TP_SELECT

A150511G_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511G_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150511G_TP_SELECT_LU	TRIGGER	6	BEGIN

A150511G_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511G_TP_SELECT_LU	TRIGGER	8	END a150511g_tp_select_lu;
A150511G_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150511g_TP_SELECT_DEL

A150511G_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150511G_TP_SELECT_DEL	TRIGGER	3	   ON a150511g_TP_SELECT

A150511G_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150511G_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150511G_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150511G_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150511g_ACTION_NAKL

A150511G_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150511G_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150511g

A150511G_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150511G_TP_SELECT_DEL	TRIGGER	11	END;
A150511G_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150511g_ACTION_NAKL_LU

A150511G_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150511G_ACTION_NAKL_LU	TRIGGER	3	   ON a150511g_ACTION_NAKL

A150511G_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511G_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150511G_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150511G_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150511G_ACTION_NAKL_LU	TRIGGER	8	END a150511g_ACTION_NAKL_lu;
A150511G_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150511g_ACTION_NAKL_IF1

A150511G_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150511G_ACTION_NAKL_IF1	TRIGGER	3	   ON a150511g_ACTION_NAKL

A150511G_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150511G_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150511G_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150511G_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150511G_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150511G_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150511G_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150511G_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150511G_ACTION_NAKL_IF1	TRIGGER	12	END;
A1504PZ_TP_SELECT_LU	TRIGGER	1	TRIGGER a1504pz_TP_SELECT_LU

A1504PZ_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1504PZ_TP_SELECT_LU	TRIGGER	3	   ON a1504pz_TP_SELECT

A1504PZ_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504PZ_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1504PZ_TP_SELECT_LU	TRIGGER	6	BEGIN

A1504PZ_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1504PZ_TP_SELECT_LU	TRIGGER	8	END a1504pz_tp_select_lu;
A1504PZ_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1504pz_TP_SELECT_DEL

A1504PZ_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1504PZ_TP_SELECT_DEL	TRIGGER	3	   ON a1504pz_TP_SELECT

A1504PZ_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1504PZ_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1504PZ_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1504PZ_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1504pz_ACTION_NAKL

A1504PZ_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1504PZ_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1504pz

A1504PZ_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1504PZ_TP_SELECT_DEL	TRIGGER	11	END;
A1504PZ_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1504pz_ACTION_NAKL_LU

A1504PZ_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1504PZ_ACTION_NAKL_LU	TRIGGER	3	   ON a1504pz_ACTION_NAKL

A1504PZ_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504PZ_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1504PZ_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1504PZ_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1504PZ_ACTION_NAKL_LU	TRIGGER	8	END a1504pz_ACTION_NAKL_lu;
A1504PZ_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1504pz_ACTION_NAKL_IF1

A1504PZ_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1504PZ_ACTION_NAKL_IF1	TRIGGER	3	   ON a1504pz_ACTION_NAKL

A1504PZ_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504PZ_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1504PZ_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1504PZ_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1504PZ_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1504PZ_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1504PZ_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1504PZ_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1504PZ_ACTION_NAKL_IF1	TRIGGER	12	END;
A1504CY_TP_SELECT_LU	TRIGGER	1	TRIGGER a1504cy_TP_SELECT_LU

A1504CY_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1504CY_TP_SELECT_LU	TRIGGER	3	   ON a1504cy_TP_SELECT

A1504CY_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504CY_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1504CY_TP_SELECT_LU	TRIGGER	6	BEGIN

A1504CY_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1504CY_TP_SELECT_LU	TRIGGER	8	END a1504cy_tp_select_lu;
A1504CY_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1504cy_TP_SELECT_DEL

A1504CY_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1504CY_TP_SELECT_DEL	TRIGGER	3	   ON a1504cy_TP_SELECT

A1504CY_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1504CY_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1504CY_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1504CY_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1504cy_ACTION_NAKL

A1504CY_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1504CY_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1504cy

A1504CY_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1504CY_TP_SELECT_DEL	TRIGGER	11	END;
A1504CY_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1504cy_ACTION_NAKL_LU

A1504CY_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1504CY_ACTION_NAKL_LU	TRIGGER	3	   ON a1504cy_ACTION_NAKL

A1504CY_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504CY_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1504CY_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1504CY_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1504CY_ACTION_NAKL_LU	TRIGGER	8	END a1504cy_ACTION_NAKL_lu;
A1504CY_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1504cy_ACTION_NAKL_IF1

A1504CY_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1504CY_ACTION_NAKL_IF1	TRIGGER	3	   ON a1504cy_ACTION_NAKL

A1504CY_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504CY_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1504CY_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1504CY_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1504CY_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1504CY_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1504CY_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1504CY_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1504CY_ACTION_NAKL_IF1	TRIGGER	12	END;
A1504AP_TP_SELECT_LU	TRIGGER	1	TRIGGER a1504ap_TP_SELECT_LU

A1504AP_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1504AP_TP_SELECT_LU	TRIGGER	3	   ON a1504ap_TP_SELECT

A1504AP_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504AP_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1504AP_TP_SELECT_LU	TRIGGER	6	BEGIN

A1504AP_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1504AP_TP_SELECT_LU	TRIGGER	8	END a1504ap_tp_select_lu;
A1504AP_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1504ap_TP_SELECT_DEL

A1504AP_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1504AP_TP_SELECT_DEL	TRIGGER	3	   ON a1504ap_TP_SELECT

A1504AP_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1504AP_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1504AP_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1504AP_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1504ap_ACTION_NAKL

A1504AP_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1504AP_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1504ap

A1504AP_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1504AP_TP_SELECT_DEL	TRIGGER	11	END;
A1504AP_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1504ap_ACTION_NAKL_LU

A1504AP_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1504AP_ACTION_NAKL_LU	TRIGGER	3	   ON a1504ap_ACTION_NAKL

A1504AP_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504AP_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1504AP_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1504AP_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1504AP_ACTION_NAKL_LU	TRIGGER	8	END a1504ap_ACTION_NAKL_lu;
A1504AP_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1504ap_ACTION_NAKL_IF1

A1504AP_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1504AP_ACTION_NAKL_IF1	TRIGGER	3	   ON a1504ap_ACTION_NAKL

A1504AP_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1504AP_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1504AP_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1504AP_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1504AP_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1504AP_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1504AP_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1504AP_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1504AP_ACTION_NAKL_IF1	TRIGGER	12	END;
A150411T_TP_SELECT_LU	TRIGGER	1	TRIGGER A150411T_TP_SELECT_LU

A150411T_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150411T_TP_SELECT_LU	TRIGGER	3	   ON A150411T_TP_SELECT

A150411T_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411T_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150411T_TP_SELECT_LU	TRIGGER	6	BEGIN

A150411T_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150411T_TP_SELECT_LU	TRIGGER	8	END A150411T_tp_select_lu;
A150411T_TP_SELECT_DEL	TRIGGER	1	TRIGGER A150411T_TP_SELECT_DEL

A150411T_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150411T_TP_SELECT_DEL	TRIGGER	3	   ON A150411T_TP_SELECT

A150411T_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150411T_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150411T_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150411T_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A150411T_ACTION_NAKL

A150411T_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150411T_TP_SELECT_DEL	TRIGGER	9	                                        FROM A150411T

A150411T_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150411T_TP_SELECT_DEL	TRIGGER	11	END;
A150411T_ACTION_NAKL_LU	TRIGGER	1	TRIGGER A150411T_ACTION_NAKL_LU

A150411T_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150411T_ACTION_NAKL_LU	TRIGGER	3	   ON A150411T_ACTION_NAKL

A150411T_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411T_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150411T_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150411T_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150411T_ACTION_NAKL_LU	TRIGGER	8	END A150411T_ACTION_NAKL_lu;
A150411T_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER A150411T_ACTION_NAKL_IF1

A150411T_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150411T_ACTION_NAKL_IF1	TRIGGER	3	   ON A150411T_ACTION_NAKL

A150411T_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411T_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150411T_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150411T_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150411T_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150411T_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150411T_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150411T_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150411T_ACTION_NAKL_IF1	TRIGGER	12	END;
A150411M_TP_SELECT_LU	TRIGGER	1	TRIGGER A150411M_TP_SELECT_LU

A150411M_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150411M_TP_SELECT_LU	TRIGGER	3	   ON A150411M_TP_SELECT

A150411M_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411M_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150411M_TP_SELECT_LU	TRIGGER	6	BEGIN

A150411M_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150411M_TP_SELECT_LU	TRIGGER	8	END A150411M_tp_select_lu;
A150411M_TP_SELECT_DEL	TRIGGER	1	TRIGGER A150411M_TP_SELECT_DEL

A150411M_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150411M_TP_SELECT_DEL	TRIGGER	3	   ON A150411M_TP_SELECT

A150411M_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150411M_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150411M_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150411M_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A150411M_ACTION_NAKL

A150411M_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150411M_TP_SELECT_DEL	TRIGGER	9	                                        FROM A150411M

A150411M_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150411M_TP_SELECT_DEL	TRIGGER	11	END;
A150411M_ACTION_NAKL_LU	TRIGGER	1	TRIGGER A150411M_ACTION_NAKL_LU

A150411M_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150411M_ACTION_NAKL_LU	TRIGGER	3	   ON A150411M_ACTION_NAKL

A150411M_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411M_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150411M_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150411M_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150411M_ACTION_NAKL_LU	TRIGGER	8	END A150411M_ACTION_NAKL_lu;
A150411M_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER A150411M_ACTION_NAKL_IF1

A150411M_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150411M_ACTION_NAKL_IF1	TRIGGER	3	   ON A150411M_ACTION_NAKL

A150411M_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411M_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150411M_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150411M_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150411M_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150411M_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150411M_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150411M_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150411M_ACTION_NAKL_IF1	TRIGGER	12	END;
A150411L_TP_SELECT_LU	TRIGGER	1	TRIGGER A150411L_TP_SELECT_LU

A150411L_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150411L_TP_SELECT_LU	TRIGGER	3	   ON A150411L_TP_SELECT

A150411L_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411L_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150411L_TP_SELECT_LU	TRIGGER	6	BEGIN

A150411L_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150411L_TP_SELECT_LU	TRIGGER	8	END A150411L_tp_select_lu;
A150411L_TP_SELECT_DEL	TRIGGER	1	TRIGGER A150411L_TP_SELECT_DEL

A150411L_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150411L_TP_SELECT_DEL	TRIGGER	3	   ON A150411L_TP_SELECT

A150411L_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150411L_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150411L_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150411L_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A150411L_ACTION_NAKL

A150411L_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150411L_TP_SELECT_DEL	TRIGGER	9	                                        FROM A150411L

A150411L_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150411L_TP_SELECT_DEL	TRIGGER	11	END;
A150411L_ACTION_NAKL_LU	TRIGGER	1	TRIGGER A150411L_ACTION_NAKL_LU

A150411L_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150411L_ACTION_NAKL_LU	TRIGGER	3	   ON A150411L_ACTION_NAKL

A150411L_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411L_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150411L_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150411L_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150411L_ACTION_NAKL_LU	TRIGGER	8	END A150411L_ACTION_NAKL_lu;
A150411L_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER A150411L_ACTION_NAKL_IF1

A150411L_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150411L_ACTION_NAKL_IF1	TRIGGER	3	   ON A150411L_ACTION_NAKL

A150411L_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150411L_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150411L_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150411L_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150411L_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150411L_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150411L_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150411L_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150411L_ACTION_NAKL_IF1	TRIGGER	12	END;
A1503VS_TP_SELECT_LU	TRIGGER	1	TRIGGER a1503vs_TP_SELECT_LU

A1503VS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1503VS_TP_SELECT_LU	TRIGGER	3	   ON a1503vs_TP_SELECT

A1503VS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503VS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1503VS_TP_SELECT_LU	TRIGGER	6	BEGIN

A1503VS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1503VS_TP_SELECT_LU	TRIGGER	8	END;
A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	1	TRIGGER a1503vs_TP_SELECT_BONUS_DT1

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	2	   BEFORE UPDATE OF bonus_dt1

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	3	   ON a1503vs_TP_SELECT

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	5	   FOR EACH ROW

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	6	BEGIN

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	7	   IF :NEW.bonus_dt1 IS NULL

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	8	   THEN

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	10	   END IF;

A1503VS_TP_SELECT_BONUS_DT1	TRIGGER	11	END;
A1503PLPR_TP_SELECT_LU	TRIGGER	1	TRIGGER a1503plpr_TP_SELECT_LU

A1503PLPR_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1503PLPR_TP_SELECT_LU	TRIGGER	3	   ON a1503plpr_TP_SELECT

A1503PLPR_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503PLPR_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1503PLPR_TP_SELECT_LU	TRIGGER	6	BEGIN

A1503PLPR_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1503PLPR_TP_SELECT_LU	TRIGGER	8	END a1503plpr_tp_select_lu;
A1503MG_TP_SELECT_LU	TRIGGER	1	TRIGGER a1503mg_TP_SELECT_LU

A1503MG_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1503MG_TP_SELECT_LU	TRIGGER	3	   ON a1503mg_TP_SELECT

A1503MG_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503MG_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1503MG_TP_SELECT_LU	TRIGGER	6	BEGIN

A1503MG_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1503MG_TP_SELECT_LU	TRIGGER	8	END a1503mg_tp_select_lu;
A1503MG_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1503mg_TP_SELECT_DEL

A1503MG_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1503MG_TP_SELECT_DEL	TRIGGER	3	   ON a1503mg_TP_SELECT

A1503MG_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1503MG_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1503MG_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1503MG_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1503mg_ACTION_NAKL

A1503MG_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1503MG_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1503mg

A1503MG_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1503MG_TP_SELECT_DEL	TRIGGER	11	END;
A1503MG_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1503mg_ACTION_NAKL_LU

A1503MG_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1503MG_ACTION_NAKL_LU	TRIGGER	3	   ON a1503mg_ACTION_NAKL

A1503MG_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503MG_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1503MG_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1503MG_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1503MG_ACTION_NAKL_LU	TRIGGER	8	END a1503mg_ACTION_NAKL_lu;
A1503MG_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1503mg_ACTION_NAKL_IF1

A1503MG_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1503MG_ACTION_NAKL_IF1	TRIGGER	3	   ON a1503mg_ACTION_NAKL

A1503MG_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503MG_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1503MG_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1503MG_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1503MG_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1503MG_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1503MG_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1503MG_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1503MG_ACTION_NAKL_IF1	TRIGGER	12	END;
A1503F_TP_SELECT_LU	TRIGGER	1	TRIGGER a1503f_TP_SELECT_LU

A1503F_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1503F_TP_SELECT_LU	TRIGGER	3	   ON a1503f_TP_SELECT

A1503F_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503F_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1503F_TP_SELECT_LU	TRIGGER	6	BEGIN

A1503F_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1503F_TP_SELECT_LU	TRIGGER	8	END a1503f_tp_select_lu;
A1503F_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1503f_TP_SELECT_DEL

A1503F_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1503F_TP_SELECT_DEL	TRIGGER	3	   ON a1503f_TP_SELECT

A1503F_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1503F_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1503F_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1503F_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1503f_ACTION_NAKL

A1503F_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1503F_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1503f

A1503F_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1503F_TP_SELECT_DEL	TRIGGER	11	END;
A1503F_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1503f_ACTION_NAKL_LU

A1503F_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1503F_ACTION_NAKL_LU	TRIGGER	3	   ON a1503f_ACTION_NAKL

A1503F_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503F_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1503F_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1503F_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1503F_ACTION_NAKL_LU	TRIGGER	8	END a1503f_ACTION_NAKL_lu;
A1503F_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER PERSIK.a1503f_ACTION_NAKL_IF1

A1503F_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1503F_ACTION_NAKL_IF1	TRIGGER	3	   ON PERSIK.A1503F_ACTION_NAKL

A1503F_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1503F_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1503F_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1503F_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1503F_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1503F_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1503F_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_sum2 := NULL;

A1503F_ACTION_NAKL_IF1	TRIGGER	11	      :NEW.bonus_dt1 := NULL;

A1503F_ACTION_NAKL_IF1	TRIGGER	12	   END IF;

A1503F_ACTION_NAKL_IF1	TRIGGER	13	END;
A150311T_TP_SELECT_LU	TRIGGER	1	TRIGGER a150311t_TP_SELECT_LU

A150311T_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150311T_TP_SELECT_LU	TRIGGER	3	   ON a150311t_TP_SELECT

A150311T_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150311T_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150311T_TP_SELECT_LU	TRIGGER	6	BEGIN

A150311T_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150311T_TP_SELECT_LU	TRIGGER	8	END a150311t_tp_select_lu;
A150311T_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150311t_TP_SELECT_DEL

A150311T_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150311T_TP_SELECT_DEL	TRIGGER	3	   ON a150311t_TP_SELECT

A150311T_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150311T_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150311T_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150311T_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150311t_ACTION_NAKL

A150311T_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150311T_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150311t

A150311T_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150311T_TP_SELECT_DEL	TRIGGER	11	END;
A150311T_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150311t_ACTION_NAKL_LU

A150311T_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150311T_ACTION_NAKL_LU	TRIGGER	3	   ON a150311t_ACTION_NAKL

A150311T_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150311T_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150311T_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150311T_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150311T_ACTION_NAKL_LU	TRIGGER	8	END a150311t_ACTION_NAKL_lu;
A150311T_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150311t_ACTION_NAKL_IF1

A150311T_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150311T_ACTION_NAKL_IF1	TRIGGER	3	   ON a150311t_ACTION_NAKL

A150311T_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150311T_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150311T_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150311T_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150311T_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150311T_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150311T_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150311T_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150311T_ACTION_NAKL_IF1	TRIGGER	12	END;
A1502VK251_TP_SELECT_LU	TRIGGER	1	TRIGGER a1502vk251_TP_SELECT_LU

A1502VK251_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1502VK251_TP_SELECT_LU	TRIGGER	3	   ON a1502vk251_TP_SELECT

A1502VK251_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1502VK251_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1502VK251_TP_SELECT_LU	TRIGGER	6	BEGIN

A1502VK251_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1502VK251_TP_SELECT_LU	TRIGGER	8	END a1502vk251_tp_select_lu;
A1502VK251_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1502vk251_TP_SELECT_DEL

A1502VK251_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1502VK251_TP_SELECT_DEL	TRIGGER	3	   ON a1502vk251_TP_SELECT

A1502VK251_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1502VK251_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1502VK251_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1502VK251_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1502vk251_ACTION_NAKL

A1502VK251_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A1502VK251_TP_SELECT_DEL	TRIGGER	9	                                        FROM a1502vk251

A1502VK251_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A1502VK251_TP_SELECT_DEL	TRIGGER	11	END;
A1502VK251_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1502vk251_ACTION_NAKL_LU

A1502VK251_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1502VK251_ACTION_NAKL_LU	TRIGGER	3	   ON a1502vk251_ACTION_NAKL

A1502VK251_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1502VK251_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1502VK251_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1502VK251_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1502VK251_ACTION_NAKL_LU	TRIGGER	8	END a1502vk251_ACTION_NAKL_lu;
A1502VK251_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1502vk251_ACTION_NAKL_IF1

A1502VK251_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1502VK251_ACTION_NAKL_IF1	TRIGGER	3	   ON a1502vk251_ACTION_NAKL

A1502VK251_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1502VK251_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1502VK251_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1502VK251_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1502VK251_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1502VK251_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1502VK251_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1502VK251_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1502VK251_ACTION_NAKL_IF1	TRIGGER	12	END;
A1502KFK_TP_SELECT_LU	TRIGGER	1	TRIGGER a1502kfk_TP_SELECT_LU

A1502KFK_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1502KFK_TP_SELECT_LU	TRIGGER	3	   ON a1502kfk_TP_SELECT

A1502KFK_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1502KFK_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1502KFK_TP_SELECT_LU	TRIGGER	6	BEGIN

A1502KFK_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1502KFK_TP_SELECT_LU	TRIGGER	8	END a1502kfk_tp_select_lu;
A1502KFK_TP_SELECT_DEL	TRIGGER	1	TRIGGER a1502kfk_TP_SELECT_DEL

A1502KFK_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A1502KFK_TP_SELECT_DEL	TRIGGER	3	   ON a1502kfk_TP_SELECT

A1502KFK_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A1502KFK_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A1502KFK_TP_SELECT_DEL	TRIGGER	6	BEGIN

A1502KFK_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a1502kfk_ACTION_NAKL

A1502KFK_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN

A1502KFK_TP_SELECT_DEL	TRIGGER	9	                  (SELECT H_TP_KOD_DATA_NAKL

A1502KFK_TP_SELECT_DEL	TRIGGER	10	                     FROM a1502kfk

A1502KFK_TP_SELECT_DEL	TRIGGER	11	                    WHERE TP_KOD = :old.TP_KOD);

A1502KFK_TP_SELECT_DEL	TRIGGER	12	END;
A1502KFK_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a1502kfk_ACTION_NAKL_LU

A1502KFK_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1502KFK_ACTION_NAKL_LU	TRIGGER	3	   ON a1502kfk_ACTION_NAKL

A1502KFK_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1502KFK_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A1502KFK_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A1502KFK_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1502KFK_ACTION_NAKL_LU	TRIGGER	8	END a1502kfk_ACTION_NAKL_lu;
A1502KFK_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a1502kfk_ACTION_NAKL_IF1

A1502KFK_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A1502KFK_ACTION_NAKL_IF1	TRIGGER	3	   ON a1502kfk_ACTION_NAKL

A1502KFK_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1502KFK_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A1502KFK_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A1502KFK_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A1502KFK_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A1502KFK_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A1502KFK_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A1502KFK_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A1502KFK_ACTION_NAKL_IF1	TRIGGER	12	END;
A150221NGS_TP_SELECT_LU	TRIGGER	1	TRIGGER a150221ngs_TP_SELECT_LU

A150221NGS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150221NGS_TP_SELECT_LU	TRIGGER	3	   ON a150221ngs_TP_SELECT

A150221NGS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150221NGS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150221NGS_TP_SELECT_LU	TRIGGER	6	BEGIN

A150221NGS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150221NGS_TP_SELECT_LU	TRIGGER	8	END a150221ngs_tp_select_lu;
A150221NGS_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150221ngs_TP_SELECT_DEL

A150221NGS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150221NGS_TP_SELECT_DEL	TRIGGER	3	   ON a150221ngs_TP_SELECT

A150221NGS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150221NGS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150221NGS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150221NGS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150221ngs_ACTION_NAKL

A150221NGS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150221NGS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150221ngs

A150221NGS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150221NGS_TP_SELECT_DEL	TRIGGER	11	END;
A150221NGS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150221ngs_ACTION_NAKL_LU

A150221NGS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150221NGS_ACTION_NAKL_LU	TRIGGER	3	   ON a150221ngs_ACTION_NAKL

A150221NGS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150221NGS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150221NGS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150221NGS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150221NGS_ACTION_NAKL_LU	TRIGGER	8	END a150221ngs_ACTION_NAKL_lu;
A150221NGS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150221ngs_ACTION_NAKL_IF1

A150221NGS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150221NGS_ACTION_NAKL_IF1	TRIGGER	3	   ON a150221ngs_ACTION_NAKL

A150221NGS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150221NGS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150221NGS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150221NGS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150221NGS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150221NGS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150221NGS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150221NGS_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150221NGS_ACTION_NAKL_IF1	TRIGGER	12	END;
A150211KRU_TP_SELECT_LU	TRIGGER	1	TRIGGER a150211kru_TP_SELECT_LU

A150211KRU_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150211KRU_TP_SELECT_LU	TRIGGER	3	   ON a150211kru_TP_SELECT

A150211KRU_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150211KRU_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150211KRU_TP_SELECT_LU	TRIGGER	6	BEGIN

A150211KRU_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150211KRU_TP_SELECT_LU	TRIGGER	8	END a150211kru_tp_select_lu;
A150211KRU_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150211kru_TP_SELECT_DEL

A150211KRU_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150211KRU_TP_SELECT_DEL	TRIGGER	3	   ON a150211kru_TP_SELECT

A150211KRU_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150211KRU_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150211KRU_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150211KRU_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150211kru_ACTION_NAKL

A150211KRU_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150211KRU_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150211kru

A150211KRU_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150211KRU_TP_SELECT_DEL	TRIGGER	11	END;
A150211KRU_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150211kru_ACTION_NAKL_LU

A150211KRU_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150211KRU_ACTION_NAKL_LU	TRIGGER	3	   ON a150211kru_ACTION_NAKL

A150211KRU_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150211KRU_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150211KRU_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150211KRU_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150211KRU_ACTION_NAKL_LU	TRIGGER	8	END a150211kru_ACTION_NAKL_lu;
A150211KRU_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150211kru_ACTION_NAKL_IF1

A150211KRU_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150211KRU_ACTION_NAKL_IF1	TRIGGER	3	   ON a150211kru_ACTION_NAKL

A150211KRU_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150211KRU_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150211KRU_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150211KRU_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150211KRU_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150211KRU_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150211KRU_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150211KRU_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150211KRU_ACTION_NAKL_IF1	TRIGGER	12	END;
A150211KRI_TP_SELECT_LU	TRIGGER	1	TRIGGER a150211kri_TP_SELECT_LU

A150211KRI_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150211KRI_TP_SELECT_LU	TRIGGER	3	   ON a150211kri_TP_SELECT

A150211KRI_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150211KRI_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150211KRI_TP_SELECT_LU	TRIGGER	6	BEGIN

A150211KRI_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150211KRI_TP_SELECT_LU	TRIGGER	8	END a150211kri_tp_select_lu;
A150211KRI_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150211kri_TP_SELECT_DEL

A150211KRI_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150211KRI_TP_SELECT_DEL	TRIGGER	3	   ON a150211kri_TP_SELECT

A150211KRI_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150211KRI_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150211KRI_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150211KRI_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150211kri_ACTION_NAKL

A150211KRI_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150211KRI_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150211kri

A150211KRI_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150211KRI_TP_SELECT_DEL	TRIGGER	11	END;
A150211KRI_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150211kri_ACTION_NAKL_LU

A150211KRI_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150211KRI_ACTION_NAKL_LU	TRIGGER	3	   ON a150211kri_ACTION_NAKL

A150211KRI_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150211KRI_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150211KRI_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150211KRI_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150211KRI_ACTION_NAKL_LU	TRIGGER	8	END a150211kri_ACTION_NAKL_lu;
A150211KRI_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150211kri_ACTION_NAKL_IF1

A150211KRI_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150211KRI_ACTION_NAKL_IF1	TRIGGER	3	   ON a150211kri_ACTION_NAKL

A150211KRI_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150211KRI_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150211KRI_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150211KRI_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150211KRI_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150211KRI_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150211KRI_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150211KRI_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150211KRI_ACTION_NAKL_IF1	TRIGGER	12	END;
A1501PLPR_TP_SELECT_LU	TRIGGER	1	TRIGGER a1501plpr_TP_SELECT_LU

A1501PLPR_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A1501PLPR_TP_SELECT_LU	TRIGGER	3	   ON a1501plpr_TP_SELECT

A1501PLPR_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A1501PLPR_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A1501PLPR_TP_SELECT_LU	TRIGGER	6	BEGIN

A1501PLPR_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A1501PLPR_TP_SELECT_LU	TRIGGER	8	END a1501plpr_tp_select_lu;
A150151FK_TP_SELECT_LU	TRIGGER	1	TRIGGER A150151fk_TP_SELECT_LU

A150151FK_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150151FK_TP_SELECT_LU	TRIGGER	3	   ON A150151fk_TP_SELECT

A150151FK_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150151FK_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150151FK_TP_SELECT_LU	TRIGGER	6	BEGIN

A150151FK_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150151FK_TP_SELECT_LU	TRIGGER	8	END A150151fk_tp_select_lu;
A150151FK_TP_SELECT_DEL	TRIGGER	1	TRIGGER A150151fk_TP_SELECT_DEL

A150151FK_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150151FK_TP_SELECT_DEL	TRIGGER	3	   ON A150151fk_TP_SELECT

A150151FK_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150151FK_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150151FK_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150151FK_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM A150151fk_ACTION_NAKL

A150151FK_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN

A150151FK_TP_SELECT_DEL	TRIGGER	9	                  (SELECT H_TP_KOD_DATA_NAKL

A150151FK_TP_SELECT_DEL	TRIGGER	10	                     FROM A150151fk

A150151FK_TP_SELECT_DEL	TRIGGER	11	                    WHERE TP_KOD = :old.TP_KOD);

A150151FK_TP_SELECT_DEL	TRIGGER	12	END;
A150151FK_ACTION_NAKL_LU	TRIGGER	1	TRIGGER A150151fk_ACTION_NAKL_LU

A150151FK_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150151FK_ACTION_NAKL_LU	TRIGGER	3	   ON A150151fk_ACTION_NAKL

A150151FK_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150151FK_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150151FK_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150151FK_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150151FK_ACTION_NAKL_LU	TRIGGER	8	END A150151fk_ACTION_NAKL_lu;
A150151FK_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER A150151fk_ACTION_NAKL_IF1

A150151FK_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150151FK_ACTION_NAKL_IF1	TRIGGER	3	   ON A150151fk_ACTION_NAKL

A150151FK_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150151FK_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150151FK_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150151FK_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150151FK_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150151FK_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150151FK_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150151FK_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150151FK_ACTION_NAKL_IF1	TRIGGER	12	END;
A150121NGS_TP_SELECT_LU	TRIGGER	1	TRIGGER a150121ngs_TP_SELECT_LU

A150121NGS_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150121NGS_TP_SELECT_LU	TRIGGER	3	   ON a150121ngs_TP_SELECT

A150121NGS_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150121NGS_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150121NGS_TP_SELECT_LU	TRIGGER	6	BEGIN

A150121NGS_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150121NGS_TP_SELECT_LU	TRIGGER	8	END a150121ngs_tp_select_lu;
A150121NGS_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150121ngs_TP_SELECT_DEL

A150121NGS_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150121NGS_TP_SELECT_DEL	TRIGGER	3	   ON a150121ngs_TP_SELECT

A150121NGS_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150121NGS_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150121NGS_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150121NGS_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150121ngs_ACTION_NAKL

A150121NGS_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150121NGS_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150121ngs

A150121NGS_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150121NGS_TP_SELECT_DEL	TRIGGER	11	END;
A150121NGS_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150121ngs_ACTION_NAKL_LU

A150121NGS_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150121NGS_ACTION_NAKL_LU	TRIGGER	3	   ON a150121ngs_ACTION_NAKL

A150121NGS_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150121NGS_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150121NGS_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150121NGS_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150121NGS_ACTION_NAKL_LU	TRIGGER	8	END a150121ngs_ACTION_NAKL_lu;
A150121NGS_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150121ngs_ACTION_NAKL_IF1

A150121NGS_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150121NGS_ACTION_NAKL_IF1	TRIGGER	3	   ON a150121ngs_ACTION_NAKL

A150121NGS_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150121NGS_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150121NGS_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150121NGS_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150121NGS_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150121NGS_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150121NGS_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150121NGS_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150121NGS_ACTION_NAKL_IF1	TRIGGER	12	END;
A150111NG_TP_SELECT_LU	TRIGGER	1	TRIGGER a150111ng_TP_SELECT_LU

A150111NG_TP_SELECT_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150111NG_TP_SELECT_LU	TRIGGER	3	   ON a150111ng_TP_SELECT

A150111NG_TP_SELECT_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150111NG_TP_SELECT_LU	TRIGGER	5	   FOR EACH ROW

A150111NG_TP_SELECT_LU	TRIGGER	6	BEGIN

A150111NG_TP_SELECT_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150111NG_TP_SELECT_LU	TRIGGER	8	END a150111ng_tp_select_lu;
A150111NG_TP_SELECT_DEL	TRIGGER	1	TRIGGER a150111ng_TP_SELECT_DEL

A150111NG_TP_SELECT_DEL	TRIGGER	2	   BEFORE DELETE

A150111NG_TP_SELECT_DEL	TRIGGER	3	   ON a150111ng_TP_SELECT

A150111NG_TP_SELECT_DEL	TRIGGER	4	   REFERENCING OLD AS OLD

A150111NG_TP_SELECT_DEL	TRIGGER	5	   FOR EACH ROW

A150111NG_TP_SELECT_DEL	TRIGGER	6	BEGIN

A150111NG_TP_SELECT_DEL	TRIGGER	7	   DELETE FROM a150111ng_ACTION_NAKL

A150111NG_TP_SELECT_DEL	TRIGGER	8	         WHERE H_TP_KOD_DATA_NAKL IN (SELECT H_TP_KOD_DATA_NAKL

A150111NG_TP_SELECT_DEL	TRIGGER	9	                                        FROM a150111ng

A150111NG_TP_SELECT_DEL	TRIGGER	10	                                       WHERE TP_KOD = :old.TP_KOD);

A150111NG_TP_SELECT_DEL	TRIGGER	11	END;
A150111NG_ACTION_NAKL_LU	TRIGGER	1	TRIGGER a150111ng_ACTION_NAKL_LU

A150111NG_ACTION_NAKL_LU	TRIGGER	2	   BEFORE INSERT OR UPDATE

A150111NG_ACTION_NAKL_LU	TRIGGER	3	   ON a150111ng_ACTION_NAKL

A150111NG_ACTION_NAKL_LU	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150111NG_ACTION_NAKL_LU	TRIGGER	5	   FOR EACH ROW

A150111NG_ACTION_NAKL_LU	TRIGGER	6	BEGIN

A150111NG_ACTION_NAKL_LU	TRIGGER	7	   :NEW.lu := SYSDATE;

A150111NG_ACTION_NAKL_LU	TRIGGER	8	END a150111ng_ACTION_NAKL_lu;
A150111NG_ACTION_NAKL_IF1	TRIGGER	1	TRIGGER a150111ng_ACTION_NAKL_IF1

A150111NG_ACTION_NAKL_IF1	TRIGGER	2	   BEFORE UPDATE OF if1

A150111NG_ACTION_NAKL_IF1	TRIGGER	3	   ON a150111ng_ACTION_NAKL

A150111NG_ACTION_NAKL_IF1	TRIGGER	4	   REFERENCING NEW AS NEW OLD AS OLD

A150111NG_ACTION_NAKL_IF1	TRIGGER	5	   FOR EACH ROW

A150111NG_ACTION_NAKL_IF1	TRIGGER	6	BEGIN

A150111NG_ACTION_NAKL_IF1	TRIGGER	7	   IF NVL (:NEW.if1, 0) <> 1

A150111NG_ACTION_NAKL_IF1	TRIGGER	8	   THEN

A150111NG_ACTION_NAKL_IF1	TRIGGER	9	      :NEW.bonus_sum1 := NULL;

A150111NG_ACTION_NAKL_IF1	TRIGGER	10	      :NEW.bonus_dt1 := NULL;

A150111NG_ACTION_NAKL_IF1	TRIGGER	11	   END IF;

A150111NG_ACTION_NAKL_IF1	TRIGGER	12	END;
A14TO_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A14TO_MV_Q_ADD

A14TO_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A14TO_MV_Q_ADD	TRIGGER	3	   ON PERSIK.a14to

A14TO_MV_Q_ADD	TRIGGER	4	BEGIN

A14TO_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A14TO_MV_ST');

A14TO_MV_Q_ADD	TRIGGER	6	END;
A14TOZST_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A14TOZST_MV_Q_ADD

A14TOZST_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A14TOZST_MV_Q_ADD	TRIGGER	3	   ON PERSIK.a14tozst

A14TOZST_MV_Q_ADD	TRIGGER	4	BEGIN

A14TOZST_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A14TO_MV_ST');

A14TOZST_MV_Q_ADD	TRIGGER	6	END;
A14TOTP_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A14TOTP_MV_Q_ADD

A14TOTP_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A14TOTP_MV_Q_ADD	TRIGGER	3	   ON PERSIK.a14totp

A14TOTP_MV_Q_ADD	TRIGGER	4	BEGIN

A14TOTP_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A14TO_MV_ST');

A14TOTP_MV_Q_ADD	TRIGGER	6	END;
A14TOSP_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A14TOSP_MV_Q_ADD

A14TOSP_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A14TOSP_MV_Q_ADD	TRIGGER	3	   ON PERSIK.a14tosp

A14TOSP_MV_Q_ADD	TRIGGER	4	BEGIN

A14TOSP_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A14TO_MV_ST');

A14TOSP_MV_Q_ADD	TRIGGER	6	END;
A14TOGETTARGETINFO	FUNCTION	1	FUNCTION        a14toGetTargetInfo (tp_kod_   IN VARCHAR,

A14TOGETTARGETINFO	FUNCTION	2	                                                      visit_    IN DATE)

A14TOGETTARGETINFO	FUNCTION	3	   RETURN VARCHAR

A14TOGETTARGETINFO	FUNCTION	4	IS

A14TOGETTARGETINFO	FUNCTION	5	   res   VARCHAR (255);

A14TOGETTARGETINFO	FUNCTION	6	BEGIN

A14TOGETTARGETINFO	FUNCTION	7	   BEGIN

A14TOGETTARGETINFO	FUNCTION	8	      /*SELECT target_info

A14TOGETTARGETINFO	FUNCTION	9	        INTO res

A14TOGETTARGETINFO	FUNCTION	10	        FROM a14to

A14TOGETTARGETINFO	FUNCTION	11	       WHERE     visitdate =

A14TOGETTARGETINFO	FUNCTION	12	                    (SELECT MAX (visitdate)

A14TOGETTARGETINFO	FUNCTION	13	                       FROM a14to

A14TOGETTARGETINFO	FUNCTION	14	                      WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_)

A14TOGETTARGETINFO	FUNCTION	15	             AND tp_kod_key = tp_kod_

A14TOGETTARGETINFO	FUNCTION	16	             AND ROWNUM = 1;*/

A14TOGETTARGETINFO	FUNCTION	17	

A14TOGETTARGETINFO	FUNCTION	18	        SELECT target_info

A14TOGETTARGETINFO	FUNCTION	19	          INTO res

A14TOGETTARGETINFO	FUNCTION	20	          FROM a14to

A14TOGETTARGETINFO	FUNCTION	21	         WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_ AND ROWNUM = 1

A14TOGETTARGETINFO	FUNCTION	22	      ORDER BY visitdate DESC;

A14TOGETTARGETINFO	FUNCTION	23	

A14TOGETTARGETINFO	FUNCTION	24	      RETURN (res);

A14TOGETTARGETINFO	FUNCTION	25	   EXCEPTION

A14TOGETTARGETINFO	FUNCTION	26	      WHEN NO_DATA_FOUND

A14TOGETTARGETINFO	FUNCTION	27	      THEN

A14TOGETTARGETINFO	FUNCTION	28	         RETURN ('');

A14TOGETTARGETINFO	FUNCTION	29	   END;

A14TOGETTARGETINFO	FUNCTION	30	END;
A14TOGETTARGET	FUNCTION	1	FUNCTION        a14toGetTarget (tp_kod_   IN VARCHAR,

A14TOGETTARGET	FUNCTION	2	                                                  visit_    IN DATE)

A14TOGETTARGET	FUNCTION	3	   RETURN INTEGER

A14TOGETTARGET	FUNCTION	4	IS

A14TOGETTARGET	FUNCTION	5	   res   INTEGER;

A14TOGETTARGET	FUNCTION	6	BEGIN

A14TOGETTARGET	FUNCTION	7	   BEGIN

A14TOGETTARGET	FUNCTION	8	      /*SELECT target

A14TOGETTARGET	FUNCTION	9	        INTO res

A14TOGETTARGET	FUNCTION	10	        FROM a14to

A14TOGETTARGET	FUNCTION	11	       WHERE     visitdate =

A14TOGETTARGET	FUNCTION	12	                    (SELECT MAX (visitdate)

A14TOGETTARGET	FUNCTION	13	                       FROM a14to

A14TOGETTARGET	FUNCTION	14	                      WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_)

A14TOGETTARGET	FUNCTION	15	             AND tp_kod_key = tp_kod_

A14TOGETTARGET	FUNCTION	16	             AND ROWNUM = 1;*/

A14TOGETTARGET	FUNCTION	17	

A14TOGETTARGET	FUNCTION	18	

A14TOGETTARGET	FUNCTION	19	        SELECT target

A14TOGETTARGET	FUNCTION	20	          INTO res

A14TOGETTARGET	FUNCTION	21	          FROM a14to

A14TOGETTARGET	FUNCTION	22	         WHERE visitdate <= visit_ AND tp_kod_key = tp_kod_ AND ROWNUM = 1

A14TOGETTARGET	FUNCTION	23	      ORDER BY visitdate DESC;

A14TOGETTARGET	FUNCTION	24	

A14TOGETTARGET	FUNCTION	25	

A14TOGETTARGET	FUNCTION	26	

A14TOGETTARGET	FUNCTION	27	      RETURN (res);

A14TOGETTARGET	FUNCTION	28	   EXCEPTION

A14TOGETTARGET	FUNCTION	29	      WHEN NO_DATA_FOUND

A14TOGETTARGET	FUNCTION	30	      THEN

A14TOGETTARGET	FUNCTION	31	         RETURN (0);

A14TOGETTARGET	FUNCTION	32	   END;

A14TOGETTARGET	FUNCTION	33	END;
A14MEGAP_MV_Q_ADD	TRIGGER	1	TRIGGER PERSIK.A14MEGAP_MV_Q_ADD

A14MEGAP_MV_Q_ADD	TRIGGER	2	   AFTER INSERT OR UPDATE

A14MEGAP_MV_Q_ADD	TRIGGER	3	   ON PERSIK.A14MEGAP

A14MEGAP_MV_Q_ADD	TRIGGER	4	BEGIN

A14MEGAP_MV_Q_ADD	TRIGGER	5	   mv_queue_add ('A14TO_MV_ST');

A14MEGAP_MV_Q_ADD	TRIGGER	6	END;
